
hello_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800aba4  0800aba4  0001aba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adc0  0800adc0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800adc0  0800adc0  0001adc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adc8  0800adc8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adc8  0800adc8  0001adc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adcc  0800adcc  0001adcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800add0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fb8  2000008c  0800ae5c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006044  0800ae5c  00026044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002692d  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004961  00000000  00000000  000469e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  0004b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b40  00000000  00000000  0004d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000071ac  00000000  00000000  0004eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021be9  00000000  00000000  00055d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103e77  00000000  00000000  0007792d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017b7a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008480  00000000  00000000  0017b7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab8c 	.word	0x0800ab8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800ab8c 	.word	0x0800ab8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b8c:	1d39      	adds	r1, r7, #4
 8000b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b92:	2201      	movs	r2, #1
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <__io_putchar+0x20>)
 8000b96:	f003 fa09 	bl	8003fac <HAL_UART_Transmit>
	return ch;
 8000b9a:	687b      	ldr	r3, [r7, #4]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20002e70 	.word	0x20002e70

08000ba8 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;


void send_uart(char *string)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fb0d 	bl	80001d0 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <send_uart+0x2c>)
 8000bc6:	f003 f9f1 	bl	8003fac <HAL_UART_Transmit>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20002e70 	.word	0x20002e70

08000bd8 <bufclear>:
	return i;
}


void bufclear(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	e007      	b.n	8000bf4 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 8000be4:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <bufclear+0x34>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfa:	dbf3      	blt.n	8000be4 <bufclear+0xc>
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20002a00 	.word	0x20002a00

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c14:	f000 fc4e 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c18:	f000 f8c8 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1c:	f000 f9aa 	bl	8000f74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c20:	f000 f978 	bl	8000f14 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000c24:	f000 f938 	bl	8000e98 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000c28:	f003 fe46 	bl	80048b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


	send_uart("Start test\r\n");
 8000c2c:	4849      	ldr	r0, [pc, #292]	; (8000d54 <main+0x144>)
 8000c2e:	f7ff ffbb 	bl	8000ba8 <send_uart>

  HAL_Delay(1000);
 8000c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c36:	f000 fc7d 	bl	8001534 <HAL_Delay>

	send_uart("Testing begin\r\n");
 8000c3a:	4847      	ldr	r0, [pc, #284]	; (8000d58 <main+0x148>)
 8000c3c:	f7ff ffb4 	bl	8000ba8 <send_uart>

  // Mount SDCard
  fresult = f_mount(&fs, "", 1);
 8000c40:	2201      	movs	r2, #1
 8000c42:	4946      	ldr	r1, [pc, #280]	; (8000d5c <main+0x14c>)
 8000c44:	4846      	ldr	r0, [pc, #280]	; (8000d60 <main+0x150>)
 8000c46:	f005 f917 	bl	8005e78 <f_mount>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <main+0x154>)
 8000c50:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8000c52:	4b44      	ldr	r3, [pc, #272]	; (8000d64 <main+0x154>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <main+0x58>
  {
  	printf("f_mount error (%i)\r\n", fresult);
 8000c5a:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <main+0x154>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4841      	ldr	r0, [pc, #260]	; (8000d68 <main+0x158>)
 8000c62:	f008 fe03 	bl	800986c <iprintf>
 8000c66:	e002      	b.n	8000c6e <main+0x5e>
  	//send_uart("Error in mounting SD card\r\n");
  }
  else
  {
  	send_uart("Successfully mounted SD card\r\n");
 8000c68:	4840      	ldr	r0, [pc, #256]	; (8000d6c <main+0x15c>)
 8000c6a:	f7ff ff9d 	bl	8000ba8 <send_uart>
  }



	send_uart("Card Check\r\n");
 8000c6e:	4840      	ldr	r0, [pc, #256]	; (8000d70 <main+0x160>)
 8000c70:	f7ff ff9a 	bl	8000ba8 <send_uart>
  // Check card capacity
  fresult = f_getfree("", &fre_clust, &pfs);
 8000c74:	4a3f      	ldr	r2, [pc, #252]	; (8000d74 <main+0x164>)
 8000c76:	4940      	ldr	r1, [pc, #256]	; (8000d78 <main+0x168>)
 8000c78:	4838      	ldr	r0, [pc, #224]	; (8000d5c <main+0x14c>)
 8000c7a:	f005 f961 	bl	8005f40 <f_getfree>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <main+0x154>)
 8000c84:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK)
 8000c86:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <main+0x154>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d103      	bne.n	8000c96 <main+0x86>
  {
  	send_uart("Success in Card Checked\r\n");
 8000c8e:	483b      	ldr	r0, [pc, #236]	; (8000d7c <main+0x16c>)
 8000c90:	f7ff ff8a 	bl	8000ba8 <send_uart>
 8000c94:	e002      	b.n	8000c9c <main+0x8c>
  }
  else
  {
  	send_uart("Error in Card Checked\r\n");
 8000c96:	483a      	ldr	r0, [pc, #232]	; (8000d80 <main+0x170>)
 8000c98:	f7ff ff86 	bl	8000ba8 <send_uart>
  }


  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <main+0x164>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6a1b      	ldr	r3, [r3, #32]
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	4a33      	ldr	r2, [pc, #204]	; (8000d74 <main+0x164>)
 8000ca6:	6812      	ldr	r2, [r2, #0]
 8000ca8:	8952      	ldrh	r2, [r2, #10]
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fd52 	bl	8000758 <__aeabi_ui2d>
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <main+0x174>)
 8000cba:	f7ff fae1 	bl	8000280 <__aeabi_dmul>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f7ff fdc1 	bl	800084c <__aeabi_d2uiz>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <main+0x178>)
 8000cce:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD CARD Total Size: \t%lu\r\n", total);
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <main+0x178>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	492d      	ldr	r1, [pc, #180]	; (8000d8c <main+0x17c>)
 8000cd8:	482d      	ldr	r0, [pc, #180]	; (8000d90 <main+0x180>)
 8000cda:	f008 fe55 	bl	8009988 <siprintf>
  send_uart(buffer);
 8000cde:	482c      	ldr	r0, [pc, #176]	; (8000d90 <main+0x180>)
 8000ce0:	f7ff ff62 	bl	8000ba8 <send_uart>
  bufclear();
 8000ce4:	f7ff ff78 	bl	8000bd8 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <main+0x164>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	895b      	ldrh	r3, [r3, #10]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <main+0x168>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	fb03 f302 	mul.w	r3, r3, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fd2d 	bl	8000758 <__aeabi_ui2d>
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <main+0x174>)
 8000d04:	f7ff fabc 	bl	8000280 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f7ff fd9c 	bl	800084c <__aeabi_d2uiz>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <main+0x184>)
 8000d18:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD CARD Free Space: \t%lu\r\n", free_space);
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <main+0x184>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	491d      	ldr	r1, [pc, #116]	; (8000d98 <main+0x188>)
 8000d22:	481b      	ldr	r0, [pc, #108]	; (8000d90 <main+0x180>)
 8000d24:	f008 fe30 	bl	8009988 <siprintf>
  send_uart(buffer);
 8000d28:	4819      	ldr	r0, [pc, #100]	; (8000d90 <main+0x180>)
 8000d2a:	f7ff ff3d 	bl	8000ba8 <send_uart>
  bufclear();
 8000d2e:	f7ff ff53 	bl	8000bd8 <bufclear>
  send_uart(buffer);
  f_close(&fil);
  bufclear();
   */

	send_uart("Testing complete\r\n");
 8000d32:	481a      	ldr	r0, [pc, #104]	; (8000d9c <main+0x18c>)
 8000d34:	f7ff ff38 	bl	8000ba8 <send_uart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d38:	f005 faa4 	bl	8006284 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microSDTask */
  microSDTaskHandle = osThreadNew(StartMicroSDTask, NULL, &microSDTask_attributes);
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <main+0x190>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <main+0x194>)
 8000d42:	f005 fae9 	bl	8006318 <osThreadNew>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <main+0x198>)
 8000d4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d4c:	f005 fabe 	bl	80062cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <main+0x140>
 8000d52:	bf00      	nop
 8000d54:	0800abb0 	.word	0x0800abb0
 8000d58:	0800abc0 	.word	0x0800abc0
 8000d5c:	0800abd0 	.word	0x0800abd0
 8000d60:	200019b8 	.word	0x200019b8
 8000d64:	20002e08 	.word	0x20002e08
 8000d68:	0800abd4 	.word	0x0800abd4
 8000d6c:	0800abec 	.word	0x0800abec
 8000d70:	0800ac0c 	.word	0x0800ac0c
 8000d74:	20002e04 	.word	0x20002e04
 8000d78:	200019b4 	.word	0x200019b4
 8000d7c:	0800ac1c 	.word	0x0800ac1c
 8000d80:	0800ac38 	.word	0x0800ac38
 8000d84:	3fe00000 	.word	0x3fe00000
 8000d88:	20002ef4 	.word	0x20002ef4
 8000d8c:	0800ac50 	.word	0x0800ac50
 8000d90:	20002a00 	.word	0x20002a00
 8000d94:	200029fc 	.word	0x200029fc
 8000d98:	0800ac6c 	.word	0x0800ac6c
 8000d9c:	0800ac88 	.word	0x0800ac88
 8000da0:	0800acbc 	.word	0x0800acbc
 8000da4:	08001021 	.word	0x08001021
 8000da8:	200029f4 	.word	0x200029f4

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0b8      	sub	sp, #224	; 0xe0
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db6:	2244      	movs	r2, #68	; 0x44
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f008 fd4e 	bl	800985c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2288      	movs	r2, #136	; 0x88
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f008 fd40 	bl	800985c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dea:	2310      	movs	r3, #16
 8000dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e02:	230a      	movs	r3, #10
 8000e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 feb4 	bl	8001b8c <HAL_RCC_OscConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e2a:	f000 f91b 	bl	8001064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	230f      	movs	r3, #15
 8000e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e34:	2303      	movs	r3, #3
 8000e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e50:	2104      	movs	r1, #4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fa80 	bl	8002358 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e5e:	f000 f901 	bl	8001064 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fcab 	bl	80027c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e78:	f000 f8f4 	bl	8001064 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e80:	f000 fe2e 	bl	8001ae0 <HAL_PWREx_ControlVoltageScaling>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000e8a:	f000 f8eb 	bl	8001064 <Error_Handler>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	37e0      	adds	r7, #224	; 0xe0
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <MX_SPI1_Init+0x78>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ea4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eb2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ece:	2210      	movs	r2, #16
 8000ed0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_SPI1_Init+0x74>)
 8000ef8:	f002 f922 	bl	8003140 <HAL_SPI_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f000 f8af 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20002e0c 	.word	0x20002e0c
 8000f10:	40013000 	.word	0x40013000

08000f14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_USART2_UART_Init+0x58>)
 8000f58:	f002 ffda 	bl	8003f10 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f62:	f000 f87f 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20002e70 	.word	0x20002e70
 8000f70:	40004400 	.word	0x40004400

08000f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a16      	ldr	r2, [pc, #88]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <MX_GPIO_Init+0xa8>)
 8000ff0:	f000 fd50 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_GPIO_Init+0xa8>)
 800100c:	f000 fb98 	bl	8001740 <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	48000400 	.word	0x48000400

08001020 <StartMicroSDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMicroSDTask */
void StartMicroSDTask(void *argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	printf("Task\r\n");
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <StartMicroSDTask+0x18>)
 800102a:	f008 fca5 	bl	8009978 <puts>
  	//HAL_UART_Transmit(&huart2, (uint8_t *)&adc_raw, 2, HAL_MAX_DELAY);
  	osDelay(100000);
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <StartMicroSDTask+0x1c>)
 8001030:	f005 fa04 	bl	800643c <osDelay>
  	printf("Task\r\n");
 8001034:	e7f8      	b.n	8001028 <StartMicroSDTask+0x8>
 8001036:	bf00      	nop
 8001038:	0800ac9c 	.word	0x0800ac9c
 800103c:	000186a0 	.word	0x000186a0

08001040 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x16>
		{
			FatFsCnt = 0;
			SDTimer_Handler();
		}
		*/
    HAL_IncTick();
 8001052:	f000 fa4f 	bl	80014f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40001000 	.word	0x40001000

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_MspInit+0x4c>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_MspInit+0x4c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_MspInit+0x4c>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_MspInit+0x4c>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6593      	str	r3, [r2, #88]	; 0x58
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_MspInit+0x4c>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	210f      	movs	r1, #15
 80010aa:	f06f 0001 	mvn.w	r0, #1
 80010ae:	f000 fb1d 	bl	80016ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_SPI_MspInit+0x7c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d128      	bne.n	8001134 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_SPI_MspInit+0x80>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	4a16      	ldr	r2, [pc, #88]	; (8001140 <HAL_SPI_MspInit+0x80>)
 80010e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ec:	6613      	str	r3, [r2, #96]	; 0x60
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_SPI_MspInit+0x80>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_SPI_MspInit+0x80>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <HAL_SPI_MspInit+0x80>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_SPI_MspInit+0x80>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001112:	23e0      	movs	r3, #224	; 0xe0
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001122:	2305      	movs	r3, #5
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f000 fb06 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40013000 	.word	0x40013000
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_UART_MspInit+0x7c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d128      	bne.n	80011b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_UART_MspInit+0x80>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_UART_MspInit+0x80>)
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	6593      	str	r3, [r2, #88]	; 0x58
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0x80>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_UART_MspInit+0x80>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <HAL_UART_MspInit+0x80>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_UART_MspInit+0x80>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001196:	230c      	movs	r3, #12
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a6:	2307      	movs	r3, #7
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f000 fac4 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40004400 	.word	0x40004400
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	2036      	movs	r0, #54	; 0x36
 80011de:	f000 fa85 	bl	80016ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011e2:	2036      	movs	r0, #54	; 0x36
 80011e4:	f000 fa9e 	bl	8001724 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <HAL_InitTick+0x9c>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_InitTick+0x9c>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_InitTick+0x9c>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001200:	f107 0210 	add.w	r2, r7, #16
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fa4a 	bl	80026a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001210:	f001 fa1c 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8001214:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	4a13      	ldr	r2, [pc, #76]	; (8001268 <HAL_InitTick+0xa0>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	3b01      	subs	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_InitTick+0xa4>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <HAL_InitTick+0xa8>)
 8001228:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_InitTick+0xa4>)
 800122c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001230:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_InitTick+0xa4>)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_InitTick+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_InitTick+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <HAL_InitTick+0xa4>)
 8001246:	f002 fb91 	bl	800396c <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d104      	bne.n	800125a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <HAL_InitTick+0xa4>)
 8001252:	f002 fbed 	bl	8003a30 <HAL_TIM_Base_Start_IT>
 8001256:	4603      	mov	r3, r0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3730      	adds	r7, #48	; 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	431bde83 	.word	0x431bde83
 800126c:	20003f28 	.word	0x20003f28
 8001270:	40001000 	.word	0x40001000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <NMI_Handler+0x4>

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler+0x4>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <UsageFault_Handler+0x4>

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM6_DAC_IRQHandler+0x10>)
 80012a6:	f002 fc33 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20003f28 	.word	0x20003f28

080012b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e00a      	b.n	80012dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012c6:	f3af 8000 	nop.w
 80012ca:	4601      	mov	r1, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf0      	blt.n	80012c6 <_read+0x12>
	}

return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e009      	b.n	8001314 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fc3b 	bl	8000b84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	dbf1      	blt.n	8001300 <_write+0x12>
	}
	return len;
 800131c:	687b      	ldr	r3, [r7, #4]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_close>:

int _close(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
	return -1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134e:	605a      	str	r2, [r3, #4]
	return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_isatty>:

int _isatty(int file)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	return 1;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
	return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f008 fa14 	bl	80097ec <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20018000 	.word	0x20018000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	200000a8 	.word	0x200000a8
 80013f8:	20006048 	.word	0x20006048

080013fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <SystemInit+0x5c>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <SystemInit+0x5c>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <SystemInit+0x60>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a11      	ldr	r2, [pc, #68]	; (800145c <SystemInit+0x60>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <SystemInit+0x60>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <SystemInit+0x60>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <SystemInit+0x60>)
 8001428:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800142c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001430:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <SystemInit+0x60>)
 8001434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001438:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <SystemInit+0x60>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a07      	ldr	r2, [pc, #28]	; (800145c <SystemInit+0x60>)
 8001440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <SystemInit+0x60>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	40021000 	.word	0x40021000

08001460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001498 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001464:	f7ff ffca 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001468:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800146a:	e003      	b.n	8001474 <LoopCopyDataInit>

0800146c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800146e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001470:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001472:	3104      	adds	r1, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001478:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800147a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800147c:	d3f6      	bcc.n	800146c <CopyDataInit>
	ldr	r2, =_sbss
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001480:	e002      	b.n	8001488 <LoopFillZerobss>

08001482 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001482:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001484:	f842 3b04 	str.w	r3, [r2], #4

08001488 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <LoopForever+0x16>)
	cmp	r2, r3
 800148a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800148c:	d3f9      	bcc.n	8001482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148e:	f008 f9b3 	bl	80097f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001492:	f7ff fbbd 	bl	8000c10 <main>

08001496 <LoopForever>:

LoopForever:
    b LoopForever
 8001496:	e7fe      	b.n	8001496 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001498:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800149c:	0800add0 	.word	0x0800add0
	ldr	r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014a4:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 80014a8:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 80014ac:	20006044 	.word	0x20006044

080014b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_2_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_Init+0x3c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_Init+0x3c>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ca:	2003      	movs	r0, #3
 80014cc:	f000 f903 	bl	80016d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff fe79 	bl	80011c8 <HAL_InitTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	e001      	b.n	80014e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e2:	f7ff fdc5 	bl	8001070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	20003f74 	.word	0x20003f74

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20003f74 	.word	0x20003f74

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff4c 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fe:	f7ff ff61 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001702:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	6978      	ldr	r0, [r7, #20]
 800170a:	f7ff ffb1 	bl	8001670 <NVIC_EncodePriority>
 800170e:	4602      	mov	r2, r0
 8001710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff80 	bl	800161c <__NVIC_SetPriority>
}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff54 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174e:	e17f      	b.n	8001a50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8171 	beq.w	8001a4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d00b      	beq.n	8001788 <HAL_GPIO_Init+0x48>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177c:	2b11      	cmp	r3, #17
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b12      	cmp	r3, #18
 8001786:	d130      	bne.n	80017ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017be:	2201      	movs	r2, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 0201 	and.w	r2, r3, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d118      	bne.n	8001828 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017fc:	2201      	movs	r2, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x128>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b12      	cmp	r3, #18
 8001866:	d123      	bne.n	80018b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	6939      	ldr	r1, [r7, #16]
 80018ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80ac 	beq.w	8001a4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_GPIO_Init+0x330>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <HAL_GPIO_Init+0x330>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6613      	str	r3, [r2, #96]	; 0x60
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_GPIO_Init+0x330>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800190a:	4a5a      	ldr	r2, [pc, #360]	; (8001a74 <HAL_GPIO_Init+0x334>)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001934:	d025      	beq.n	8001982 <HAL_GPIO_Init+0x242>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4f      	ldr	r2, [pc, #316]	; (8001a78 <HAL_GPIO_Init+0x338>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01f      	beq.n	800197e <HAL_GPIO_Init+0x23e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4e      	ldr	r2, [pc, #312]	; (8001a7c <HAL_GPIO_Init+0x33c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d019      	beq.n	800197a <HAL_GPIO_Init+0x23a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4d      	ldr	r2, [pc, #308]	; (8001a80 <HAL_GPIO_Init+0x340>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_GPIO_Init+0x236>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4c      	ldr	r2, [pc, #304]	; (8001a84 <HAL_GPIO_Init+0x344>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00d      	beq.n	8001972 <HAL_GPIO_Init+0x232>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4b      	ldr	r2, [pc, #300]	; (8001a88 <HAL_GPIO_Init+0x348>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x22e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4a      	ldr	r2, [pc, #296]	; (8001a8c <HAL_GPIO_Init+0x34c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_GPIO_Init+0x22a>
 8001966:	2306      	movs	r3, #6
 8001968:	e00c      	b.n	8001984 <HAL_GPIO_Init+0x244>
 800196a:	2307      	movs	r3, #7
 800196c:	e00a      	b.n	8001984 <HAL_GPIO_Init+0x244>
 800196e:	2305      	movs	r3, #5
 8001970:	e008      	b.n	8001984 <HAL_GPIO_Init+0x244>
 8001972:	2304      	movs	r3, #4
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x244>
 8001976:	2303      	movs	r3, #3
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x244>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x244>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x244>
 8001982:	2300      	movs	r3, #0
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	f002 0203 	and.w	r2, r2, #3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001994:	4937      	ldr	r1, [pc, #220]	; (8001a74 <HAL_GPIO_Init+0x334>)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019cc:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a44:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f ae78 	bne.w	8001750 <HAL_GPIO_Init+0x10>
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	48000c00 	.word	0x48000c00
 8001a84:	48001000 	.word	0x48001000
 8001a88:	48001400 	.word	0x48001400
 8001a8c:	48001800 	.word	0x48001800
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_PWREx_GetVoltageRange+0x18>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40007000 	.word	0x40007000

08001ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aee:	d130      	bne.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001afc:	d038      	beq.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2232      	movs	r2, #50	; 0x32
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0c9b      	lsrs	r3, r3, #18
 8001b20:	3301      	adds	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b24:	e002      	b.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b38:	d102      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f2      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4c:	d110      	bne.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e00f      	b.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5e:	d007      	beq.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b68:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40007000 	.word	0x40007000
 8001b84:	20000000 	.word	0x20000000
 8001b88:	431bde83 	.word	0x431bde83

08001b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e3d4      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9e:	4ba1      	ldr	r3, [pc, #644]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba8:	4b9e      	ldr	r3, [pc, #632]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80e4 	beq.w	8001d88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x4a>
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	f040 808b 	bne.w	8001ce4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	f040 8087 	bne.w	8001ce4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd6:	4b93      	ldr	r3, [pc, #588]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x62>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e3ac      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1a      	ldr	r2, [r3, #32]
 8001bf2:	4b8c      	ldr	r3, [pc, #560]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <HAL_RCC_OscConfig+0x7c>
 8001bfe:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c06:	e005      	b.n	8001c14 <HAL_RCC_OscConfig+0x88>
 8001c08:	4b86      	ldr	r3, [pc, #536]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d223      	bcs.n	8001c60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fd73 	bl	8002708 <RCC_SetFlashLatencyFromMSIRange>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e38d      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2c:	4b7d      	ldr	r3, [pc, #500]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a7c      	ldr	r2, [pc, #496]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c32:	f043 0308 	orr.w	r3, r3, #8
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b7a      	ldr	r3, [pc, #488]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4977      	ldr	r1, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4a:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	4972      	ldr	r1, [pc, #456]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
 8001c5e:	e025      	b.n	8001cac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c60:	4b70      	ldr	r3, [pc, #448]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6f      	ldr	r2, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	496a      	ldr	r1, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7e:	4b69      	ldr	r3, [pc, #420]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	4965      	ldr	r1, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fd33 	bl	8002708 <RCC_SetFlashLatencyFromMSIRange>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e34d      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cac:	f000 fc36 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	091b      	lsrs	r3, r3, #4
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	495a      	ldr	r1, [pc, #360]	; (8001e28 <HAL_RCC_OscConfig+0x29c>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_RCC_OscConfig+0x2a0>)
 8001cca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ccc:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <HAL_RCC_OscConfig+0x2a4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fa79 	bl	80011c8 <HAL_InitTick>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d052      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	e331      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d032      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fc10 	bl	800151c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d00:	f7ff fc0c 	bl	800151c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e31a      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	493b      	ldr	r1, [pc, #236]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3c:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	4936      	ldr	r1, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	e01a      	b.n	8001d88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d52:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a33      	ldr	r2, [pc, #204]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fbdd 	bl	800151c <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d66:	f7ff fbd9 	bl	800151c <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e2e7      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x1da>
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d074      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x21a>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d10e      	bne.n	8001dbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d10b      	bne.n	8001dbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da6:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d064      	beq.n	8001e7c <HAL_RCC_OscConfig+0x2f0>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d160      	bne.n	8001e7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e2c4      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x24a>
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a15      	ldr	r2, [pc, #84]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e01d      	b.n	8001e12 <HAL_RCC_OscConfig+0x286>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x26e>
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	e00b      	b.n	8001e12 <HAL_RCC_OscConfig+0x286>
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_RCC_OscConfig+0x298>)
 8001e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fb7f 	bl	800151c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e20:	e011      	b.n	8001e46 <HAL_RCC_OscConfig+0x2ba>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	0800ace0 	.word	0x0800ace0
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fb72 	bl	800151c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e280      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e46:	4baf      	ldr	r3, [pc, #700]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2a8>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff fb62 	bl	800151c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fb5e 	bl	800151c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e26c      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6e:	4ba5      	ldr	r3, [pc, #660]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2d0>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d060      	beq.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x310>
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d119      	bne.n	8001eca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d116      	bne.n	8001eca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e9c:	4b99      	ldr	r3, [pc, #612]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x328>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e249      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b93      	ldr	r3, [pc, #588]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	4990      	ldr	r1, [pc, #576]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec8:	e040      	b.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d023      	beq.n	8001f1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed2:	4b8c      	ldr	r3, [pc, #560]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a8b      	ldr	r2, [pc, #556]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff fb1d 	bl	800151c <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fb19 	bl	800151c <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e227      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef8:	4b82      	ldr	r3, [pc, #520]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	497c      	ldr	r1, [pc, #496]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
 8001f18:	e018      	b.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1a:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a79      	ldr	r2, [pc, #484]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7ff faf9 	bl	800151c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff faf5 	bl	800151c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e203      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d03c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f60:	4b68      	ldr	r3, [pc, #416]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f66:	4a67      	ldr	r2, [pc, #412]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff fad4 	bl	800151c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f78:	f7ff fad0 	bl	800151c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e1de      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8a:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ef      	beq.n	8001f78 <HAL_RCC_OscConfig+0x3ec>
 8001f98:	e01b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa0:	4a58      	ldr	r2, [pc, #352]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7ff fab7 	bl	800151c <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fab3 	bl	800151c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1c1      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc4:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ef      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80a6 	beq.w	800212c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fe4:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10d      	bne.n	800200c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	4b44      	ldr	r3, [pc, #272]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	4a43      	ldr	r2, [pc, #268]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffc:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002008:	2301      	movs	r3, #1
 800200a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200c:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <HAL_RCC_OscConfig+0x57c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d118      	bne.n	800204a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002018:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <HAL_RCC_OscConfig+0x57c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a3a      	ldr	r2, [pc, #232]	; (8002108 <HAL_RCC_OscConfig+0x57c>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002024:	f7ff fa7a 	bl	800151c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202c:	f7ff fa76 	bl	800151c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e184      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203e:	4b32      	ldr	r3, [pc, #200]	; (8002108 <HAL_RCC_OscConfig+0x57c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <HAL_RCC_OscConfig+0x4d8>
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002062:	e024      	b.n	80020ae <HAL_RCC_OscConfig+0x522>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b05      	cmp	r3, #5
 800206a:	d110      	bne.n	800208e <HAL_RCC_OscConfig+0x502>
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a24      	ldr	r2, [pc, #144]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	4a20      	ldr	r2, [pc, #128]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800208c:	e00f      	b.n	80020ae <HAL_RCC_OscConfig+0x522>
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 80020a6:	f023 0304 	bic.w	r3, r3, #4
 80020aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d016      	beq.n	80020e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7ff fa31 	bl	800151c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fa2d 	bl	800151c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e139      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x578>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0ed      	beq.n	80020be <HAL_RCC_OscConfig+0x532>
 80020e2:	e01a      	b.n	800211a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7ff fa1a 	bl	800151c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ea:	e00f      	b.n	800210c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7ff fa16 	bl	800151c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d906      	bls.n	800210c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e122      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800210c:	4b90      	ldr	r3, [pc, #576]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1e8      	bne.n	80020ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211a:	7ffb      	ldrb	r3, [r7, #31]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d105      	bne.n	800212c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002120:	4b8b      	ldr	r3, [pc, #556]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a8a      	ldr	r2, [pc, #552]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8108 	beq.w	8002346 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	2b02      	cmp	r3, #2
 800213c:	f040 80d0 	bne.w	80022e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002140:	4b83      	ldr	r3, [pc, #524]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	429a      	cmp	r2, r3
 8002152:	d130      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	3b01      	subs	r3, #1
 8002160:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d127      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002170:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d11f      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002180:	2a07      	cmp	r2, #7
 8002182:	bf14      	ite	ne
 8002184:	2201      	movne	r2, #1
 8002186:	2200      	moveq	r2, #0
 8002188:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800218a:	4293      	cmp	r3, r2
 800218c:	d113      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	3b01      	subs	r3, #1
 800219c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	3b01      	subs	r3, #1
 80021b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d06e      	beq.n	8002294 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d069      	beq.n	8002290 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021bc:	4b64      	ldr	r3, [pc, #400]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021c8:	4b61      	ldr	r3, [pc, #388]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0b7      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021d8:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a5c      	ldr	r2, [pc, #368]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021e4:	f7ff f99a 	bl	800151c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f996 	bl	800151c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0a4      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fe:	4b54      	ldr	r3, [pc, #336]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220a:	4b51      	ldr	r3, [pc, #324]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	4b51      	ldr	r3, [pc, #324]	; (8002354 <HAL_RCC_OscConfig+0x7c8>)
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800221a:	3a01      	subs	r2, #1
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	4311      	orrs	r1, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002224:	0212      	lsls	r2, r2, #8
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800222c:	0852      	lsrs	r2, r2, #1
 800222e:	3a01      	subs	r2, #1
 8002230:	0552      	lsls	r2, r2, #21
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002238:	0852      	lsrs	r2, r2, #1
 800223a:	3a01      	subs	r2, #1
 800223c:	0652      	lsls	r2, r2, #25
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002244:	0912      	lsrs	r2, r2, #4
 8002246:	0452      	lsls	r2, r2, #17
 8002248:	430a      	orrs	r2, r1
 800224a:	4941      	ldr	r1, [pc, #260]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 800224c:	4313      	orrs	r3, r2
 800224e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002250:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a3e      	ldr	r2, [pc, #248]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800225c:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a3b      	ldr	r2, [pc, #236]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002266:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002268:	f7ff f958 	bl	800151c <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002270:	f7ff f954 	bl	800151c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e062      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228e:	e05a      	b.n	8002346 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e059      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d152      	bne.n	8002346 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2a      	ldr	r2, [pc, #168]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ac:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a27      	ldr	r2, [pc, #156]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022b8:	f7ff f930 	bl	800151c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff f92c 	bl	800151c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e03a      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x734>
 80022de:	e032      	b.n	8002346 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d02d      	beq.n	8002342 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80022ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4a13      	ldr	r2, [pc, #76]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002304:	f023 0303 	bic.w	r3, r3, #3
 8002308:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002310:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002318:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231a:	f7ff f8ff 	bl	800151c <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff f8fb 	bl	800151c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e009      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_OscConfig+0x7c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x796>
 8002340:	e001      	b.n	8002346 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	f99d808c 	.word	0xf99d808c

08002358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0c8      	b.n	80024fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b66      	ldr	r3, [pc, #408]	; (8002508 <HAL_RCC_ClockConfig+0x1b0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b63      	ldr	r3, [pc, #396]	; (8002508 <HAL_RCC_ClockConfig+0x1b0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4961      	ldr	r1, [pc, #388]	; (8002508 <HAL_RCC_ClockConfig+0x1b0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <HAL_RCC_ClockConfig+0x1b0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b0      	b.n	80024fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d04c      	beq.n	8002442 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b0:	4b56      	ldr	r3, [pc, #344]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d121      	bne.n	8002400 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e09e      	b.n	80024fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c8:	4b50      	ldr	r3, [pc, #320]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d115      	bne.n	8002400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e092      	b.n	80024fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e0:	4b4a      	ldr	r3, [pc, #296]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e086      	b.n	80024fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f0:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e07e      	b.n	80024fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002400:	4b42      	ldr	r3, [pc, #264]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 0203 	bic.w	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	493f      	ldr	r1, [pc, #252]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002412:	f7ff f883 	bl	800151c <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002418:	e00a      	b.n	8002430 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f7ff f87f 	bl	800151c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e066      	b.n	80024fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002430:	4b36      	ldr	r3, [pc, #216]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 020c 	and.w	r2, r3, #12
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	429a      	cmp	r2, r3
 8002440:	d1eb      	bne.n	800241a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	492c      	ldr	r1, [pc, #176]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCC_ClockConfig+0x1b0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d210      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_RCC_ClockConfig+0x1b0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0207 	bic.w	r2, r3, #7
 8002476:	4924      	ldr	r1, [pc, #144]	; (8002508 <HAL_RCC_ClockConfig+0x1b0>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <HAL_RCC_ClockConfig+0x1b0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e036      	b.n	80024fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4918      	ldr	r1, [pc, #96]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4910      	ldr	r1, [pc, #64]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ce:	f000 f825 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	490c      	ldr	r1, [pc, #48]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	5ccb      	ldrb	r3, [r1, r3]
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fe68 	bl	80011c8 <HAL_InitTick>
 80024f8:	4603      	mov	r3, r0
 80024fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80024fc:	7afb      	ldrb	r3, [r7, #11]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40022000 	.word	0x40022000
 800250c:	40021000 	.word	0x40021000
 8002510:	0800ace0 	.word	0x0800ace0
 8002514:	20000000 	.word	0x20000000
 8002518:	20000004 	.word	0x20000004

0800251c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252a:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002534:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x34>
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d121      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d11e      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002550:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e005      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800256c:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002578:	4a2b      	ldr	r2, [pc, #172]	; (8002628 <HAL_RCC_GetSysClockFreq+0x10c>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d102      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_GetSysClockFreq+0x110>)
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e004      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_RCC_GetSysClockFreq+0x114>)
 80025a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d134      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d003      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0xac>
 80025c0:	e005      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_GetSysClockFreq+0x110>)
 80025c4:	617b      	str	r3, [r7, #20]
      break;
 80025c6:	e005      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e002      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	617b      	str	r3, [r7, #20]
      break;
 80025d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	3301      	adds	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	fb02 f203 	mul.w	r2, r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	0e5b      	lsrs	r3, r3, #25
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	3301      	adds	r3, #1
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002614:	69bb      	ldr	r3, [r7, #24]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	0800acf8 	.word	0x0800acf8
 800262c:	00f42400 	.word	0x00f42400
 8002630:	007a1200 	.word	0x007a1200

08002634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_RCC_GetHCLKFreq+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000000 	.word	0x20000000

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002650:	f7ff fff0 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4904      	ldr	r1, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	0800acf0 	.word	0x0800acf0

08002678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800267c:	f7ff ffda 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	0adb      	lsrs	r3, r3, #11
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4904      	ldr	r1, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	0800acf0 	.word	0x0800acf0

080026a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	220f      	movs	r2, #15
 80026b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_RCC_GetClockConfig+0x5c>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0203 	and.w	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_RCC_GetClockConfig+0x5c>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCC_GetClockConfig+0x5c>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_GetClockConfig+0x5c>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	08db      	lsrs	r3, r3, #3
 80026de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_RCC_GetClockConfig+0x60>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0207 	and.w	r2, r3, #7
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	601a      	str	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	40022000 	.word	0x40022000

08002708 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002720:	f7ff f9d0 	bl	8001ac4 <HAL_PWREx_GetVoltageRange>
 8002724:	6178      	str	r0, [r7, #20]
 8002726:	e014      	b.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002732:	6593      	str	r3, [r2, #88]	; 0x58
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002740:	f7ff f9c0 	bl	8001ac4 <HAL_PWREx_GetVoltageRange>
 8002744:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	4a1d      	ldr	r2, [pc, #116]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002750:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002758:	d10b      	bne.n	8002772 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b80      	cmp	r3, #128	; 0x80
 800275e:	d919      	bls.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2ba0      	cmp	r3, #160	; 0xa0
 8002764:	d902      	bls.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002766:	2302      	movs	r3, #2
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	e013      	b.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800276c:	2301      	movs	r3, #1
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	e010      	b.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d902      	bls.n	800277e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002778:	2303      	movs	r3, #3
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	e00a      	b.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b80      	cmp	r3, #128	; 0x80
 8002782:	d102      	bne.n	800278a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002784:	2302      	movs	r3, #2
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e004      	b.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b70      	cmp	r3, #112	; 0x70
 800278e:	d101      	bne.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002790:	2301      	movs	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 0207 	bic.w	r2, r3, #7
 800279c:	4909      	ldr	r1, [pc, #36]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d001      	beq.n	80027b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40022000 	.word	0x40022000

080027c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027d0:	2300      	movs	r3, #0
 80027d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d4:	2300      	movs	r3, #0
 80027d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d041      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ec:	d02a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027f2:	d824      	bhi.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027fe:	d81e      	bhi.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002808:	d010      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800280a:	e018      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800280c:	4b86      	ldr	r3, [pc, #536]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a85      	ldr	r2, [pc, #532]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002816:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002818:	e015      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3304      	adds	r3, #4
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fabb 	bl	8002d9c <RCCEx_PLLSAI1_Config>
 8002826:	4603      	mov	r3, r0
 8002828:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800282a:	e00c      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3320      	adds	r3, #32
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fba6 	bl	8002f84 <RCCEx_PLLSAI2_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800283c:	e003      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	74fb      	strb	r3, [r7, #19]
      break;
 8002842:	e000      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800284c:	4b76      	ldr	r3, [pc, #472]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285a:	4973      	ldr	r1, [pc, #460]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002862:	e001      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d041      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002878:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800287c:	d02a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800287e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002882:	d824      	bhi.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002888:	d008      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800288a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800288e:	d81e      	bhi.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d010      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800289a:	e018      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800289c:	4b62      	ldr	r3, [pc, #392]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a61      	ldr	r2, [pc, #388]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028a8:	e015      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fa73 	bl	8002d9c <RCCEx_PLLSAI1_Config>
 80028b6:	4603      	mov	r3, r0
 80028b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028ba:	e00c      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3320      	adds	r3, #32
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fb5e 	bl	8002f84 <RCCEx_PLLSAI2_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028cc:	e003      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	74fb      	strb	r3, [r7, #19]
      break;
 80028d2:	e000      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028dc:	4b52      	ldr	r3, [pc, #328]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ea:	494f      	ldr	r1, [pc, #316]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028f2:	e001      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80a0 	beq.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800291a:	2300      	movs	r3, #0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00d      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	4a40      	ldr	r2, [pc, #256]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6593      	str	r3, [r2, #88]	; 0x58
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002938:	2301      	movs	r3, #1
 800293a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800293c:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002946:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002948:	f7fe fde8 	bl	800151c <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800294e:	e009      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002950:	f7fe fde4 	bl	800151c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	74fb      	strb	r3, [r7, #19]
        break;
 8002962:	e005      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002964:	4b31      	ldr	r3, [pc, #196]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ef      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d15c      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002980:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01f      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	d019      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a0:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	4a20      	ldr	r2, [pc, #128]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c0:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe fda3 	bl	800151c <HAL_GetTick>
 80029d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d8:	e00b      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe fd9f 	bl	800151c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d902      	bls.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	74fb      	strb	r3, [r7, #19]
            break;
 80029f0:	e006      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ec      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a16:	4904      	ldr	r1, [pc, #16]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a1e:	e009      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
 8002a24:	e006      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a34:	7c7b      	ldrb	r3, [r7, #17]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d105      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3a:	4b9e      	ldr	r3, [pc, #632]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	4a9d      	ldr	r2, [pc, #628]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a52:	4b98      	ldr	r3, [pc, #608]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 0203 	bic.w	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	4994      	ldr	r1, [pc, #592]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a74:	4b8f      	ldr	r3, [pc, #572]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 020c 	bic.w	r2, r3, #12
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	498c      	ldr	r1, [pc, #560]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a96:	4b87      	ldr	r3, [pc, #540]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	4983      	ldr	r1, [pc, #524]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ab8:	4b7e      	ldr	r3, [pc, #504]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	497b      	ldr	r1, [pc, #492]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ada:	4b76      	ldr	r3, [pc, #472]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae8:	4972      	ldr	r1, [pc, #456]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002afc:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	496a      	ldr	r1, [pc, #424]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	4961      	ldr	r1, [pc, #388]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b40:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4e:	4959      	ldr	r1, [pc, #356]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b62:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b70:	4950      	ldr	r1, [pc, #320]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b84:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	4948      	ldr	r1, [pc, #288]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ba6:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	493f      	ldr	r1, [pc, #252]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d028      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bc8:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd6:	4937      	ldr	r1, [pc, #220]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be8:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf2:	60d3      	str	r3, [r2, #12]
 8002bf4:	e011      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f8c8 	bl	8002d9c <RCCEx_PLLSAI1_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d028      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	491f      	ldr	r1, [pc, #124]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c46:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c50:	60d3      	str	r3, [r2, #12]
 8002c52:	e011      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f899 	bl	8002d9c <RCCEx_PLLSAI1_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d02b      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c92:	4908      	ldr	r1, [pc, #32]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca2:	d109      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a02      	ldr	r2, [pc, #8]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cae:	60d3      	str	r3, [r2, #12]
 8002cb0:	e014      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f867 	bl	8002d9c <RCCEx_PLLSAI1_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02f      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf6:	4928      	ldr	r1, [pc, #160]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d06:	d10d      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f844 	bl	8002d9c <RCCEx_PLLSAI1_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d014      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	74bb      	strb	r3, [r7, #18]
 8002d22:	e011      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3320      	adds	r3, #32
 8002d32:	2102      	movs	r1, #2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 f925 	bl	8002f84 <RCCEx_PLLSAI2_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d62:	490d      	ldr	r1, [pc, #52]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d86:	4904      	ldr	r1, [pc, #16]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000

08002d9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002daa:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d018      	beq.n	8002de8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002db6:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0203 	and.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d10d      	bne.n	8002de2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dce:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
       ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d047      	beq.n	8002e72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	e044      	b.n	8002e72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d018      	beq.n	8002e22 <RCCEx_PLLSAI1_Config+0x86>
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d825      	bhi.n	8002e40 <RCCEx_PLLSAI1_Config+0xa4>
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d002      	beq.n	8002dfe <RCCEx_PLLSAI1_Config+0x62>
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d009      	beq.n	8002e10 <RCCEx_PLLSAI1_Config+0x74>
 8002dfc:	e020      	b.n	8002e40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dfe:	4b60      	ldr	r3, [pc, #384]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d11d      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0e:	e01a      	b.n	8002e46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e10:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d116      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e20:	e013      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e22:	4b57      	ldr	r3, [pc, #348]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10f      	bne.n	8002e4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e2e:	4b54      	ldr	r3, [pc, #336]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e3e:	e006      	b.n	8002e4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      break;
 8002e44:	e004      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e46:	bf00      	nop
 8002e48:	e002      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e000      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6819      	ldr	r1, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	4944      	ldr	r1, [pc, #272]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d17d      	bne.n	8002f74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e78:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a40      	ldr	r2, [pc, #256]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e84:	f7fe fb4a 	bl	800151c <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e8a:	e009      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e8c:	f7fe fb46 	bl	800151c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d902      	bls.n	8002ea0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e9e:	e005      	b.n	8002eac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea0:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ef      	bne.n	8002e8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d160      	bne.n	8002f74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d111      	bne.n	8002edc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb8:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6892      	ldr	r2, [r2, #8]
 8002ec8:	0211      	lsls	r1, r2, #8
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68d2      	ldr	r2, [r2, #12]
 8002ece:	0912      	lsrs	r2, r2, #4
 8002ed0:	0452      	lsls	r2, r2, #17
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	492a      	ldr	r1, [pc, #168]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	610b      	str	r3, [r1, #16]
 8002eda:	e027      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d112      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee2:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6892      	ldr	r2, [r2, #8]
 8002ef2:	0211      	lsls	r1, r2, #8
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6912      	ldr	r2, [r2, #16]
 8002ef8:	0852      	lsrs	r2, r2, #1
 8002efa:	3a01      	subs	r2, #1
 8002efc:	0552      	lsls	r2, r2, #21
 8002efe:	430a      	orrs	r2, r1
 8002f00:	491f      	ldr	r1, [pc, #124]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	610b      	str	r3, [r1, #16]
 8002f06:	e011      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6892      	ldr	r2, [r2, #8]
 8002f18:	0211      	lsls	r1, r2, #8
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6952      	ldr	r2, [r2, #20]
 8002f1e:	0852      	lsrs	r2, r2, #1
 8002f20:	3a01      	subs	r2, #1
 8002f22:	0652      	lsls	r2, r2, #25
 8002f24:	430a      	orrs	r2, r1
 8002f26:	4916      	ldr	r1, [pc, #88]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe faf0 	bl	800151c <HAL_GetTick>
 8002f3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f3e:	e009      	b.n	8002f54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f40:	f7fe faec 	bl	800151c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d902      	bls.n	8002f54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	73fb      	strb	r3, [r7, #15]
          break;
 8002f52:	e005      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ef      	beq.n	8002f40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	4904      	ldr	r1, [pc, #16]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000

08002f84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f92:	4b6a      	ldr	r3, [pc, #424]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d018      	beq.n	8002fd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f9e:	4b67      	ldr	r3, [pc, #412]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0203 	and.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d10d      	bne.n	8002fca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fb6:	4b61      	ldr	r3, [pc, #388]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d047      	beq.n	800305a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	e044      	b.n	800305a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d018      	beq.n	800300a <RCCEx_PLLSAI2_Config+0x86>
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d825      	bhi.n	8003028 <RCCEx_PLLSAI2_Config+0xa4>
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d002      	beq.n	8002fe6 <RCCEx_PLLSAI2_Config+0x62>
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d009      	beq.n	8002ff8 <RCCEx_PLLSAI2_Config+0x74>
 8002fe4:	e020      	b.n	8003028 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fe6:	4b55      	ldr	r3, [pc, #340]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11d      	bne.n	800302e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff6:	e01a      	b.n	800302e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003000:	2b00      	cmp	r3, #0
 8003002:	d116      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003008:	e013      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800300a:	4b4c      	ldr	r3, [pc, #304]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003016:	4b49      	ldr	r3, [pc, #292]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003026:	e006      	b.n	8003036 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      break;
 800302c:	e004      	b.n	8003038 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800302e:	bf00      	nop
 8003030:	e002      	b.n	8003038 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003036:	bf00      	nop
    }

    if(status == HAL_OK)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10d      	bne.n	800305a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	430b      	orrs	r3, r1
 8003054:	4939      	ldr	r1, [pc, #228]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003056:	4313      	orrs	r3, r2
 8003058:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d167      	bne.n	8003130 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a35      	ldr	r2, [pc, #212]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7fe fa56 	bl	800151c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003072:	e009      	b.n	8003088 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003074:	f7fe fa52 	bl	800151c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	73fb      	strb	r3, [r7, #15]
        break;
 8003086:	e005      	b.n	8003094 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003088:	4b2c      	ldr	r3, [pc, #176]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ef      	bne.n	8003074 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d14a      	bne.n	8003130 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d111      	bne.n	80030c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030a0:	4b26      	ldr	r3, [pc, #152]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6892      	ldr	r2, [r2, #8]
 80030b0:	0211      	lsls	r1, r2, #8
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	0912      	lsrs	r2, r2, #4
 80030b8:	0452      	lsls	r2, r2, #17
 80030ba:	430a      	orrs	r2, r1
 80030bc:	491f      	ldr	r1, [pc, #124]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	614b      	str	r3, [r1, #20]
 80030c2:	e011      	b.n	80030e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030c4:	4b1d      	ldr	r3, [pc, #116]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	0211      	lsls	r1, r2, #8
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6912      	ldr	r2, [r2, #16]
 80030da:	0852      	lsrs	r2, r2, #1
 80030dc:	3a01      	subs	r2, #1
 80030de:	0652      	lsls	r2, r2, #25
 80030e0:	430a      	orrs	r2, r1
 80030e2:	4916      	ldr	r1, [pc, #88]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a13      	ldr	r2, [pc, #76]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe fa12 	bl	800151c <HAL_GetTick>
 80030f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030fa:	e009      	b.n	8003110 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030fc:	f7fe fa0e 	bl	800151c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d902      	bls.n	8003110 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	73fb      	strb	r3, [r7, #15]
          break;
 800310e:	e005      	b.n	800311c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ef      	beq.n	80030fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	4904      	ldr	r1, [pc, #16]	; (800313c <RCCEx_PLLSAI2_Config+0x1b8>)
 800312c:	4313      	orrs	r3, r2
 800312e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e095      	b.n	800327e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003162:	d009      	beq.n	8003178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
 800316a:	e005      	b.n	8003178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd ff94 	bl	80010c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031b8:	d902      	bls.n	80031c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e002      	b.n	80031c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031ce:	d007      	beq.n	80031e0 <HAL_SPI_Init+0xa0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031d8:	d002      	beq.n	80031e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	ea42 0103 	orr.w	r1, r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	f003 0204 	and.w	r2, r3, #4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800325c:	ea42 0103 	orr.w	r1, r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b08a      	sub	sp, #40	; 0x28
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003294:	2301      	movs	r3, #1
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x26>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e1fb      	b.n	80036a4 <HAL_SPI_TransmitReceive+0x41e>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032b4:	f7fe f932 	bl	800151c <HAL_GetTick>
 80032b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032d0:	7efb      	ldrb	r3, [r7, #27]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d00e      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x6e>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032dc:	d106      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x66>
 80032e6:	7efb      	ldrb	r3, [r7, #27]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d003      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032f2:	e1cd      	b.n	8003690 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_SPI_TransmitReceive+0x80>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_SPI_TransmitReceive+0x80>
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800330c:	e1c0      	b.n	8003690 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b04      	cmp	r3, #4
 8003318:	d003      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2205      	movs	r2, #5
 800331e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	887a      	ldrh	r2, [r7, #2]
 8003332:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	887a      	ldrh	r2, [r7, #2]
 800333a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	887a      	ldrh	r2, [r7, #2]
 800334e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003364:	d802      	bhi.n	800336c <HAL_SPI_TransmitReceive+0xe6>
 8003366:	8a3b      	ldrh	r3, [r7, #16]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d908      	bls.n	800337e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	e007      	b.n	800338e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800338c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d007      	beq.n	80033ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033b4:	d97c      	bls.n	80034b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x13e>
 80033be:	8a7b      	ldrh	r3, [r7, #18]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d169      	bne.n	8003498 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	881a      	ldrh	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	1c9a      	adds	r2, r3, #2
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e8:	e056      	b.n	8003498 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d11b      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x1aa>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x1aa>
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	2b01      	cmp	r3, #1
 8003406:	d113      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	881a      	ldrh	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d11c      	bne.n	8003478 <HAL_SPI_TransmitReceive+0x1f2>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	b292      	uxth	r2, r2
 8003456:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003474:	2301      	movs	r3, #1
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003478:	f7fe f850 	bl	800151c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003484:	429a      	cmp	r2, r3
 8003486:	d807      	bhi.n	8003498 <HAL_SPI_TransmitReceive+0x212>
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800348e:	d003      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003496:	e0fb      	b.n	8003690 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1a3      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x164>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d19d      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x164>
 80034ae:	e0df      	b.n	8003670 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_SPI_TransmitReceive+0x23a>
 80034b8:	8a7b      	ldrh	r3, [r7, #18]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	f040 80cb 	bne.w	8003656 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d912      	bls.n	80034f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	881a      	ldrh	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	1c9a      	adds	r2, r3, #2
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b02      	subs	r3, #2
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034ee:	e0b2      	b.n	8003656 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003516:	e09e      	b.n	8003656 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d134      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x30a>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02f      	beq.n	8003590 <HAL_SPI_TransmitReceive+0x30a>
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	2b01      	cmp	r3, #1
 8003534:	d12c      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d912      	bls.n	8003566 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	881a      	ldrh	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	1c9a      	adds	r2, r3, #2
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b02      	subs	r3, #2
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003564:	e012      	b.n	800358c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d148      	bne.n	8003630 <HAL_SPI_TransmitReceive+0x3aa>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d042      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d923      	bls.n	80035fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	b292      	uxth	r2, r2
 80035c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b02      	subs	r3, #2
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d81f      	bhi.n	800362c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	e016      	b.n	800362c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f103 020c 	add.w	r2, r3, #12
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003630:	f7fd ff74 	bl	800151c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800363c:	429a      	cmp	r2, r3
 800363e:	d803      	bhi.n	8003648 <HAL_SPI_TransmitReceive+0x3c2>
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003646:	d102      	bne.n	800364e <HAL_SPI_TransmitReceive+0x3c8>
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003654:	e01c      	b.n	8003690 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	f47f af5b 	bne.w	8003518 <HAL_SPI_TransmitReceive+0x292>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	f47f af54 	bne.w	8003518 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f933 	bl	80038e0 <SPI_EndRxTxTransaction>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	661a      	str	r2, [r3, #96]	; 0x60
 800368c:	e000      	b.n	8003690 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800368e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3728      	adds	r7, #40	; 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036bc:	f7fd ff2e 	bl	800151c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036cc:	f7fd ff26 	bl	800151c <HAL_GetTick>
 80036d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036d2:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	0d1b      	lsrs	r3, r3, #20
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e2:	e054      	b.n	800378e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ea:	d050      	beq.n	800378e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036ec:	f7fd ff16 	bl	800151c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d902      	bls.n	8003702 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d13d      	bne.n	800377e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003710:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371a:	d111      	bne.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x94>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003724:	d004      	beq.n	8003730 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372e:	d107      	bne.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003748:	d10f      	bne.n	800376a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003768:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e017      	b.n	80037ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	3b01      	subs	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4013      	ands	r3, r2
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d19b      	bne.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000000 	.word	0x20000000

080037bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037ca:	f7fd fea7 	bl	800151c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	4413      	add	r3, r2
 80037d8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037da:	f7fd fe9f 	bl	800151c <HAL_GetTick>
 80037de:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037e0:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <SPI_WaitFifoStateUntilTimeout+0x120>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00da      	lsls	r2, r3, #3
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	0d1b      	lsrs	r3, r3, #20
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80037f8:	e062      	b.n	80038c0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003800:	d109      	bne.n	8003816 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003814:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381c:	d050      	beq.n	80038c0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800381e:	f7fd fe7d 	bl	800151c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	429a      	cmp	r2, r3
 800382c:	d902      	bls.n	8003834 <SPI_WaitFifoStateUntilTimeout+0x78>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d13d      	bne.n	80038b0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003842:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800384c:	d111      	bne.n	8003872 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003856:	d004      	beq.n	8003862 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003860:	d107      	bne.n	8003872 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003870:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387a:	d10f      	bne.n	800389c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800389a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e010      	b.n	80038d2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3b01      	subs	r3, #1
 80038be:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d194      	bne.n	80037fa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000000 	.word	0x20000000

080038e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff ff5f 	bl	80037bc <SPI_WaitFifoStateUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e027      	b.n	8003964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2200      	movs	r2, #0
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fec4 	bl	80036ac <SPI_WaitFlagStateUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e014      	b.n	8003964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2200      	movs	r2, #0
 8003942:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff ff38 	bl	80037bc <SPI_WaitFifoStateUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e000      	b.n	8003964 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e049      	b.n	8003a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f841 	bl	8003a1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f000 f9f8 	bl	8003da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d001      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e04f      	b.n	8003ae8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01d      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d018      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1e      	ldr	r2, [pc, #120]	; (8003afc <HAL_TIM_Base_Start_IT+0xcc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d115      	bne.n	8003ad2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b06      	cmp	r3, #6
 8003ab6:	d015      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0xb4>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abe:	d011      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad0:	e008      	b.n	8003ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40013400 	.word	0x40013400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	00010007 	.word	0x00010007

08003b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0202 	mvn.w	r2, #2
 8003b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f905 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8f7 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f908 	bl	8003d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0204 	mvn.w	r2, #4
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8db 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8cd 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f8de 	bl	8003d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0208 	mvn.w	r2, #8
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2204      	movs	r2, #4
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8b1 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8a3 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8b4 	bl	8003d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0210 	mvn.w	r2, #16
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f887 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f879 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f88a 	bl	8003d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0201 	mvn.w	r2, #1
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd f9d6 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b80      	cmp	r3, #128	; 0x80
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f914 	bl	8003ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cce:	d10e      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f907 	bl	8003efc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d10e      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f838 	bl	8003d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d10e      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0220 	mvn.w	r2, #32
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f8c7 	bl	8003ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a40      	ldr	r2, [pc, #256]	; (8003eb4 <TIM_Base_SetConfig+0x114>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbe:	d00f      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3d      	ldr	r2, [pc, #244]	; (8003eb8 <TIM_Base_SetConfig+0x118>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <TIM_Base_SetConfig+0x11c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d007      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a3b      	ldr	r2, [pc, #236]	; (8003ec0 <TIM_Base_SetConfig+0x120>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3a      	ldr	r2, [pc, #232]	; (8003ec4 <TIM_Base_SetConfig+0x124>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d108      	bne.n	8003df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <TIM_Base_SetConfig+0x114>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01f      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e00:	d01b      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <TIM_Base_SetConfig+0x118>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d017      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2b      	ldr	r2, [pc, #172]	; (8003ebc <TIM_Base_SetConfig+0x11c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <TIM_Base_SetConfig+0x120>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00f      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <TIM_Base_SetConfig+0x124>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <TIM_Base_SetConfig+0x128>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <TIM_Base_SetConfig+0x12c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <TIM_Base_SetConfig+0x130>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a10      	ldr	r2, [pc, #64]	; (8003eb4 <TIM_Base_SetConfig+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00f      	beq.n	8003e98 <TIM_Base_SetConfig+0xf8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <TIM_Base_SetConfig+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <TIM_Base_SetConfig+0xf8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a11      	ldr	r2, [pc, #68]	; (8003ec8 <TIM_Base_SetConfig+0x128>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_Base_SetConfig+0xf8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <TIM_Base_SetConfig+0x12c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_Base_SetConfig+0xf8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <TIM_Base_SetConfig+0x130>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d103      	bne.n	8003ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	615a      	str	r2, [r3, #20]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40013400 	.word	0x40013400
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	40014400 	.word	0x40014400
 8003ed0:	40014800 	.word	0x40014800

08003ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e040      	b.n	8003fa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fd f906 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f8c0 	bl	80040d4 <UART_SetConfig>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e022      	b.n	8003fa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fb3e 	bl	80045e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fbc5 	bl	800472c <UART_CheckIdleState>
 8003fa2:	4603      	mov	r3, r0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	f040 8082 	bne.w	80040ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_UART_Transmit+0x26>
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e07a      	b.n	80040cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_UART_Transmit+0x38>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e073      	b.n	80040cc <HAL_UART_Transmit+0x120>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2221      	movs	r2, #33	; 0x21
 8003ff8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffa:	f7fd fa8f 	bl	800151c <HAL_GetTick>
 8003ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d108      	bne.n	800402c <HAL_UART_Transmit+0x80>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e003      	b.n	8004034 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800403c:	e02d      	b.n	800409a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fbb8 	bl	80047be <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e039      	b.n	80040cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406a:	b292      	uxth	r2, r2
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3302      	adds	r3, #2
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e008      	b.n	8004088 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	b292      	uxth	r2, r2
 8004080:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3301      	adds	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1cb      	bne.n	800403e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2200      	movs	r2, #0
 80040ae:	2140      	movs	r1, #64	; 0x40
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb84 	bl	80047be <UART_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e005      	b.n	80040cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d4:	b5b0      	push	{r4, r5, r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4bad      	ldr	r3, [pc, #692]	; (80043b4 <UART_SetConfig+0x2e0>)
 8004100:	4013      	ands	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	69f9      	ldr	r1, [r7, #28]
 8004108:	430b      	orrs	r3, r1
 800410a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4aa2      	ldr	r2, [pc, #648]	; (80043b8 <UART_SetConfig+0x2e4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	4313      	orrs	r3, r2
 800413a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	430a      	orrs	r2, r1
 800414e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a99      	ldr	r2, [pc, #612]	; (80043bc <UART_SetConfig+0x2e8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d121      	bne.n	800419e <UART_SetConfig+0xca>
 800415a:	4b99      	ldr	r3, [pc, #612]	; (80043c0 <UART_SetConfig+0x2ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	2b03      	cmp	r3, #3
 8004166:	d817      	bhi.n	8004198 <UART_SetConfig+0xc4>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <UART_SetConfig+0x9c>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	0800418d 	.word	0x0800418d
 8004178:	08004187 	.word	0x08004187
 800417c:	08004193 	.word	0x08004193
 8004180:	2301      	movs	r3, #1
 8004182:	76fb      	strb	r3, [r7, #27]
 8004184:	e0e7      	b.n	8004356 <UART_SetConfig+0x282>
 8004186:	2302      	movs	r3, #2
 8004188:	76fb      	strb	r3, [r7, #27]
 800418a:	e0e4      	b.n	8004356 <UART_SetConfig+0x282>
 800418c:	2304      	movs	r3, #4
 800418e:	76fb      	strb	r3, [r7, #27]
 8004190:	e0e1      	b.n	8004356 <UART_SetConfig+0x282>
 8004192:	2308      	movs	r3, #8
 8004194:	76fb      	strb	r3, [r7, #27]
 8004196:	e0de      	b.n	8004356 <UART_SetConfig+0x282>
 8004198:	2310      	movs	r3, #16
 800419a:	76fb      	strb	r3, [r7, #27]
 800419c:	e0db      	b.n	8004356 <UART_SetConfig+0x282>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a88      	ldr	r2, [pc, #544]	; (80043c4 <UART_SetConfig+0x2f0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d132      	bne.n	800420e <UART_SetConfig+0x13a>
 80041a8:	4b85      	ldr	r3, [pc, #532]	; (80043c0 <UART_SetConfig+0x2ec>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d828      	bhi.n	8004208 <UART_SetConfig+0x134>
 80041b6:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <UART_SetConfig+0xe8>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041f1 	.word	0x080041f1
 80041c0:	08004209 	.word	0x08004209
 80041c4:	08004209 	.word	0x08004209
 80041c8:	08004209 	.word	0x08004209
 80041cc:	080041fd 	.word	0x080041fd
 80041d0:	08004209 	.word	0x08004209
 80041d4:	08004209 	.word	0x08004209
 80041d8:	08004209 	.word	0x08004209
 80041dc:	080041f7 	.word	0x080041f7
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004209 	.word	0x08004209
 80041e8:	08004209 	.word	0x08004209
 80041ec:	08004203 	.word	0x08004203
 80041f0:	2300      	movs	r3, #0
 80041f2:	76fb      	strb	r3, [r7, #27]
 80041f4:	e0af      	b.n	8004356 <UART_SetConfig+0x282>
 80041f6:	2302      	movs	r3, #2
 80041f8:	76fb      	strb	r3, [r7, #27]
 80041fa:	e0ac      	b.n	8004356 <UART_SetConfig+0x282>
 80041fc:	2304      	movs	r3, #4
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	e0a9      	b.n	8004356 <UART_SetConfig+0x282>
 8004202:	2308      	movs	r3, #8
 8004204:	76fb      	strb	r3, [r7, #27]
 8004206:	e0a6      	b.n	8004356 <UART_SetConfig+0x282>
 8004208:	2310      	movs	r3, #16
 800420a:	76fb      	strb	r3, [r7, #27]
 800420c:	e0a3      	b.n	8004356 <UART_SetConfig+0x282>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6d      	ldr	r2, [pc, #436]	; (80043c8 <UART_SetConfig+0x2f4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d120      	bne.n	800425a <UART_SetConfig+0x186>
 8004218:	4b69      	ldr	r3, [pc, #420]	; (80043c0 <UART_SetConfig+0x2ec>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004222:	2b30      	cmp	r3, #48	; 0x30
 8004224:	d013      	beq.n	800424e <UART_SetConfig+0x17a>
 8004226:	2b30      	cmp	r3, #48	; 0x30
 8004228:	d814      	bhi.n	8004254 <UART_SetConfig+0x180>
 800422a:	2b20      	cmp	r3, #32
 800422c:	d009      	beq.n	8004242 <UART_SetConfig+0x16e>
 800422e:	2b20      	cmp	r3, #32
 8004230:	d810      	bhi.n	8004254 <UART_SetConfig+0x180>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <UART_SetConfig+0x168>
 8004236:	2b10      	cmp	r3, #16
 8004238:	d006      	beq.n	8004248 <UART_SetConfig+0x174>
 800423a:	e00b      	b.n	8004254 <UART_SetConfig+0x180>
 800423c:	2300      	movs	r3, #0
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e089      	b.n	8004356 <UART_SetConfig+0x282>
 8004242:	2302      	movs	r3, #2
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e086      	b.n	8004356 <UART_SetConfig+0x282>
 8004248:	2304      	movs	r3, #4
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e083      	b.n	8004356 <UART_SetConfig+0x282>
 800424e:	2308      	movs	r3, #8
 8004250:	76fb      	strb	r3, [r7, #27]
 8004252:	e080      	b.n	8004356 <UART_SetConfig+0x282>
 8004254:	2310      	movs	r3, #16
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	e07d      	b.n	8004356 <UART_SetConfig+0x282>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a5b      	ldr	r2, [pc, #364]	; (80043cc <UART_SetConfig+0x2f8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d120      	bne.n	80042a6 <UART_SetConfig+0x1d2>
 8004264:	4b56      	ldr	r3, [pc, #344]	; (80043c0 <UART_SetConfig+0x2ec>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800426e:	2bc0      	cmp	r3, #192	; 0xc0
 8004270:	d013      	beq.n	800429a <UART_SetConfig+0x1c6>
 8004272:	2bc0      	cmp	r3, #192	; 0xc0
 8004274:	d814      	bhi.n	80042a0 <UART_SetConfig+0x1cc>
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d009      	beq.n	800428e <UART_SetConfig+0x1ba>
 800427a:	2b80      	cmp	r3, #128	; 0x80
 800427c:	d810      	bhi.n	80042a0 <UART_SetConfig+0x1cc>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <UART_SetConfig+0x1b4>
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d006      	beq.n	8004294 <UART_SetConfig+0x1c0>
 8004286:	e00b      	b.n	80042a0 <UART_SetConfig+0x1cc>
 8004288:	2300      	movs	r3, #0
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	e063      	b.n	8004356 <UART_SetConfig+0x282>
 800428e:	2302      	movs	r3, #2
 8004290:	76fb      	strb	r3, [r7, #27]
 8004292:	e060      	b.n	8004356 <UART_SetConfig+0x282>
 8004294:	2304      	movs	r3, #4
 8004296:	76fb      	strb	r3, [r7, #27]
 8004298:	e05d      	b.n	8004356 <UART_SetConfig+0x282>
 800429a:	2308      	movs	r3, #8
 800429c:	76fb      	strb	r3, [r7, #27]
 800429e:	e05a      	b.n	8004356 <UART_SetConfig+0x282>
 80042a0:	2310      	movs	r3, #16
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	e057      	b.n	8004356 <UART_SetConfig+0x282>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a49      	ldr	r2, [pc, #292]	; (80043d0 <UART_SetConfig+0x2fc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d125      	bne.n	80042fc <UART_SetConfig+0x228>
 80042b0:	4b43      	ldr	r3, [pc, #268]	; (80043c0 <UART_SetConfig+0x2ec>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042be:	d017      	beq.n	80042f0 <UART_SetConfig+0x21c>
 80042c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c4:	d817      	bhi.n	80042f6 <UART_SetConfig+0x222>
 80042c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ca:	d00b      	beq.n	80042e4 <UART_SetConfig+0x210>
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d0:	d811      	bhi.n	80042f6 <UART_SetConfig+0x222>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <UART_SetConfig+0x20a>
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042da:	d006      	beq.n	80042ea <UART_SetConfig+0x216>
 80042dc:	e00b      	b.n	80042f6 <UART_SetConfig+0x222>
 80042de:	2300      	movs	r3, #0
 80042e0:	76fb      	strb	r3, [r7, #27]
 80042e2:	e038      	b.n	8004356 <UART_SetConfig+0x282>
 80042e4:	2302      	movs	r3, #2
 80042e6:	76fb      	strb	r3, [r7, #27]
 80042e8:	e035      	b.n	8004356 <UART_SetConfig+0x282>
 80042ea:	2304      	movs	r3, #4
 80042ec:	76fb      	strb	r3, [r7, #27]
 80042ee:	e032      	b.n	8004356 <UART_SetConfig+0x282>
 80042f0:	2308      	movs	r3, #8
 80042f2:	76fb      	strb	r3, [r7, #27]
 80042f4:	e02f      	b.n	8004356 <UART_SetConfig+0x282>
 80042f6:	2310      	movs	r3, #16
 80042f8:	76fb      	strb	r3, [r7, #27]
 80042fa:	e02c      	b.n	8004356 <UART_SetConfig+0x282>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <UART_SetConfig+0x2e4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d125      	bne.n	8004352 <UART_SetConfig+0x27e>
 8004306:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <UART_SetConfig+0x2ec>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004310:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004314:	d017      	beq.n	8004346 <UART_SetConfig+0x272>
 8004316:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800431a:	d817      	bhi.n	800434c <UART_SetConfig+0x278>
 800431c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004320:	d00b      	beq.n	800433a <UART_SetConfig+0x266>
 8004322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004326:	d811      	bhi.n	800434c <UART_SetConfig+0x278>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <UART_SetConfig+0x260>
 800432c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004330:	d006      	beq.n	8004340 <UART_SetConfig+0x26c>
 8004332:	e00b      	b.n	800434c <UART_SetConfig+0x278>
 8004334:	2300      	movs	r3, #0
 8004336:	76fb      	strb	r3, [r7, #27]
 8004338:	e00d      	b.n	8004356 <UART_SetConfig+0x282>
 800433a:	2302      	movs	r3, #2
 800433c:	76fb      	strb	r3, [r7, #27]
 800433e:	e00a      	b.n	8004356 <UART_SetConfig+0x282>
 8004340:	2304      	movs	r3, #4
 8004342:	76fb      	strb	r3, [r7, #27]
 8004344:	e007      	b.n	8004356 <UART_SetConfig+0x282>
 8004346:	2308      	movs	r3, #8
 8004348:	76fb      	strb	r3, [r7, #27]
 800434a:	e004      	b.n	8004356 <UART_SetConfig+0x282>
 800434c:	2310      	movs	r3, #16
 800434e:	76fb      	strb	r3, [r7, #27]
 8004350:	e001      	b.n	8004356 <UART_SetConfig+0x282>
 8004352:	2310      	movs	r3, #16
 8004354:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <UART_SetConfig+0x2e4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	f040 8087 	bne.w	8004470 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004362:	7efb      	ldrb	r3, [r7, #27]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d837      	bhi.n	80043d8 <UART_SetConfig+0x304>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x29c>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004395 	.word	0x08004395
 8004374:	080043d9 	.word	0x080043d9
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043d9 	.word	0x080043d9
 8004380:	080043a3 	.word	0x080043a3
 8004384:	080043d9 	.word	0x080043d9
 8004388:	080043d9 	.word	0x080043d9
 800438c:	080043d9 	.word	0x080043d9
 8004390:	080043ab 	.word	0x080043ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004394:	f7fe f95a 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8004398:	6178      	str	r0, [r7, #20]
        break;
 800439a:	e022      	b.n	80043e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800439c:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <UART_SetConfig+0x300>)
 800439e:	617b      	str	r3, [r7, #20]
        break;
 80043a0:	e01f      	b.n	80043e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a2:	f7fe f8bb 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80043a6:	6178      	str	r0, [r7, #20]
        break;
 80043a8:	e01b      	b.n	80043e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ae:	617b      	str	r3, [r7, #20]
        break;
 80043b0:	e017      	b.n	80043e2 <UART_SetConfig+0x30e>
 80043b2:	bf00      	nop
 80043b4:	efff69f3 	.word	0xefff69f3
 80043b8:	40008000 	.word	0x40008000
 80043bc:	40013800 	.word	0x40013800
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40004400 	.word	0x40004400
 80043c8:	40004800 	.word	0x40004800
 80043cc:	40004c00 	.word	0x40004c00
 80043d0:	40005000 	.word	0x40005000
 80043d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	76bb      	strb	r3, [r7, #26]
        break;
 80043e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80f1 	beq.w	80045cc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	4413      	add	r3, r2
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d305      	bcc.n	8004406 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	429a      	cmp	r2, r3
 8004404:	d902      	bls.n	800440c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	76bb      	strb	r3, [r7, #26]
 800440a:	e0df      	b.n	80045cc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4618      	mov	r0, r3
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	020b      	lsls	r3, r1, #8
 800441e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004422:	0202      	lsls	r2, r0, #8
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	6849      	ldr	r1, [r1, #4]
 8004428:	0849      	lsrs	r1, r1, #1
 800442a:	4608      	mov	r0, r1
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	1814      	adds	r4, r2, r0
 8004432:	eb43 0501 	adc.w	r5, r3, r1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	461a      	mov	r2, r3
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	4620      	mov	r0, r4
 8004442:	4629      	mov	r1, r5
 8004444:	f7fc fa22 	bl	800088c <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4613      	mov	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004456:	d308      	bcc.n	800446a <UART_SetConfig+0x396>
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445e:	d204      	bcs.n	800446a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	60da      	str	r2, [r3, #12]
 8004468:	e0b0      	b.n	80045cc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	76bb      	strb	r3, [r7, #26]
 800446e:	e0ad      	b.n	80045cc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004478:	d15c      	bne.n	8004534 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800447a:	7efb      	ldrb	r3, [r7, #27]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d828      	bhi.n	80044d2 <UART_SetConfig+0x3fe>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x3b4>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044bd 	.word	0x080044bd
 8004494:	080044d3 	.word	0x080044d3
 8004498:	080044c3 	.word	0x080044c3
 800449c:	080044d3 	.word	0x080044d3
 80044a0:	080044d3 	.word	0x080044d3
 80044a4:	080044d3 	.word	0x080044d3
 80044a8:	080044cb 	.word	0x080044cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe f8ce 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 80044b0:	6178      	str	r0, [r7, #20]
        break;
 80044b2:	e013      	b.n	80044dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7fe f8e0 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 80044b8:	6178      	str	r0, [r7, #20]
        break;
 80044ba:	e00f      	b.n	80044dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044bc:	4b49      	ldr	r3, [pc, #292]	; (80045e4 <UART_SetConfig+0x510>)
 80044be:	617b      	str	r3, [r7, #20]
        break;
 80044c0:	e00c      	b.n	80044dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c2:	f7fe f82b 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80044c6:	6178      	str	r0, [r7, #20]
        break;
 80044c8:	e008      	b.n	80044dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ce:	617b      	str	r3, [r7, #20]
        break;
 80044d0:	e004      	b.n	80044dc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	76bb      	strb	r3, [r7, #26]
        break;
 80044da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d074      	beq.n	80045cc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	005a      	lsls	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b0f      	cmp	r3, #15
 80044fe:	d916      	bls.n	800452e <UART_SetConfig+0x45a>
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d212      	bcs.n	800452e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f023 030f 	bic.w	r3, r3, #15
 8004510:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	b29b      	uxth	r3, r3
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	b29a      	uxth	r2, r3
 800451e:	89fb      	ldrh	r3, [r7, #14]
 8004520:	4313      	orrs	r3, r2
 8004522:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	89fa      	ldrh	r2, [r7, #14]
 800452a:	60da      	str	r2, [r3, #12]
 800452c:	e04e      	b.n	80045cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	76bb      	strb	r3, [r7, #26]
 8004532:	e04b      	b.n	80045cc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004534:	7efb      	ldrb	r3, [r7, #27]
 8004536:	2b08      	cmp	r3, #8
 8004538:	d827      	bhi.n	800458a <UART_SetConfig+0x4b6>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0x46c>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004565 	.word	0x08004565
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004575 	.word	0x08004575
 800454c:	0800458b 	.word	0x0800458b
 8004550:	0800457b 	.word	0x0800457b
 8004554:	0800458b 	.word	0x0800458b
 8004558:	0800458b 	.word	0x0800458b
 800455c:	0800458b 	.word	0x0800458b
 8004560:	08004583 	.word	0x08004583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7fe f872 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8004568:	6178      	str	r0, [r7, #20]
        break;
 800456a:	e013      	b.n	8004594 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800456c:	f7fe f884 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8004570:	6178      	str	r0, [r7, #20]
        break;
 8004572:	e00f      	b.n	8004594 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <UART_SetConfig+0x510>)
 8004576:	617b      	str	r3, [r7, #20]
        break;
 8004578:	e00c      	b.n	8004594 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457a:	f7fd ffcf 	bl	800251c <HAL_RCC_GetSysClockFreq>
 800457e:	6178      	str	r0, [r7, #20]
        break;
 8004580:	e008      	b.n	8004594 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004586:	617b      	str	r3, [r7, #20]
        break;
 8004588:	e004      	b.n	8004594 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	76bb      	strb	r3, [r7, #26]
        break;
 8004592:	bf00      	nop
    }

    if (pclk != 0U)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d018      	beq.n	80045cc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	085a      	lsrs	r2, r3, #1
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	441a      	add	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b0f      	cmp	r3, #15
 80045b4:	d908      	bls.n	80045c8 <UART_SetConfig+0x4f4>
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d204      	bcs.n	80045c8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	e001      	b.n	80045cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bdb0      	pop	{r4, r5, r7, pc}
 80045e2:	bf00      	nop
 80045e4:	00f42400 	.word	0x00f42400

080045e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01a      	beq.n	80046fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e6:	d10a      	bne.n	80046fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  }
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af02      	add	r7, sp, #8
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800473c:	f7fc feee 	bl	800151c <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b08      	cmp	r3, #8
 800474e:	d10e      	bne.n	800476e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f82d 	bl	80047be <UART_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e023      	b.n	80047b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d10e      	bne.n	800479a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800477c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f817 	bl	80047be <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e00d      	b.n	80047b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	4613      	mov	r3, r2
 80047cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ce:	e05e      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d6:	d05a      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d8:	f7fc fea0 	bl	800151c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d302      	bcc.n	80047ee <UART_WaitOnFlagUntilTimeout+0x30>
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11b      	bne.n	8004826 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e043      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02c      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800483e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004842:	d124      	bne.n	800488e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800484c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800485c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0201 	bic.w	r2, r2, #1
 800486c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e00f      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	bf0c      	ite	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	2300      	movne	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d091      	beq.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80048bc:	4904      	ldr	r1, [pc, #16]	; (80048d0 <MX_FATFS_Init+0x18>)
 80048be:	4805      	ldr	r0, [pc, #20]	; (80048d4 <MX_FATFS_Init+0x1c>)
 80048c0:	f001 fc46 	bl	8006150 <FATFS_LinkDriver>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461a      	mov	r2, r3
 80048c8:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <MX_FATFS_Init+0x20>)
 80048ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20003f78 	.word	0x20003f78
 80048d4:	2000000c 	.word	0x2000000c
 80048d8:	20003f7c 	.word	0x20003f7c

080048dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		//return SD_disk_initialize(pdrv);
		return USER_SPI_initialize(pdrv);
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 f9d9 	bl	8004ca0 <USER_SPI_initialize>
 80048ee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		//return SD_disk_status(pdrv);
		return USER_SPI_status(pdrv);
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fab7 	bl	8004e78 <USER_SPI_status>
 800490a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		//return RES_OK;
    //return SD_disk_read(pdrv, buff, sector, count);
		return USER_SPI_read(pdrv, buff, sector, count);
 8004924:	7bf8      	ldrb	r0, [r7, #15]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	f000 faba 	bl	8004ea4 <USER_SPI_read>
 8004930:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4603      	mov	r3, r0
 8004948:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		//return SD_disk_write(pdrv, buff, sector, count);
		return USER_SPI_write(pdrv, buff, sector, count);
 800494a:	7bf8      	ldrb	r0, [r7, #15]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	f000 fb0d 	bl	8004f70 <USER_SPI_write>
 8004956:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	603a      	str	r2, [r7, #0]
 800496a:	71fb      	strb	r3, [r7, #7]
 800496c:	460b      	mov	r3, r1
 800496e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		//return SD_disk_ioctl(pdrv, cmd, buff);
		return USER_SPI_ioctl(pdrv, cmd, buff);
 8004970:	79b9      	ldrb	r1, [r7, #6]
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fb76 	bl	8005068 <USER_SPI_ioctl>
 800497c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004990:	f7fc fdc4 	bl	800151c <HAL_GetTick>
 8004994:	4603      	mov	r3, r0
 8004996:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <SPI_Timer_On+0x20>)
 8004998:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800499a:	4a04      	ldr	r2, [pc, #16]	; (80049ac <SPI_Timer_On+0x24>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6013      	str	r3, [r2, #0]
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	20005fec 	.word	0x20005fec
 80049ac:	20005ff0 	.word	0x20005ff0

080049b0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80049b4:	f7fc fdb2 	bl	800151c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <SPI_Timer_Status+0x24>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <SPI_Timer_Status+0x28>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	bf34      	ite	cc
 80049c8:	2301      	movcc	r3, #1
 80049ca:	2300      	movcs	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20005fec 	.word	0x20005fec
 80049d8:	20005ff0 	.word	0x20005ff0

080049dc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80049e6:	f107 020f 	add.w	r2, r7, #15
 80049ea:	1df9      	adds	r1, r7, #7
 80049ec:	2332      	movs	r3, #50	; 0x32
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2301      	movs	r3, #1
 80049f2:	4804      	ldr	r0, [pc, #16]	; (8004a04 <xchg_spi+0x28>)
 80049f4:	f7fe fc47 	bl	8003286 <HAL_SPI_TransmitReceive>
    return rxDat;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20002e0c 	.word	0x20002e0c

08004a08 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	e00a      	b.n	8004a2e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	18d4      	adds	r4, r2, r3
 8004a1e:	20ff      	movs	r0, #255	; 0xff
 8004a20:	f7ff ffdc 	bl	80049dc <xchg_spi>
 8004a24:	4603      	mov	r3, r0
 8004a26:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d3f0      	bcc.n	8004a18 <rcvr_spi_multi+0x10>
	}
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd90      	pop	{r4, r7, pc}

08004a40 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e009      	b.n	8004a64 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4413      	add	r3, r2
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ffbf 	bl	80049dc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d3f1      	bcc.n	8004a50 <xmit_spi_multi+0x10>
	}
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004a7e:	f7fc fd4d 	bl	800151c <HAL_GetTick>
 8004a82:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004a88:	20ff      	movs	r0, #255	; 0xff
 8004a8a:	f7ff ffa7 	bl	80049dc <xchg_spi>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2bff      	cmp	r3, #255	; 0xff
 8004a96:	d007      	beq.n	8004aa8 <wait_ready+0x32>
 8004a98:	f7fc fd40 	bl	800151c <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d8ef      	bhi.n	8004a88 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2bff      	cmp	r3, #255	; 0xff
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	4803      	ldr	r0, [pc, #12]	; (8004ad4 <despiselect+0x18>)
 8004ac6:	f7fc ffe5 	bl	8001a94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004aca:	20ff      	movs	r0, #255	; 0xff
 8004acc:	f7ff ff86 	bl	80049dc <xchg_spi>

}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	48000400 	.word	0x48000400

08004ad8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004adc:	2200      	movs	r2, #0
 8004ade:	2101      	movs	r1, #1
 8004ae0:	4809      	ldr	r0, [pc, #36]	; (8004b08 <spiselect+0x30>)
 8004ae2:	f7fc ffd7 	bl	8001a94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004ae6:	20ff      	movs	r0, #255	; 0xff
 8004ae8:	f7ff ff78 	bl	80049dc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004aec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004af0:	f7ff ffc1 	bl	8004a76 <wait_ready>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <spiselect+0x26>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e002      	b.n	8004b04 <spiselect+0x2c>

	despiselect();
 8004afe:	f7ff ffdd 	bl	8004abc <despiselect>
	return 0;	/* Timeout */
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	48000400 	.word	0x48000400

08004b0c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004b16:	20c8      	movs	r0, #200	; 0xc8
 8004b18:	f7ff ff36 	bl	8004988 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004b1c:	20ff      	movs	r0, #255	; 0xff
 8004b1e:	f7ff ff5d 	bl	80049dc <xchg_spi>
 8004b22:	4603      	mov	r3, r0
 8004b24:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2bff      	cmp	r3, #255	; 0xff
 8004b2a:	d104      	bne.n	8004b36 <rcvr_datablock+0x2a>
 8004b2c:	f7ff ff40 	bl	80049b0 <SPI_Timer_Status>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f2      	bne.n	8004b1c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2bfe      	cmp	r3, #254	; 0xfe
 8004b3a:	d001      	beq.n	8004b40 <rcvr_datablock+0x34>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e00a      	b.n	8004b56 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ff60 	bl	8004a08 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004b48:	20ff      	movs	r0, #255	; 0xff
 8004b4a:	f7ff ff47 	bl	80049dc <xchg_spi>
 8004b4e:	20ff      	movs	r0, #255	; 0xff
 8004b50:	f7ff ff44 	bl	80049dc <xchg_spi>

	return 1;						/* Function succeeded */
 8004b54:	2301      	movs	r3, #1
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b6e:	f7ff ff82 	bl	8004a76 <wait_ready>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <xmit_datablock+0x1e>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e01e      	b.n	8004bba <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff ff2c 	bl	80049dc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	2bfd      	cmp	r3, #253	; 0xfd
 8004b88:	d016      	beq.n	8004bb8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff ff56 	bl	8004a40 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004b94:	20ff      	movs	r0, #255	; 0xff
 8004b96:	f7ff ff21 	bl	80049dc <xchg_spi>
 8004b9a:	20ff      	movs	r0, #255	; 0xff
 8004b9c:	f7ff ff1e 	bl	80049dc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004ba0:	20ff      	movs	r0, #255	; 0xff
 8004ba2:	f7ff ff1b 	bl	80049dc <xchg_spi>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2b05      	cmp	r3, #5
 8004bb2:	d001      	beq.n	8004bb8 <xmit_datablock+0x5a>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e000      	b.n	8004bba <xmit_datablock+0x5c>
	}
	return 1;
 8004bb8:	2301      	movs	r3, #1
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	4603      	mov	r3, r0
 8004bca:	6039      	str	r1, [r7, #0]
 8004bcc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da0e      	bge.n	8004bf4 <send_cmd+0x32>
		cmd &= 0x7F;
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bdc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004bde:	2100      	movs	r1, #0
 8004be0:	2037      	movs	r0, #55	; 0x37
 8004be2:	f7ff ffee 	bl	8004bc2 <send_cmd>
 8004be6:	4603      	mov	r3, r0
 8004be8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004bea:	7bbb      	ldrb	r3, [r7, #14]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d901      	bls.n	8004bf4 <send_cmd+0x32>
 8004bf0:	7bbb      	ldrb	r3, [r7, #14]
 8004bf2:	e051      	b.n	8004c98 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	2b0c      	cmp	r3, #12
 8004bf8:	d008      	beq.n	8004c0c <send_cmd+0x4a>
		despiselect();
 8004bfa:	f7ff ff5f 	bl	8004abc <despiselect>
		if (!spiselect()) return 0xFF;
 8004bfe:	f7ff ff6b 	bl	8004ad8 <spiselect>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <send_cmd+0x4a>
 8004c08:	23ff      	movs	r3, #255	; 0xff
 8004c0a:	e045      	b.n	8004c98 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fee1 	bl	80049dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	0e1b      	lsrs	r3, r3, #24
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fedb 	bl	80049dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	0c1b      	lsrs	r3, r3, #16
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fed5 	bl	80049dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fecf 	bl	80049dc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff feca 	bl	80049dc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <send_cmd+0x94>
 8004c52:	2395      	movs	r3, #149	; 0x95
 8004c54:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d101      	bne.n	8004c60 <send_cmd+0x9e>
 8004c5c:	2387      	movs	r3, #135	; 0x87
 8004c5e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff feba 	bl	80049dc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	2b0c      	cmp	r3, #12
 8004c6c:	d102      	bne.n	8004c74 <send_cmd+0xb2>
 8004c6e:	20ff      	movs	r0, #255	; 0xff
 8004c70:	f7ff feb4 	bl	80049dc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004c74:	230a      	movs	r3, #10
 8004c76:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004c78:	20ff      	movs	r0, #255	; 0xff
 8004c7a:	f7ff feaf 	bl	80049dc <xchg_spi>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	da05      	bge.n	8004c96 <send_cmd+0xd4>
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <USER_SPI_initialize+0x14>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0d6      	b.n	8004e62 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004cb4:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <USER_SPI_initialize+0x1cc>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <USER_SPI_initialize+0x2a>
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	; (8004e6c <USER_SPI_initialize+0x1cc>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	e0cb      	b.n	8004e62 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004cca:	4b69      	ldr	r3, [pc, #420]	; (8004e70 <USER_SPI_initialize+0x1d0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004cd4:	4b66      	ldr	r3, [pc, #408]	; (8004e70 <USER_SPI_initialize+0x1d0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004cdc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004cde:	230a      	movs	r3, #10
 8004ce0:	73fb      	strb	r3, [r7, #15]
 8004ce2:	e005      	b.n	8004cf0 <USER_SPI_initialize+0x50>
 8004ce4:	20ff      	movs	r0, #255	; 0xff
 8004ce6:	f7ff fe79 	bl	80049dc <xchg_spi>
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f6      	bne.n	8004ce4 <USER_SPI_initialize+0x44>

	ty = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f7ff ff60 	bl	8004bc2 <send_cmd>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	f040 808b 	bne.w	8004e20 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d0e:	f7ff fe3b 	bl	8004988 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004d12:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d16:	2008      	movs	r0, #8
 8004d18:	f7ff ff53 	bl	8004bc2 <send_cmd>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d151      	bne.n	8004dc6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
 8004d26:	e00d      	b.n	8004d44 <USER_SPI_initialize+0xa4>
 8004d28:	7bfc      	ldrb	r4, [r7, #15]
 8004d2a:	20ff      	movs	r0, #255	; 0xff
 8004d2c:	f7ff fe56 	bl	80049dc <xchg_spi>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461a      	mov	r2, r3
 8004d34:	f107 0310 	add.w	r3, r7, #16
 8004d38:	4423      	add	r3, r4
 8004d3a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	3301      	adds	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d9ee      	bls.n	8004d28 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004d4a:	7abb      	ldrb	r3, [r7, #10]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d167      	bne.n	8004e20 <USER_SPI_initialize+0x180>
 8004d50:	7afb      	ldrb	r3, [r7, #11]
 8004d52:	2baa      	cmp	r3, #170	; 0xaa
 8004d54:	d164      	bne.n	8004e20 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004d56:	bf00      	nop
 8004d58:	f7ff fe2a 	bl	80049b0 <SPI_Timer_Status>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <USER_SPI_initialize+0xd2>
 8004d62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d66:	20a9      	movs	r0, #169	; 0xa9
 8004d68:	f7ff ff2b 	bl	8004bc2 <send_cmd>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f2      	bne.n	8004d58 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004d72:	f7ff fe1d 	bl	80049b0 <SPI_Timer_Status>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d051      	beq.n	8004e20 <USER_SPI_initialize+0x180>
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	203a      	movs	r0, #58	; 0x3a
 8004d80:	f7ff ff1f 	bl	8004bc2 <send_cmd>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d14a      	bne.n	8004e20 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	e00d      	b.n	8004dac <USER_SPI_initialize+0x10c>
 8004d90:	7bfc      	ldrb	r4, [r7, #15]
 8004d92:	20ff      	movs	r0, #255	; 0xff
 8004d94:	f7ff fe22 	bl	80049dc <xchg_spi>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f107 0310 	add.w	r3, r7, #16
 8004da0:	4423      	add	r3, r4
 8004da2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	3301      	adds	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d9ee      	bls.n	8004d90 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004db2:	7a3b      	ldrb	r3, [r7, #8]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <USER_SPI_initialize+0x120>
 8004dbc:	230c      	movs	r3, #12
 8004dbe:	e000      	b.n	8004dc2 <USER_SPI_initialize+0x122>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	737b      	strb	r3, [r7, #13]
 8004dc4:	e02c      	b.n	8004e20 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	20a9      	movs	r0, #169	; 0xa9
 8004dca:	f7ff fefa 	bl	8004bc2 <send_cmd>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d804      	bhi.n	8004dde <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	737b      	strb	r3, [r7, #13]
 8004dd8:	23a9      	movs	r3, #169	; 0xa9
 8004dda:	73bb      	strb	r3, [r7, #14]
 8004ddc:	e003      	b.n	8004de6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004dde:	2301      	movs	r3, #1
 8004de0:	737b      	strb	r3, [r7, #13]
 8004de2:	2301      	movs	r3, #1
 8004de4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004de6:	bf00      	nop
 8004de8:	f7ff fde2 	bl	80049b0 <SPI_Timer_Status>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <USER_SPI_initialize+0x162>
 8004df2:	7bbb      	ldrb	r3, [r7, #14]
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fee3 	bl	8004bc2 <send_cmd>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f2      	bne.n	8004de8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004e02:	f7ff fdd5 	bl	80049b0 <SPI_Timer_Status>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <USER_SPI_initialize+0x17c>
 8004e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e10:	2010      	movs	r0, #16
 8004e12:	f7ff fed6 	bl	8004bc2 <send_cmd>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <USER_SPI_initialize+0x180>
				ty = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004e20:	4a14      	ldr	r2, [pc, #80]	; (8004e74 <USER_SPI_initialize+0x1d4>)
 8004e22:	7b7b      	ldrb	r3, [r7, #13]
 8004e24:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004e26:	f7ff fe49 	bl	8004abc <despiselect>

	if (ty) {			/* OK */
 8004e2a:	7b7b      	ldrb	r3, [r7, #13]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d012      	beq.n	8004e56 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <USER_SPI_initialize+0x1d0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <USER_SPI_initialize+0x1d0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0210 	orr.w	r2, r2, #16
 8004e42:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <USER_SPI_initialize+0x1cc>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <USER_SPI_initialize+0x1cc>)
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e002      	b.n	8004e5c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <USER_SPI_initialize+0x1cc>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <USER_SPI_initialize+0x1cc>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000020 	.word	0x20000020
 8004e70:	20002e0c 	.word	0x20002e0c
 8004e74:	200000ac 	.word	0x200000ac

08004e78 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <USER_SPI_status+0x14>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e002      	b.n	8004e92 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <USER_SPI_status+0x28>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000020 	.word	0x20000020

08004ea4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <USER_SPI_read+0x1c>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <USER_SPI_read+0x20>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	e04d      	b.n	8004f60 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004ec4:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <USER_SPI_read+0xc4>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <USER_SPI_read+0x32>
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e044      	b.n	8004f60 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004ed6:	4b25      	ldr	r3, [pc, #148]	; (8004f6c <USER_SPI_read+0xc8>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <USER_SPI_read+0x44>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	025b      	lsls	r3, r3, #9
 8004ee6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d111      	bne.n	8004f12 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	2011      	movs	r0, #17
 8004ef2:	f7ff fe66 	bl	8004bc2 <send_cmd>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d129      	bne.n	8004f50 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004efc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f00:	68b8      	ldr	r0, [r7, #8]
 8004f02:	f7ff fe03 	bl	8004b0c <rcvr_datablock>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d021      	beq.n	8004f50 <USER_SPI_read+0xac>
			count = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	e01e      	b.n	8004f50 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	2012      	movs	r0, #18
 8004f16:	f7ff fe54 	bl	8004bc2 <send_cmd>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d117      	bne.n	8004f50 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f24:	68b8      	ldr	r0, [r7, #8]
 8004f26:	f7ff fdf1 	bl	8004b0c <rcvr_datablock>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <USER_SPI_read+0xa2>
				buff += 512;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004f36:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ed      	bne.n	8004f20 <USER_SPI_read+0x7c>
 8004f44:	e000      	b.n	8004f48 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004f46:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004f48:	2100      	movs	r1, #0
 8004f4a:	200c      	movs	r0, #12
 8004f4c:	f7ff fe39 	bl	8004bc2 <send_cmd>
		}
	}
	despiselect();
 8004f50:	f7ff fdb4 	bl	8004abc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf14      	ite	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	2300      	moveq	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000020 	.word	0x20000020
 8004f6c:	200000ac 	.word	0x200000ac

08004f70 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <USER_SPI_write+0x1c>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <USER_SPI_write+0x20>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	e063      	b.n	8005058 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004f90:	4b33      	ldr	r3, [pc, #204]	; (8005060 <USER_SPI_write+0xf0>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <USER_SPI_write+0x32>
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e05a      	b.n	8005058 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <USER_SPI_write+0xf0>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <USER_SPI_write+0x44>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e051      	b.n	8005058 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004fb4:	4b2b      	ldr	r3, [pc, #172]	; (8005064 <USER_SPI_write+0xf4>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <USER_SPI_write+0x56>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	025b      	lsls	r3, r3, #9
 8004fc4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d110      	bne.n	8004fee <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	2018      	movs	r0, #24
 8004fd0:	f7ff fdf7 	bl	8004bc2 <send_cmd>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d136      	bne.n	8005048 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004fda:	21fe      	movs	r1, #254	; 0xfe
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f7ff fdbe 	bl	8004b5e <xmit_datablock>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02f      	beq.n	8005048 <USER_SPI_write+0xd8>
			count = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	e02c      	b.n	8005048 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004fee:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <USER_SPI_write+0xf4>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	f003 0306 	and.w	r3, r3, #6
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <USER_SPI_write+0x92>
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	2097      	movs	r0, #151	; 0x97
 8004ffe:	f7ff fde0 	bl	8004bc2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	2019      	movs	r0, #25
 8005006:	f7ff fddc 	bl	8004bc2 <send_cmd>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11b      	bne.n	8005048 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005010:	21fc      	movs	r1, #252	; 0xfc
 8005012:	68b8      	ldr	r0, [r7, #8]
 8005014:	f7ff fda3 	bl	8004b5e <xmit_datablock>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <USER_SPI_write+0xc4>
				buff += 512;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005024:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	3b01      	subs	r3, #1
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ee      	bne.n	8005010 <USER_SPI_write+0xa0>
 8005032:	e000      	b.n	8005036 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005034:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005036:	21fd      	movs	r1, #253	; 0xfd
 8005038:	2000      	movs	r0, #0
 800503a:	f7ff fd90 	bl	8004b5e <xmit_datablock>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <USER_SPI_write+0xd8>
 8005044:	2301      	movs	r3, #1
 8005046:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005048:	f7ff fd38 	bl	8004abc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000020 	.word	0x20000020
 8005064:	200000ac 	.word	0x200000ac

08005068 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08c      	sub	sp, #48	; 0x30
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	603a      	str	r2, [r7, #0]
 8005072:	71fb      	strb	r3, [r7, #7]
 8005074:	460b      	mov	r3, r1
 8005076:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <USER_SPI_ioctl+0x1a>
 800507e:	2304      	movs	r3, #4
 8005080:	e15a      	b.n	8005338 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005082:	4baf      	ldr	r3, [pc, #700]	; (8005340 <USER_SPI_ioctl+0x2d8>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <USER_SPI_ioctl+0x2c>
 8005090:	2303      	movs	r3, #3
 8005092:	e151      	b.n	8005338 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800509a:	79bb      	ldrb	r3, [r7, #6]
 800509c:	2b04      	cmp	r3, #4
 800509e:	f200 8136 	bhi.w	800530e <USER_SPI_ioctl+0x2a6>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <USER_SPI_ioctl+0x40>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050bd 	.word	0x080050bd
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	0800530f 	.word	0x0800530f
 80050b4:	0800517d 	.word	0x0800517d
 80050b8:	08005273 	.word	0x08005273
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80050bc:	f7ff fd0c 	bl	8004ad8 <spiselect>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8127 	beq.w	8005316 <USER_SPI_ioctl+0x2ae>
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80050ce:	e122      	b.n	8005316 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80050d0:	2100      	movs	r1, #0
 80050d2:	2009      	movs	r0, #9
 80050d4:	f7ff fd75 	bl	8004bc2 <send_cmd>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f040 811d 	bne.w	800531a <USER_SPI_ioctl+0x2b2>
 80050e0:	f107 030c 	add.w	r3, r7, #12
 80050e4:	2110      	movs	r1, #16
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fd10 	bl	8004b0c <rcvr_datablock>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8113 	beq.w	800531a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80050f4:	7b3b      	ldrb	r3, [r7, #12]
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d111      	bne.n	8005122 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80050fe:	7d7b      	ldrb	r3, [r7, #21]
 8005100:	461a      	mov	r2, r3
 8005102:	7d3b      	ldrb	r3, [r7, #20]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	4413      	add	r3, r2
 8005108:	461a      	mov	r2, r3
 800510a:	7cfb      	ldrb	r3, [r7, #19]
 800510c:	041b      	lsls	r3, r3, #16
 800510e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005112:	4413      	add	r3, r2
 8005114:	3301      	adds	r3, #1
 8005116:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	029a      	lsls	r2, r3, #10
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e028      	b.n	8005174 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005122:	7c7b      	ldrb	r3, [r7, #17]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	b2da      	uxtb	r2, r3
 800512a:	7dbb      	ldrb	r3, [r7, #22]
 800512c:	09db      	lsrs	r3, r3, #7
 800512e:	b2db      	uxtb	r3, r3
 8005130:	4413      	add	r3, r2
 8005132:	b2da      	uxtb	r2, r3
 8005134:	7d7b      	ldrb	r3, [r7, #21]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f003 0306 	and.w	r3, r3, #6
 800513e:	b2db      	uxtb	r3, r3
 8005140:	4413      	add	r3, r2
 8005142:	b2db      	uxtb	r3, r3
 8005144:	3302      	adds	r3, #2
 8005146:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800514a:	7d3b      	ldrb	r3, [r7, #20]
 800514c:	099b      	lsrs	r3, r3, #6
 800514e:	b2db      	uxtb	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	441a      	add	r2, r3
 8005158:	7cbb      	ldrb	r3, [r7, #18]
 800515a:	029b      	lsls	r3, r3, #10
 800515c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005160:	4413      	add	r3, r2
 8005162:	3301      	adds	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005166:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800516a:	3b09      	subs	r3, #9
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	409a      	lsls	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800517a:	e0ce      	b.n	800531a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800517c:	4b71      	ldr	r3, [pc, #452]	; (8005344 <USER_SPI_ioctl+0x2dc>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d031      	beq.n	80051ec <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005188:	2100      	movs	r1, #0
 800518a:	208d      	movs	r0, #141	; 0x8d
 800518c:	f7ff fd19 	bl	8004bc2 <send_cmd>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	f040 80c3 	bne.w	800531e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005198:	20ff      	movs	r0, #255	; 0xff
 800519a:	f7ff fc1f 	bl	80049dc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800519e:	f107 030c 	add.w	r3, r7, #12
 80051a2:	2110      	movs	r1, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fcb1 	bl	8004b0c <rcvr_datablock>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80b6 	beq.w	800531e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80051b2:	2330      	movs	r3, #48	; 0x30
 80051b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80051b8:	e007      	b.n	80051ca <USER_SPI_ioctl+0x162>
 80051ba:	20ff      	movs	r0, #255	; 0xff
 80051bc:	f7ff fc0e 	bl	80049dc <xchg_spi>
 80051c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051c4:	3b01      	subs	r3, #1
 80051c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80051ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f3      	bne.n	80051ba <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80051d2:	7dbb      	ldrb	r3, [r7, #22]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	2310      	movs	r3, #16
 80051dc:	fa03 f202 	lsl.w	r2, r3, r2
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80051ea:	e098      	b.n	800531e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80051ec:	2100      	movs	r1, #0
 80051ee:	2009      	movs	r0, #9
 80051f0:	f7ff fce7 	bl	8004bc2 <send_cmd>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 8091 	bne.w	800531e <USER_SPI_ioctl+0x2b6>
 80051fc:	f107 030c 	add.w	r3, r7, #12
 8005200:	2110      	movs	r1, #16
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fc82 	bl	8004b0c <rcvr_datablock>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8087 	beq.w	800531e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005210:	4b4c      	ldr	r3, [pc, #304]	; (8005344 <USER_SPI_ioctl+0x2dc>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d012      	beq.n	8005242 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800521c:	7dbb      	ldrb	r3, [r7, #22]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005224:	7dfa      	ldrb	r2, [r7, #23]
 8005226:	09d2      	lsrs	r2, r2, #7
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	4413      	add	r3, r2
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	7e7b      	ldrb	r3, [r7, #25]
 8005230:	099b      	lsrs	r3, r3, #6
 8005232:	b2db      	uxtb	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	461a      	mov	r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	e013      	b.n	800526a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005242:	7dbb      	ldrb	r3, [r7, #22]
 8005244:	109b      	asrs	r3, r3, #2
 8005246:	b29b      	uxth	r3, r3
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	3301      	adds	r3, #1
 800524e:	7dfa      	ldrb	r2, [r7, #23]
 8005250:	00d2      	lsls	r2, r2, #3
 8005252:	f002 0218 	and.w	r2, r2, #24
 8005256:	7df9      	ldrb	r1, [r7, #23]
 8005258:	0949      	lsrs	r1, r1, #5
 800525a:	b2c9      	uxtb	r1, r1
 800525c:	440a      	add	r2, r1
 800525e:	3201      	adds	r2, #1
 8005260:	fb02 f303 	mul.w	r3, r2, r3
 8005264:	461a      	mov	r2, r3
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005270:	e055      	b.n	800531e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005272:	4b34      	ldr	r3, [pc, #208]	; (8005344 <USER_SPI_ioctl+0x2dc>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	f003 0306 	and.w	r3, r3, #6
 800527a:	2b00      	cmp	r3, #0
 800527c:	d051      	beq.n	8005322 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800527e:	f107 020c 	add.w	r2, r7, #12
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	210b      	movs	r1, #11
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff feee 	bl	8005068 <USER_SPI_ioctl>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d149      	bne.n	8005326 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005292:	7b3b      	ldrb	r3, [r7, #12]
 8005294:	099b      	lsrs	r3, r3, #6
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <USER_SPI_ioctl+0x23e>
 800529c:	7dbb      	ldrb	r3, [r7, #22]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d041      	beq.n	800532a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80052b6:	4b23      	ldr	r3, [pc, #140]	; (8005344 <USER_SPI_ioctl+0x2dc>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d105      	bne.n	80052ce <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	025b      	lsls	r3, r3, #9
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	025b      	lsls	r3, r3, #9
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80052ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052d0:	2020      	movs	r0, #32
 80052d2:	f7ff fc76 	bl	8004bc2 <send_cmd>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d128      	bne.n	800532e <USER_SPI_ioctl+0x2c6>
 80052dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052de:	2021      	movs	r0, #33	; 0x21
 80052e0:	f7ff fc6f 	bl	8004bc2 <send_cmd>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d121      	bne.n	800532e <USER_SPI_ioctl+0x2c6>
 80052ea:	2100      	movs	r1, #0
 80052ec:	2026      	movs	r0, #38	; 0x26
 80052ee:	f7ff fc68 	bl	8004bc2 <send_cmd>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d11a      	bne.n	800532e <USER_SPI_ioctl+0x2c6>
 80052f8:	f247 5030 	movw	r0, #30000	; 0x7530
 80052fc:	f7ff fbbb 	bl	8004a76 <wait_ready>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d013      	beq.n	800532e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005306:	2300      	movs	r3, #0
 8005308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800530c:	e00f      	b.n	800532e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800530e:	2304      	movs	r3, #4
 8005310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005314:	e00c      	b.n	8005330 <USER_SPI_ioctl+0x2c8>
		break;
 8005316:	bf00      	nop
 8005318:	e00a      	b.n	8005330 <USER_SPI_ioctl+0x2c8>
		break;
 800531a:	bf00      	nop
 800531c:	e008      	b.n	8005330 <USER_SPI_ioctl+0x2c8>
		break;
 800531e:	bf00      	nop
 8005320:	e006      	b.n	8005330 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005322:	bf00      	nop
 8005324:	e004      	b.n	8005330 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <USER_SPI_ioctl+0x2c8>
		break;
 800532e:	bf00      	nop
	}

	despiselect();
 8005330:	f7ff fbc4 	bl	8004abc <despiselect>

	return res;
 8005334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005338:	4618      	mov	r0, r3
 800533a:	3730      	adds	r7, #48	; 0x30
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000020 	.word	0x20000020
 8005344:	200000ac 	.word	0x200000ac

08005348 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	4a08      	ldr	r2, [pc, #32]	; (8005378 <disk_status+0x30>)
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	79fa      	ldrb	r2, [r7, #7]
 8005360:	4905      	ldr	r1, [pc, #20]	; (8005378 <disk_status+0x30>)
 8005362:	440a      	add	r2, r1
 8005364:	7a12      	ldrb	r2, [r2, #8]
 8005366:	4610      	mov	r0, r2
 8005368:	4798      	blx	r3
 800536a:	4603      	mov	r3, r0
 800536c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	200000d8 	.word	0x200000d8

0800537c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <disk_initialize+0x48>)
 800538e:	5cd3      	ldrb	r3, [r2, r3]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d111      	bne.n	80053b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	4a0b      	ldr	r2, [pc, #44]	; (80053c4 <disk_initialize+0x48>)
 8005398:	2101      	movs	r1, #1
 800539a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <disk_initialize+0x48>)
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	79fa      	ldrb	r2, [r7, #7]
 80053aa:	4906      	ldr	r1, [pc, #24]	; (80053c4 <disk_initialize+0x48>)
 80053ac:	440a      	add	r2, r1
 80053ae:	7a12      	ldrb	r2, [r2, #8]
 80053b0:	4610      	mov	r0, r2
 80053b2:	4798      	blx	r3
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	200000d8 	.word	0x200000d8

080053c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4603      	mov	r3, r0
 80053d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	4a0a      	ldr	r2, [pc, #40]	; (8005404 <disk_read+0x3c>)
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	689c      	ldr	r4, [r3, #8]
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	4a07      	ldr	r2, [pc, #28]	; (8005404 <disk_read+0x3c>)
 80053e8:	4413      	add	r3, r2
 80053ea:	7a18      	ldrb	r0, [r3, #8]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	47a0      	blx	r4
 80053f4:	4603      	mov	r3, r0
 80053f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd90      	pop	{r4, r7, pc}
 8005402:	bf00      	nop
 8005404:	200000d8 	.word	0x200000d8

08005408 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005408:	b590      	push	{r4, r7, lr}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4603      	mov	r3, r0
 8005416:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	4a0a      	ldr	r2, [pc, #40]	; (8005444 <disk_write+0x3c>)
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68dc      	ldr	r4, [r3, #12]
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	4a07      	ldr	r2, [pc, #28]	; (8005444 <disk_write+0x3c>)
 8005428:	4413      	add	r3, r2
 800542a:	7a18      	ldrb	r0, [r3, #8]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	47a0      	blx	r4
 8005434:	4603      	mov	r3, r0
 8005436:	75fb      	strb	r3, [r7, #23]
  return res;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
}
 800543a:	4618      	mov	r0, r3
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	bd90      	pop	{r4, r7, pc}
 8005442:	bf00      	nop
 8005444:	200000d8 	.word	0x200000d8

08005448 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	603a      	str	r2, [r7, #0]
 8005452:	71fb      	strb	r3, [r7, #7]
 8005454:	460b      	mov	r3, r1
 8005456:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	4a09      	ldr	r2, [pc, #36]	; (8005480 <disk_ioctl+0x38>)
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	79fa      	ldrb	r2, [r7, #7]
 8005466:	4906      	ldr	r1, [pc, #24]	; (8005480 <disk_ioctl+0x38>)
 8005468:	440a      	add	r2, r1
 800546a:	7a10      	ldrb	r0, [r2, #8]
 800546c:	79b9      	ldrb	r1, [r7, #6]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	4798      	blx	r3
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]
  return res;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200000d8 	.word	0x200000d8

08005484 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3301      	adds	r3, #1
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005494:	89fb      	ldrh	r3, [r7, #14]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	b21a      	sxth	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	b21b      	sxth	r3, r3
 80054a0:	4313      	orrs	r3, r2
 80054a2:	b21b      	sxth	r3, r3
 80054a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80054a6:	89fb      	ldrh	r3, [r7, #14]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3303      	adds	r3, #3
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	3202      	adds	r2, #2
 80054cc:	7812      	ldrb	r2, [r2, #0]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	3201      	adds	r2, #1
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	7812      	ldrb	r2, [r2, #0]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80054ec:	68fb      	ldr	r3, [r7, #12]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d009      	beq.n	800551c <lock_fs+0x22>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fe55 	bl	80061bc <ff_req_grant>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <lock_fs+0x22>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <lock_fs+0x24>
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <unlock_fs+0x2e>
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	2b0c      	cmp	r3, #12
 800553c:	d00a      	beq.n	8005554 <unlock_fs+0x2e>
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	2b0b      	cmp	r3, #11
 8005542:	d007      	beq.n	8005554 <unlock_fs+0x2e>
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d004      	beq.n	8005554 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fe49 	bl	80061e6 <ff_rel_grant>
	}
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e010      	b.n	800558c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800556a:	4a0d      	ldr	r2, [pc, #52]	; (80055a0 <clear_lock+0x44>)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	4413      	add	r3, r2
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	429a      	cmp	r2, r3
 8005578:	d105      	bne.n	8005586 <clear_lock+0x2a>
 800557a:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <clear_lock+0x44>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	4413      	add	r3, r2
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3301      	adds	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d9eb      	bls.n	800556a <clear_lock+0xe>
	}
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	200000b8 	.word	0x200000b8

080055a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	78db      	ldrb	r3, [r3, #3]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d034      	beq.n	8005622 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	7858      	ldrb	r0, [r3, #1]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80055c8:	2301      	movs	r3, #1
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	f7ff ff1c 	bl	8005408 <disk_write>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <sync_window+0x38>
			res = FR_DISK_ERR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	e022      	b.n	8005622 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	1ad2      	subs	r2, r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d217      	bcs.n	8005622 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	789b      	ldrb	r3, [r3, #2]
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e010      	b.n	800561c <sync_window+0x78>
					wsect += fs->fsize;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4413      	add	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	7858      	ldrb	r0, [r3, #1]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800560e:	2301      	movs	r3, #1
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	f7ff fef9 	bl	8005408 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3b01      	subs	r3, #1
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d8eb      	bhi.n	80055fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d01b      	beq.n	800567c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ffad 	bl	80055a4 <sync_window>
 800564a:	4603      	mov	r3, r0
 800564c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d113      	bne.n	800567c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	7858      	ldrb	r0, [r3, #1]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800565e:	2301      	movs	r3, #1
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	f7ff feb1 	bl	80053c8 <disk_read>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800566c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005670:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b086      	sub	sp, #24
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d904      	bls.n	80056a6 <get_fat+0x20>
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d302      	bcc.n	80056ac <get_fat+0x26>
		val = 1;	/* Internal error */
 80056a6:	2301      	movs	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e0bb      	b.n	8005824 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80056ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	f000 8083 	beq.w	80057c2 <get_fat+0x13c>
 80056bc:	2b03      	cmp	r3, #3
 80056be:	f300 80a7 	bgt.w	8005810 <get_fat+0x18a>
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d002      	beq.n	80056cc <get_fat+0x46>
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d056      	beq.n	8005778 <get_fat+0xf2>
 80056ca:	e0a1      	b.n	8005810 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	899b      	ldrh	r3, [r3, #12]
 80056e2:	4619      	mov	r1, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80056ea:	4413      	add	r3, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	6938      	ldr	r0, [r7, #16]
 80056f0:	f7ff ff9c 	bl	800562c <move_window>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 808d 	bne.w	8005816 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	60fa      	str	r2, [r7, #12]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	8992      	ldrh	r2, [r2, #12]
 8005706:	fbb3 f1f2 	udiv	r1, r3, r2
 800570a:	fb02 f201 	mul.w	r2, r2, r1
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	899b      	ldrh	r3, [r3, #12]
 8005722:	4619      	mov	r1, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	fbb3 f3f1 	udiv	r3, r3, r1
 800572a:	4413      	add	r3, r2
 800572c:	4619      	mov	r1, r3
 800572e:	6938      	ldr	r0, [r7, #16]
 8005730:	f7ff ff7c 	bl	800562c <move_window>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d16f      	bne.n	800581a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	899b      	ldrh	r3, [r3, #12]
 800573e:	461a      	mov	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	fbb3 f1f2 	udiv	r1, r3, r2
 8005746:	fb02 f201 	mul.w	r2, r2, r1
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4413      	add	r3, r2
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	461a      	mov	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <get_fat+0xe8>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	091b      	lsrs	r3, r3, #4
 800576c:	e002      	b.n	8005774 <get_fat+0xee>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005774:	617b      	str	r3, [r7, #20]
			break;
 8005776:	e055      	b.n	8005824 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	899b      	ldrh	r3, [r3, #12]
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	b29b      	uxth	r3, r3
 8005784:	4619      	mov	r1, r3
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	fbb3 f3f1 	udiv	r3, r3, r1
 800578c:	4413      	add	r3, r2
 800578e:	4619      	mov	r1, r3
 8005790:	6938      	ldr	r0, [r7, #16]
 8005792:	f7ff ff4b 	bl	800562c <move_window>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d140      	bne.n	800581e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	8992      	ldrh	r2, [r2, #12]
 80057aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80057ae:	fb02 f200 	mul.w	r2, r2, r0
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	440b      	add	r3, r1
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff fe64 	bl	8005484 <ld_word>
 80057bc:	4603      	mov	r3, r0
 80057be:	617b      	str	r3, [r7, #20]
			break;
 80057c0:	e030      	b.n	8005824 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	899b      	ldrh	r3, [r3, #12]
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	4619      	mov	r1, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80057d6:	4413      	add	r3, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	6938      	ldr	r0, [r7, #16]
 80057dc:	f7ff ff26 	bl	800562c <move_window>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11d      	bne.n	8005822 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	8992      	ldrh	r2, [r2, #12]
 80057f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80057f8:	fb02 f200 	mul.w	r2, r2, r0
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	440b      	add	r3, r1
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fe57 	bl	80054b4 <ld_dword>
 8005806:	4603      	mov	r3, r0
 8005808:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800580c:	617b      	str	r3, [r7, #20]
			break;
 800580e:	e009      	b.n	8005824 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e006      	b.n	8005824 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005816:	bf00      	nop
 8005818:	e004      	b.n	8005824 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800581a:	bf00      	nop
 800581c:	e002      	b.n	8005824 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800581e:	bf00      	nop
 8005820:	e000      	b.n	8005824 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005822:	bf00      	nop
		}
	}

	return val;
 8005824:	697b      	ldr	r3, [r7, #20]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800582e:	b480      	push	{r7}
 8005830:	b087      	sub	sp, #28
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800583a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d031      	beq.n	80058a8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e002      	b.n	8005852 <get_ldnumber+0x24>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	3301      	adds	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b1f      	cmp	r3, #31
 8005858:	d903      	bls.n	8005862 <get_ldnumber+0x34>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b3a      	cmp	r3, #58	; 0x3a
 8005860:	d1f4      	bne.n	800584c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b3a      	cmp	r3, #58	; 0x3a
 8005868:	d11c      	bne.n	80058a4 <get_ldnumber+0x76>
			tp = *path;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	60fa      	str	r2, [r7, #12]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	3b30      	subs	r3, #48	; 0x30
 800587a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b09      	cmp	r3, #9
 8005880:	d80e      	bhi.n	80058a0 <get_ldnumber+0x72>
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	429a      	cmp	r2, r3
 8005888:	d10a      	bne.n	80058a0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d107      	bne.n	80058a0 <get_ldnumber+0x72>
					vol = (int)i;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	3301      	adds	r3, #1
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	e002      	b.n	80058aa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80058a4:	2300      	movs	r3, #0
 80058a6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80058a8:	693b      	ldr	r3, [r7, #16]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	70da      	strb	r2, [r3, #3]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff feaa 	bl	800562c <move_window>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <check_fs+0x2a>
 80058de:	2304      	movs	r3, #4
 80058e0:	e038      	b.n	8005954 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	333c      	adds	r3, #60	; 0x3c
 80058e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fdca 	bl	8005484 <ld_word>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <check_fs+0x48>
 80058fc:	2303      	movs	r3, #3
 80058fe:	e029      	b.n	8005954 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005906:	2be9      	cmp	r3, #233	; 0xe9
 8005908:	d009      	beq.n	800591e <check_fs+0x66>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005910:	2beb      	cmp	r3, #235	; 0xeb
 8005912:	d11e      	bne.n	8005952 <check_fs+0x9a>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800591a:	2b90      	cmp	r3, #144	; 0x90
 800591c:	d119      	bne.n	8005952 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	333c      	adds	r3, #60	; 0x3c
 8005922:	3336      	adds	r3, #54	; 0x36
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff fdc5 	bl	80054b4 <ld_dword>
 800592a:	4603      	mov	r3, r0
 800592c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005930:	4a0a      	ldr	r2, [pc, #40]	; (800595c <check_fs+0xa4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d101      	bne.n	800593a <check_fs+0x82>
 8005936:	2300      	movs	r3, #0
 8005938:	e00c      	b.n	8005954 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	333c      	adds	r3, #60	; 0x3c
 800593e:	3352      	adds	r3, #82	; 0x52
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fdb7 	bl	80054b4 <ld_dword>
 8005946:	4603      	mov	r3, r0
 8005948:	4a05      	ldr	r2, [pc, #20]	; (8005960 <check_fs+0xa8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d101      	bne.n	8005952 <check_fs+0x9a>
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005952:	2302      	movs	r3, #2
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	00544146 	.word	0x00544146
 8005960:	33544146 	.word	0x33544146

08005964 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b096      	sub	sp, #88	; 0x58
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff ff58 	bl	800582e <get_ldnumber>
 800597e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005982:	2b00      	cmp	r3, #0
 8005984:	da01      	bge.n	800598a <find_volume+0x26>
 8005986:	230b      	movs	r3, #11
 8005988:	e26c      	b.n	8005e64 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800598a:	4aa4      	ldr	r2, [pc, #656]	; (8005c1c <find_volume+0x2b8>)
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <find_volume+0x3a>
 800599a:	230c      	movs	r3, #12
 800599c:	e262      	b.n	8005e64 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800599e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059a0:	f7ff fdab 	bl	80054fa <lock_fs>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <find_volume+0x4a>
 80059aa:	230f      	movs	r3, #15
 80059ac:	e25a      	b.n	8005e64 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01a      	beq.n	80059fa <find_volume+0x96>
		stat = disk_status(fs->drv);
 80059c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff fcbd 	bl	8005348 <disk_status>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80059d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10c      	bne.n	80059fa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <find_volume+0x92>
 80059e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80059f2:	230a      	movs	r3, #10
 80059f4:	e236      	b.n	8005e64 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 80059f6:	2300      	movs	r3, #0
 80059f8:	e234      	b.n	8005e64 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a06:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff fcb5 	bl	800537c <disk_initialize>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005a18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a24:	2303      	movs	r3, #3
 8005a26:	e21d      	b.n	8005e64 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <find_volume+0xda>
 8005a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8005a3a:	230a      	movs	r3, #10
 8005a3c:	e212      	b.n	8005e64 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	7858      	ldrb	r0, [r3, #1]
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	330c      	adds	r3, #12
 8005a46:	461a      	mov	r2, r3
 8005a48:	2102      	movs	r1, #2
 8005a4a:	f7ff fcfd 	bl	8005448 <disk_ioctl>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <find_volume+0xf4>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e205      	b.n	8005e64 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	899b      	ldrh	r3, [r3, #12]
 8005a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a60:	d80d      	bhi.n	8005a7e <find_volume+0x11a>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	899b      	ldrh	r3, [r3, #12]
 8005a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a6a:	d308      	bcc.n	8005a7e <find_volume+0x11a>
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	899b      	ldrh	r3, [r3, #12]
 8005a70:	461a      	mov	r2, r3
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	899b      	ldrh	r3, [r3, #12]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <find_volume+0x11e>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e1f0      	b.n	8005e64 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a8a:	f7ff ff15 	bl	80058b8 <check_fs>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d14b      	bne.n	8005b34 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005aa0:	e01f      	b.n	8005ae2 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005ab0:	4413      	add	r3, r2
 8005ab2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d006      	beq.n	8005acc <find_volume+0x168>
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fcf6 	bl	80054b4 <ld_dword>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	e000      	b.n	8005ace <find_volume+0x16a>
 8005acc:	2200      	movs	r2, #0
 8005ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005ad6:	440b      	add	r3, r1
 8005ad8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ade:	3301      	adds	r3, #1
 8005ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d9dc      	bls.n	8005aa2 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005ae8:	2300      	movs	r3, #0
 8005aea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <find_volume+0x194>
 8005af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af4:	3b01      	subs	r3, #1
 8005af6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005b00:	4413      	add	r3, r2
 8005b02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005b06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <find_volume+0x1b6>
 8005b0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b12:	f7ff fed1 	bl	80058b8 <check_fs>
 8005b16:	4603      	mov	r3, r0
 8005b18:	e000      	b.n	8005b1c <find_volume+0x1b8>
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d905      	bls.n	8005b34 <find_volume+0x1d0>
 8005b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d9e1      	bls.n	8005af8 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d101      	bne.n	8005b40 <find_volume+0x1dc>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e191      	b.n	8005e64 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005b40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d901      	bls.n	8005b4c <find_volume+0x1e8>
 8005b48:	230d      	movs	r3, #13
 8005b4a:	e18b      	b.n	8005e64 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	333c      	adds	r3, #60	; 0x3c
 8005b50:	330b      	adds	r3, #11
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff fc96 	bl	8005484 <ld_word>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	899b      	ldrh	r3, [r3, #12]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <find_volume+0x204>
 8005b64:	230d      	movs	r3, #13
 8005b66:	e17d      	b.n	8005e64 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	333c      	adds	r3, #60	; 0x3c
 8005b6c:	3316      	adds	r3, #22
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fc88 	bl	8005484 <ld_word>
 8005b74:	4603      	mov	r3, r0
 8005b76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <find_volume+0x228>
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	333c      	adds	r3, #60	; 0x3c
 8005b82:	3324      	adds	r3, #36	; 0x24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fc95 	bl	80054b4 <ld_dword>
 8005b8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	789b      	ldrb	r3, [r3, #2]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d005      	beq.n	8005bb0 <find_volume+0x24c>
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	789b      	ldrb	r3, [r3, #2]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d001      	beq.n	8005bb0 <find_volume+0x24c>
 8005bac:	230d      	movs	r3, #13
 8005bae:	e159      	b.n	8005e64 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	789b      	ldrb	r3, [r3, #2]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	fb02 f303 	mul.w	r3, r2, r3
 8005bbc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	895b      	ldrh	r3, [r3, #10]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <find_volume+0x280>
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd4:	895b      	ldrh	r3, [r3, #10]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	895b      	ldrh	r3, [r3, #10]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <find_volume+0x284>
 8005be4:	230d      	movs	r3, #13
 8005be6:	e13d      	b.n	8005e64 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	333c      	adds	r3, #60	; 0x3c
 8005bec:	3311      	adds	r3, #17
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fc48 	bl	8005484 <ld_word>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	891b      	ldrh	r3, [r3, #8]
 8005c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c02:	8992      	ldrh	r2, [r2, #12]
 8005c04:	0952      	lsrs	r2, r2, #5
 8005c06:	b292      	uxth	r2, r2
 8005c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c0c:	fb02 f201 	mul.w	r2, r2, r1
 8005c10:	1a9b      	subs	r3, r3, r2
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <find_volume+0x2bc>
 8005c18:	230d      	movs	r3, #13
 8005c1a:	e123      	b.n	8005e64 <find_volume+0x500>
 8005c1c:	200000b0 	.word	0x200000b0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	333c      	adds	r3, #60	; 0x3c
 8005c24:	3313      	adds	r3, #19
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fc2c 	bl	8005484 <ld_word>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <find_volume+0x2e0>
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	333c      	adds	r3, #60	; 0x3c
 8005c3a:	3320      	adds	r3, #32
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fc39 	bl	80054b4 <ld_dword>
 8005c42:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c46:	333c      	adds	r3, #60	; 0x3c
 8005c48:	330e      	adds	r3, #14
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fc1a 	bl	8005484 <ld_word>
 8005c50:	4603      	mov	r3, r0
 8005c52:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005c54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <find_volume+0x2fa>
 8005c5a:	230d      	movs	r3, #13
 8005c5c:	e102      	b.n	8005e64 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005c5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c62:	4413      	add	r3, r2
 8005c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c66:	8911      	ldrh	r1, [r2, #8]
 8005c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c6a:	8992      	ldrh	r2, [r2, #12]
 8005c6c:	0952      	lsrs	r2, r2, #5
 8005c6e:	b292      	uxth	r2, r2
 8005c70:	fbb1 f2f2 	udiv	r2, r1, r2
 8005c74:	b292      	uxth	r2, r2
 8005c76:	4413      	add	r3, r2
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d201      	bcs.n	8005c86 <find_volume+0x322>
 8005c82:	230d      	movs	r3, #13
 8005c84:	e0ee      	b.n	8005e64 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c8e:	8952      	ldrh	r2, [r2, #10]
 8005c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <find_volume+0x33c>
 8005c9c:	230d      	movs	r3, #13
 8005c9e:	e0e1      	b.n	8005e64 <find_volume+0x500>
		fmt = FS_FAT32;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d802      	bhi.n	8005cb6 <find_volume+0x352>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d802      	bhi.n	8005cc6 <find_volume+0x362>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	1c9a      	adds	r2, r3, #2
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cd2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005cd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd8:	441a      	add	r2, r3
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8005cde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	441a      	add	r2, r3
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8005ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d11e      	bne.n	8005d2e <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	333c      	adds	r3, #60	; 0x3c
 8005cf4:	332a      	adds	r3, #42	; 0x2a
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fbc4 	bl	8005484 <ld_word>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <find_volume+0x3a2>
 8005d02:	230d      	movs	r3, #13
 8005d04:	e0ae      	b.n	8005e64 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	891b      	ldrh	r3, [r3, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <find_volume+0x3ae>
 8005d0e:	230d      	movs	r3, #13
 8005d10:	e0a8      	b.n	8005e64 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	333c      	adds	r3, #60	; 0x3c
 8005d16:	332c      	adds	r3, #44	; 0x2c
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fbcb 	bl	80054b4 <ld_dword>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2c:	e01f      	b.n	8005d6e <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	891b      	ldrh	r3, [r3, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <find_volume+0x3d6>
 8005d36:	230d      	movs	r3, #13
 8005d38:	e094      	b.n	8005e64 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	441a      	add	r2, r3
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d103      	bne.n	8005d56 <find_volume+0x3f2>
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	e00a      	b.n	8005d6c <find_volume+0x408>
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	6a1a      	ldr	r2, [r3, #32]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	085a      	lsrs	r2, r3, #1
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005d6c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	899b      	ldrh	r3, [r3, #12]
 8005d76:	4619      	mov	r1, r3
 8005d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7a:	440b      	add	r3, r1
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d80:	8989      	ldrh	r1, [r1, #12]
 8005d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d201      	bcs.n	8005d8e <find_volume+0x42a>
 8005d8a:	230d      	movs	r3, #13
 8005d8c:	e06a      	b.n	8005e64 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d94:	61da      	str	r2, [r3, #28]
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	69da      	ldr	r2, [r3, #28]
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d149      	bne.n	8005e40 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	333c      	adds	r3, #60	; 0x3c
 8005db0:	3330      	adds	r3, #48	; 0x30
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fb66 	bl	8005484 <ld_word>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d140      	bne.n	8005e40 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dc6:	f7ff fc31 	bl	800562c <move_window>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d137      	bne.n	8005e40 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	333c      	adds	r3, #60	; 0x3c
 8005dda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff fb50 	bl	8005484 <ld_word>
 8005de4:	4603      	mov	r3, r0
 8005de6:	461a      	mov	r2, r3
 8005de8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d127      	bne.n	8005e40 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	333c      	adds	r3, #60	; 0x3c
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fb5d 	bl	80054b4 <ld_dword>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	; (8005e6c <find_volume+0x508>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d11e      	bne.n	8005e40 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	333c      	adds	r3, #60	; 0x3c
 8005e06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff fb52 	bl	80054b4 <ld_dword>
 8005e10:	4603      	mov	r3, r0
 8005e12:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <find_volume+0x50c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d113      	bne.n	8005e40 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	333c      	adds	r3, #60	; 0x3c
 8005e1c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff fb47 	bl	80054b4 <ld_dword>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	333c      	adds	r3, #60	; 0x3c
 8005e30:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fb3d 	bl	80054b4 <ld_dword>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <find_volume+0x510>)
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <find_volume+0x510>)
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <find_volume+0x510>)
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005e5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e5e:	f7ff fb7d 	bl	800555c <clear_lock>
#endif
	return FR_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3758      	adds	r7, #88	; 0x58
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	41615252 	.word	0x41615252
 8005e70:	61417272 	.word	0x61417272
 8005e74:	200000b4 	.word	0x200000b4

08005e78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005e8a:	f107 0310 	add.w	r3, r7, #16
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff fccd 	bl	800582e <get_ldnumber>
 8005e94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da01      	bge.n	8005ea0 <f_mount+0x28>
 8005e9c:	230b      	movs	r3, #11
 8005e9e:	e048      	b.n	8005f32 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005ea0:	4a26      	ldr	r2, [pc, #152]	; (8005f3c <f_mount+0xc4>)
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005eb0:	69b8      	ldr	r0, [r7, #24]
 8005eb2:	f7ff fb53 	bl	800555c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f972 	bl	80061a4 <ff_del_syncobj>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <f_mount+0x52>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e033      	b.n	8005f32 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00f      	beq.n	8005ef6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	f000 f941 	bl	800616e <ff_cre_syncobj>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <f_mount+0x7e>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e01d      	b.n	8005f32 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4910      	ldr	r1, [pc, #64]	; (8005f3c <f_mount+0xc4>)
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <f_mount+0x94>
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d001      	beq.n	8005f10 <f_mount+0x98>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e010      	b.n	8005f32 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005f10:	f107 010c 	add.w	r1, r7, #12
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fd22 	bl	8005964 <find_volume>
 8005f20:	4603      	mov	r3, r0
 8005f22:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	7dfa      	ldrb	r2, [r7, #23]
 8005f28:	4611      	mov	r1, r2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fafb 	bl	8005526 <unlock_fs>
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3720      	adds	r7, #32
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	200000b0 	.word	0x200000b0

08005f40 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b092      	sub	sp, #72	; 0x48
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005f4c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005f50:	f107 030c 	add.w	r3, r7, #12
 8005f54:	2200      	movs	r2, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fd04 	bl	8005964 <find_volume>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005f62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 8099 	bne.w	800609e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	3b02      	subs	r3, #2
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d804      	bhi.n	8005f8a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e089      	b.n	800609e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d128      	bne.n	8005fe8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005f96:	2302      	movs	r3, #2
 8005f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005f9e:	f107 0314 	add.w	r3, r7, #20
 8005fa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fb6e 	bl	8005686 <get_fat>
 8005faa:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fb2:	d103      	bne.n	8005fbc <f_getfree+0x7c>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005fba:	e063      	b.n	8006084 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d103      	bne.n	8005fca <f_getfree+0x8a>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005fc8:	e05c      	b.n	8006084 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <f_getfree+0x96>
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd8:	3301      	adds	r3, #1
 8005fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3db      	bcc.n	8005f9e <f_getfree+0x5e>
 8005fe6:	e04d      	b.n	8006084 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d113      	bne.n	800602a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	63ba      	str	r2, [r7, #56]	; 0x38
 800600a:	4619      	mov	r1, r3
 800600c:	f7ff fb0e 	bl	800562c <move_window>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006016:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800601a:	2b00      	cmp	r3, #0
 800601c:	d131      	bne.n	8006082 <f_getfree+0x142>
							p = fs->win;
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	333c      	adds	r3, #60	; 0x3c
 8006022:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	899b      	ldrh	r3, [r3, #12]
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d10f      	bne.n	8006052 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006034:	f7ff fa26 	bl	8005484 <ld_word>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <f_getfree+0x104>
 800603e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006040:	3301      	adds	r3, #1
 8006042:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	3302      	adds	r3, #2
 8006048:	633b      	str	r3, [r7, #48]	; 0x30
 800604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604c:	3b02      	subs	r3, #2
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
 8006050:	e010      	b.n	8006074 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006054:	f7ff fa2e 	bl	80054b4 <ld_dword>
 8006058:	4603      	mov	r3, r0
 800605a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d102      	bne.n	8006068 <f_getfree+0x128>
 8006062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006064:	3301      	adds	r3, #1
 8006066:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	3304      	adds	r3, #4
 800606c:	633b      	str	r3, [r7, #48]	; 0x30
 800606e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006070:	3b04      	subs	r3, #4
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	3b01      	subs	r3, #1
 8006078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800607a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1bd      	bne.n	8005ffc <f_getfree+0xbc>
 8006080:	e000      	b.n	8006084 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006082:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006088:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800608e:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	791a      	ldrb	r2, [r3, #4]
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80060a4:	4611      	mov	r1, r2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fa3d 	bl	8005526 <unlock_fs>
 80060ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3748      	adds	r7, #72	; 0x48
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80060ce:	4b1f      	ldr	r3, [pc, #124]	; (800614c <FATFS_LinkDriverEx+0x94>)
 80060d0:	7a5b      	ldrb	r3, [r3, #9]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d131      	bne.n	800613c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80060d8:	4b1c      	ldr	r3, [pc, #112]	; (800614c <FATFS_LinkDriverEx+0x94>)
 80060da:	7a5b      	ldrb	r3, [r3, #9]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	4b1a      	ldr	r3, [pc, #104]	; (800614c <FATFS_LinkDriverEx+0x94>)
 80060e2:	2100      	movs	r1, #0
 80060e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80060e6:	4b19      	ldr	r3, [pc, #100]	; (800614c <FATFS_LinkDriverEx+0x94>)
 80060e8:	7a5b      	ldrb	r3, [r3, #9]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <FATFS_LinkDriverEx+0x94>)
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <FATFS_LinkDriverEx+0x94>)
 80060f8:	7a5b      	ldrb	r3, [r3, #9]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <FATFS_LinkDriverEx+0x94>)
 8006100:	4413      	add	r3, r2
 8006102:	79fa      	ldrb	r2, [r7, #7]
 8006104:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <FATFS_LinkDriverEx+0x94>)
 8006108:	7a5b      	ldrb	r3, [r3, #9]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	b2d1      	uxtb	r1, r2
 8006110:	4a0e      	ldr	r2, [pc, #56]	; (800614c <FATFS_LinkDriverEx+0x94>)
 8006112:	7251      	strb	r1, [r2, #9]
 8006114:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006116:	7dbb      	ldrb	r3, [r7, #22]
 8006118:	3330      	adds	r3, #48	; 0x30
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	3301      	adds	r3, #1
 8006124:	223a      	movs	r2, #58	; 0x3a
 8006126:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	3302      	adds	r3, #2
 800612c:	222f      	movs	r2, #47	; 0x2f
 800612e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	3303      	adds	r3, #3
 8006134:	2200      	movs	r2, #0
 8006136:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800613c:	7dfb      	ldrb	r3, [r7, #23]
}
 800613e:	4618      	mov	r0, r3
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	200000d8 	.word	0x200000d8

08006150 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800615a:	2200      	movs	r2, #0
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff ffaa 	bl	80060b8 <FATFS_LinkDriverEx>
 8006164:	4603      	mov	r3, r0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	4603      	mov	r3, r0
 8006176:	6039      	str	r1, [r7, #0]
 8006178:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800617a:	2200      	movs	r2, #0
 800617c:	2101      	movs	r1, #1
 800617e:	2001      	movs	r0, #1
 8006180:	f000 f977 	bl	8006472 <osSemaphoreNew>
 8006184:	4602      	mov	r2, r0
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf14      	ite	ne
 8006192:	2301      	movne	r3, #1
 8006194:	2300      	moveq	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	60fb      	str	r3, [r7, #12]

    return ret;
 800619a:	68fb      	ldr	r3, [r7, #12]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fa7f 	bl	80066b0 <osSemaphoreDelete>
#endif
    return 1;
 80061b2:	2301      	movs	r3, #1
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80061c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f9d9 	bl	8006584 <osSemaphoreAcquire>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80061d8:	2301      	movs	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80061dc:	68fb      	ldr	r3, [r7, #12]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa1a 	bl	8006628 <osSemaphoreRelease>
#endif
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <__NVIC_SetPriority>:
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	6039      	str	r1, [r7, #0]
 8006206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620c:	2b00      	cmp	r3, #0
 800620e:	db0a      	blt.n	8006226 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	490c      	ldr	r1, [pc, #48]	; (8006248 <__NVIC_SetPriority+0x4c>)
 8006216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621a:	0112      	lsls	r2, r2, #4
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	440b      	add	r3, r1
 8006220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006224:	e00a      	b.n	800623c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	b2da      	uxtb	r2, r3
 800622a:	4908      	ldr	r1, [pc, #32]	; (800624c <__NVIC_SetPriority+0x50>)
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	3b04      	subs	r3, #4
 8006234:	0112      	lsls	r2, r2, #4
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	440b      	add	r3, r1
 800623a:	761a      	strb	r2, [r3, #24]
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	e000e100 	.word	0xe000e100
 800624c:	e000ed00 	.word	0xe000ed00

08006250 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <SysTick_Handler+0x1c>)
 8006256:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006258:	f002 f962 	bl	8008520 <xTaskGetSchedulerState>
 800625c:	4603      	mov	r3, r0
 800625e:	2b01      	cmp	r3, #1
 8006260:	d001      	beq.n	8006266 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006262:	f003 f849 	bl	80092f8 <xPortSysTickHandler>
  }
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	e000e010 	.word	0xe000e010

08006270 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006274:	2100      	movs	r1, #0
 8006276:	f06f 0004 	mvn.w	r0, #4
 800627a:	f7ff ffbf 	bl	80061fc <__NVIC_SetPriority>
#endif
}
 800627e:	bf00      	nop
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800628a:	f3ef 8305 	mrs	r3, IPSR
 800628e:	603b      	str	r3, [r7, #0]
  return(result);
 8006290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006296:	f06f 0305 	mvn.w	r3, #5
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	e00c      	b.n	80062b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800629e:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <osKernelInitialize+0x44>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d105      	bne.n	80062b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <osKernelInitialize+0x44>)
 80062a8:	2201      	movs	r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	607b      	str	r3, [r7, #4]
 80062b0:	e002      	b.n	80062b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062b8:	687b      	ldr	r3, [r7, #4]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	200000e4 	.word	0x200000e4

080062cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d2:	f3ef 8305 	mrs	r3, IPSR
 80062d6:	603b      	str	r3, [r7, #0]
  return(result);
 80062d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80062de:	f06f 0305 	mvn.w	r3, #5
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	e010      	b.n	8006308 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <osKernelStart+0x48>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d109      	bne.n	8006302 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062ee:	f7ff ffbf 	bl	8006270 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062f2:	4b08      	ldr	r3, [pc, #32]	; (8006314 <osKernelStart+0x48>)
 80062f4:	2202      	movs	r2, #2
 80062f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062f8:	f001 fcca 	bl	8007c90 <vTaskStartScheduler>
      stat = osOK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	607b      	str	r3, [r7, #4]
 8006300:	e002      	b.n	8006308 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006306:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006308:	687b      	ldr	r3, [r7, #4]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	200000e4 	.word	0x200000e4

08006318 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b08e      	sub	sp, #56	; 0x38
 800631c:	af04      	add	r7, sp, #16
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006328:	f3ef 8305 	mrs	r3, IPSR
 800632c:	617b      	str	r3, [r7, #20]
  return(result);
 800632e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006330:	2b00      	cmp	r3, #0
 8006332:	d17e      	bne.n	8006432 <osThreadNew+0x11a>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d07b      	beq.n	8006432 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800633a:	2380      	movs	r3, #128	; 0x80
 800633c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800633e:	2318      	movs	r3, #24
 8006340:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800634a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d045      	beq.n	80063de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <osThreadNew+0x48>
        name = attr->name;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <osThreadNew+0x6e>
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	2b38      	cmp	r3, #56	; 0x38
 8006378:	d805      	bhi.n	8006386 <osThreadNew+0x6e>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <osThreadNew+0x72>
        return (NULL);
 8006386:	2300      	movs	r3, #0
 8006388:	e054      	b.n	8006434 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	089b      	lsrs	r3, r3, #2
 8006398:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00e      	beq.n	80063c0 <osThreadNew+0xa8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	2b5b      	cmp	r3, #91	; 0x5b
 80063a8:	d90a      	bls.n	80063c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d006      	beq.n	80063c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <osThreadNew+0xa8>
        mem = 1;
 80063ba:	2301      	movs	r3, #1
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	e010      	b.n	80063e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10c      	bne.n	80063e2 <osThreadNew+0xca>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <osThreadNew+0xca>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <osThreadNew+0xca>
          mem = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	e001      	b.n	80063e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d110      	bne.n	800640a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063f0:	9202      	str	r2, [sp, #8]
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f001 fa70 	bl	80078e4 <xTaskCreateStatic>
 8006404:	4603      	mov	r3, r0
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e013      	b.n	8006432 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d110      	bne.n	8006432 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	b29a      	uxth	r2, r3
 8006414:	f107 0310 	add.w	r3, r7, #16
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f001 fabb 	bl	800799e <xTaskCreate>
 8006428:	4603      	mov	r3, r0
 800642a:	2b01      	cmp	r3, #1
 800642c:	d001      	beq.n	8006432 <osThreadNew+0x11a>
            hTask = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006432:	693b      	ldr	r3, [r7, #16]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3728      	adds	r7, #40	; 0x28
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006444:	f3ef 8305 	mrs	r3, IPSR
 8006448:	60bb      	str	r3, [r7, #8]
  return(result);
 800644a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <osDelay+0x1c>
    stat = osErrorISR;
 8006450:	f06f 0305 	mvn.w	r3, #5
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	e007      	b.n	8006468 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 fbe0 	bl	8007c28 <vTaskDelay>
    }
  }

  return (stat);
 8006468:	68fb      	ldr	r3, [r7, #12]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006472:	b580      	push	{r7, lr}
 8006474:	b08a      	sub	sp, #40	; 0x28
 8006476:	af02      	add	r7, sp, #8
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006482:	f3ef 8305 	mrs	r3, IPSR
 8006486:	613b      	str	r3, [r7, #16]
  return(result);
 8006488:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800648a:	2b00      	cmp	r3, #0
 800648c:	d175      	bne.n	800657a <osSemaphoreNew+0x108>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d072      	beq.n	800657a <osSemaphoreNew+0x108>
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	429a      	cmp	r2, r3
 800649a:	d86e      	bhi.n	800657a <osSemaphoreNew+0x108>
    mem = -1;
 800649c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d015      	beq.n	80064d4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d006      	beq.n	80064be <osSemaphoreNew+0x4c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b4f      	cmp	r3, #79	; 0x4f
 80064b6:	d902      	bls.n	80064be <osSemaphoreNew+0x4c>
        mem = 1;
 80064b8:	2301      	movs	r3, #1
 80064ba:	61bb      	str	r3, [r7, #24]
 80064bc:	e00c      	b.n	80064d8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d108      	bne.n	80064d8 <osSemaphoreNew+0x66>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <osSemaphoreNew+0x66>
          mem = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
 80064d2:	e001      	b.n	80064d8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064de:	d04c      	beq.n	800657a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d128      	bne.n	8006538 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10a      	bne.n	8006502 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2203      	movs	r2, #3
 80064f2:	9200      	str	r2, [sp, #0]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2100      	movs	r1, #0
 80064f8:	2001      	movs	r0, #1
 80064fa:	f000 fa4d 	bl	8006998 <xQueueGenericCreateStatic>
 80064fe:	61f8      	str	r0, [r7, #28]
 8006500:	e005      	b.n	800650e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006502:	2203      	movs	r2, #3
 8006504:	2100      	movs	r1, #0
 8006506:	2001      	movs	r0, #1
 8006508:	f000 fabe 	bl	8006a88 <xQueueGenericCreate>
 800650c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d022      	beq.n	800655a <osSemaphoreNew+0xe8>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01f      	beq.n	800655a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800651a:	2300      	movs	r3, #0
 800651c:	2200      	movs	r2, #0
 800651e:	2100      	movs	r1, #0
 8006520:	69f8      	ldr	r0, [r7, #28]
 8006522:	f000 fb79 	bl	8006c18 <xQueueGenericSend>
 8006526:	4603      	mov	r3, r0
 8006528:	2b01      	cmp	r3, #1
 800652a:	d016      	beq.n	800655a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800652c:	69f8      	ldr	r0, [r7, #28]
 800652e:	f001 f805 	bl	800753c <vQueueDelete>
            hSemaphore = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	e010      	b.n	800655a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d108      	bne.n	8006550 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	461a      	mov	r2, r3
 8006544:	68b9      	ldr	r1, [r7, #8]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fafb 	bl	8006b42 <xQueueCreateCountingSemaphoreStatic>
 800654c:	61f8      	str	r0, [r7, #28]
 800654e:	e004      	b.n	800655a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fb2c 	bl	8006bb0 <xQueueCreateCountingSemaphore>
 8006558:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00c      	beq.n	800657a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <osSemaphoreNew+0xfc>
          name = attr->name;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e001      	b.n	8006572 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006572:	6979      	ldr	r1, [r7, #20]
 8006574:	69f8      	ldr	r0, [r7, #28]
 8006576:	f001 f92d 	bl	80077d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800657a:	69fb      	ldr	r3, [r7, #28]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3720      	adds	r7, #32
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006592:	2300      	movs	r3, #0
 8006594:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800659c:	f06f 0303 	mvn.w	r3, #3
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e039      	b.n	8006618 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a4:	f3ef 8305 	mrs	r3, IPSR
 80065a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80065aa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d022      	beq.n	80065f6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80065b6:	f06f 0303 	mvn.w	r3, #3
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e02c      	b.n	8006618 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80065be:	2300      	movs	r3, #0
 80065c0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80065c2:	f107 0308 	add.w	r3, r7, #8
 80065c6:	461a      	mov	r2, r3
 80065c8:	2100      	movs	r1, #0
 80065ca:	6938      	ldr	r0, [r7, #16]
 80065cc:	f000 ff36 	bl	800743c <xQueueReceiveFromISR>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d003      	beq.n	80065de <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80065d6:	f06f 0302 	mvn.w	r3, #2
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e01c      	b.n	8006618 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d019      	beq.n	8006618 <osSemaphoreAcquire+0x94>
 80065e4:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <osSemaphoreAcquire+0xa0>)
 80065e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	e010      	b.n	8006618 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6938      	ldr	r0, [r7, #16]
 80065fa:	f000 fe13 	bl	8007224 <xQueueSemaphoreTake>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d009      	beq.n	8006618 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800660a:	f06f 0301 	mvn.w	r3, #1
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	e002      	b.n	8006618 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006612:	f06f 0302 	mvn.w	r3, #2
 8006616:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006618:	697b      	ldr	r3, [r7, #20]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800663e:	f06f 0303 	mvn.w	r3, #3
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e02c      	b.n	80066a0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006646:	f3ef 8305 	mrs	r3, IPSR
 800664a:	60fb      	str	r3, [r7, #12]
  return(result);
 800664c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01a      	beq.n	8006688 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006656:	f107 0308 	add.w	r3, r7, #8
 800665a:	4619      	mov	r1, r3
 800665c:	6938      	ldr	r0, [r7, #16]
 800665e:	f000 fc74 	bl	8006f4a <xQueueGiveFromISR>
 8006662:	4603      	mov	r3, r0
 8006664:	2b01      	cmp	r3, #1
 8006666:	d003      	beq.n	8006670 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006668:	f06f 0302 	mvn.w	r3, #2
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e017      	b.n	80066a0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d014      	beq.n	80066a0 <osSemaphoreRelease+0x78>
 8006676:	4b0d      	ldr	r3, [pc, #52]	; (80066ac <osSemaphoreRelease+0x84>)
 8006678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	e00b      	b.n	80066a0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006688:	2300      	movs	r3, #0
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	6938      	ldr	r0, [r7, #16]
 8006690:	f000 fac2 	bl	8006c18 <xQueueGenericSend>
 8006694:	4603      	mov	r3, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	d002      	beq.n	80066a0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800669a:	f06f 0302 	mvn.w	r3, #2
 800669e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80066a0:	697b      	ldr	r3, [r7, #20]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066bc:	f3ef 8305 	mrs	r3, IPSR
 80066c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80066c2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80066c8:	f06f 0305 	mvn.w	r3, #5
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	e00e      	b.n	80066ee <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80066d6:	f06f 0303 	mvn.w	r3, #3
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e007      	b.n	80066ee <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80066de:	6938      	ldr	r0, [r7, #16]
 80066e0:	f001 f8a2 	bl	8007828 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80066e8:	6938      	ldr	r0, [r7, #16]
 80066ea:	f000 ff27 	bl	800753c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80066ee:	697b      	ldr	r3, [r7, #20]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4a07      	ldr	r2, [pc, #28]	; (8006724 <vApplicationGetIdleTaskMemory+0x2c>)
 8006708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4a06      	ldr	r2, [pc, #24]	; (8006728 <vApplicationGetIdleTaskMemory+0x30>)
 800670e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	601a      	str	r2, [r3, #0]
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	200000e8 	.word	0x200000e8
 8006728:	20000144 	.word	0x20000144

0800672c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a07      	ldr	r2, [pc, #28]	; (8006758 <vApplicationGetTimerTaskMemory+0x2c>)
 800673c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4a06      	ldr	r2, [pc, #24]	; (800675c <vApplicationGetTimerTaskMemory+0x30>)
 8006742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800674a:	601a      	str	r2, [r3, #0]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	20000344 	.word	0x20000344
 800675c:	200003a0 	.word	0x200003a0

08006760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f103 0208 	add.w	r2, r3, #8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f103 0208 	add.w	r2, r3, #8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f103 0208 	add.w	r2, r3, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006818:	d103      	bne.n	8006822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e00c      	b.n	800683c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3308      	adds	r3, #8
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e002      	b.n	8006830 <vListInsert+0x2e>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	429a      	cmp	r2, r3
 800683a:	d2f6      	bcs.n	800682a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]
}
 8006868:	bf00      	nop
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6892      	ldr	r2, [r2, #8]
 800688a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6852      	ldr	r2, [r2, #4]
 8006894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d103      	bne.n	80068a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	1e5a      	subs	r2, r3, #1
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068f2:	f002 fc6f 	bl	80091d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	441a      	add	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	3b01      	subs	r3, #1
 8006924:	68f9      	ldr	r1, [r7, #12]
 8006926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	441a      	add	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	22ff      	movs	r2, #255	; 0xff
 8006936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	22ff      	movs	r2, #255	; 0xff
 800693e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d114      	bne.n	8006972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01a      	beq.n	8006986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3310      	adds	r3, #16
 8006954:	4618      	mov	r0, r3
 8006956:	f001 fc25 	bl	80081a4 <xTaskRemoveFromEventList>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d012      	beq.n	8006986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006960:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <xQueueGenericReset+0xcc>)
 8006962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	e009      	b.n	8006986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3310      	adds	r3, #16
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fef2 	bl	8006760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3324      	adds	r3, #36	; 0x24
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff feed 	bl	8006760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006986:	f002 fc55 	bl	8009234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800698a:	2301      	movs	r3, #1
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	e000ed04 	.word	0xe000ed04

08006998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08e      	sub	sp, #56	; 0x38
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <xQueueGenericCreateStatic+0x52>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <xQueueGenericCreateStatic+0x56>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <xQueueGenericCreateStatic+0x58>
 80069ee:	2300      	movs	r3, #0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	623b      	str	r3, [r7, #32]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <xQueueGenericCreateStatic+0x7e>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <xQueueGenericCreateStatic+0x82>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <xQueueGenericCreateStatic+0x84>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	61fb      	str	r3, [r7, #28]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a36:	2350      	movs	r3, #80	; 0x50
 8006a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b50      	cmp	r3, #80	; 0x50
 8006a3e:	d00a      	beq.n	8006a56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	61bb      	str	r3, [r7, #24]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	4613      	mov	r3, r2
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f83f 	bl	8006afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3730      	adds	r7, #48	; 0x30
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	; 0x28
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	613b      	str	r3, [r7, #16]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	3350      	adds	r3, #80	; 0x50
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f002 fca9 	bl	8009418 <pvPortMalloc>
 8006ac6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d011      	beq.n	8006af2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	3350      	adds	r3, #80	; 0x50
 8006ad6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ae0:	79fa      	ldrb	r2, [r7, #7]
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f805 	bl	8006afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006af2:	69bb      	ldr	r3, [r7, #24]
	}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	e002      	b.n	8006b1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	69b8      	ldr	r0, [r7, #24]
 8006b2e:	f7ff fecb 	bl	80068c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	78fa      	ldrb	r2, [r7, #3]
 8006b36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b3a:	bf00      	nop
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b08a      	sub	sp, #40	; 0x28
 8006b46:	af02      	add	r7, sp, #8
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	61bb      	str	r3, [r7, #24]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d90a      	bls.n	8006b88 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	617b      	str	r3, [r7, #20]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b88:	2302      	movs	r3, #2
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff ff00 	bl	8006998 <xQueueGenericCreateStatic>
 8006b98:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
	}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	613b      	str	r3, [r7, #16]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d90a      	bls.n	8006bf4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	60fb      	str	r3, [r7, #12]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff45 	bl	8006a88 <xQueueGenericCreate>
 8006bfe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006c0c:	697b      	ldr	r3, [r7, #20]
	}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08e      	sub	sp, #56	; 0x38
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c26:	2300      	movs	r3, #0
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <xQueueGenericSend+0x32>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <xQueueGenericSend+0x40>
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <xQueueGenericSend+0x44>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <xQueueGenericSend+0x46>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <xQueueGenericSend+0x60>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d103      	bne.n	8006c86 <xQueueGenericSend+0x6e>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <xQueueGenericSend+0x72>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <xQueueGenericSend+0x74>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	623b      	str	r3, [r7, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ca6:	f001 fc3b 	bl	8008520 <xTaskGetSchedulerState>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <xQueueGenericSend+0x9e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <xQueueGenericSend+0xa2>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <xQueueGenericSend+0xa4>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10a      	bne.n	8006cd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	61fb      	str	r3, [r7, #28]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cd6:	f002 fa7d 	bl	80091d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d302      	bcc.n	8006cec <xQueueGenericSend+0xd4>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d129      	bne.n	8006d40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cf2:	f000 fc5e 	bl	80075b2 <prvCopyDataToQueue>
 8006cf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d010      	beq.n	8006d22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 fa4d 	bl	80081a4 <xTaskRemoveFromEventList>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d013      	beq.n	8006d38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d10:	4b3f      	ldr	r3, [pc, #252]	; (8006e10 <xQueueGenericSend+0x1f8>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	e00a      	b.n	8006d38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d28:	4b39      	ldr	r3, [pc, #228]	; (8006e10 <xQueueGenericSend+0x1f8>)
 8006d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d38:	f002 fa7c 	bl	8009234 <vPortExitCritical>
				return pdPASS;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e063      	b.n	8006e08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d46:	f002 fa75 	bl	8009234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	e05c      	b.n	8006e08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d106      	bne.n	8006d62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d54:	f107 0314 	add.w	r3, r7, #20
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 fa87 	bl	800826c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d62:	f002 fa67 	bl	8009234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d66:	f000 fff9 	bl	8007d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d6a:	f002 fa33 	bl	80091d4 <vPortEnterCritical>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d74:	b25b      	sxtb	r3, r3
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d7a:	d103      	bne.n	8006d84 <xQueueGenericSend+0x16c>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d8a:	b25b      	sxtb	r3, r3
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d90:	d103      	bne.n	8006d9a <xQueueGenericSend+0x182>
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d9a:	f002 fa4b 	bl	8009234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d9e:	1d3a      	adds	r2, r7, #4
 8006da0:	f107 0314 	add.w	r3, r7, #20
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fa76 	bl	8008298 <xTaskCheckForTimeOut>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d124      	bne.n	8006dfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006db4:	f000 fcf5 	bl	80077a2 <prvIsQueueFull>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d018      	beq.n	8006df0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	3310      	adds	r3, #16
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 f99c 	bl	8008104 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dce:	f000 fc80 	bl	80076d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dd2:	f000 ffd1 	bl	8007d78 <xTaskResumeAll>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f47f af7c 	bne.w	8006cd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <xQueueGenericSend+0x1f8>)
 8006de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	e772      	b.n	8006cd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df2:	f000 fc6e 	bl	80076d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006df6:	f000 ffbf 	bl	8007d78 <xTaskResumeAll>
 8006dfa:	e76c      	b.n	8006cd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dfe:	f000 fc68 	bl	80076d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e02:	f000 ffb9 	bl	8007d78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3738      	adds	r7, #56	; 0x38
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b090      	sub	sp, #64	; 0x40
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d103      	bne.n	8006e50 <xQueueGenericSendFromISR+0x3c>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <xQueueGenericSendFromISR+0x40>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <xQueueGenericSendFromISR+0x42>
 8006e54:	2300      	movs	r3, #0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d103      	bne.n	8006e7e <xQueueGenericSendFromISR+0x6a>
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <xQueueGenericSendFromISR+0x6e>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <xQueueGenericSendFromISR+0x70>
 8006e82:	2300      	movs	r3, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	623b      	str	r3, [r7, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e9e:	f002 fa7b 	bl	8009398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	61fa      	str	r2, [r7, #28]
 8006eb8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006eba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d302      	bcc.n	8006ed0 <xQueueGenericSendFromISR+0xbc>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d12f      	bne.n	8006f30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	68b9      	ldr	r1, [r7, #8]
 8006ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ee6:	f000 fb64 	bl	80075b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006eea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef2:	d112      	bne.n	8006f1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d016      	beq.n	8006f2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	3324      	adds	r3, #36	; 0x24
 8006f00:	4618      	mov	r0, r3
 8006f02:	f001 f94f 	bl	80081a4 <xTaskRemoveFromEventList>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00e      	beq.n	8006f2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	e007      	b.n	8006f2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f1e:	3301      	adds	r3, #1
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	b25a      	sxtb	r2, r3
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f2e:	e001      	b.n	8006f34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3740      	adds	r7, #64	; 0x40
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b08e      	sub	sp, #56	; 0x38
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	623b      	str	r3, [r7, #32]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	61fb      	str	r3, [r7, #28]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d103      	bne.n	8006fa2 <xQueueGiveFromISR+0x58>
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <xQueueGiveFromISR+0x5c>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <xQueueGiveFromISR+0x5e>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	61bb      	str	r3, [r7, #24]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fc2:	f002 f9e9 	bl	8009398 <vPortValidateInterruptPriority>
	__asm volatile
 8006fc6:	f3ef 8211 	mrs	r2, BASEPRI
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	617a      	str	r2, [r7, #20]
 8006fdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006fde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d22b      	bcs.n	800704a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007004:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800700c:	d112      	bne.n	8007034 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	d016      	beq.n	8007044 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	3324      	adds	r3, #36	; 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f001 f8c2 	bl	80081a4 <xTaskRemoveFromEventList>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00e      	beq.n	8007044 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2201      	movs	r2, #1
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e007      	b.n	8007044 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007038:	3301      	adds	r3, #1
 800703a:	b2db      	uxtb	r3, r3
 800703c:	b25a      	sxtb	r2, r3
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007044:	2301      	movs	r3, #1
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
 8007048:	e001      	b.n	800704e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800704a:	2300      	movs	r3, #0
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f383 8811 	msr	BASEPRI, r3
}
 8007058:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800705c:	4618      	mov	r0, r3
 800705e:	3738      	adds	r7, #56	; 0x38
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08c      	sub	sp, #48	; 0x30
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007070:	2300      	movs	r3, #0
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <xQueueReceive+0x30>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	623b      	str	r3, [r7, #32]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <xQueueReceive+0x3e>
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <xQueueReceive+0x42>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <xQueueReceive+0x44>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xQueueReceive+0x5e>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	61fb      	str	r3, [r7, #28]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070c2:	f001 fa2d 	bl	8008520 <xTaskGetSchedulerState>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <xQueueReceive+0x6e>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <xQueueReceive+0x72>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <xQueueReceive+0x74>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <xQueueReceive+0x8e>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	61bb      	str	r3, [r7, #24]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070f2:	f002 f86f 	bl	80091d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01f      	beq.n	8007142 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007102:	68b9      	ldr	r1, [r7, #8]
 8007104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007106:	f000 fabe 	bl	8007686 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	1e5a      	subs	r2, r3, #1
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00f      	beq.n	800713a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	3310      	adds	r3, #16
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f840 	bl	80081a4 <xTaskRemoveFromEventList>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d007      	beq.n	800713a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800712a:	4b3d      	ldr	r3, [pc, #244]	; (8007220 <xQueueReceive+0x1bc>)
 800712c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800713a:	f002 f87b 	bl	8009234 <vPortExitCritical>
				return pdPASS;
 800713e:	2301      	movs	r3, #1
 8007140:	e069      	b.n	8007216 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d103      	bne.n	8007150 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007148:	f002 f874 	bl	8009234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800714c:	2300      	movs	r3, #0
 800714e:	e062      	b.n	8007216 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007156:	f107 0310 	add.w	r3, r7, #16
 800715a:	4618      	mov	r0, r3
 800715c:	f001 f886 	bl	800826c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007160:	2301      	movs	r3, #1
 8007162:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007164:	f002 f866 	bl	8009234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007168:	f000 fdf8 	bl	8007d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800716c:	f002 f832 	bl	80091d4 <vPortEnterCritical>
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007176:	b25b      	sxtb	r3, r3
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800717c:	d103      	bne.n	8007186 <xQueueReceive+0x122>
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800718c:	b25b      	sxtb	r3, r3
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007192:	d103      	bne.n	800719c <xQueueReceive+0x138>
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800719c:	f002 f84a 	bl	8009234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071a0:	1d3a      	adds	r2, r7, #4
 80071a2:	f107 0310 	add.w	r3, r7, #16
 80071a6:	4611      	mov	r1, r2
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 f875 	bl	8008298 <xTaskCheckForTimeOut>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d123      	bne.n	80071fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b6:	f000 fade 	bl	8007776 <prvIsQueueEmpty>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d017      	beq.n	80071f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	3324      	adds	r3, #36	; 0x24
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4611      	mov	r1, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 ff9b 	bl	8008104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d0:	f000 fa7f 	bl	80076d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071d4:	f000 fdd0 	bl	8007d78 <xTaskResumeAll>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d189      	bne.n	80070f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <xQueueReceive+0x1bc>)
 80071e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	e780      	b.n	80070f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f2:	f000 fa6e 	bl	80076d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071f6:	f000 fdbf 	bl	8007d78 <xTaskResumeAll>
 80071fa:	e77a      	b.n	80070f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071fe:	f000 fa68 	bl	80076d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007202:	f000 fdb9 	bl	8007d78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007208:	f000 fab5 	bl	8007776 <prvIsQueueEmpty>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	f43f af6f 	beq.w	80070f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007214:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007216:	4618      	mov	r0, r3
 8007218:	3730      	adds	r7, #48	; 0x30
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08e      	sub	sp, #56	; 0x38
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800722e:	2300      	movs	r3, #0
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007236:	2300      	movs	r3, #0
 8007238:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10a      	bne.n	8007256 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	623b      	str	r3, [r7, #32]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	61fb      	str	r3, [r7, #28]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007274:	f001 f954 	bl	8008520 <xTaskGetSchedulerState>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <xQueueSemaphoreTake+0x60>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <xQueueSemaphoreTake+0x64>
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <xQueueSemaphoreTake+0x66>
 8007288:	2300      	movs	r3, #0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	61bb      	str	r3, [r7, #24]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072a4:	f001 ff96 	bl	80091d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d024      	beq.n	80072fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	1e5a      	subs	r2, r3, #1
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d104      	bne.n	80072ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80072c4:	f001 faa2 	bl	800880c <pvTaskIncrementMutexHeldCount>
 80072c8:	4602      	mov	r2, r0
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00f      	beq.n	80072f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	3310      	adds	r3, #16
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 ff62 	bl	80081a4 <xTaskRemoveFromEventList>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072e6:	4b54      	ldr	r3, [pc, #336]	; (8007438 <xQueueSemaphoreTake+0x214>)
 80072e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072f6:	f001 ff9d 	bl	8009234 <vPortExitCritical>
				return pdPASS;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e097      	b.n	800742e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d111      	bne.n	8007328 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	617b      	str	r3, [r7, #20]
}
 800731c:	bf00      	nop
 800731e:	e7fe      	b.n	800731e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007320:	f001 ff88 	bl	8009234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007324:	2300      	movs	r3, #0
 8007326:	e082      	b.n	800742e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732a:	2b00      	cmp	r3, #0
 800732c:	d106      	bne.n	800733c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800732e:	f107 030c 	add.w	r3, r7, #12
 8007332:	4618      	mov	r0, r3
 8007334:	f000 ff9a 	bl	800826c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007338:	2301      	movs	r3, #1
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800733c:	f001 ff7a 	bl	8009234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007340:	f000 fd0c 	bl	8007d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007344:	f001 ff46 	bl	80091d4 <vPortEnterCritical>
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800734e:	b25b      	sxtb	r3, r3
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007354:	d103      	bne.n	800735e <xQueueSemaphoreTake+0x13a>
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007364:	b25b      	sxtb	r3, r3
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800736a:	d103      	bne.n	8007374 <xQueueSemaphoreTake+0x150>
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007374:	f001 ff5e 	bl	8009234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007378:	463a      	mov	r2, r7
 800737a:	f107 030c 	add.w	r3, r7, #12
 800737e:	4611      	mov	r1, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f000 ff89 	bl	8008298 <xTaskCheckForTimeOut>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d132      	bne.n	80073f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800738c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800738e:	f000 f9f2 	bl	8007776 <prvIsQueueEmpty>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d026      	beq.n	80073e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d109      	bne.n	80073b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80073a0:	f001 ff18 	bl	80091d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 f8d7 	bl	800855c <xTaskPriorityInherit>
 80073ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80073b0:	f001 ff40 	bl	8009234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	3324      	adds	r3, #36	; 0x24
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	4611      	mov	r1, r2
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fea1 	bl	8008104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073c4:	f000 f985 	bl	80076d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073c8:	f000 fcd6 	bl	8007d78 <xTaskResumeAll>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f47f af68 	bne.w	80072a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80073d4:	4b18      	ldr	r3, [pc, #96]	; (8007438 <xQueueSemaphoreTake+0x214>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	e75e      	b.n	80072a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80073e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073e8:	f000 f973 	bl	80076d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073ec:	f000 fcc4 	bl	8007d78 <xTaskResumeAll>
 80073f0:	e758      	b.n	80072a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073f4:	f000 f96d 	bl	80076d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073f8:	f000 fcbe 	bl	8007d78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073fe:	f000 f9ba 	bl	8007776 <prvIsQueueEmpty>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	f43f af4d 	beq.w	80072a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00d      	beq.n	800742c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007410:	f001 fee0 	bl	80091d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007416:	f000 f8b4 	bl	8007582 <prvGetDisinheritPriorityAfterTimeout>
 800741a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007422:	4618      	mov	r0, r3
 8007424:	f001 f970 	bl	8008708 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007428:	f001 ff04 	bl	8009234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800742c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800742e:	4618      	mov	r0, r3
 8007430:	3738      	adds	r7, #56	; 0x38
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	e000ed04 	.word	0xe000ed04

0800743c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08e      	sub	sp, #56	; 0x38
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	623b      	str	r3, [r7, #32]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <xQueueReceiveFromISR+0x3a>
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <xQueueReceiveFromISR+0x3e>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <xQueueReceiveFromISR+0x40>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	61fb      	str	r3, [r7, #28]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007496:	f001 ff7f 	bl	8009398 <vPortValidateInterruptPriority>
	__asm volatile
 800749a:	f3ef 8211 	mrs	r2, BASEPRI
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	61ba      	str	r2, [r7, #24]
 80074b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80074b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d02f      	beq.n	8007522 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074d0:	f000 f8d9 	bl	8007686 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	1e5a      	subs	r2, r3, #1
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80074dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074e4:	d112      	bne.n	800750c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d016      	beq.n	800751c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	3310      	adds	r3, #16
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fe56 	bl	80081a4 <xTaskRemoveFromEventList>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00e      	beq.n	800751c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e007      	b.n	800751c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800750c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007510:	3301      	adds	r3, #1
 8007512:	b2db      	uxtb	r3, r3
 8007514:	b25a      	sxtb	r2, r3
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800751c:	2301      	movs	r3, #1
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
 8007520:	e001      	b.n	8007526 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	613b      	str	r3, [r7, #16]
	__asm volatile
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f383 8811 	msr	BASEPRI, r3
}
 8007530:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007534:	4618      	mov	r0, r3
 8007536:	3738      	adds	r7, #56	; 0x38
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <vQueueDelete+0x28>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60bb      	str	r3, [r7, #8]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f95f 	bl	8007828 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f002 f81b 	bl	80095b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	d006      	beq.n	80075a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	e001      	b.n	80075a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80075a4:	68fb      	ldr	r3, [r7, #12]
	}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10d      	bne.n	80075ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d14d      	bne.n	8007674 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 f825 	bl	800862c <xTaskPriorityDisinherit>
 80075e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
 80075ea:	e043      	b.n	8007674 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d119      	bne.n	8007626 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6858      	ldr	r0, [r3, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	461a      	mov	r2, r3
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	f002 f91f 	bl	8009840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	441a      	add	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	429a      	cmp	r2, r3
 800761a:	d32b      	bcc.n	8007674 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	605a      	str	r2, [r3, #4]
 8007624:	e026      	b.n	8007674 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	68d8      	ldr	r0, [r3, #12]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	461a      	mov	r2, r3
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	f002 f905 	bl	8009840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	425b      	negs	r3, r3
 8007640:	441a      	add	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d207      	bcs.n	8007662 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	425b      	negs	r3, r3
 800765c:	441a      	add	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d105      	bne.n	8007674 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3b01      	subs	r3, #1
 8007672:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800767c:	697b      	ldr	r3, [r7, #20]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d018      	beq.n	80076ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	441a      	add	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d303      	bcc.n	80076ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68d9      	ldr	r1, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	461a      	mov	r2, r3
 80076c4:	6838      	ldr	r0, [r7, #0]
 80076c6:	f002 f8bb 	bl	8009840 <memcpy>
	}
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076da:	f001 fd7b 	bl	80091d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076e6:	e011      	b.n	800770c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d012      	beq.n	8007716 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3324      	adds	r3, #36	; 0x24
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fd55 	bl	80081a4 <xTaskRemoveFromEventList>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007700:	f000 fe2c 	bl	800835c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	3b01      	subs	r3, #1
 8007708:	b2db      	uxtb	r3, r3
 800770a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800770c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007710:	2b00      	cmp	r3, #0
 8007712:	dce9      	bgt.n	80076e8 <prvUnlockQueue+0x16>
 8007714:	e000      	b.n	8007718 <prvUnlockQueue+0x46>
					break;
 8007716:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	22ff      	movs	r2, #255	; 0xff
 800771c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007720:	f001 fd88 	bl	8009234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007724:	f001 fd56 	bl	80091d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800772e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007730:	e011      	b.n	8007756 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d012      	beq.n	8007760 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3310      	adds	r3, #16
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fd30 	bl	80081a4 <xTaskRemoveFromEventList>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800774a:	f000 fe07 	bl	800835c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	3b01      	subs	r3, #1
 8007752:	b2db      	uxtb	r3, r3
 8007754:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007756:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800775a:	2b00      	cmp	r3, #0
 800775c:	dce9      	bgt.n	8007732 <prvUnlockQueue+0x60>
 800775e:	e000      	b.n	8007762 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007760:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	22ff      	movs	r2, #255	; 0xff
 8007766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800776a:	f001 fd63 	bl	8009234 <vPortExitCritical>
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800777e:	f001 fd29 	bl	80091d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800778a:	2301      	movs	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e001      	b.n	8007794 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007794:	f001 fd4e 	bl	8009234 <vPortExitCritical>

	return xReturn;
 8007798:	68fb      	ldr	r3, [r7, #12]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077aa:	f001 fd13 	bl	80091d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d102      	bne.n	80077c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077ba:	2301      	movs	r3, #1
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	e001      	b.n	80077c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077c4:	f001 fd36 	bl	8009234 <vPortExitCritical>

	return xReturn;
 80077c8:	68fb      	ldr	r3, [r7, #12]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	e014      	b.n	800780e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077e4:	4a0f      	ldr	r2, [pc, #60]	; (8007824 <vQueueAddToRegistry+0x50>)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10b      	bne.n	8007808 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077f0:	490c      	ldr	r1, [pc, #48]	; (8007824 <vQueueAddToRegistry+0x50>)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077fa:	4a0a      	ldr	r2, [pc, #40]	; (8007824 <vQueueAddToRegistry+0x50>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	4413      	add	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007806:	e006      	b.n	8007816 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b07      	cmp	r3, #7
 8007812:	d9e7      	bls.n	80077e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20005ff4 	.word	0x20005ff4

08007828 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e016      	b.n	8007864 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007836:	4a10      	ldr	r2, [pc, #64]	; (8007878 <vQueueUnregisterQueue+0x50>)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4413      	add	r3, r2
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	429a      	cmp	r2, r3
 8007844:	d10b      	bne.n	800785e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007846:	4a0c      	ldr	r2, [pc, #48]	; (8007878 <vQueueUnregisterQueue+0x50>)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2100      	movs	r1, #0
 800784c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007850:	4a09      	ldr	r2, [pc, #36]	; (8007878 <vQueueUnregisterQueue+0x50>)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	4413      	add	r3, r2
 8007858:	2200      	movs	r2, #0
 800785a:	605a      	str	r2, [r3, #4]
				break;
 800785c:	e006      	b.n	800786c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b07      	cmp	r3, #7
 8007868:	d9e5      	bls.n	8007836 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800786a:	bf00      	nop
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	20005ff4 	.word	0x20005ff4

0800787c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800788c:	f001 fca2 	bl	80091d4 <vPortEnterCritical>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007896:	b25b      	sxtb	r3, r3
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800789c:	d103      	bne.n	80078a6 <vQueueWaitForMessageRestricted+0x2a>
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078b2:	d103      	bne.n	80078bc <vQueueWaitForMessageRestricted+0x40>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078bc:	f001 fcba 	bl	8009234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d106      	bne.n	80078d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fc3b 	bl	800814c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078d6:	6978      	ldr	r0, [r7, #20]
 80078d8:	f7ff fefb 	bl	80076d2 <prvUnlockQueue>
	}
 80078dc:	bf00      	nop
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08e      	sub	sp, #56	; 0x38
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <xTaskCreateStatic+0x2a>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	623b      	str	r3, [r7, #32]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <xTaskCreateStatic+0x46>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	61fb      	str	r3, [r7, #28]
}
 8007926:	bf00      	nop
 8007928:	e7fe      	b.n	8007928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800792a:	235c      	movs	r3, #92	; 0x5c
 800792c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b5c      	cmp	r3, #92	; 0x5c
 8007932:	d00a      	beq.n	800794a <xTaskCreateStatic+0x66>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	61bb      	str	r3, [r7, #24]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800794a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	2b00      	cmp	r3, #0
 8007950:	d01e      	beq.n	8007990 <xTaskCreateStatic+0xac>
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01b      	beq.n	8007990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	2202      	movs	r2, #2
 8007966:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800796a:	2300      	movs	r3, #0
 800796c:	9303      	str	r3, [sp, #12]
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	9302      	str	r3, [sp, #8]
 8007972:	f107 0314 	add.w	r3, r7, #20
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f850 	bl	8007a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800798a:	f000 f8dd 	bl	8007b48 <prvAddNewTaskToReadyList>
 800798e:	e001      	b.n	8007994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007994:	697b      	ldr	r3, [r7, #20]
	}
 8007996:	4618      	mov	r0, r3
 8007998:	3728      	adds	r7, #40	; 0x28
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b08c      	sub	sp, #48	; 0x30
 80079a2:	af04      	add	r7, sp, #16
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	603b      	str	r3, [r7, #0]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fd30 	bl	8009418 <pvPortMalloc>
 80079b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00e      	beq.n	80079de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079c0:	205c      	movs	r0, #92	; 0x5c
 80079c2:	f001 fd29 	bl	8009418 <pvPortMalloc>
 80079c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30
 80079d4:	e005      	b.n	80079e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079d6:	6978      	ldr	r0, [r7, #20]
 80079d8:	f001 fdea 	bl	80095b0 <vPortFree>
 80079dc:	e001      	b.n	80079e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d017      	beq.n	8007a18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	2300      	movs	r3, #0
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	9302      	str	r3, [sp, #8]
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f80e 	bl	8007a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a0c:	69f8      	ldr	r0, [r7, #28]
 8007a0e:	f000 f89b 	bl	8007b48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a12:	2301      	movs	r3, #1
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	e002      	b.n	8007a1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3720      	adds	r7, #32
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	461a      	mov	r2, r3
 8007a40:	21a5      	movs	r1, #165	; 0xa5
 8007a42:	f001 ff0b 	bl	800985c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a50:	3b01      	subs	r3, #1
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	f023 0307 	bic.w	r3, r3, #7
 8007a5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	617b      	str	r3, [r7, #20]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01f      	beq.n	8007ac6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	e012      	b.n	8007ab2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	4413      	add	r3, r2
 8007a92:	7819      	ldrb	r1, [r3, #0]
 8007a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	4413      	add	r3, r2
 8007a9a:	3334      	adds	r3, #52	; 0x34
 8007a9c:	460a      	mov	r2, r1
 8007a9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d006      	beq.n	8007aba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61fb      	str	r3, [r7, #28]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	2b0f      	cmp	r3, #15
 8007ab6:	d9e9      	bls.n	8007a8c <prvInitialiseNewTask+0x64>
 8007ab8:	e000      	b.n	8007abc <prvInitialiseNewTask+0x94>
			{
				break;
 8007aba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ac4:	e003      	b.n	8007ace <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	2b37      	cmp	r3, #55	; 0x37
 8007ad2:	d901      	bls.n	8007ad8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ad4:	2337      	movs	r3, #55	; 0x37
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007adc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	3304      	adds	r3, #4
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fe56 	bl	80067a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	3318      	adds	r3, #24
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe fe51 	bl	80067a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	2200      	movs	r2, #0
 8007b18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	68f9      	ldr	r1, [r7, #12]
 8007b26:	69b8      	ldr	r0, [r7, #24]
 8007b28:	f001 fa26 	bl	8008f78 <pxPortInitialiseStack>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b3e:	bf00      	nop
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b50:	f001 fb40 	bl	80091d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b54:	4b2d      	ldr	r3, [pc, #180]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b5e:	4b2c      	ldr	r3, [pc, #176]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b66:	4a2a      	ldr	r2, [pc, #168]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b6c:	4b27      	ldr	r3, [pc, #156]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d110      	bne.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b74:	f000 fc16 	bl	80083a4 <prvInitialiseTaskLists>
 8007b78:	e00d      	b.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b7a:	4b26      	ldr	r3, [pc, #152]	; (8007c14 <prvAddNewTaskToReadyList+0xcc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b82:	4b23      	ldr	r3, [pc, #140]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d802      	bhi.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b90:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007b9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ba0:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <prvAddNewTaskToReadyList+0xd4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d903      	bls.n	8007bbc <prvAddNewTaskToReadyList+0x74>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a18      	ldr	r2, [pc, #96]	; (8007c1c <prvAddNewTaskToReadyList+0xd4>)
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <prvAddNewTaskToReadyList+0xd8>)
 8007bca:	441a      	add	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f7fe fdf1 	bl	80067ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bd8:	f001 fb2c 	bl	8009234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <prvAddNewTaskToReadyList+0xcc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d207      	bcs.n	8007c02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <prvAddNewTaskToReadyList+0xdc>)
 8007bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000c74 	.word	0x20000c74
 8007c10:	200007a0 	.word	0x200007a0
 8007c14:	20000c80 	.word	0x20000c80
 8007c18:	20000c90 	.word	0x20000c90
 8007c1c:	20000c7c 	.word	0x20000c7c
 8007c20:	200007a4 	.word	0x200007a4
 8007c24:	e000ed04 	.word	0xe000ed04

08007c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d017      	beq.n	8007c6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c3a:	4b13      	ldr	r3, [pc, #76]	; (8007c88 <vTaskDelay+0x60>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <vTaskDelay+0x30>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	60bb      	str	r3, [r7, #8]
}
 8007c54:	bf00      	nop
 8007c56:	e7fe      	b.n	8007c56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c58:	f000 f880 	bl	8007d5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fde8 	bl	8008834 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c64:	f000 f888 	bl	8007d78 <xTaskResumeAll>
 8007c68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d107      	bne.n	8007c80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c70:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <vTaskDelay+0x64>)
 8007c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20000c9c 	.word	0x20000c9c
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c9e:	463a      	mov	r2, r7
 8007ca0:	1d39      	adds	r1, r7, #4
 8007ca2:	f107 0308 	add.w	r3, r7, #8
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fd26 	bl	80066f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	9202      	str	r2, [sp, #8]
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	460a      	mov	r2, r1
 8007cbe:	4921      	ldr	r1, [pc, #132]	; (8007d44 <vTaskStartScheduler+0xb4>)
 8007cc0:	4821      	ldr	r0, [pc, #132]	; (8007d48 <vTaskStartScheduler+0xb8>)
 8007cc2:	f7ff fe0f 	bl	80078e4 <xTaskCreateStatic>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <vTaskStartScheduler+0xbc>)
 8007cca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ccc:	4b1f      	ldr	r3, [pc, #124]	; (8007d4c <vTaskStartScheduler+0xbc>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	e001      	b.n	8007cde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d102      	bne.n	8007cea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ce4:	f000 fdfa 	bl	80088dc <xTimerCreateTimerTask>
 8007ce8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d116      	bne.n	8007d1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	613b      	str	r3, [r7, #16]
}
 8007d02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d04:	4b12      	ldr	r3, [pc, #72]	; (8007d50 <vTaskStartScheduler+0xc0>)
 8007d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d0c:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <vTaskStartScheduler+0xc4>)
 8007d0e:	2201      	movs	r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <vTaskStartScheduler+0xc8>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d18:	f001 f9ba 	bl	8009090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d1c:	e00e      	b.n	8007d3c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d24:	d10a      	bne.n	8007d3c <vTaskStartScheduler+0xac>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60fb      	str	r3, [r7, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <vTaskStartScheduler+0xaa>
}
 8007d3c:	bf00      	nop
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	0800aca4 	.word	0x0800aca4
 8007d48:	08008375 	.word	0x08008375
 8007d4c:	20000c98 	.word	0x20000c98
 8007d50:	20000c94 	.word	0x20000c94
 8007d54:	20000c80 	.word	0x20000c80
 8007d58:	20000c78 	.word	0x20000c78

08007d5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d60:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <vTaskSuspendAll+0x18>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3301      	adds	r3, #1
 8007d66:	4a03      	ldr	r2, [pc, #12]	; (8007d74 <vTaskSuspendAll+0x18>)
 8007d68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d6a:	bf00      	nop
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	20000c9c 	.word	0x20000c9c

08007d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d86:	4b42      	ldr	r3, [pc, #264]	; (8007e90 <xTaskResumeAll+0x118>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	603b      	str	r3, [r7, #0]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007da4:	f001 fa16 	bl	80091d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007da8:	4b39      	ldr	r3, [pc, #228]	; (8007e90 <xTaskResumeAll+0x118>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	4a38      	ldr	r2, [pc, #224]	; (8007e90 <xTaskResumeAll+0x118>)
 8007db0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db2:	4b37      	ldr	r3, [pc, #220]	; (8007e90 <xTaskResumeAll+0x118>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d162      	bne.n	8007e80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dba:	4b36      	ldr	r3, [pc, #216]	; (8007e94 <xTaskResumeAll+0x11c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d05e      	beq.n	8007e80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dc2:	e02f      	b.n	8007e24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc4:	4b34      	ldr	r3, [pc, #208]	; (8007e98 <xTaskResumeAll+0x120>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3318      	adds	r3, #24
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe fd4f 	bl	8006874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fd4a 	bl	8006874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	4b2d      	ldr	r3, [pc, #180]	; (8007e9c <xTaskResumeAll+0x124>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d903      	bls.n	8007df4 <xTaskResumeAll+0x7c>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	4a2a      	ldr	r2, [pc, #168]	; (8007e9c <xTaskResumeAll+0x124>)
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4a27      	ldr	r2, [pc, #156]	; (8007ea0 <xTaskResumeAll+0x128>)
 8007e02:	441a      	add	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f7fe fcd5 	bl	80067ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4b23      	ldr	r3, [pc, #140]	; (8007ea4 <xTaskResumeAll+0x12c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d302      	bcc.n	8007e24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e1e:	4b22      	ldr	r3, [pc, #136]	; (8007ea8 <xTaskResumeAll+0x130>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e24:	4b1c      	ldr	r3, [pc, #112]	; (8007e98 <xTaskResumeAll+0x120>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1cb      	bne.n	8007dc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e32:	f000 fb55 	bl	80084e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e36:	4b1d      	ldr	r3, [pc, #116]	; (8007eac <xTaskResumeAll+0x134>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d010      	beq.n	8007e64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e42:	f000 f847 	bl	8007ed4 <xTaskIncrementTick>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e4c:	4b16      	ldr	r3, [pc, #88]	; (8007ea8 <xTaskResumeAll+0x130>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1f1      	bne.n	8007e42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <xTaskResumeAll+0x134>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e64:	4b10      	ldr	r3, [pc, #64]	; (8007ea8 <xTaskResumeAll+0x130>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <xTaskResumeAll+0x138>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e80:	f001 f9d8 	bl	8009234 <vPortExitCritical>

	return xAlreadyYielded;
 8007e84:	68bb      	ldr	r3, [r7, #8]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000c9c 	.word	0x20000c9c
 8007e94:	20000c74 	.word	0x20000c74
 8007e98:	20000c34 	.word	0x20000c34
 8007e9c:	20000c7c 	.word	0x20000c7c
 8007ea0:	200007a4 	.word	0x200007a4
 8007ea4:	200007a0 	.word	0x200007a0
 8007ea8:	20000c88 	.word	0x20000c88
 8007eac:	20000c84 	.word	0x20000c84
 8007eb0:	e000ed04 	.word	0xe000ed04

08007eb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007eba:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <xTaskGetTickCount+0x1c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ec0:	687b      	ldr	r3, [r7, #4]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20000c78 	.word	0x20000c78

08007ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ede:	4b4f      	ldr	r3, [pc, #316]	; (800801c <xTaskIncrementTick+0x148>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f040 808f 	bne.w	8008006 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ee8:	4b4d      	ldr	r3, [pc, #308]	; (8008020 <xTaskIncrementTick+0x14c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3301      	adds	r3, #1
 8007eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ef0:	4a4b      	ldr	r2, [pc, #300]	; (8008020 <xTaskIncrementTick+0x14c>)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d120      	bne.n	8007f3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007efc:	4b49      	ldr	r3, [pc, #292]	; (8008024 <xTaskIncrementTick+0x150>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <xTaskIncrementTick+0x48>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	603b      	str	r3, [r7, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <xTaskIncrementTick+0x46>
 8007f1c:	4b41      	ldr	r3, [pc, #260]	; (8008024 <xTaskIncrementTick+0x150>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	4b41      	ldr	r3, [pc, #260]	; (8008028 <xTaskIncrementTick+0x154>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a3f      	ldr	r2, [pc, #252]	; (8008024 <xTaskIncrementTick+0x150>)
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	4a3f      	ldr	r2, [pc, #252]	; (8008028 <xTaskIncrementTick+0x154>)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	4b3e      	ldr	r3, [pc, #248]	; (800802c <xTaskIncrementTick+0x158>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	4a3d      	ldr	r2, [pc, #244]	; (800802c <xTaskIncrementTick+0x158>)
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	f000 fad1 	bl	80084e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f3e:	4b3c      	ldr	r3, [pc, #240]	; (8008030 <xTaskIncrementTick+0x15c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d349      	bcc.n	8007fdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f48:	4b36      	ldr	r3, [pc, #216]	; (8008024 <xTaskIncrementTick+0x150>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d104      	bne.n	8007f5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f52:	4b37      	ldr	r3, [pc, #220]	; (8008030 <xTaskIncrementTick+0x15c>)
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f58:	601a      	str	r2, [r3, #0]
					break;
 8007f5a:	e03f      	b.n	8007fdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5c:	4b31      	ldr	r3, [pc, #196]	; (8008024 <xTaskIncrementTick+0x150>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d203      	bcs.n	8007f7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f74:	4a2e      	ldr	r2, [pc, #184]	; (8008030 <xTaskIncrementTick+0x15c>)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f7a:	e02f      	b.n	8007fdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fc77 	bl	8006874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	3318      	adds	r3, #24
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fc6e 	bl	8006874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9c:	4b25      	ldr	r3, [pc, #148]	; (8008034 <xTaskIncrementTick+0x160>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d903      	bls.n	8007fac <xTaskIncrementTick+0xd8>
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4a22      	ldr	r2, [pc, #136]	; (8008034 <xTaskIncrementTick+0x160>)
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <xTaskIncrementTick+0x164>)
 8007fba:	441a      	add	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	f7fe fbf9 	bl	80067ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fcc:	4b1b      	ldr	r3, [pc, #108]	; (800803c <xTaskIncrementTick+0x168>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d3b8      	bcc.n	8007f48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fda:	e7b5      	b.n	8007f48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fdc:	4b17      	ldr	r3, [pc, #92]	; (800803c <xTaskIncrementTick+0x168>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe2:	4915      	ldr	r1, [pc, #84]	; (8008038 <xTaskIncrementTick+0x164>)
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	440b      	add	r3, r1
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d901      	bls.n	8007ff8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ff8:	4b11      	ldr	r3, [pc, #68]	; (8008040 <xTaskIncrementTick+0x16c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d007      	beq.n	8008010 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008000:	2301      	movs	r3, #1
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	e004      	b.n	8008010 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <xTaskIncrementTick+0x170>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	4a0d      	ldr	r2, [pc, #52]	; (8008044 <xTaskIncrementTick+0x170>)
 800800e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008010:	697b      	ldr	r3, [r7, #20]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000c9c 	.word	0x20000c9c
 8008020:	20000c78 	.word	0x20000c78
 8008024:	20000c2c 	.word	0x20000c2c
 8008028:	20000c30 	.word	0x20000c30
 800802c:	20000c8c 	.word	0x20000c8c
 8008030:	20000c94 	.word	0x20000c94
 8008034:	20000c7c 	.word	0x20000c7c
 8008038:	200007a4 	.word	0x200007a4
 800803c:	200007a0 	.word	0x200007a0
 8008040:	20000c88 	.word	0x20000c88
 8008044:	20000c84 	.word	0x20000c84

08008048 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800804e:	4b28      	ldr	r3, [pc, #160]	; (80080f0 <vTaskSwitchContext+0xa8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008056:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <vTaskSwitchContext+0xac>)
 8008058:	2201      	movs	r2, #1
 800805a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800805c:	e041      	b.n	80080e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800805e:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <vTaskSwitchContext+0xac>)
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008064:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <vTaskSwitchContext+0xb0>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	e010      	b.n	800808e <vTaskSwitchContext+0x46>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10a      	bne.n	8008088 <vTaskSwitchContext+0x40>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	607b      	str	r3, [r7, #4]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <vTaskSwitchContext+0x3e>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3b01      	subs	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	491b      	ldr	r1, [pc, #108]	; (80080fc <vTaskSwitchContext+0xb4>)
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	440b      	add	r3, r1
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0e4      	beq.n	800806c <vTaskSwitchContext+0x24>
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4a13      	ldr	r2, [pc, #76]	; (80080fc <vTaskSwitchContext+0xb4>)
 80080ae:	4413      	add	r3, r2
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	605a      	str	r2, [r3, #4]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	3308      	adds	r3, #8
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d104      	bne.n	80080d2 <vTaskSwitchContext+0x8a>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	605a      	str	r2, [r3, #4]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	4a09      	ldr	r2, [pc, #36]	; (8008100 <vTaskSwitchContext+0xb8>)
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4a06      	ldr	r2, [pc, #24]	; (80080f8 <vTaskSwitchContext+0xb0>)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6013      	str	r3, [r2, #0]
}
 80080e2:	bf00      	nop
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20000c9c 	.word	0x20000c9c
 80080f4:	20000c88 	.word	0x20000c88
 80080f8:	20000c7c 	.word	0x20000c7c
 80080fc:	200007a4 	.word	0x200007a4
 8008100:	200007a0 	.word	0x200007a0

08008104 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <vTaskPlaceOnEventList+0x44>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3318      	adds	r3, #24
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fe fb65 	bl	8006802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008138:	2101      	movs	r1, #1
 800813a:	6838      	ldr	r0, [r7, #0]
 800813c:	f000 fb7a 	bl	8008834 <prvAddCurrentTaskToDelayedList>
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	200007a0 	.word	0x200007a0

0800814c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	617b      	str	r3, [r7, #20]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3318      	adds	r3, #24
 800817a:	4619      	mov	r1, r3
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7fe fb1c 	bl	80067ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800818c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	68b8      	ldr	r0, [r7, #8]
 8008192:	f000 fb4f 	bl	8008834 <prvAddCurrentTaskToDelayedList>
	}
 8008196:	bf00      	nop
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	200007a0 	.word	0x200007a0

080081a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10a      	bne.n	80081d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	60fb      	str	r3, [r7, #12]
}
 80081cc:	bf00      	nop
 80081ce:	e7fe      	b.n	80081ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	3318      	adds	r3, #24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe fb4d 	bl	8006874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081da:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <xTaskRemoveFromEventList+0xb0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11d      	bne.n	800821e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fb44 	bl	8006874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	4b19      	ldr	r3, [pc, #100]	; (8008258 <xTaskRemoveFromEventList+0xb4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d903      	bls.n	8008200 <xTaskRemoveFromEventList+0x5c>
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	4a16      	ldr	r2, [pc, #88]	; (8008258 <xTaskRemoveFromEventList+0xb4>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a13      	ldr	r2, [pc, #76]	; (800825c <xTaskRemoveFromEventList+0xb8>)
 800820e:	441a      	add	r2, r3
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	3304      	adds	r3, #4
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f7fe facf 	bl	80067ba <vListInsertEnd>
 800821c:	e005      	b.n	800822a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	3318      	adds	r3, #24
 8008222:	4619      	mov	r1, r3
 8008224:	480e      	ldr	r0, [pc, #56]	; (8008260 <xTaskRemoveFromEventList+0xbc>)
 8008226:	f7fe fac8 	bl	80067ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822e:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <xTaskRemoveFromEventList+0xc0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	429a      	cmp	r2, r3
 8008236:	d905      	bls.n	8008244 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <xTaskRemoveFromEventList+0xc4>)
 800823e:	2201      	movs	r2, #1
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e001      	b.n	8008248 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008248:	697b      	ldr	r3, [r7, #20]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000c9c 	.word	0x20000c9c
 8008258:	20000c7c 	.word	0x20000c7c
 800825c:	200007a4 	.word	0x200007a4
 8008260:	20000c34 	.word	0x20000c34
 8008264:	200007a0 	.word	0x200007a0
 8008268:	20000c88 	.word	0x20000c88

0800826c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <vTaskInternalSetTimeOutState+0x24>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <vTaskInternalSetTimeOutState+0x28>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	605a      	str	r2, [r3, #4]
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	20000c8c 	.word	0x20000c8c
 8008294:	20000c78 	.word	0x20000c78

08008298 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	613b      	str	r3, [r7, #16]
}
 80082ba:	bf00      	nop
 80082bc:	e7fe      	b.n	80082bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60fb      	str	r3, [r7, #12]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082da:	f000 ff7b 	bl	80091d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082de:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <xTaskCheckForTimeOut+0xbc>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f6:	d102      	bne.n	80082fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
 80082fc:	e023      	b.n	8008346 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b15      	ldr	r3, [pc, #84]	; (8008358 <xTaskCheckForTimeOut+0xc0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d007      	beq.n	800831a <xTaskCheckForTimeOut+0x82>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	429a      	cmp	r2, r3
 8008312:	d302      	bcc.n	800831a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	e015      	b.n	8008346 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	429a      	cmp	r2, r3
 8008322:	d20b      	bcs.n	800833c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	1ad2      	subs	r2, r2, r3
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff ff9b 	bl	800826c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008336:	2300      	movs	r3, #0
 8008338:	61fb      	str	r3, [r7, #28]
 800833a:	e004      	b.n	8008346 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2200      	movs	r2, #0
 8008340:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008342:	2301      	movs	r3, #1
 8008344:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008346:	f000 ff75 	bl	8009234 <vPortExitCritical>

	return xReturn;
 800834a:	69fb      	ldr	r3, [r7, #28]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3720      	adds	r7, #32
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20000c78 	.word	0x20000c78
 8008358:	20000c8c 	.word	0x20000c8c

0800835c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008360:	4b03      	ldr	r3, [pc, #12]	; (8008370 <vTaskMissedYield+0x14>)
 8008362:	2201      	movs	r2, #1
 8008364:	601a      	str	r2, [r3, #0]
}
 8008366:	bf00      	nop
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	20000c88 	.word	0x20000c88

08008374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800837c:	f000 f852 	bl	8008424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008380:	4b06      	ldr	r3, [pc, #24]	; (800839c <prvIdleTask+0x28>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d9f9      	bls.n	800837c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008388:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <prvIdleTask+0x2c>)
 800838a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008398:	e7f0      	b.n	800837c <prvIdleTask+0x8>
 800839a:	bf00      	nop
 800839c:	200007a4 	.word	0x200007a4
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083aa:	2300      	movs	r3, #0
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	e00c      	b.n	80083ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4a12      	ldr	r2, [pc, #72]	; (8008404 <prvInitialiseTaskLists+0x60>)
 80083bc:	4413      	add	r3, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe f9ce 	bl	8006760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3301      	adds	r3, #1
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b37      	cmp	r3, #55	; 0x37
 80083ce:	d9ef      	bls.n	80083b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083d0:	480d      	ldr	r0, [pc, #52]	; (8008408 <prvInitialiseTaskLists+0x64>)
 80083d2:	f7fe f9c5 	bl	8006760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083d6:	480d      	ldr	r0, [pc, #52]	; (800840c <prvInitialiseTaskLists+0x68>)
 80083d8:	f7fe f9c2 	bl	8006760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083dc:	480c      	ldr	r0, [pc, #48]	; (8008410 <prvInitialiseTaskLists+0x6c>)
 80083de:	f7fe f9bf 	bl	8006760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083e2:	480c      	ldr	r0, [pc, #48]	; (8008414 <prvInitialiseTaskLists+0x70>)
 80083e4:	f7fe f9bc 	bl	8006760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083e8:	480b      	ldr	r0, [pc, #44]	; (8008418 <prvInitialiseTaskLists+0x74>)
 80083ea:	f7fe f9b9 	bl	8006760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083ee:	4b0b      	ldr	r3, [pc, #44]	; (800841c <prvInitialiseTaskLists+0x78>)
 80083f0:	4a05      	ldr	r2, [pc, #20]	; (8008408 <prvInitialiseTaskLists+0x64>)
 80083f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083f4:	4b0a      	ldr	r3, [pc, #40]	; (8008420 <prvInitialiseTaskLists+0x7c>)
 80083f6:	4a05      	ldr	r2, [pc, #20]	; (800840c <prvInitialiseTaskLists+0x68>)
 80083f8:	601a      	str	r2, [r3, #0]
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	200007a4 	.word	0x200007a4
 8008408:	20000c04 	.word	0x20000c04
 800840c:	20000c18 	.word	0x20000c18
 8008410:	20000c34 	.word	0x20000c34
 8008414:	20000c48 	.word	0x20000c48
 8008418:	20000c60 	.word	0x20000c60
 800841c:	20000c2c 	.word	0x20000c2c
 8008420:	20000c30 	.word	0x20000c30

08008424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800842a:	e019      	b.n	8008460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800842c:	f000 fed2 	bl	80091d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008430:	4b10      	ldr	r3, [pc, #64]	; (8008474 <prvCheckTasksWaitingTermination+0x50>)
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	4618      	mov	r0, r3
 800843e:	f7fe fa19 	bl	8006874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008442:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <prvCheckTasksWaitingTermination+0x54>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a0b      	ldr	r2, [pc, #44]	; (8008478 <prvCheckTasksWaitingTermination+0x54>)
 800844a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800844c:	4b0b      	ldr	r3, [pc, #44]	; (800847c <prvCheckTasksWaitingTermination+0x58>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3b01      	subs	r3, #1
 8008452:	4a0a      	ldr	r2, [pc, #40]	; (800847c <prvCheckTasksWaitingTermination+0x58>)
 8008454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008456:	f000 feed 	bl	8009234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f810 	bl	8008480 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <prvCheckTasksWaitingTermination+0x58>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e1      	bne.n	800842c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20000c48 	.word	0x20000c48
 8008478:	20000c74 	.word	0x20000c74
 800847c:	20000c5c 	.word	0x20000c5c

08008480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800848e:	2b00      	cmp	r3, #0
 8008490:	d108      	bne.n	80084a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	4618      	mov	r0, r3
 8008498:	f001 f88a 	bl	80095b0 <vPortFree>
				vPortFree( pxTCB );
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 f887 	bl	80095b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084a2:	e018      	b.n	80084d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d103      	bne.n	80084b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 f87e 	bl	80095b0 <vPortFree>
	}
 80084b4:	e00f      	b.n	80084d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d00a      	beq.n	80084d6 <prvDeleteTCB+0x56>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60fb      	str	r3, [r7, #12]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <prvDeleteTCB+0x54>
	}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <prvResetNextTaskUnblockTime+0x38>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <prvResetNextTaskUnblockTime+0x3c>)
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084f8:	e008      	b.n	800850c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <prvResetNextTaskUnblockTime+0x38>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4a04      	ldr	r2, [pc, #16]	; (800851c <prvResetNextTaskUnblockTime+0x3c>)
 800850a:	6013      	str	r3, [r2, #0]
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	20000c2c 	.word	0x20000c2c
 800851c:	20000c94 	.word	0x20000c94

08008520 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <xTaskGetSchedulerState+0x34>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800852e:	2301      	movs	r3, #1
 8008530:	607b      	str	r3, [r7, #4]
 8008532:	e008      	b.n	8008546 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008534:	4b08      	ldr	r3, [pc, #32]	; (8008558 <xTaskGetSchedulerState+0x38>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d102      	bne.n	8008542 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800853c:	2302      	movs	r3, #2
 800853e:	607b      	str	r3, [r7, #4]
 8008540:	e001      	b.n	8008546 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008542:	2300      	movs	r3, #0
 8008544:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008546:	687b      	ldr	r3, [r7, #4]
	}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	20000c80 	.word	0x20000c80
 8008558:	20000c9c 	.word	0x20000c9c

0800855c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d051      	beq.n	8008616 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008576:	4b2a      	ldr	r3, [pc, #168]	; (8008620 <xTaskPriorityInherit+0xc4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	429a      	cmp	r2, r3
 800857e:	d241      	bcs.n	8008604 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	db06      	blt.n	8008596 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008588:	4b25      	ldr	r3, [pc, #148]	; (8008620 <xTaskPriorityInherit+0xc4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6959      	ldr	r1, [r3, #20]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4a1f      	ldr	r2, [pc, #124]	; (8008624 <xTaskPriorityInherit+0xc8>)
 80085a8:	4413      	add	r3, r2
 80085aa:	4299      	cmp	r1, r3
 80085ac:	d122      	bne.n	80085f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe f95e 	bl	8006874 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085b8:	4b19      	ldr	r3, [pc, #100]	; (8008620 <xTaskPriorityInherit+0xc4>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c6:	4b18      	ldr	r3, [pc, #96]	; (8008628 <xTaskPriorityInherit+0xcc>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d903      	bls.n	80085d6 <xTaskPriorityInherit+0x7a>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	4a15      	ldr	r2, [pc, #84]	; (8008628 <xTaskPriorityInherit+0xcc>)
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4a10      	ldr	r2, [pc, #64]	; (8008624 <xTaskPriorityInherit+0xc8>)
 80085e4:	441a      	add	r2, r3
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f7fe f8e4 	bl	80067ba <vListInsertEnd>
 80085f2:	e004      	b.n	80085fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <xTaskPriorityInherit+0xc4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80085fe:	2301      	movs	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	e008      	b.n	8008616 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <xTaskPriorityInherit+0xc4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	429a      	cmp	r2, r3
 8008610:	d201      	bcs.n	8008616 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008616:	68fb      	ldr	r3, [r7, #12]
	}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	200007a0 	.word	0x200007a0
 8008624:	200007a4 	.word	0x200007a4
 8008628:	20000c7c 	.word	0x20000c7c

0800862c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d056      	beq.n	80086f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008642:	4b2e      	ldr	r3, [pc, #184]	; (80086fc <xTaskPriorityDisinherit+0xd0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	429a      	cmp	r2, r3
 800864a:	d00a      	beq.n	8008662 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	60fb      	str	r3, [r7, #12]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	60bb      	str	r3, [r7, #8]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008684:	1e5a      	subs	r2, r3, #1
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008692:	429a      	cmp	r2, r3
 8008694:	d02c      	beq.n	80086f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869a:	2b00      	cmp	r3, #0
 800869c:	d128      	bne.n	80086f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe f8e6 	bl	8006874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <xTaskPriorityDisinherit+0xd4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d903      	bls.n	80086d0 <xTaskPriorityDisinherit+0xa4>
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	4a0c      	ldr	r2, [pc, #48]	; (8008700 <xTaskPriorityDisinherit+0xd4>)
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4a09      	ldr	r2, [pc, #36]	; (8008704 <xTaskPriorityDisinherit+0xd8>)
 80086de:	441a      	add	r2, r3
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f7fe f867 	bl	80067ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086f0:	697b      	ldr	r3, [r7, #20]
	}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	200007a0 	.word	0x200007a0
 8008700:	20000c7c 	.word	0x20000c7c
 8008704:	200007a4 	.word	0x200007a4

08008708 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008716:	2301      	movs	r3, #1
 8008718:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d06a      	beq.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	60fb      	str	r3, [r7, #12]
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	429a      	cmp	r2, r3
 8008746:	d902      	bls.n	800874e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	e002      	b.n	8008754 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008752:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	69fa      	ldr	r2, [r7, #28]
 800875a:	429a      	cmp	r2, r3
 800875c:	d04b      	beq.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	429a      	cmp	r2, r3
 8008766:	d146      	bne.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008768:	4b25      	ldr	r3, [pc, #148]	; (8008800 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	429a      	cmp	r2, r3
 8008770:	d10a      	bne.n	8008788 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	60bb      	str	r3, [r7, #8]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	db04      	blt.n	80087a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	6959      	ldr	r1, [r3, #20]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4a13      	ldr	r2, [pc, #76]	; (8008804 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80087b6:	4413      	add	r3, r2
 80087b8:	4299      	cmp	r1, r3
 80087ba:	d11c      	bne.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	3304      	adds	r3, #4
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe f857 	bl	8006874 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d903      	bls.n	80087da <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	4a0c      	ldr	r2, [pc, #48]	; (8008808 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4a07      	ldr	r2, [pc, #28]	; (8008804 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80087e8:	441a      	add	r2, r3
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	3304      	adds	r3, #4
 80087ee:	4619      	mov	r1, r3
 80087f0:	4610      	mov	r0, r2
 80087f2:	f7fd ffe2 	bl	80067ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087f6:	bf00      	nop
 80087f8:	3720      	adds	r7, #32
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	200007a0 	.word	0x200007a0
 8008804:	200007a4 	.word	0x200007a4
 8008808:	20000c7c 	.word	0x20000c7c

0800880c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008810:	4b07      	ldr	r3, [pc, #28]	; (8008830 <pvTaskIncrementMutexHeldCount+0x24>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008818:	4b05      	ldr	r3, [pc, #20]	; (8008830 <pvTaskIncrementMutexHeldCount+0x24>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800881e:	3201      	adds	r2, #1
 8008820:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008822:	4b03      	ldr	r3, [pc, #12]	; (8008830 <pvTaskIncrementMutexHeldCount+0x24>)
 8008824:	681b      	ldr	r3, [r3, #0]
	}
 8008826:	4618      	mov	r0, r3
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	200007a0 	.word	0x200007a0

08008834 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800883e:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008844:	4b20      	ldr	r3, [pc, #128]	; (80088c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3304      	adds	r3, #4
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe f812 	bl	8006874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008856:	d10a      	bne.n	800886e <prvAddCurrentTaskToDelayedList+0x3a>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800885e:	4b1a      	ldr	r3, [pc, #104]	; (80088c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4819      	ldr	r0, [pc, #100]	; (80088cc <prvAddCurrentTaskToDelayedList+0x98>)
 8008868:	f7fd ffa7 	bl	80067ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800886c:	e026      	b.n	80088bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4413      	add	r3, r2
 8008874:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008876:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	429a      	cmp	r2, r3
 8008884:	d209      	bcs.n	800889a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008886:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3304      	adds	r3, #4
 8008890:	4619      	mov	r1, r3
 8008892:	4610      	mov	r0, r2
 8008894:	f7fd ffb5 	bl	8006802 <vListInsert>
}
 8008898:	e010      	b.n	80088bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800889a:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4619      	mov	r1, r3
 80088a6:	4610      	mov	r0, r2
 80088a8:	f7fd ffab 	bl	8006802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d202      	bcs.n	80088bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088b6:	4a08      	ldr	r2, [pc, #32]	; (80088d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6013      	str	r3, [r2, #0]
}
 80088bc:	bf00      	nop
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20000c78 	.word	0x20000c78
 80088c8:	200007a0 	.word	0x200007a0
 80088cc:	20000c60 	.word	0x20000c60
 80088d0:	20000c30 	.word	0x20000c30
 80088d4:	20000c2c 	.word	0x20000c2c
 80088d8:	20000c94 	.word	0x20000c94

080088dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	; 0x28
 80088e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088e6:	f000 fb07 	bl	8008ef8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088ea:	4b1c      	ldr	r3, [pc, #112]	; (800895c <xTimerCreateTimerTask+0x80>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d021      	beq.n	8008936 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088fa:	1d3a      	adds	r2, r7, #4
 80088fc:	f107 0108 	add.w	r1, r7, #8
 8008900:	f107 030c 	add.w	r3, r7, #12
 8008904:	4618      	mov	r0, r3
 8008906:	f7fd ff11 	bl	800672c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	9202      	str	r2, [sp, #8]
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	2302      	movs	r3, #2
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	2300      	movs	r3, #0
 800891a:	460a      	mov	r2, r1
 800891c:	4910      	ldr	r1, [pc, #64]	; (8008960 <xTimerCreateTimerTask+0x84>)
 800891e:	4811      	ldr	r0, [pc, #68]	; (8008964 <xTimerCreateTimerTask+0x88>)
 8008920:	f7fe ffe0 	bl	80078e4 <xTaskCreateStatic>
 8008924:	4603      	mov	r3, r0
 8008926:	4a10      	ldr	r2, [pc, #64]	; (8008968 <xTimerCreateTimerTask+0x8c>)
 8008928:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800892a:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <xTimerCreateTimerTask+0x8c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008932:	2301      	movs	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	613b      	str	r3, [r7, #16]
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008952:	697b      	ldr	r3, [r7, #20]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20000cd0 	.word	0x20000cd0
 8008960:	0800acac 	.word	0x0800acac
 8008964:	08008aa1 	.word	0x08008aa1
 8008968:	20000cd4 	.word	0x20000cd4

0800896c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08a      	sub	sp, #40	; 0x28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800897a:	2300      	movs	r3, #0
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	623b      	str	r3, [r7, #32]
}
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800899a:	4b1a      	ldr	r3, [pc, #104]	; (8008a04 <xTimerGenericCommand+0x98>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d02a      	beq.n	80089f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b05      	cmp	r3, #5
 80089b2:	dc18      	bgt.n	80089e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089b4:	f7ff fdb4 	bl	8008520 <xTaskGetSchedulerState>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d109      	bne.n	80089d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089be:	4b11      	ldr	r3, [pc, #68]	; (8008a04 <xTimerGenericCommand+0x98>)
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f107 0110 	add.w	r1, r7, #16
 80089c6:	2300      	movs	r3, #0
 80089c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ca:	f7fe f925 	bl	8006c18 <xQueueGenericSend>
 80089ce:	6278      	str	r0, [r7, #36]	; 0x24
 80089d0:	e012      	b.n	80089f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089d2:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <xTimerGenericCommand+0x98>)
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	f107 0110 	add.w	r1, r7, #16
 80089da:	2300      	movs	r3, #0
 80089dc:	2200      	movs	r2, #0
 80089de:	f7fe f91b 	bl	8006c18 <xQueueGenericSend>
 80089e2:	6278      	str	r0, [r7, #36]	; 0x24
 80089e4:	e008      	b.n	80089f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089e6:	4b07      	ldr	r3, [pc, #28]	; (8008a04 <xTimerGenericCommand+0x98>)
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	f107 0110 	add.w	r1, r7, #16
 80089ee:	2300      	movs	r3, #0
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	f7fe fa0f 	bl	8006e14 <xQueueGenericSendFromISR>
 80089f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3728      	adds	r7, #40	; 0x28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000cd0 	.word	0x20000cd0

08008a08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <prvProcessExpiredTimer+0x94>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fd ff27 	bl	8006874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d022      	beq.n	8008a7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	18d1      	adds	r1, r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	6978      	ldr	r0, [r7, #20]
 8008a42:	f000 f8d1 	bl	8008be8 <prvInsertTimerInActiveList>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01f      	beq.n	8008a8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	2300      	movs	r3, #0
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	2100      	movs	r1, #0
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f7ff ff88 	bl	800896c <xTimerGenericCommand>
 8008a5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d113      	bne.n	8008a8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	60fb      	str	r3, [r7, #12]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a80:	f023 0301 	bic.w	r3, r3, #1
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	6978      	ldr	r0, [r7, #20]
 8008a92:	4798      	blx	r3
}
 8008a94:	bf00      	nop
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20000cc8 	.word	0x20000cc8

08008aa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008aa8:	f107 0308 	add.w	r3, r7, #8
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 f857 	bl	8008b60 <prvGetNextExpireTime>
 8008ab2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 f803 	bl	8008ac4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008abe:	f000 f8d5 	bl	8008c6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ac2:	e7f1      	b.n	8008aa8 <prvTimerTask+0x8>

08008ac4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ace:	f7ff f945 	bl	8007d5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f866 	bl	8008ba8 <prvSampleTimeNow>
 8008adc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d130      	bne.n	8008b46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10a      	bne.n	8008b00 <prvProcessTimerOrBlockTask+0x3c>
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d806      	bhi.n	8008b00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008af2:	f7ff f941 	bl	8007d78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008af6:	68f9      	ldr	r1, [r7, #12]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff ff85 	bl	8008a08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008afe:	e024      	b.n	8008b4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d008      	beq.n	8008b18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b06:	4b13      	ldr	r3, [pc, #76]	; (8008b54 <prvProcessTimerOrBlockTask+0x90>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <prvProcessTimerOrBlockTask+0x50>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <prvProcessTimerOrBlockTask+0x52>
 8008b14:	2300      	movs	r3, #0
 8008b16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b18:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <prvProcessTimerOrBlockTask+0x94>)
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4619      	mov	r1, r3
 8008b26:	f7fe fea9 	bl	800787c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b2a:	f7ff f925 	bl	8007d78 <xTaskResumeAll>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b34:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <prvProcessTimerOrBlockTask+0x98>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
}
 8008b44:	e001      	b.n	8008b4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b46:	f7ff f917 	bl	8007d78 <xTaskResumeAll>
}
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000ccc 	.word	0x20000ccc
 8008b58:	20000cd0 	.word	0x20000cd0
 8008b5c:	e000ed04 	.word	0xe000ed04

08008b60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b68:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <prvGetNextExpireTime+0x44>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <prvGetNextExpireTime+0x16>
 8008b72:	2201      	movs	r2, #1
 8008b74:	e000      	b.n	8008b78 <prvGetNextExpireTime+0x18>
 8008b76:	2200      	movs	r2, #0
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b84:	4b07      	ldr	r3, [pc, #28]	; (8008ba4 <prvGetNextExpireTime+0x44>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	e001      	b.n	8008b94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b94:	68fb      	ldr	r3, [r7, #12]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	20000cc8 	.word	0x20000cc8

08008ba8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bb0:	f7ff f980 	bl	8007eb4 <xTaskGetTickCount>
 8008bb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <prvSampleTimeNow+0x3c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d205      	bcs.n	8008bcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008bc0:	f000 f936 	bl	8008e30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e002      	b.n	8008bd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bd2:	4a04      	ldr	r2, [pc, #16]	; (8008be4 <prvSampleTimeNow+0x3c>)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000cd8 	.word	0x20000cd8

08008be8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d812      	bhi.n	8008c34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d302      	bcc.n	8008c22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	e01b      	b.n	8008c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <prvInsertTimerInActiveList+0x7c>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	f7fd fde8 	bl	8006802 <vListInsert>
 8008c32:	e012      	b.n	8008c5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d206      	bcs.n	8008c4a <prvInsertTimerInActiveList+0x62>
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d302      	bcc.n	8008c4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c44:	2301      	movs	r3, #1
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e007      	b.n	8008c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c4a:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <prvInsertTimerInActiveList+0x80>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3304      	adds	r3, #4
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f7fd fdd4 	bl	8006802 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c5a:	697b      	ldr	r3, [r7, #20]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000ccc 	.word	0x20000ccc
 8008c68:	20000cc8 	.word	0x20000cc8

08008c6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08e      	sub	sp, #56	; 0x38
 8008c70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c72:	e0ca      	b.n	8008e0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da18      	bge.n	8008cac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c7a:	1d3b      	adds	r3, r7, #4
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	61fb      	str	r3, [r7, #28]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca2:	6850      	ldr	r0, [r2, #4]
 8008ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca6:	6892      	ldr	r2, [r2, #8]
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f2c0 80aa 	blt.w	8008e08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d004      	beq.n	8008cca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fd fdd5 	bl	8006874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cca:	463b      	mov	r3, r7
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff ff6b 	bl	8008ba8 <prvSampleTimeNow>
 8008cd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b09      	cmp	r3, #9
 8008cd8:	f200 8097 	bhi.w	8008e0a <prvProcessReceivedCommands+0x19e>
 8008cdc:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <prvProcessReceivedCommands+0x78>)
 8008cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce2:	bf00      	nop
 8008ce4:	08008d0d 	.word	0x08008d0d
 8008ce8:	08008d0d 	.word	0x08008d0d
 8008cec:	08008d0d 	.word	0x08008d0d
 8008cf0:	08008d81 	.word	0x08008d81
 8008cf4:	08008d95 	.word	0x08008d95
 8008cf8:	08008ddf 	.word	0x08008ddf
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d0d 	.word	0x08008d0d
 8008d04:	08008d81 	.word	0x08008d81
 8008d08:	08008d95 	.word	0x08008d95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d12:	f043 0301 	orr.w	r3, r3, #1
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	18d1      	adds	r1, r2, r3
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d2c:	f7ff ff5c 	bl	8008be8 <prvInsertTimerInActiveList>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d069      	beq.n	8008e0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d05e      	beq.n	8008e0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	441a      	add	r2, r3
 8008d54:	2300      	movs	r3, #0
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5e:	f7ff fe05 	bl	800896c <xTimerGenericCommand>
 8008d62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d14f      	bne.n	8008e0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	61bb      	str	r3, [r7, #24]
}
 8008d7c:	bf00      	nop
 8008d7e:	e7fe      	b.n	8008d7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d86:	f023 0301 	bic.w	r3, r3, #1
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008d92:	e03a      	b.n	8008e0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d9a:	f043 0301 	orr.w	r3, r3, #1
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	617b      	str	r3, [r7, #20]
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	699a      	ldr	r2, [r3, #24]
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	18d1      	adds	r1, r2, r3
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd8:	f7ff ff06 	bl	8008be8 <prvInsertTimerInActiveList>
					break;
 8008ddc:	e015      	b.n	8008e0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d103      	bne.n	8008df4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dee:	f000 fbdf 	bl	80095b0 <vPortFree>
 8008df2:	e00a      	b.n	8008e0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dfa:	f023 0301 	bic.w	r3, r3, #1
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e06:	e000      	b.n	8008e0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e0a:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <prvProcessReceivedCommands+0x1c0>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	1d39      	adds	r1, r7, #4
 8008e10:	2200      	movs	r2, #0
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe f926 	bl	8007064 <xQueueReceive>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f47f af2a 	bne.w	8008c74 <prvProcessReceivedCommands+0x8>
	}
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	3730      	adds	r7, #48	; 0x30
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20000cd0 	.word	0x20000cd0

08008e30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e36:	e048      	b.n	8008eca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e38:	4b2d      	ldr	r3, [pc, #180]	; (8008ef0 <prvSwitchTimerLists+0xc0>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e42:	4b2b      	ldr	r3, [pc, #172]	; (8008ef0 <prvSwitchTimerLists+0xc0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fd fd0f 	bl	8006874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d02e      	beq.n	8008eca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	4413      	add	r3, r2
 8008e74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d90e      	bls.n	8008e9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e8a:	4b19      	ldr	r3, [pc, #100]	; (8008ef0 <prvSwitchTimerLists+0xc0>)
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4619      	mov	r1, r3
 8008e94:	4610      	mov	r0, r2
 8008e96:	f7fd fcb4 	bl	8006802 <vListInsert>
 8008e9a:	e016      	b.n	8008eca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f7ff fd60 	bl	800896c <xTimerGenericCommand>
 8008eac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	603b      	str	r3, [r7, #0]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eca:	4b09      	ldr	r3, [pc, #36]	; (8008ef0 <prvSwitchTimerLists+0xc0>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1b1      	bne.n	8008e38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ed4:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <prvSwitchTimerLists+0xc0>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008eda:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <prvSwitchTimerLists+0xc4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a04      	ldr	r2, [pc, #16]	; (8008ef0 <prvSwitchTimerLists+0xc0>)
 8008ee0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ee2:	4a04      	ldr	r2, [pc, #16]	; (8008ef4 <prvSwitchTimerLists+0xc4>)
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	6013      	str	r3, [r2, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20000cc8 	.word	0x20000cc8
 8008ef4:	20000ccc 	.word	0x20000ccc

08008ef8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008efe:	f000 f969 	bl	80091d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f02:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <prvCheckForValidListAndQueue+0x60>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d120      	bne.n	8008f4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f0a:	4814      	ldr	r0, [pc, #80]	; (8008f5c <prvCheckForValidListAndQueue+0x64>)
 8008f0c:	f7fd fc28 	bl	8006760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f10:	4813      	ldr	r0, [pc, #76]	; (8008f60 <prvCheckForValidListAndQueue+0x68>)
 8008f12:	f7fd fc25 	bl	8006760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f16:	4b13      	ldr	r3, [pc, #76]	; (8008f64 <prvCheckForValidListAndQueue+0x6c>)
 8008f18:	4a10      	ldr	r2, [pc, #64]	; (8008f5c <prvCheckForValidListAndQueue+0x64>)
 8008f1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f1c:	4b12      	ldr	r3, [pc, #72]	; (8008f68 <prvCheckForValidListAndQueue+0x70>)
 8008f1e:	4a10      	ldr	r2, [pc, #64]	; (8008f60 <prvCheckForValidListAndQueue+0x68>)
 8008f20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f22:	2300      	movs	r3, #0
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	4b11      	ldr	r3, [pc, #68]	; (8008f6c <prvCheckForValidListAndQueue+0x74>)
 8008f28:	4a11      	ldr	r2, [pc, #68]	; (8008f70 <prvCheckForValidListAndQueue+0x78>)
 8008f2a:	2110      	movs	r1, #16
 8008f2c:	200a      	movs	r0, #10
 8008f2e:	f7fd fd33 	bl	8006998 <xQueueGenericCreateStatic>
 8008f32:	4603      	mov	r3, r0
 8008f34:	4a08      	ldr	r2, [pc, #32]	; (8008f58 <prvCheckForValidListAndQueue+0x60>)
 8008f36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f38:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <prvCheckForValidListAndQueue+0x60>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <prvCheckForValidListAndQueue+0x60>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	490b      	ldr	r1, [pc, #44]	; (8008f74 <prvCheckForValidListAndQueue+0x7c>)
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fc44 	bl	80077d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f4c:	f000 f972 	bl	8009234 <vPortExitCritical>
}
 8008f50:	bf00      	nop
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20000cd0 	.word	0x20000cd0
 8008f5c:	20000ca0 	.word	0x20000ca0
 8008f60:	20000cb4 	.word	0x20000cb4
 8008f64:	20000cc8 	.word	0x20000cc8
 8008f68:	20000ccc 	.word	0x20000ccc
 8008f6c:	20000d7c 	.word	0x20000d7c
 8008f70:	20000cdc 	.word	0x20000cdc
 8008f74:	0800acb4 	.word	0x0800acb4

08008f78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3b04      	subs	r3, #4
 8008f88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3b04      	subs	r3, #4
 8008f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f023 0201 	bic.w	r2, r3, #1
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3b04      	subs	r3, #4
 8008fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fa8:	4a0c      	ldr	r2, [pc, #48]	; (8008fdc <pxPortInitialiseStack+0x64>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3b14      	subs	r3, #20
 8008fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f06f 0202 	mvn.w	r2, #2
 8008fc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3b20      	subs	r3, #32
 8008fcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fce:	68fb      	ldr	r3, [r7, #12]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	08008fe1 	.word	0x08008fe1

08008fe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fea:	4b12      	ldr	r3, [pc, #72]	; (8009034 <prvTaskExitError+0x54>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ff2:	d00a      	beq.n	800900a <prvTaskExitError+0x2a>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	60fb      	str	r3, [r7, #12]
}
 8009006:	bf00      	nop
 8009008:	e7fe      	b.n	8009008 <prvTaskExitError+0x28>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	60bb      	str	r3, [r7, #8]
}
 800901c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800901e:	bf00      	nop
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0fc      	beq.n	8009020 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009026:	bf00      	nop
 8009028:	bf00      	nop
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	20000024 	.word	0x20000024
	...

08009040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <pxCurrentTCBConst2>)
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	6808      	ldr	r0, [r1, #0]
 8009046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904a:	f380 8809 	msr	PSP, r0
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f04f 0000 	mov.w	r0, #0
 8009056:	f380 8811 	msr	BASEPRI, r0
 800905a:	4770      	bx	lr
 800905c:	f3af 8000 	nop.w

08009060 <pxCurrentTCBConst2>:
 8009060:	200007a0 	.word	0x200007a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop

08009068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009068:	4808      	ldr	r0, [pc, #32]	; (800908c <prvPortStartFirstTask+0x24>)
 800906a:	6800      	ldr	r0, [r0, #0]
 800906c:	6800      	ldr	r0, [r0, #0]
 800906e:	f380 8808 	msr	MSP, r0
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8814 	msr	CONTROL, r0
 800907a:	b662      	cpsie	i
 800907c:	b661      	cpsie	f
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	df00      	svc	0
 8009088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800908a:	bf00      	nop
 800908c:	e000ed08 	.word	0xe000ed08

08009090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009096:	4b46      	ldr	r3, [pc, #280]	; (80091b0 <xPortStartScheduler+0x120>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a46      	ldr	r2, [pc, #280]	; (80091b4 <xPortStartScheduler+0x124>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d10a      	bne.n	80090b6 <xPortStartScheduler+0x26>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	613b      	str	r3, [r7, #16]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090b6:	4b3e      	ldr	r3, [pc, #248]	; (80091b0 <xPortStartScheduler+0x120>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a3f      	ldr	r2, [pc, #252]	; (80091b8 <xPortStartScheduler+0x128>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d10a      	bne.n	80090d6 <xPortStartScheduler+0x46>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60fb      	str	r3, [r7, #12]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090d6:	4b39      	ldr	r3, [pc, #228]	; (80091bc <xPortStartScheduler+0x12c>)
 80090d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	22ff      	movs	r2, #255	; 0xff
 80090e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	4b31      	ldr	r3, [pc, #196]	; (80091c0 <xPortStartScheduler+0x130>)
 80090fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090fe:	4b31      	ldr	r3, [pc, #196]	; (80091c4 <xPortStartScheduler+0x134>)
 8009100:	2207      	movs	r2, #7
 8009102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009104:	e009      	b.n	800911a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009106:	4b2f      	ldr	r3, [pc, #188]	; (80091c4 <xPortStartScheduler+0x134>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3b01      	subs	r3, #1
 800910c:	4a2d      	ldr	r2, [pc, #180]	; (80091c4 <xPortStartScheduler+0x134>)
 800910e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	b2db      	uxtb	r3, r3
 8009118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	b2db      	uxtb	r3, r3
 800911e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009122:	2b80      	cmp	r3, #128	; 0x80
 8009124:	d0ef      	beq.n	8009106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009126:	4b27      	ldr	r3, [pc, #156]	; (80091c4 <xPortStartScheduler+0x134>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f1c3 0307 	rsb	r3, r3, #7
 800912e:	2b04      	cmp	r3, #4
 8009130:	d00a      	beq.n	8009148 <xPortStartScheduler+0xb8>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60bb      	str	r3, [r7, #8]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009148:	4b1e      	ldr	r3, [pc, #120]	; (80091c4 <xPortStartScheduler+0x134>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <xPortStartScheduler+0x134>)
 8009150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009152:	4b1c      	ldr	r3, [pc, #112]	; (80091c4 <xPortStartScheduler+0x134>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800915a:	4a1a      	ldr	r2, [pc, #104]	; (80091c4 <xPortStartScheduler+0x134>)
 800915c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	b2da      	uxtb	r2, r3
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009166:	4b18      	ldr	r3, [pc, #96]	; (80091c8 <xPortStartScheduler+0x138>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a17      	ldr	r2, [pc, #92]	; (80091c8 <xPortStartScheduler+0x138>)
 800916c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009172:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <xPortStartScheduler+0x138>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a14      	ldr	r2, [pc, #80]	; (80091c8 <xPortStartScheduler+0x138>)
 8009178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800917c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800917e:	f000 f8dd 	bl	800933c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009182:	4b12      	ldr	r3, [pc, #72]	; (80091cc <xPortStartScheduler+0x13c>)
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009188:	f000 f8fc 	bl	8009384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800918c:	4b10      	ldr	r3, [pc, #64]	; (80091d0 <xPortStartScheduler+0x140>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a0f      	ldr	r2, [pc, #60]	; (80091d0 <xPortStartScheduler+0x140>)
 8009192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009198:	f7ff ff66 	bl	8009068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800919c:	f7fe ff54 	bl	8008048 <vTaskSwitchContext>
	prvTaskExitError();
 80091a0:	f7ff ff1e 	bl	8008fe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	e000ed00 	.word	0xe000ed00
 80091b4:	410fc271 	.word	0x410fc271
 80091b8:	410fc270 	.word	0x410fc270
 80091bc:	e000e400 	.word	0xe000e400
 80091c0:	20000dcc 	.word	0x20000dcc
 80091c4:	20000dd0 	.word	0x20000dd0
 80091c8:	e000ed20 	.word	0xe000ed20
 80091cc:	20000024 	.word	0x20000024
 80091d0:	e000ef34 	.word	0xe000ef34

080091d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	607b      	str	r3, [r7, #4]
}
 80091ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091ee:	4b0f      	ldr	r3, [pc, #60]	; (800922c <vPortEnterCritical+0x58>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	4a0d      	ldr	r2, [pc, #52]	; (800922c <vPortEnterCritical+0x58>)
 80091f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <vPortEnterCritical+0x58>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d10f      	bne.n	8009220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009200:	4b0b      	ldr	r3, [pc, #44]	; (8009230 <vPortEnterCritical+0x5c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <vPortEnterCritical+0x4c>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	603b      	str	r3, [r7, #0]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <vPortEnterCritical+0x4a>
	}
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	20000024 	.word	0x20000024
 8009230:	e000ed04 	.word	0xe000ed04

08009234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800923a:	4b12      	ldr	r3, [pc, #72]	; (8009284 <vPortExitCritical+0x50>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <vPortExitCritical+0x24>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	607b      	str	r3, [r7, #4]
}
 8009254:	bf00      	nop
 8009256:	e7fe      	b.n	8009256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009258:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <vPortExitCritical+0x50>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3b01      	subs	r3, #1
 800925e:	4a09      	ldr	r2, [pc, #36]	; (8009284 <vPortExitCritical+0x50>)
 8009260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009262:	4b08      	ldr	r3, [pc, #32]	; (8009284 <vPortExitCritical+0x50>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d105      	bne.n	8009276 <vPortExitCritical+0x42>
 800926a:	2300      	movs	r3, #0
 800926c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	f383 8811 	msr	BASEPRI, r3
}
 8009274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009276:	bf00      	nop
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20000024 	.word	0x20000024
	...

08009290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009290:	f3ef 8009 	mrs	r0, PSP
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	4b15      	ldr	r3, [pc, #84]	; (80092f0 <pxCurrentTCBConst>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	f01e 0f10 	tst.w	lr, #16
 80092a0:	bf08      	it	eq
 80092a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092aa:	6010      	str	r0, [r2, #0]
 80092ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092b4:	f380 8811 	msr	BASEPRI, r0
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f7fe fec2 	bl	8008048 <vTaskSwitchContext>
 80092c4:	f04f 0000 	mov.w	r0, #0
 80092c8:	f380 8811 	msr	BASEPRI, r0
 80092cc:	bc09      	pop	{r0, r3}
 80092ce:	6819      	ldr	r1, [r3, #0]
 80092d0:	6808      	ldr	r0, [r1, #0]
 80092d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d6:	f01e 0f10 	tst.w	lr, #16
 80092da:	bf08      	it	eq
 80092dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092e0:	f380 8809 	msr	PSP, r0
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	f3af 8000 	nop.w

080092f0 <pxCurrentTCBConst>:
 80092f0:	200007a0 	.word	0x200007a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop

080092f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	607b      	str	r3, [r7, #4]
}
 8009310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009312:	f7fe fddf 	bl	8007ed4 <xTaskIncrementTick>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800931c:	4b06      	ldr	r3, [pc, #24]	; (8009338 <xPortSysTickHandler+0x40>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	2300      	movs	r3, #0
 8009326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f383 8811 	msr	BASEPRI, r3
}
 800932e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <vPortSetupTimerInterrupt+0x34>)
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009346:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <vPortSetupTimerInterrupt+0x38>)
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800934c:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <vPortSetupTimerInterrupt+0x3c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a0a      	ldr	r2, [pc, #40]	; (800937c <vPortSetupTimerInterrupt+0x40>)
 8009352:	fba2 2303 	umull	r2, r3, r2, r3
 8009356:	099b      	lsrs	r3, r3, #6
 8009358:	4a09      	ldr	r2, [pc, #36]	; (8009380 <vPortSetupTimerInterrupt+0x44>)
 800935a:	3b01      	subs	r3, #1
 800935c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800935e:	4b04      	ldr	r3, [pc, #16]	; (8009370 <vPortSetupTimerInterrupt+0x34>)
 8009360:	2207      	movs	r2, #7
 8009362:	601a      	str	r2, [r3, #0]
}
 8009364:	bf00      	nop
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	e000e010 	.word	0xe000e010
 8009374:	e000e018 	.word	0xe000e018
 8009378:	20000000 	.word	0x20000000
 800937c:	10624dd3 	.word	0x10624dd3
 8009380:	e000e014 	.word	0xe000e014

08009384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009394 <vPortEnableVFP+0x10>
 8009388:	6801      	ldr	r1, [r0, #0]
 800938a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800938e:	6001      	str	r1, [r0, #0]
 8009390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009392:	bf00      	nop
 8009394:	e000ed88 	.word	0xe000ed88

08009398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800939e:	f3ef 8305 	mrs	r3, IPSR
 80093a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b0f      	cmp	r3, #15
 80093a8:	d914      	bls.n	80093d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093aa:	4a17      	ldr	r2, [pc, #92]	; (8009408 <vPortValidateInterruptPriority+0x70>)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093b4:	4b15      	ldr	r3, [pc, #84]	; (800940c <vPortValidateInterruptPriority+0x74>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	7afa      	ldrb	r2, [r7, #11]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d20a      	bcs.n	80093d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	607b      	str	r3, [r7, #4]
}
 80093d0:	bf00      	nop
 80093d2:	e7fe      	b.n	80093d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093d4:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <vPortValidateInterruptPriority+0x78>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093dc:	4b0d      	ldr	r3, [pc, #52]	; (8009414 <vPortValidateInterruptPriority+0x7c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d90a      	bls.n	80093fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	603b      	str	r3, [r7, #0]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <vPortValidateInterruptPriority+0x60>
	}
 80093fa:	bf00      	nop
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	e000e3f0 	.word	0xe000e3f0
 800940c:	20000dcc 	.word	0x20000dcc
 8009410:	e000ed0c 	.word	0xe000ed0c
 8009414:	20000dd0 	.word	0x20000dd0

08009418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08a      	sub	sp, #40	; 0x28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009420:	2300      	movs	r3, #0
 8009422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009424:	f7fe fc9a 	bl	8007d5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009428:	4b5b      	ldr	r3, [pc, #364]	; (8009598 <pvPortMalloc+0x180>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009430:	f000 f920 	bl	8009674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009434:	4b59      	ldr	r3, [pc, #356]	; (800959c <pvPortMalloc+0x184>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4013      	ands	r3, r2
 800943c:	2b00      	cmp	r3, #0
 800943e:	f040 8093 	bne.w	8009568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01d      	beq.n	8009484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009448:	2208      	movs	r2, #8
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4413      	add	r3, r2
 800944e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	2b00      	cmp	r3, #0
 8009458:	d014      	beq.n	8009484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f023 0307 	bic.w	r3, r3, #7
 8009460:	3308      	adds	r3, #8
 8009462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f003 0307 	and.w	r3, r3, #7
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <pvPortMalloc+0x6c>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	617b      	str	r3, [r7, #20]
}
 8009480:	bf00      	nop
 8009482:	e7fe      	b.n	8009482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d06e      	beq.n	8009568 <pvPortMalloc+0x150>
 800948a:	4b45      	ldr	r3, [pc, #276]	; (80095a0 <pvPortMalloc+0x188>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	429a      	cmp	r2, r3
 8009492:	d869      	bhi.n	8009568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009494:	4b43      	ldr	r3, [pc, #268]	; (80095a4 <pvPortMalloc+0x18c>)
 8009496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009498:	4b42      	ldr	r3, [pc, #264]	; (80095a4 <pvPortMalloc+0x18c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800949e:	e004      	b.n	80094aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d903      	bls.n	80094bc <pvPortMalloc+0xa4>
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1f1      	bne.n	80094a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094bc:	4b36      	ldr	r3, [pc, #216]	; (8009598 <pvPortMalloc+0x180>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d050      	beq.n	8009568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2208      	movs	r2, #8
 80094cc:	4413      	add	r3, r2
 80094ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	1ad2      	subs	r2, r2, r3
 80094e0:	2308      	movs	r3, #8
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d91f      	bls.n	8009528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4413      	add	r3, r2
 80094ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <pvPortMalloc+0xf8>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	613b      	str	r3, [r7, #16]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009522:	69b8      	ldr	r0, [r7, #24]
 8009524:	f000 f908 	bl	8009738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009528:	4b1d      	ldr	r3, [pc, #116]	; (80095a0 <pvPortMalloc+0x188>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	4a1b      	ldr	r2, [pc, #108]	; (80095a0 <pvPortMalloc+0x188>)
 8009534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009536:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <pvPortMalloc+0x188>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	4b1b      	ldr	r3, [pc, #108]	; (80095a8 <pvPortMalloc+0x190>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d203      	bcs.n	800954a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009542:	4b17      	ldr	r3, [pc, #92]	; (80095a0 <pvPortMalloc+0x188>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a18      	ldr	r2, [pc, #96]	; (80095a8 <pvPortMalloc+0x190>)
 8009548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	4b13      	ldr	r3, [pc, #76]	; (800959c <pvPortMalloc+0x184>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	431a      	orrs	r2, r3
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800955e:	4b13      	ldr	r3, [pc, #76]	; (80095ac <pvPortMalloc+0x194>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	4a11      	ldr	r2, [pc, #68]	; (80095ac <pvPortMalloc+0x194>)
 8009566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009568:	f7fe fc06 	bl	8007d78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <pvPortMalloc+0x174>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	60fb      	str	r3, [r7, #12]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <pvPortMalloc+0x172>
	return pvReturn;
 800958c:	69fb      	ldr	r3, [r7, #28]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3728      	adds	r7, #40	; 0x28
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20001994 	.word	0x20001994
 800959c:	200019a8 	.word	0x200019a8
 80095a0:	20001998 	.word	0x20001998
 80095a4:	2000198c 	.word	0x2000198c
 80095a8:	2000199c 	.word	0x2000199c
 80095ac:	200019a0 	.word	0x200019a0

080095b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d04d      	beq.n	800965e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80095c2:	2308      	movs	r3, #8
 80095c4:	425b      	negs	r3, r3
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	4413      	add	r3, r2
 80095ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	4b24      	ldr	r3, [pc, #144]	; (8009668 <vPortFree+0xb8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4013      	ands	r3, r2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <vPortFree+0x44>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	60fb      	str	r3, [r7, #12]
}
 80095f0:	bf00      	nop
 80095f2:	e7fe      	b.n	80095f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <vPortFree+0x62>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60bb      	str	r3, [r7, #8]
}
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <vPortFree+0xb8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4013      	ands	r3, r2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d01e      	beq.n	800965e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d11a      	bne.n	800965e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <vPortFree+0xb8>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	43db      	mvns	r3, r3
 8009632:	401a      	ands	r2, r3
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009638:	f7fe fb90 	bl	8007d5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	4b0a      	ldr	r3, [pc, #40]	; (800966c <vPortFree+0xbc>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4413      	add	r3, r2
 8009646:	4a09      	ldr	r2, [pc, #36]	; (800966c <vPortFree+0xbc>)
 8009648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800964a:	6938      	ldr	r0, [r7, #16]
 800964c:	f000 f874 	bl	8009738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009650:	4b07      	ldr	r3, [pc, #28]	; (8009670 <vPortFree+0xc0>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3301      	adds	r3, #1
 8009656:	4a06      	ldr	r2, [pc, #24]	; (8009670 <vPortFree+0xc0>)
 8009658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800965a:	f7fe fb8d 	bl	8007d78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800965e:	bf00      	nop
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	200019a8 	.word	0x200019a8
 800966c:	20001998 	.word	0x20001998
 8009670:	200019a4 	.word	0x200019a4

08009674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800967a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800967e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009680:	4b27      	ldr	r3, [pc, #156]	; (8009720 <prvHeapInit+0xac>)
 8009682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f003 0307 	and.w	r3, r3, #7
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00c      	beq.n	80096a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3307      	adds	r3, #7
 8009692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0307 	bic.w	r3, r3, #7
 800969a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	4a1f      	ldr	r2, [pc, #124]	; (8009720 <prvHeapInit+0xac>)
 80096a4:	4413      	add	r3, r2
 80096a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096ac:	4a1d      	ldr	r2, [pc, #116]	; (8009724 <prvHeapInit+0xb0>)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096b2:	4b1c      	ldr	r3, [pc, #112]	; (8009724 <prvHeapInit+0xb0>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	4413      	add	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80096c0:	2208      	movs	r2, #8
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4a15      	ldr	r2, [pc, #84]	; (8009728 <prvHeapInit+0xb4>)
 80096d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80096d6:	4b14      	ldr	r3, [pc, #80]	; (8009728 <prvHeapInit+0xb4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2200      	movs	r2, #0
 80096dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80096de:	4b12      	ldr	r3, [pc, #72]	; (8009728 <prvHeapInit+0xb4>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	1ad2      	subs	r2, r2, r3
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096f4:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <prvHeapInit+0xb4>)
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <prvHeapInit+0xb8>)
 8009702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	4a09      	ldr	r2, [pc, #36]	; (8009730 <prvHeapInit+0xbc>)
 800970a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800970c:	4b09      	ldr	r3, [pc, #36]	; (8009734 <prvHeapInit+0xc0>)
 800970e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009712:	601a      	str	r2, [r3, #0]
}
 8009714:	bf00      	nop
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	20000dd4 	.word	0x20000dd4
 8009724:	2000198c 	.word	0x2000198c
 8009728:	20001994 	.word	0x20001994
 800972c:	2000199c 	.word	0x2000199c
 8009730:	20001998 	.word	0x20001998
 8009734:	200019a8 	.word	0x200019a8

08009738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009740:	4b28      	ldr	r3, [pc, #160]	; (80097e4 <prvInsertBlockIntoFreeList+0xac>)
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	e002      	b.n	800974c <prvInsertBlockIntoFreeList+0x14>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	429a      	cmp	r2, r3
 8009754:	d8f7      	bhi.n	8009746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	4413      	add	r3, r2
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	429a      	cmp	r2, r3
 8009766:	d108      	bne.n	800977a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	441a      	add	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	441a      	add	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	429a      	cmp	r2, r3
 800978c:	d118      	bne.n	80097c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d00d      	beq.n	80097b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	441a      	add	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	e008      	b.n	80097c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097b6:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <prvInsertBlockIntoFreeList+0xb0>)
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	e003      	b.n	80097c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d002      	beq.n	80097d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097d6:	bf00      	nop
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	2000198c 	.word	0x2000198c
 80097e8:	20001994 	.word	0x20001994

080097ec <__errno>:
 80097ec:	4b01      	ldr	r3, [pc, #4]	; (80097f4 <__errno+0x8>)
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20000028 	.word	0x20000028

080097f8 <__libc_init_array>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4d0d      	ldr	r5, [pc, #52]	; (8009830 <__libc_init_array+0x38>)
 80097fc:	4c0d      	ldr	r4, [pc, #52]	; (8009834 <__libc_init_array+0x3c>)
 80097fe:	1b64      	subs	r4, r4, r5
 8009800:	10a4      	asrs	r4, r4, #2
 8009802:	2600      	movs	r6, #0
 8009804:	42a6      	cmp	r6, r4
 8009806:	d109      	bne.n	800981c <__libc_init_array+0x24>
 8009808:	4d0b      	ldr	r5, [pc, #44]	; (8009838 <__libc_init_array+0x40>)
 800980a:	4c0c      	ldr	r4, [pc, #48]	; (800983c <__libc_init_array+0x44>)
 800980c:	f001 f9be 	bl	800ab8c <_init>
 8009810:	1b64      	subs	r4, r4, r5
 8009812:	10a4      	asrs	r4, r4, #2
 8009814:	2600      	movs	r6, #0
 8009816:	42a6      	cmp	r6, r4
 8009818:	d105      	bne.n	8009826 <__libc_init_array+0x2e>
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009820:	4798      	blx	r3
 8009822:	3601      	adds	r6, #1
 8009824:	e7ee      	b.n	8009804 <__libc_init_array+0xc>
 8009826:	f855 3b04 	ldr.w	r3, [r5], #4
 800982a:	4798      	blx	r3
 800982c:	3601      	adds	r6, #1
 800982e:	e7f2      	b.n	8009816 <__libc_init_array+0x1e>
 8009830:	0800adc8 	.word	0x0800adc8
 8009834:	0800adc8 	.word	0x0800adc8
 8009838:	0800adc8 	.word	0x0800adc8
 800983c:	0800adcc 	.word	0x0800adcc

08009840 <memcpy>:
 8009840:	440a      	add	r2, r1
 8009842:	4291      	cmp	r1, r2
 8009844:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009848:	d100      	bne.n	800984c <memcpy+0xc>
 800984a:	4770      	bx	lr
 800984c:	b510      	push	{r4, lr}
 800984e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009856:	4291      	cmp	r1, r2
 8009858:	d1f9      	bne.n	800984e <memcpy+0xe>
 800985a:	bd10      	pop	{r4, pc}

0800985c <memset>:
 800985c:	4402      	add	r2, r0
 800985e:	4603      	mov	r3, r0
 8009860:	4293      	cmp	r3, r2
 8009862:	d100      	bne.n	8009866 <memset+0xa>
 8009864:	4770      	bx	lr
 8009866:	f803 1b01 	strb.w	r1, [r3], #1
 800986a:	e7f9      	b.n	8009860 <memset+0x4>

0800986c <iprintf>:
 800986c:	b40f      	push	{r0, r1, r2, r3}
 800986e:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <iprintf+0x2c>)
 8009870:	b513      	push	{r0, r1, r4, lr}
 8009872:	681c      	ldr	r4, [r3, #0]
 8009874:	b124      	cbz	r4, 8009880 <iprintf+0x14>
 8009876:	69a3      	ldr	r3, [r4, #24]
 8009878:	b913      	cbnz	r3, 8009880 <iprintf+0x14>
 800987a:	4620      	mov	r0, r4
 800987c:	f000 fa7e 	bl	8009d7c <__sinit>
 8009880:	ab05      	add	r3, sp, #20
 8009882:	9a04      	ldr	r2, [sp, #16]
 8009884:	68a1      	ldr	r1, [r4, #8]
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fdab 	bl	800a3e4 <_vfiprintf_r>
 800988e:	b002      	add	sp, #8
 8009890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009894:	b004      	add	sp, #16
 8009896:	4770      	bx	lr
 8009898:	20000028 	.word	0x20000028

0800989c <_puts_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	460e      	mov	r6, r1
 80098a0:	4605      	mov	r5, r0
 80098a2:	b118      	cbz	r0, 80098ac <_puts_r+0x10>
 80098a4:	6983      	ldr	r3, [r0, #24]
 80098a6:	b90b      	cbnz	r3, 80098ac <_puts_r+0x10>
 80098a8:	f000 fa68 	bl	8009d7c <__sinit>
 80098ac:	69ab      	ldr	r3, [r5, #24]
 80098ae:	68ac      	ldr	r4, [r5, #8]
 80098b0:	b913      	cbnz	r3, 80098b8 <_puts_r+0x1c>
 80098b2:	4628      	mov	r0, r5
 80098b4:	f000 fa62 	bl	8009d7c <__sinit>
 80098b8:	4b2c      	ldr	r3, [pc, #176]	; (800996c <_puts_r+0xd0>)
 80098ba:	429c      	cmp	r4, r3
 80098bc:	d120      	bne.n	8009900 <_puts_r+0x64>
 80098be:	686c      	ldr	r4, [r5, #4]
 80098c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098c2:	07db      	lsls	r3, r3, #31
 80098c4:	d405      	bmi.n	80098d2 <_puts_r+0x36>
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	0598      	lsls	r0, r3, #22
 80098ca:	d402      	bmi.n	80098d2 <_puts_r+0x36>
 80098cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ce:	f000 faf3 	bl	8009eb8 <__retarget_lock_acquire_recursive>
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	0719      	lsls	r1, r3, #28
 80098d6:	d51d      	bpl.n	8009914 <_puts_r+0x78>
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	b1db      	cbz	r3, 8009914 <_puts_r+0x78>
 80098dc:	3e01      	subs	r6, #1
 80098de:	68a3      	ldr	r3, [r4, #8]
 80098e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098e4:	3b01      	subs	r3, #1
 80098e6:	60a3      	str	r3, [r4, #8]
 80098e8:	bb39      	cbnz	r1, 800993a <_puts_r+0x9e>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	da38      	bge.n	8009960 <_puts_r+0xc4>
 80098ee:	4622      	mov	r2, r4
 80098f0:	210a      	movs	r1, #10
 80098f2:	4628      	mov	r0, r5
 80098f4:	f000 f868 	bl	80099c8 <__swbuf_r>
 80098f8:	3001      	adds	r0, #1
 80098fa:	d011      	beq.n	8009920 <_puts_r+0x84>
 80098fc:	250a      	movs	r5, #10
 80098fe:	e011      	b.n	8009924 <_puts_r+0x88>
 8009900:	4b1b      	ldr	r3, [pc, #108]	; (8009970 <_puts_r+0xd4>)
 8009902:	429c      	cmp	r4, r3
 8009904:	d101      	bne.n	800990a <_puts_r+0x6e>
 8009906:	68ac      	ldr	r4, [r5, #8]
 8009908:	e7da      	b.n	80098c0 <_puts_r+0x24>
 800990a:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <_puts_r+0xd8>)
 800990c:	429c      	cmp	r4, r3
 800990e:	bf08      	it	eq
 8009910:	68ec      	ldreq	r4, [r5, #12]
 8009912:	e7d5      	b.n	80098c0 <_puts_r+0x24>
 8009914:	4621      	mov	r1, r4
 8009916:	4628      	mov	r0, r5
 8009918:	f000 f8a8 	bl	8009a6c <__swsetup_r>
 800991c:	2800      	cmp	r0, #0
 800991e:	d0dd      	beq.n	80098dc <_puts_r+0x40>
 8009920:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009926:	07da      	lsls	r2, r3, #31
 8009928:	d405      	bmi.n	8009936 <_puts_r+0x9a>
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	059b      	lsls	r3, r3, #22
 800992e:	d402      	bmi.n	8009936 <_puts_r+0x9a>
 8009930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009932:	f000 fac2 	bl	8009eba <__retarget_lock_release_recursive>
 8009936:	4628      	mov	r0, r5
 8009938:	bd70      	pop	{r4, r5, r6, pc}
 800993a:	2b00      	cmp	r3, #0
 800993c:	da04      	bge.n	8009948 <_puts_r+0xac>
 800993e:	69a2      	ldr	r2, [r4, #24]
 8009940:	429a      	cmp	r2, r3
 8009942:	dc06      	bgt.n	8009952 <_puts_r+0xb6>
 8009944:	290a      	cmp	r1, #10
 8009946:	d004      	beq.n	8009952 <_puts_r+0xb6>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	1c5a      	adds	r2, r3, #1
 800994c:	6022      	str	r2, [r4, #0]
 800994e:	7019      	strb	r1, [r3, #0]
 8009950:	e7c5      	b.n	80098de <_puts_r+0x42>
 8009952:	4622      	mov	r2, r4
 8009954:	4628      	mov	r0, r5
 8009956:	f000 f837 	bl	80099c8 <__swbuf_r>
 800995a:	3001      	adds	r0, #1
 800995c:	d1bf      	bne.n	80098de <_puts_r+0x42>
 800995e:	e7df      	b.n	8009920 <_puts_r+0x84>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	250a      	movs	r5, #10
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	6022      	str	r2, [r4, #0]
 8009968:	701d      	strb	r5, [r3, #0]
 800996a:	e7db      	b.n	8009924 <_puts_r+0x88>
 800996c:	0800ad4c 	.word	0x0800ad4c
 8009970:	0800ad6c 	.word	0x0800ad6c
 8009974:	0800ad2c 	.word	0x0800ad2c

08009978 <puts>:
 8009978:	4b02      	ldr	r3, [pc, #8]	; (8009984 <puts+0xc>)
 800997a:	4601      	mov	r1, r0
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	f7ff bf8d 	b.w	800989c <_puts_r>
 8009982:	bf00      	nop
 8009984:	20000028 	.word	0x20000028

08009988 <siprintf>:
 8009988:	b40e      	push	{r1, r2, r3}
 800998a:	b500      	push	{lr}
 800998c:	b09c      	sub	sp, #112	; 0x70
 800998e:	ab1d      	add	r3, sp, #116	; 0x74
 8009990:	9002      	str	r0, [sp, #8]
 8009992:	9006      	str	r0, [sp, #24]
 8009994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009998:	4809      	ldr	r0, [pc, #36]	; (80099c0 <siprintf+0x38>)
 800999a:	9107      	str	r1, [sp, #28]
 800999c:	9104      	str	r1, [sp, #16]
 800999e:	4909      	ldr	r1, [pc, #36]	; (80099c4 <siprintf+0x3c>)
 80099a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a4:	9105      	str	r1, [sp, #20]
 80099a6:	6800      	ldr	r0, [r0, #0]
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	a902      	add	r1, sp, #8
 80099ac:	f000 fbf0 	bl	800a190 <_svfiprintf_r>
 80099b0:	9b02      	ldr	r3, [sp, #8]
 80099b2:	2200      	movs	r2, #0
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	b01c      	add	sp, #112	; 0x70
 80099b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099bc:	b003      	add	sp, #12
 80099be:	4770      	bx	lr
 80099c0:	20000028 	.word	0x20000028
 80099c4:	ffff0208 	.word	0xffff0208

080099c8 <__swbuf_r>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	460e      	mov	r6, r1
 80099cc:	4614      	mov	r4, r2
 80099ce:	4605      	mov	r5, r0
 80099d0:	b118      	cbz	r0, 80099da <__swbuf_r+0x12>
 80099d2:	6983      	ldr	r3, [r0, #24]
 80099d4:	b90b      	cbnz	r3, 80099da <__swbuf_r+0x12>
 80099d6:	f000 f9d1 	bl	8009d7c <__sinit>
 80099da:	4b21      	ldr	r3, [pc, #132]	; (8009a60 <__swbuf_r+0x98>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	d12b      	bne.n	8009a38 <__swbuf_r+0x70>
 80099e0:	686c      	ldr	r4, [r5, #4]
 80099e2:	69a3      	ldr	r3, [r4, #24]
 80099e4:	60a3      	str	r3, [r4, #8]
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	071a      	lsls	r2, r3, #28
 80099ea:	d52f      	bpl.n	8009a4c <__swbuf_r+0x84>
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	b36b      	cbz	r3, 8009a4c <__swbuf_r+0x84>
 80099f0:	6923      	ldr	r3, [r4, #16]
 80099f2:	6820      	ldr	r0, [r4, #0]
 80099f4:	1ac0      	subs	r0, r0, r3
 80099f6:	6963      	ldr	r3, [r4, #20]
 80099f8:	b2f6      	uxtb	r6, r6
 80099fa:	4283      	cmp	r3, r0
 80099fc:	4637      	mov	r7, r6
 80099fe:	dc04      	bgt.n	8009a0a <__swbuf_r+0x42>
 8009a00:	4621      	mov	r1, r4
 8009a02:	4628      	mov	r0, r5
 8009a04:	f000 f926 	bl	8009c54 <_fflush_r>
 8009a08:	bb30      	cbnz	r0, 8009a58 <__swbuf_r+0x90>
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	60a3      	str	r3, [r4, #8]
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	6022      	str	r2, [r4, #0]
 8009a16:	701e      	strb	r6, [r3, #0]
 8009a18:	6963      	ldr	r3, [r4, #20]
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	4283      	cmp	r3, r0
 8009a1e:	d004      	beq.n	8009a2a <__swbuf_r+0x62>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	07db      	lsls	r3, r3, #31
 8009a24:	d506      	bpl.n	8009a34 <__swbuf_r+0x6c>
 8009a26:	2e0a      	cmp	r6, #10
 8009a28:	d104      	bne.n	8009a34 <__swbuf_r+0x6c>
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f000 f911 	bl	8009c54 <_fflush_r>
 8009a32:	b988      	cbnz	r0, 8009a58 <__swbuf_r+0x90>
 8009a34:	4638      	mov	r0, r7
 8009a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a38:	4b0a      	ldr	r3, [pc, #40]	; (8009a64 <__swbuf_r+0x9c>)
 8009a3a:	429c      	cmp	r4, r3
 8009a3c:	d101      	bne.n	8009a42 <__swbuf_r+0x7a>
 8009a3e:	68ac      	ldr	r4, [r5, #8]
 8009a40:	e7cf      	b.n	80099e2 <__swbuf_r+0x1a>
 8009a42:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <__swbuf_r+0xa0>)
 8009a44:	429c      	cmp	r4, r3
 8009a46:	bf08      	it	eq
 8009a48:	68ec      	ldreq	r4, [r5, #12]
 8009a4a:	e7ca      	b.n	80099e2 <__swbuf_r+0x1a>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 f80c 	bl	8009a6c <__swsetup_r>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d0cb      	beq.n	80099f0 <__swbuf_r+0x28>
 8009a58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009a5c:	e7ea      	b.n	8009a34 <__swbuf_r+0x6c>
 8009a5e:	bf00      	nop
 8009a60:	0800ad4c 	.word	0x0800ad4c
 8009a64:	0800ad6c 	.word	0x0800ad6c
 8009a68:	0800ad2c 	.word	0x0800ad2c

08009a6c <__swsetup_r>:
 8009a6c:	4b32      	ldr	r3, [pc, #200]	; (8009b38 <__swsetup_r+0xcc>)
 8009a6e:	b570      	push	{r4, r5, r6, lr}
 8009a70:	681d      	ldr	r5, [r3, #0]
 8009a72:	4606      	mov	r6, r0
 8009a74:	460c      	mov	r4, r1
 8009a76:	b125      	cbz	r5, 8009a82 <__swsetup_r+0x16>
 8009a78:	69ab      	ldr	r3, [r5, #24]
 8009a7a:	b913      	cbnz	r3, 8009a82 <__swsetup_r+0x16>
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f000 f97d 	bl	8009d7c <__sinit>
 8009a82:	4b2e      	ldr	r3, [pc, #184]	; (8009b3c <__swsetup_r+0xd0>)
 8009a84:	429c      	cmp	r4, r3
 8009a86:	d10f      	bne.n	8009aa8 <__swsetup_r+0x3c>
 8009a88:	686c      	ldr	r4, [r5, #4]
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a90:	0719      	lsls	r1, r3, #28
 8009a92:	d42c      	bmi.n	8009aee <__swsetup_r+0x82>
 8009a94:	06dd      	lsls	r5, r3, #27
 8009a96:	d411      	bmi.n	8009abc <__swsetup_r+0x50>
 8009a98:	2309      	movs	r3, #9
 8009a9a:	6033      	str	r3, [r6, #0]
 8009a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aa6:	e03e      	b.n	8009b26 <__swsetup_r+0xba>
 8009aa8:	4b25      	ldr	r3, [pc, #148]	; (8009b40 <__swsetup_r+0xd4>)
 8009aaa:	429c      	cmp	r4, r3
 8009aac:	d101      	bne.n	8009ab2 <__swsetup_r+0x46>
 8009aae:	68ac      	ldr	r4, [r5, #8]
 8009ab0:	e7eb      	b.n	8009a8a <__swsetup_r+0x1e>
 8009ab2:	4b24      	ldr	r3, [pc, #144]	; (8009b44 <__swsetup_r+0xd8>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	bf08      	it	eq
 8009ab8:	68ec      	ldreq	r4, [r5, #12]
 8009aba:	e7e6      	b.n	8009a8a <__swsetup_r+0x1e>
 8009abc:	0758      	lsls	r0, r3, #29
 8009abe:	d512      	bpl.n	8009ae6 <__swsetup_r+0x7a>
 8009ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ac2:	b141      	cbz	r1, 8009ad6 <__swsetup_r+0x6a>
 8009ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ac8:	4299      	cmp	r1, r3
 8009aca:	d002      	beq.n	8009ad2 <__swsetup_r+0x66>
 8009acc:	4630      	mov	r0, r6
 8009ace:	f000 fa59 	bl	8009f84 <_free_r>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009adc:	81a3      	strh	r3, [r4, #12]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	6063      	str	r3, [r4, #4]
 8009ae2:	6923      	ldr	r3, [r4, #16]
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	f043 0308 	orr.w	r3, r3, #8
 8009aec:	81a3      	strh	r3, [r4, #12]
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	b94b      	cbnz	r3, 8009b06 <__swsetup_r+0x9a>
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009afc:	d003      	beq.n	8009b06 <__swsetup_r+0x9a>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4630      	mov	r0, r6
 8009b02:	f000 f9ff 	bl	8009f04 <__smakebuf_r>
 8009b06:	89a0      	ldrh	r0, [r4, #12]
 8009b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b0c:	f010 0301 	ands.w	r3, r0, #1
 8009b10:	d00a      	beq.n	8009b28 <__swsetup_r+0xbc>
 8009b12:	2300      	movs	r3, #0
 8009b14:	60a3      	str	r3, [r4, #8]
 8009b16:	6963      	ldr	r3, [r4, #20]
 8009b18:	425b      	negs	r3, r3
 8009b1a:	61a3      	str	r3, [r4, #24]
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	b943      	cbnz	r3, 8009b32 <__swsetup_r+0xc6>
 8009b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b24:	d1ba      	bne.n	8009a9c <__swsetup_r+0x30>
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	0781      	lsls	r1, r0, #30
 8009b2a:	bf58      	it	pl
 8009b2c:	6963      	ldrpl	r3, [r4, #20]
 8009b2e:	60a3      	str	r3, [r4, #8]
 8009b30:	e7f4      	b.n	8009b1c <__swsetup_r+0xb0>
 8009b32:	2000      	movs	r0, #0
 8009b34:	e7f7      	b.n	8009b26 <__swsetup_r+0xba>
 8009b36:	bf00      	nop
 8009b38:	20000028 	.word	0x20000028
 8009b3c:	0800ad4c 	.word	0x0800ad4c
 8009b40:	0800ad6c 	.word	0x0800ad6c
 8009b44:	0800ad2c 	.word	0x0800ad2c

08009b48 <__sflush_r>:
 8009b48:	898a      	ldrh	r2, [r1, #12]
 8009b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4e:	4605      	mov	r5, r0
 8009b50:	0710      	lsls	r0, r2, #28
 8009b52:	460c      	mov	r4, r1
 8009b54:	d458      	bmi.n	8009c08 <__sflush_r+0xc0>
 8009b56:	684b      	ldr	r3, [r1, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dc05      	bgt.n	8009b68 <__sflush_r+0x20>
 8009b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	dc02      	bgt.n	8009b68 <__sflush_r+0x20>
 8009b62:	2000      	movs	r0, #0
 8009b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b6a:	2e00      	cmp	r6, #0
 8009b6c:	d0f9      	beq.n	8009b62 <__sflush_r+0x1a>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b74:	682f      	ldr	r7, [r5, #0]
 8009b76:	602b      	str	r3, [r5, #0]
 8009b78:	d032      	beq.n	8009be0 <__sflush_r+0x98>
 8009b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	075a      	lsls	r2, r3, #29
 8009b80:	d505      	bpl.n	8009b8e <__sflush_r+0x46>
 8009b82:	6863      	ldr	r3, [r4, #4]
 8009b84:	1ac0      	subs	r0, r0, r3
 8009b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b88:	b10b      	cbz	r3, 8009b8e <__sflush_r+0x46>
 8009b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b8c:	1ac0      	subs	r0, r0, r3
 8009b8e:	2300      	movs	r3, #0
 8009b90:	4602      	mov	r2, r0
 8009b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b94:	6a21      	ldr	r1, [r4, #32]
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b0      	blx	r6
 8009b9a:	1c43      	adds	r3, r0, #1
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	d106      	bne.n	8009bae <__sflush_r+0x66>
 8009ba0:	6829      	ldr	r1, [r5, #0]
 8009ba2:	291d      	cmp	r1, #29
 8009ba4:	d82c      	bhi.n	8009c00 <__sflush_r+0xb8>
 8009ba6:	4a2a      	ldr	r2, [pc, #168]	; (8009c50 <__sflush_r+0x108>)
 8009ba8:	40ca      	lsrs	r2, r1
 8009baa:	07d6      	lsls	r6, r2, #31
 8009bac:	d528      	bpl.n	8009c00 <__sflush_r+0xb8>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	6062      	str	r2, [r4, #4]
 8009bb2:	04d9      	lsls	r1, r3, #19
 8009bb4:	6922      	ldr	r2, [r4, #16]
 8009bb6:	6022      	str	r2, [r4, #0]
 8009bb8:	d504      	bpl.n	8009bc4 <__sflush_r+0x7c>
 8009bba:	1c42      	adds	r2, r0, #1
 8009bbc:	d101      	bne.n	8009bc2 <__sflush_r+0x7a>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	b903      	cbnz	r3, 8009bc4 <__sflush_r+0x7c>
 8009bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8009bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bc6:	602f      	str	r7, [r5, #0]
 8009bc8:	2900      	cmp	r1, #0
 8009bca:	d0ca      	beq.n	8009b62 <__sflush_r+0x1a>
 8009bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bd0:	4299      	cmp	r1, r3
 8009bd2:	d002      	beq.n	8009bda <__sflush_r+0x92>
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 f9d5 	bl	8009f84 <_free_r>
 8009bda:	2000      	movs	r0, #0
 8009bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8009bde:	e7c1      	b.n	8009b64 <__sflush_r+0x1c>
 8009be0:	6a21      	ldr	r1, [r4, #32]
 8009be2:	2301      	movs	r3, #1
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b0      	blx	r6
 8009be8:	1c41      	adds	r1, r0, #1
 8009bea:	d1c7      	bne.n	8009b7c <__sflush_r+0x34>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0c4      	beq.n	8009b7c <__sflush_r+0x34>
 8009bf2:	2b1d      	cmp	r3, #29
 8009bf4:	d001      	beq.n	8009bfa <__sflush_r+0xb2>
 8009bf6:	2b16      	cmp	r3, #22
 8009bf8:	d101      	bne.n	8009bfe <__sflush_r+0xb6>
 8009bfa:	602f      	str	r7, [r5, #0]
 8009bfc:	e7b1      	b.n	8009b62 <__sflush_r+0x1a>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	e7ad      	b.n	8009b64 <__sflush_r+0x1c>
 8009c08:	690f      	ldr	r7, [r1, #16]
 8009c0a:	2f00      	cmp	r7, #0
 8009c0c:	d0a9      	beq.n	8009b62 <__sflush_r+0x1a>
 8009c0e:	0793      	lsls	r3, r2, #30
 8009c10:	680e      	ldr	r6, [r1, #0]
 8009c12:	bf08      	it	eq
 8009c14:	694b      	ldreq	r3, [r1, #20]
 8009c16:	600f      	str	r7, [r1, #0]
 8009c18:	bf18      	it	ne
 8009c1a:	2300      	movne	r3, #0
 8009c1c:	eba6 0807 	sub.w	r8, r6, r7
 8009c20:	608b      	str	r3, [r1, #8]
 8009c22:	f1b8 0f00 	cmp.w	r8, #0
 8009c26:	dd9c      	ble.n	8009b62 <__sflush_r+0x1a>
 8009c28:	6a21      	ldr	r1, [r4, #32]
 8009c2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c2c:	4643      	mov	r3, r8
 8009c2e:	463a      	mov	r2, r7
 8009c30:	4628      	mov	r0, r5
 8009c32:	47b0      	blx	r6
 8009c34:	2800      	cmp	r0, #0
 8009c36:	dc06      	bgt.n	8009c46 <__sflush_r+0xfe>
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c44:	e78e      	b.n	8009b64 <__sflush_r+0x1c>
 8009c46:	4407      	add	r7, r0
 8009c48:	eba8 0800 	sub.w	r8, r8, r0
 8009c4c:	e7e9      	b.n	8009c22 <__sflush_r+0xda>
 8009c4e:	bf00      	nop
 8009c50:	20400001 	.word	0x20400001

08009c54 <_fflush_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	690b      	ldr	r3, [r1, #16]
 8009c58:	4605      	mov	r5, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	b913      	cbnz	r3, 8009c64 <_fflush_r+0x10>
 8009c5e:	2500      	movs	r5, #0
 8009c60:	4628      	mov	r0, r5
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	b118      	cbz	r0, 8009c6e <_fflush_r+0x1a>
 8009c66:	6983      	ldr	r3, [r0, #24]
 8009c68:	b90b      	cbnz	r3, 8009c6e <_fflush_r+0x1a>
 8009c6a:	f000 f887 	bl	8009d7c <__sinit>
 8009c6e:	4b14      	ldr	r3, [pc, #80]	; (8009cc0 <_fflush_r+0x6c>)
 8009c70:	429c      	cmp	r4, r3
 8009c72:	d11b      	bne.n	8009cac <_fflush_r+0x58>
 8009c74:	686c      	ldr	r4, [r5, #4]
 8009c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0ef      	beq.n	8009c5e <_fflush_r+0xa>
 8009c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c80:	07d0      	lsls	r0, r2, #31
 8009c82:	d404      	bmi.n	8009c8e <_fflush_r+0x3a>
 8009c84:	0599      	lsls	r1, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_fflush_r+0x3a>
 8009c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c8a:	f000 f915 	bl	8009eb8 <__retarget_lock_acquire_recursive>
 8009c8e:	4628      	mov	r0, r5
 8009c90:	4621      	mov	r1, r4
 8009c92:	f7ff ff59 	bl	8009b48 <__sflush_r>
 8009c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c98:	07da      	lsls	r2, r3, #31
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	d4e0      	bmi.n	8009c60 <_fflush_r+0xc>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	059b      	lsls	r3, r3, #22
 8009ca2:	d4dd      	bmi.n	8009c60 <_fflush_r+0xc>
 8009ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca6:	f000 f908 	bl	8009eba <__retarget_lock_release_recursive>
 8009caa:	e7d9      	b.n	8009c60 <_fflush_r+0xc>
 8009cac:	4b05      	ldr	r3, [pc, #20]	; (8009cc4 <_fflush_r+0x70>)
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	d101      	bne.n	8009cb6 <_fflush_r+0x62>
 8009cb2:	68ac      	ldr	r4, [r5, #8]
 8009cb4:	e7df      	b.n	8009c76 <_fflush_r+0x22>
 8009cb6:	4b04      	ldr	r3, [pc, #16]	; (8009cc8 <_fflush_r+0x74>)
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	bf08      	it	eq
 8009cbc:	68ec      	ldreq	r4, [r5, #12]
 8009cbe:	e7da      	b.n	8009c76 <_fflush_r+0x22>
 8009cc0:	0800ad4c 	.word	0x0800ad4c
 8009cc4:	0800ad6c 	.word	0x0800ad6c
 8009cc8:	0800ad2c 	.word	0x0800ad2c

08009ccc <std>:
 8009ccc:	2300      	movs	r3, #0
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8009cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cda:	6083      	str	r3, [r0, #8]
 8009cdc:	8181      	strh	r1, [r0, #12]
 8009cde:	6643      	str	r3, [r0, #100]	; 0x64
 8009ce0:	81c2      	strh	r2, [r0, #14]
 8009ce2:	6183      	str	r3, [r0, #24]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	2208      	movs	r2, #8
 8009ce8:	305c      	adds	r0, #92	; 0x5c
 8009cea:	f7ff fdb7 	bl	800985c <memset>
 8009cee:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <std+0x38>)
 8009cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8009cf2:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <std+0x3c>)
 8009cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cf6:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <std+0x40>)
 8009cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cfa:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <std+0x44>)
 8009cfc:	6224      	str	r4, [r4, #32]
 8009cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8009d00:	bd10      	pop	{r4, pc}
 8009d02:	bf00      	nop
 8009d04:	0800a98d 	.word	0x0800a98d
 8009d08:	0800a9af 	.word	0x0800a9af
 8009d0c:	0800a9e7 	.word	0x0800a9e7
 8009d10:	0800aa0b 	.word	0x0800aa0b

08009d14 <_cleanup_r>:
 8009d14:	4901      	ldr	r1, [pc, #4]	; (8009d1c <_cleanup_r+0x8>)
 8009d16:	f000 b8af 	b.w	8009e78 <_fwalk_reent>
 8009d1a:	bf00      	nop
 8009d1c:	08009c55 	.word	0x08009c55

08009d20 <__sfmoreglue>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	1e4a      	subs	r2, r1, #1
 8009d24:	2568      	movs	r5, #104	; 0x68
 8009d26:	4355      	muls	r5, r2
 8009d28:	460e      	mov	r6, r1
 8009d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d2e:	f000 f979 	bl	800a024 <_malloc_r>
 8009d32:	4604      	mov	r4, r0
 8009d34:	b140      	cbz	r0, 8009d48 <__sfmoreglue+0x28>
 8009d36:	2100      	movs	r1, #0
 8009d38:	e9c0 1600 	strd	r1, r6, [r0]
 8009d3c:	300c      	adds	r0, #12
 8009d3e:	60a0      	str	r0, [r4, #8]
 8009d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d44:	f7ff fd8a 	bl	800985c <memset>
 8009d48:	4620      	mov	r0, r4
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}

08009d4c <__sfp_lock_acquire>:
 8009d4c:	4801      	ldr	r0, [pc, #4]	; (8009d54 <__sfp_lock_acquire+0x8>)
 8009d4e:	f000 b8b3 	b.w	8009eb8 <__retarget_lock_acquire_recursive>
 8009d52:	bf00      	nop
 8009d54:	2000603c 	.word	0x2000603c

08009d58 <__sfp_lock_release>:
 8009d58:	4801      	ldr	r0, [pc, #4]	; (8009d60 <__sfp_lock_release+0x8>)
 8009d5a:	f000 b8ae 	b.w	8009eba <__retarget_lock_release_recursive>
 8009d5e:	bf00      	nop
 8009d60:	2000603c 	.word	0x2000603c

08009d64 <__sinit_lock_acquire>:
 8009d64:	4801      	ldr	r0, [pc, #4]	; (8009d6c <__sinit_lock_acquire+0x8>)
 8009d66:	f000 b8a7 	b.w	8009eb8 <__retarget_lock_acquire_recursive>
 8009d6a:	bf00      	nop
 8009d6c:	20006037 	.word	0x20006037

08009d70 <__sinit_lock_release>:
 8009d70:	4801      	ldr	r0, [pc, #4]	; (8009d78 <__sinit_lock_release+0x8>)
 8009d72:	f000 b8a2 	b.w	8009eba <__retarget_lock_release_recursive>
 8009d76:	bf00      	nop
 8009d78:	20006037 	.word	0x20006037

08009d7c <__sinit>:
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	4604      	mov	r4, r0
 8009d80:	f7ff fff0 	bl	8009d64 <__sinit_lock_acquire>
 8009d84:	69a3      	ldr	r3, [r4, #24]
 8009d86:	b11b      	cbz	r3, 8009d90 <__sinit+0x14>
 8009d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d8c:	f7ff bff0 	b.w	8009d70 <__sinit_lock_release>
 8009d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d94:	6523      	str	r3, [r4, #80]	; 0x50
 8009d96:	4b13      	ldr	r3, [pc, #76]	; (8009de4 <__sinit+0x68>)
 8009d98:	4a13      	ldr	r2, [pc, #76]	; (8009de8 <__sinit+0x6c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d9e:	42a3      	cmp	r3, r4
 8009da0:	bf04      	itt	eq
 8009da2:	2301      	moveq	r3, #1
 8009da4:	61a3      	streq	r3, [r4, #24]
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 f820 	bl	8009dec <__sfp>
 8009dac:	6060      	str	r0, [r4, #4]
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 f81c 	bl	8009dec <__sfp>
 8009db4:	60a0      	str	r0, [r4, #8]
 8009db6:	4620      	mov	r0, r4
 8009db8:	f000 f818 	bl	8009dec <__sfp>
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	60e0      	str	r0, [r4, #12]
 8009dc0:	2104      	movs	r1, #4
 8009dc2:	6860      	ldr	r0, [r4, #4]
 8009dc4:	f7ff ff82 	bl	8009ccc <std>
 8009dc8:	68a0      	ldr	r0, [r4, #8]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	2109      	movs	r1, #9
 8009dce:	f7ff ff7d 	bl	8009ccc <std>
 8009dd2:	68e0      	ldr	r0, [r4, #12]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	2112      	movs	r1, #18
 8009dd8:	f7ff ff78 	bl	8009ccc <std>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	61a3      	str	r3, [r4, #24]
 8009de0:	e7d2      	b.n	8009d88 <__sinit+0xc>
 8009de2:	bf00      	nop
 8009de4:	0800ad28 	.word	0x0800ad28
 8009de8:	08009d15 	.word	0x08009d15

08009dec <__sfp>:
 8009dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dee:	4607      	mov	r7, r0
 8009df0:	f7ff ffac 	bl	8009d4c <__sfp_lock_acquire>
 8009df4:	4b1e      	ldr	r3, [pc, #120]	; (8009e70 <__sfp+0x84>)
 8009df6:	681e      	ldr	r6, [r3, #0]
 8009df8:	69b3      	ldr	r3, [r6, #24]
 8009dfa:	b913      	cbnz	r3, 8009e02 <__sfp+0x16>
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f7ff ffbd 	bl	8009d7c <__sinit>
 8009e02:	3648      	adds	r6, #72	; 0x48
 8009e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	d503      	bpl.n	8009e14 <__sfp+0x28>
 8009e0c:	6833      	ldr	r3, [r6, #0]
 8009e0e:	b30b      	cbz	r3, 8009e54 <__sfp+0x68>
 8009e10:	6836      	ldr	r6, [r6, #0]
 8009e12:	e7f7      	b.n	8009e04 <__sfp+0x18>
 8009e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e18:	b9d5      	cbnz	r5, 8009e50 <__sfp+0x64>
 8009e1a:	4b16      	ldr	r3, [pc, #88]	; (8009e74 <__sfp+0x88>)
 8009e1c:	60e3      	str	r3, [r4, #12]
 8009e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e22:	6665      	str	r5, [r4, #100]	; 0x64
 8009e24:	f000 f847 	bl	8009eb6 <__retarget_lock_init_recursive>
 8009e28:	f7ff ff96 	bl	8009d58 <__sfp_lock_release>
 8009e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e34:	6025      	str	r5, [r4, #0]
 8009e36:	61a5      	str	r5, [r4, #24]
 8009e38:	2208      	movs	r2, #8
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e40:	f7ff fd0c 	bl	800985c <memset>
 8009e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e50:	3468      	adds	r4, #104	; 0x68
 8009e52:	e7d9      	b.n	8009e08 <__sfp+0x1c>
 8009e54:	2104      	movs	r1, #4
 8009e56:	4638      	mov	r0, r7
 8009e58:	f7ff ff62 	bl	8009d20 <__sfmoreglue>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	6030      	str	r0, [r6, #0]
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d1d5      	bne.n	8009e10 <__sfp+0x24>
 8009e64:	f7ff ff78 	bl	8009d58 <__sfp_lock_release>
 8009e68:	230c      	movs	r3, #12
 8009e6a:	603b      	str	r3, [r7, #0]
 8009e6c:	e7ee      	b.n	8009e4c <__sfp+0x60>
 8009e6e:	bf00      	nop
 8009e70:	0800ad28 	.word	0x0800ad28
 8009e74:	ffff0001 	.word	0xffff0001

08009e78 <_fwalk_reent>:
 8009e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	4688      	mov	r8, r1
 8009e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e84:	2700      	movs	r7, #0
 8009e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8009e8e:	d505      	bpl.n	8009e9c <_fwalk_reent+0x24>
 8009e90:	6824      	ldr	r4, [r4, #0]
 8009e92:	2c00      	cmp	r4, #0
 8009e94:	d1f7      	bne.n	8009e86 <_fwalk_reent+0xe>
 8009e96:	4638      	mov	r0, r7
 8009e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e9c:	89ab      	ldrh	r3, [r5, #12]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d907      	bls.n	8009eb2 <_fwalk_reent+0x3a>
 8009ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	d003      	beq.n	8009eb2 <_fwalk_reent+0x3a>
 8009eaa:	4629      	mov	r1, r5
 8009eac:	4630      	mov	r0, r6
 8009eae:	47c0      	blx	r8
 8009eb0:	4307      	orrs	r7, r0
 8009eb2:	3568      	adds	r5, #104	; 0x68
 8009eb4:	e7e9      	b.n	8009e8a <_fwalk_reent+0x12>

08009eb6 <__retarget_lock_init_recursive>:
 8009eb6:	4770      	bx	lr

08009eb8 <__retarget_lock_acquire_recursive>:
 8009eb8:	4770      	bx	lr

08009eba <__retarget_lock_release_recursive>:
 8009eba:	4770      	bx	lr

08009ebc <__swhatbuf_r>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	460e      	mov	r6, r1
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	b096      	sub	sp, #88	; 0x58
 8009ec8:	4614      	mov	r4, r2
 8009eca:	461d      	mov	r5, r3
 8009ecc:	da07      	bge.n	8009ede <__swhatbuf_r+0x22>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	602b      	str	r3, [r5, #0]
 8009ed2:	89b3      	ldrh	r3, [r6, #12]
 8009ed4:	061a      	lsls	r2, r3, #24
 8009ed6:	d410      	bmi.n	8009efa <__swhatbuf_r+0x3e>
 8009ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009edc:	e00e      	b.n	8009efc <__swhatbuf_r+0x40>
 8009ede:	466a      	mov	r2, sp
 8009ee0:	f000 fdba 	bl	800aa58 <_fstat_r>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	dbf2      	blt.n	8009ece <__swhatbuf_r+0x12>
 8009ee8:	9a01      	ldr	r2, [sp, #4]
 8009eea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009eee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ef2:	425a      	negs	r2, r3
 8009ef4:	415a      	adcs	r2, r3
 8009ef6:	602a      	str	r2, [r5, #0]
 8009ef8:	e7ee      	b.n	8009ed8 <__swhatbuf_r+0x1c>
 8009efa:	2340      	movs	r3, #64	; 0x40
 8009efc:	2000      	movs	r0, #0
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	b016      	add	sp, #88	; 0x58
 8009f02:	bd70      	pop	{r4, r5, r6, pc}

08009f04 <__smakebuf_r>:
 8009f04:	898b      	ldrh	r3, [r1, #12]
 8009f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f08:	079d      	lsls	r5, r3, #30
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	460c      	mov	r4, r1
 8009f0e:	d507      	bpl.n	8009f20 <__smakebuf_r+0x1c>
 8009f10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	6123      	str	r3, [r4, #16]
 8009f18:	2301      	movs	r3, #1
 8009f1a:	6163      	str	r3, [r4, #20]
 8009f1c:	b002      	add	sp, #8
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
 8009f20:	ab01      	add	r3, sp, #4
 8009f22:	466a      	mov	r2, sp
 8009f24:	f7ff ffca 	bl	8009ebc <__swhatbuf_r>
 8009f28:	9900      	ldr	r1, [sp, #0]
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f000 f879 	bl	800a024 <_malloc_r>
 8009f32:	b948      	cbnz	r0, 8009f48 <__smakebuf_r+0x44>
 8009f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f38:	059a      	lsls	r2, r3, #22
 8009f3a:	d4ef      	bmi.n	8009f1c <__smakebuf_r+0x18>
 8009f3c:	f023 0303 	bic.w	r3, r3, #3
 8009f40:	f043 0302 	orr.w	r3, r3, #2
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	e7e3      	b.n	8009f10 <__smakebuf_r+0xc>
 8009f48:	4b0d      	ldr	r3, [pc, #52]	; (8009f80 <__smakebuf_r+0x7c>)
 8009f4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	6020      	str	r0, [r4, #0]
 8009f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	9b00      	ldr	r3, [sp, #0]
 8009f58:	6163      	str	r3, [r4, #20]
 8009f5a:	9b01      	ldr	r3, [sp, #4]
 8009f5c:	6120      	str	r0, [r4, #16]
 8009f5e:	b15b      	cbz	r3, 8009f78 <__smakebuf_r+0x74>
 8009f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f64:	4630      	mov	r0, r6
 8009f66:	f000 fd89 	bl	800aa7c <_isatty_r>
 8009f6a:	b128      	cbz	r0, 8009f78 <__smakebuf_r+0x74>
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	f023 0303 	bic.w	r3, r3, #3
 8009f72:	f043 0301 	orr.w	r3, r3, #1
 8009f76:	81a3      	strh	r3, [r4, #12]
 8009f78:	89a0      	ldrh	r0, [r4, #12]
 8009f7a:	4305      	orrs	r5, r0
 8009f7c:	81a5      	strh	r5, [r4, #12]
 8009f7e:	e7cd      	b.n	8009f1c <__smakebuf_r+0x18>
 8009f80:	08009d15 	.word	0x08009d15

08009f84 <_free_r>:
 8009f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f86:	2900      	cmp	r1, #0
 8009f88:	d048      	beq.n	800a01c <_free_r+0x98>
 8009f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f8e:	9001      	str	r0, [sp, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f1a1 0404 	sub.w	r4, r1, #4
 8009f96:	bfb8      	it	lt
 8009f98:	18e4      	addlt	r4, r4, r3
 8009f9a:	f000 fdab 	bl	800aaf4 <__malloc_lock>
 8009f9e:	4a20      	ldr	r2, [pc, #128]	; (800a020 <_free_r+0x9c>)
 8009fa0:	9801      	ldr	r0, [sp, #4]
 8009fa2:	6813      	ldr	r3, [r2, #0]
 8009fa4:	4615      	mov	r5, r2
 8009fa6:	b933      	cbnz	r3, 8009fb6 <_free_r+0x32>
 8009fa8:	6063      	str	r3, [r4, #4]
 8009faa:	6014      	str	r4, [r2, #0]
 8009fac:	b003      	add	sp, #12
 8009fae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fb2:	f000 bda5 	b.w	800ab00 <__malloc_unlock>
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	d90b      	bls.n	8009fd2 <_free_r+0x4e>
 8009fba:	6821      	ldr	r1, [r4, #0]
 8009fbc:	1862      	adds	r2, r4, r1
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	bf04      	itt	eq
 8009fc2:	681a      	ldreq	r2, [r3, #0]
 8009fc4:	685b      	ldreq	r3, [r3, #4]
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	bf04      	itt	eq
 8009fca:	1852      	addeq	r2, r2, r1
 8009fcc:	6022      	streq	r2, [r4, #0]
 8009fce:	602c      	str	r4, [r5, #0]
 8009fd0:	e7ec      	b.n	8009fac <_free_r+0x28>
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	b10b      	cbz	r3, 8009fdc <_free_r+0x58>
 8009fd8:	42a3      	cmp	r3, r4
 8009fda:	d9fa      	bls.n	8009fd2 <_free_r+0x4e>
 8009fdc:	6811      	ldr	r1, [r2, #0]
 8009fde:	1855      	adds	r5, r2, r1
 8009fe0:	42a5      	cmp	r5, r4
 8009fe2:	d10b      	bne.n	8009ffc <_free_r+0x78>
 8009fe4:	6824      	ldr	r4, [r4, #0]
 8009fe6:	4421      	add	r1, r4
 8009fe8:	1854      	adds	r4, r2, r1
 8009fea:	42a3      	cmp	r3, r4
 8009fec:	6011      	str	r1, [r2, #0]
 8009fee:	d1dd      	bne.n	8009fac <_free_r+0x28>
 8009ff0:	681c      	ldr	r4, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	6053      	str	r3, [r2, #4]
 8009ff6:	4421      	add	r1, r4
 8009ff8:	6011      	str	r1, [r2, #0]
 8009ffa:	e7d7      	b.n	8009fac <_free_r+0x28>
 8009ffc:	d902      	bls.n	800a004 <_free_r+0x80>
 8009ffe:	230c      	movs	r3, #12
 800a000:	6003      	str	r3, [r0, #0]
 800a002:	e7d3      	b.n	8009fac <_free_r+0x28>
 800a004:	6825      	ldr	r5, [r4, #0]
 800a006:	1961      	adds	r1, r4, r5
 800a008:	428b      	cmp	r3, r1
 800a00a:	bf04      	itt	eq
 800a00c:	6819      	ldreq	r1, [r3, #0]
 800a00e:	685b      	ldreq	r3, [r3, #4]
 800a010:	6063      	str	r3, [r4, #4]
 800a012:	bf04      	itt	eq
 800a014:	1949      	addeq	r1, r1, r5
 800a016:	6021      	streq	r1, [r4, #0]
 800a018:	6054      	str	r4, [r2, #4]
 800a01a:	e7c7      	b.n	8009fac <_free_r+0x28>
 800a01c:	b003      	add	sp, #12
 800a01e:	bd30      	pop	{r4, r5, pc}
 800a020:	200019ac 	.word	0x200019ac

0800a024 <_malloc_r>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	1ccd      	adds	r5, r1, #3
 800a028:	f025 0503 	bic.w	r5, r5, #3
 800a02c:	3508      	adds	r5, #8
 800a02e:	2d0c      	cmp	r5, #12
 800a030:	bf38      	it	cc
 800a032:	250c      	movcc	r5, #12
 800a034:	2d00      	cmp	r5, #0
 800a036:	4606      	mov	r6, r0
 800a038:	db01      	blt.n	800a03e <_malloc_r+0x1a>
 800a03a:	42a9      	cmp	r1, r5
 800a03c:	d903      	bls.n	800a046 <_malloc_r+0x22>
 800a03e:	230c      	movs	r3, #12
 800a040:	6033      	str	r3, [r6, #0]
 800a042:	2000      	movs	r0, #0
 800a044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a046:	f000 fd55 	bl	800aaf4 <__malloc_lock>
 800a04a:	4921      	ldr	r1, [pc, #132]	; (800a0d0 <_malloc_r+0xac>)
 800a04c:	680a      	ldr	r2, [r1, #0]
 800a04e:	4614      	mov	r4, r2
 800a050:	b99c      	cbnz	r4, 800a07a <_malloc_r+0x56>
 800a052:	4f20      	ldr	r7, [pc, #128]	; (800a0d4 <_malloc_r+0xb0>)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	b923      	cbnz	r3, 800a062 <_malloc_r+0x3e>
 800a058:	4621      	mov	r1, r4
 800a05a:	4630      	mov	r0, r6
 800a05c:	f000 fc86 	bl	800a96c <_sbrk_r>
 800a060:	6038      	str	r0, [r7, #0]
 800a062:	4629      	mov	r1, r5
 800a064:	4630      	mov	r0, r6
 800a066:	f000 fc81 	bl	800a96c <_sbrk_r>
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	d123      	bne.n	800a0b6 <_malloc_r+0x92>
 800a06e:	230c      	movs	r3, #12
 800a070:	6033      	str	r3, [r6, #0]
 800a072:	4630      	mov	r0, r6
 800a074:	f000 fd44 	bl	800ab00 <__malloc_unlock>
 800a078:	e7e3      	b.n	800a042 <_malloc_r+0x1e>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	1b5b      	subs	r3, r3, r5
 800a07e:	d417      	bmi.n	800a0b0 <_malloc_r+0x8c>
 800a080:	2b0b      	cmp	r3, #11
 800a082:	d903      	bls.n	800a08c <_malloc_r+0x68>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	441c      	add	r4, r3
 800a088:	6025      	str	r5, [r4, #0]
 800a08a:	e004      	b.n	800a096 <_malloc_r+0x72>
 800a08c:	6863      	ldr	r3, [r4, #4]
 800a08e:	42a2      	cmp	r2, r4
 800a090:	bf0c      	ite	eq
 800a092:	600b      	streq	r3, [r1, #0]
 800a094:	6053      	strne	r3, [r2, #4]
 800a096:	4630      	mov	r0, r6
 800a098:	f000 fd32 	bl	800ab00 <__malloc_unlock>
 800a09c:	f104 000b 	add.w	r0, r4, #11
 800a0a0:	1d23      	adds	r3, r4, #4
 800a0a2:	f020 0007 	bic.w	r0, r0, #7
 800a0a6:	1ac2      	subs	r2, r0, r3
 800a0a8:	d0cc      	beq.n	800a044 <_malloc_r+0x20>
 800a0aa:	1a1b      	subs	r3, r3, r0
 800a0ac:	50a3      	str	r3, [r4, r2]
 800a0ae:	e7c9      	b.n	800a044 <_malloc_r+0x20>
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	6864      	ldr	r4, [r4, #4]
 800a0b4:	e7cc      	b.n	800a050 <_malloc_r+0x2c>
 800a0b6:	1cc4      	adds	r4, r0, #3
 800a0b8:	f024 0403 	bic.w	r4, r4, #3
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	d0e3      	beq.n	800a088 <_malloc_r+0x64>
 800a0c0:	1a21      	subs	r1, r4, r0
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f000 fc52 	bl	800a96c <_sbrk_r>
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d1dd      	bne.n	800a088 <_malloc_r+0x64>
 800a0cc:	e7cf      	b.n	800a06e <_malloc_r+0x4a>
 800a0ce:	bf00      	nop
 800a0d0:	200019ac 	.word	0x200019ac
 800a0d4:	200019b0 	.word	0x200019b0

0800a0d8 <__ssputs_r>:
 800a0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0dc:	688e      	ldr	r6, [r1, #8]
 800a0de:	429e      	cmp	r6, r3
 800a0e0:	4682      	mov	sl, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	4690      	mov	r8, r2
 800a0e6:	461f      	mov	r7, r3
 800a0e8:	d838      	bhi.n	800a15c <__ssputs_r+0x84>
 800a0ea:	898a      	ldrh	r2, [r1, #12]
 800a0ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0f0:	d032      	beq.n	800a158 <__ssputs_r+0x80>
 800a0f2:	6825      	ldr	r5, [r4, #0]
 800a0f4:	6909      	ldr	r1, [r1, #16]
 800a0f6:	eba5 0901 	sub.w	r9, r5, r1
 800a0fa:	6965      	ldr	r5, [r4, #20]
 800a0fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a104:	3301      	adds	r3, #1
 800a106:	444b      	add	r3, r9
 800a108:	106d      	asrs	r5, r5, #1
 800a10a:	429d      	cmp	r5, r3
 800a10c:	bf38      	it	cc
 800a10e:	461d      	movcc	r5, r3
 800a110:	0553      	lsls	r3, r2, #21
 800a112:	d531      	bpl.n	800a178 <__ssputs_r+0xa0>
 800a114:	4629      	mov	r1, r5
 800a116:	f7ff ff85 	bl	800a024 <_malloc_r>
 800a11a:	4606      	mov	r6, r0
 800a11c:	b950      	cbnz	r0, 800a134 <__ssputs_r+0x5c>
 800a11e:	230c      	movs	r3, #12
 800a120:	f8ca 3000 	str.w	r3, [sl]
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a12a:	81a3      	strh	r3, [r4, #12]
 800a12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a134:	6921      	ldr	r1, [r4, #16]
 800a136:	464a      	mov	r2, r9
 800a138:	f7ff fb82 	bl	8009840 <memcpy>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a146:	81a3      	strh	r3, [r4, #12]
 800a148:	6126      	str	r6, [r4, #16]
 800a14a:	6165      	str	r5, [r4, #20]
 800a14c:	444e      	add	r6, r9
 800a14e:	eba5 0509 	sub.w	r5, r5, r9
 800a152:	6026      	str	r6, [r4, #0]
 800a154:	60a5      	str	r5, [r4, #8]
 800a156:	463e      	mov	r6, r7
 800a158:	42be      	cmp	r6, r7
 800a15a:	d900      	bls.n	800a15e <__ssputs_r+0x86>
 800a15c:	463e      	mov	r6, r7
 800a15e:	4632      	mov	r2, r6
 800a160:	6820      	ldr	r0, [r4, #0]
 800a162:	4641      	mov	r1, r8
 800a164:	f000 fcac 	bl	800aac0 <memmove>
 800a168:	68a3      	ldr	r3, [r4, #8]
 800a16a:	6822      	ldr	r2, [r4, #0]
 800a16c:	1b9b      	subs	r3, r3, r6
 800a16e:	4432      	add	r2, r6
 800a170:	60a3      	str	r3, [r4, #8]
 800a172:	6022      	str	r2, [r4, #0]
 800a174:	2000      	movs	r0, #0
 800a176:	e7db      	b.n	800a130 <__ssputs_r+0x58>
 800a178:	462a      	mov	r2, r5
 800a17a:	f000 fcc7 	bl	800ab0c <_realloc_r>
 800a17e:	4606      	mov	r6, r0
 800a180:	2800      	cmp	r0, #0
 800a182:	d1e1      	bne.n	800a148 <__ssputs_r+0x70>
 800a184:	6921      	ldr	r1, [r4, #16]
 800a186:	4650      	mov	r0, sl
 800a188:	f7ff fefc 	bl	8009f84 <_free_r>
 800a18c:	e7c7      	b.n	800a11e <__ssputs_r+0x46>
	...

0800a190 <_svfiprintf_r>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	4698      	mov	r8, r3
 800a196:	898b      	ldrh	r3, [r1, #12]
 800a198:	061b      	lsls	r3, r3, #24
 800a19a:	b09d      	sub	sp, #116	; 0x74
 800a19c:	4607      	mov	r7, r0
 800a19e:	460d      	mov	r5, r1
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	d50e      	bpl.n	800a1c2 <_svfiprintf_r+0x32>
 800a1a4:	690b      	ldr	r3, [r1, #16]
 800a1a6:	b963      	cbnz	r3, 800a1c2 <_svfiprintf_r+0x32>
 800a1a8:	2140      	movs	r1, #64	; 0x40
 800a1aa:	f7ff ff3b 	bl	800a024 <_malloc_r>
 800a1ae:	6028      	str	r0, [r5, #0]
 800a1b0:	6128      	str	r0, [r5, #16]
 800a1b2:	b920      	cbnz	r0, 800a1be <_svfiprintf_r+0x2e>
 800a1b4:	230c      	movs	r3, #12
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1bc:	e0d1      	b.n	800a362 <_svfiprintf_r+0x1d2>
 800a1be:	2340      	movs	r3, #64	; 0x40
 800a1c0:	616b      	str	r3, [r5, #20]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c6:	2320      	movs	r3, #32
 800a1c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1d0:	2330      	movs	r3, #48	; 0x30
 800a1d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a37c <_svfiprintf_r+0x1ec>
 800a1d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1da:	f04f 0901 	mov.w	r9, #1
 800a1de:	4623      	mov	r3, r4
 800a1e0:	469a      	mov	sl, r3
 800a1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e6:	b10a      	cbz	r2, 800a1ec <_svfiprintf_r+0x5c>
 800a1e8:	2a25      	cmp	r2, #37	; 0x25
 800a1ea:	d1f9      	bne.n	800a1e0 <_svfiprintf_r+0x50>
 800a1ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a1f0:	d00b      	beq.n	800a20a <_svfiprintf_r+0x7a>
 800a1f2:	465b      	mov	r3, fp
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f7ff ff6d 	bl	800a0d8 <__ssputs_r>
 800a1fe:	3001      	adds	r0, #1
 800a200:	f000 80aa 	beq.w	800a358 <_svfiprintf_r+0x1c8>
 800a204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a206:	445a      	add	r2, fp
 800a208:	9209      	str	r2, [sp, #36]	; 0x24
 800a20a:	f89a 3000 	ldrb.w	r3, [sl]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 80a2 	beq.w	800a358 <_svfiprintf_r+0x1c8>
 800a214:	2300      	movs	r3, #0
 800a216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a21a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a21e:	f10a 0a01 	add.w	sl, sl, #1
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	9307      	str	r3, [sp, #28]
 800a226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a22a:	931a      	str	r3, [sp, #104]	; 0x68
 800a22c:	4654      	mov	r4, sl
 800a22e:	2205      	movs	r2, #5
 800a230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a234:	4851      	ldr	r0, [pc, #324]	; (800a37c <_svfiprintf_r+0x1ec>)
 800a236:	f7f5 ffd3 	bl	80001e0 <memchr>
 800a23a:	9a04      	ldr	r2, [sp, #16]
 800a23c:	b9d8      	cbnz	r0, 800a276 <_svfiprintf_r+0xe6>
 800a23e:	06d0      	lsls	r0, r2, #27
 800a240:	bf44      	itt	mi
 800a242:	2320      	movmi	r3, #32
 800a244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a248:	0711      	lsls	r1, r2, #28
 800a24a:	bf44      	itt	mi
 800a24c:	232b      	movmi	r3, #43	; 0x2b
 800a24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a252:	f89a 3000 	ldrb.w	r3, [sl]
 800a256:	2b2a      	cmp	r3, #42	; 0x2a
 800a258:	d015      	beq.n	800a286 <_svfiprintf_r+0xf6>
 800a25a:	9a07      	ldr	r2, [sp, #28]
 800a25c:	4654      	mov	r4, sl
 800a25e:	2000      	movs	r0, #0
 800a260:	f04f 0c0a 	mov.w	ip, #10
 800a264:	4621      	mov	r1, r4
 800a266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a26a:	3b30      	subs	r3, #48	; 0x30
 800a26c:	2b09      	cmp	r3, #9
 800a26e:	d94e      	bls.n	800a30e <_svfiprintf_r+0x17e>
 800a270:	b1b0      	cbz	r0, 800a2a0 <_svfiprintf_r+0x110>
 800a272:	9207      	str	r2, [sp, #28]
 800a274:	e014      	b.n	800a2a0 <_svfiprintf_r+0x110>
 800a276:	eba0 0308 	sub.w	r3, r0, r8
 800a27a:	fa09 f303 	lsl.w	r3, r9, r3
 800a27e:	4313      	orrs	r3, r2
 800a280:	9304      	str	r3, [sp, #16]
 800a282:	46a2      	mov	sl, r4
 800a284:	e7d2      	b.n	800a22c <_svfiprintf_r+0x9c>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	1d19      	adds	r1, r3, #4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	9103      	str	r1, [sp, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bfbb      	ittet	lt
 800a292:	425b      	neglt	r3, r3
 800a294:	f042 0202 	orrlt.w	r2, r2, #2
 800a298:	9307      	strge	r3, [sp, #28]
 800a29a:	9307      	strlt	r3, [sp, #28]
 800a29c:	bfb8      	it	lt
 800a29e:	9204      	strlt	r2, [sp, #16]
 800a2a0:	7823      	ldrb	r3, [r4, #0]
 800a2a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a2a4:	d10c      	bne.n	800a2c0 <_svfiprintf_r+0x130>
 800a2a6:	7863      	ldrb	r3, [r4, #1]
 800a2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2aa:	d135      	bne.n	800a318 <_svfiprintf_r+0x188>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	1d1a      	adds	r2, r3, #4
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	9203      	str	r2, [sp, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	bfb8      	it	lt
 800a2b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2bc:	3402      	adds	r4, #2
 800a2be:	9305      	str	r3, [sp, #20]
 800a2c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a38c <_svfiprintf_r+0x1fc>
 800a2c4:	7821      	ldrb	r1, [r4, #0]
 800a2c6:	2203      	movs	r2, #3
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	f7f5 ff89 	bl	80001e0 <memchr>
 800a2ce:	b140      	cbz	r0, 800a2e2 <_svfiprintf_r+0x152>
 800a2d0:	2340      	movs	r3, #64	; 0x40
 800a2d2:	eba0 000a 	sub.w	r0, r0, sl
 800a2d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a2da:	9b04      	ldr	r3, [sp, #16]
 800a2dc:	4303      	orrs	r3, r0
 800a2de:	3401      	adds	r4, #1
 800a2e0:	9304      	str	r3, [sp, #16]
 800a2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e6:	4826      	ldr	r0, [pc, #152]	; (800a380 <_svfiprintf_r+0x1f0>)
 800a2e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2ec:	2206      	movs	r2, #6
 800a2ee:	f7f5 ff77 	bl	80001e0 <memchr>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d038      	beq.n	800a368 <_svfiprintf_r+0x1d8>
 800a2f6:	4b23      	ldr	r3, [pc, #140]	; (800a384 <_svfiprintf_r+0x1f4>)
 800a2f8:	bb1b      	cbnz	r3, 800a342 <_svfiprintf_r+0x1b2>
 800a2fa:	9b03      	ldr	r3, [sp, #12]
 800a2fc:	3307      	adds	r3, #7
 800a2fe:	f023 0307 	bic.w	r3, r3, #7
 800a302:	3308      	adds	r3, #8
 800a304:	9303      	str	r3, [sp, #12]
 800a306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a308:	4433      	add	r3, r6
 800a30a:	9309      	str	r3, [sp, #36]	; 0x24
 800a30c:	e767      	b.n	800a1de <_svfiprintf_r+0x4e>
 800a30e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a312:	460c      	mov	r4, r1
 800a314:	2001      	movs	r0, #1
 800a316:	e7a5      	b.n	800a264 <_svfiprintf_r+0xd4>
 800a318:	2300      	movs	r3, #0
 800a31a:	3401      	adds	r4, #1
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	4619      	mov	r1, r3
 800a320:	f04f 0c0a 	mov.w	ip, #10
 800a324:	4620      	mov	r0, r4
 800a326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a32a:	3a30      	subs	r2, #48	; 0x30
 800a32c:	2a09      	cmp	r2, #9
 800a32e:	d903      	bls.n	800a338 <_svfiprintf_r+0x1a8>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d0c5      	beq.n	800a2c0 <_svfiprintf_r+0x130>
 800a334:	9105      	str	r1, [sp, #20]
 800a336:	e7c3      	b.n	800a2c0 <_svfiprintf_r+0x130>
 800a338:	fb0c 2101 	mla	r1, ip, r1, r2
 800a33c:	4604      	mov	r4, r0
 800a33e:	2301      	movs	r3, #1
 800a340:	e7f0      	b.n	800a324 <_svfiprintf_r+0x194>
 800a342:	ab03      	add	r3, sp, #12
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	462a      	mov	r2, r5
 800a348:	4b0f      	ldr	r3, [pc, #60]	; (800a388 <_svfiprintf_r+0x1f8>)
 800a34a:	a904      	add	r1, sp, #16
 800a34c:	4638      	mov	r0, r7
 800a34e:	f3af 8000 	nop.w
 800a352:	1c42      	adds	r2, r0, #1
 800a354:	4606      	mov	r6, r0
 800a356:	d1d6      	bne.n	800a306 <_svfiprintf_r+0x176>
 800a358:	89ab      	ldrh	r3, [r5, #12]
 800a35a:	065b      	lsls	r3, r3, #25
 800a35c:	f53f af2c 	bmi.w	800a1b8 <_svfiprintf_r+0x28>
 800a360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a362:	b01d      	add	sp, #116	; 0x74
 800a364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a368:	ab03      	add	r3, sp, #12
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	462a      	mov	r2, r5
 800a36e:	4b06      	ldr	r3, [pc, #24]	; (800a388 <_svfiprintf_r+0x1f8>)
 800a370:	a904      	add	r1, sp, #16
 800a372:	4638      	mov	r0, r7
 800a374:	f000 f9d4 	bl	800a720 <_printf_i>
 800a378:	e7eb      	b.n	800a352 <_svfiprintf_r+0x1c2>
 800a37a:	bf00      	nop
 800a37c:	0800ad8c 	.word	0x0800ad8c
 800a380:	0800ad96 	.word	0x0800ad96
 800a384:	00000000 	.word	0x00000000
 800a388:	0800a0d9 	.word	0x0800a0d9
 800a38c:	0800ad92 	.word	0x0800ad92

0800a390 <__sfputc_r>:
 800a390:	6893      	ldr	r3, [r2, #8]
 800a392:	3b01      	subs	r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	b410      	push	{r4}
 800a398:	6093      	str	r3, [r2, #8]
 800a39a:	da08      	bge.n	800a3ae <__sfputc_r+0x1e>
 800a39c:	6994      	ldr	r4, [r2, #24]
 800a39e:	42a3      	cmp	r3, r4
 800a3a0:	db01      	blt.n	800a3a6 <__sfputc_r+0x16>
 800a3a2:	290a      	cmp	r1, #10
 800a3a4:	d103      	bne.n	800a3ae <__sfputc_r+0x1e>
 800a3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3aa:	f7ff bb0d 	b.w	80099c8 <__swbuf_r>
 800a3ae:	6813      	ldr	r3, [r2, #0]
 800a3b0:	1c58      	adds	r0, r3, #1
 800a3b2:	6010      	str	r0, [r2, #0]
 800a3b4:	7019      	strb	r1, [r3, #0]
 800a3b6:	4608      	mov	r0, r1
 800a3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <__sfputs_r>:
 800a3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	460f      	mov	r7, r1
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	18d5      	adds	r5, r2, r3
 800a3c8:	42ac      	cmp	r4, r5
 800a3ca:	d101      	bne.n	800a3d0 <__sfputs_r+0x12>
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	e007      	b.n	800a3e0 <__sfputs_r+0x22>
 800a3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3d4:	463a      	mov	r2, r7
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff ffda 	bl	800a390 <__sfputc_r>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	d1f3      	bne.n	800a3c8 <__sfputs_r+0xa>
 800a3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3e4 <_vfiprintf_r>:
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	460d      	mov	r5, r1
 800a3ea:	b09d      	sub	sp, #116	; 0x74
 800a3ec:	4614      	mov	r4, r2
 800a3ee:	4698      	mov	r8, r3
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	b118      	cbz	r0, 800a3fc <_vfiprintf_r+0x18>
 800a3f4:	6983      	ldr	r3, [r0, #24]
 800a3f6:	b90b      	cbnz	r3, 800a3fc <_vfiprintf_r+0x18>
 800a3f8:	f7ff fcc0 	bl	8009d7c <__sinit>
 800a3fc:	4b89      	ldr	r3, [pc, #548]	; (800a624 <_vfiprintf_r+0x240>)
 800a3fe:	429d      	cmp	r5, r3
 800a400:	d11b      	bne.n	800a43a <_vfiprintf_r+0x56>
 800a402:	6875      	ldr	r5, [r6, #4]
 800a404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a406:	07d9      	lsls	r1, r3, #31
 800a408:	d405      	bmi.n	800a416 <_vfiprintf_r+0x32>
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	059a      	lsls	r2, r3, #22
 800a40e:	d402      	bmi.n	800a416 <_vfiprintf_r+0x32>
 800a410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a412:	f7ff fd51 	bl	8009eb8 <__retarget_lock_acquire_recursive>
 800a416:	89ab      	ldrh	r3, [r5, #12]
 800a418:	071b      	lsls	r3, r3, #28
 800a41a:	d501      	bpl.n	800a420 <_vfiprintf_r+0x3c>
 800a41c:	692b      	ldr	r3, [r5, #16]
 800a41e:	b9eb      	cbnz	r3, 800a45c <_vfiprintf_r+0x78>
 800a420:	4629      	mov	r1, r5
 800a422:	4630      	mov	r0, r6
 800a424:	f7ff fb22 	bl	8009a6c <__swsetup_r>
 800a428:	b1c0      	cbz	r0, 800a45c <_vfiprintf_r+0x78>
 800a42a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a42c:	07dc      	lsls	r4, r3, #31
 800a42e:	d50e      	bpl.n	800a44e <_vfiprintf_r+0x6a>
 800a430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a434:	b01d      	add	sp, #116	; 0x74
 800a436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43a:	4b7b      	ldr	r3, [pc, #492]	; (800a628 <_vfiprintf_r+0x244>)
 800a43c:	429d      	cmp	r5, r3
 800a43e:	d101      	bne.n	800a444 <_vfiprintf_r+0x60>
 800a440:	68b5      	ldr	r5, [r6, #8]
 800a442:	e7df      	b.n	800a404 <_vfiprintf_r+0x20>
 800a444:	4b79      	ldr	r3, [pc, #484]	; (800a62c <_vfiprintf_r+0x248>)
 800a446:	429d      	cmp	r5, r3
 800a448:	bf08      	it	eq
 800a44a:	68f5      	ldreq	r5, [r6, #12]
 800a44c:	e7da      	b.n	800a404 <_vfiprintf_r+0x20>
 800a44e:	89ab      	ldrh	r3, [r5, #12]
 800a450:	0598      	lsls	r0, r3, #22
 800a452:	d4ed      	bmi.n	800a430 <_vfiprintf_r+0x4c>
 800a454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a456:	f7ff fd30 	bl	8009eba <__retarget_lock_release_recursive>
 800a45a:	e7e9      	b.n	800a430 <_vfiprintf_r+0x4c>
 800a45c:	2300      	movs	r3, #0
 800a45e:	9309      	str	r3, [sp, #36]	; 0x24
 800a460:	2320      	movs	r3, #32
 800a462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a466:	f8cd 800c 	str.w	r8, [sp, #12]
 800a46a:	2330      	movs	r3, #48	; 0x30
 800a46c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a630 <_vfiprintf_r+0x24c>
 800a470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a474:	f04f 0901 	mov.w	r9, #1
 800a478:	4623      	mov	r3, r4
 800a47a:	469a      	mov	sl, r3
 800a47c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a480:	b10a      	cbz	r2, 800a486 <_vfiprintf_r+0xa2>
 800a482:	2a25      	cmp	r2, #37	; 0x25
 800a484:	d1f9      	bne.n	800a47a <_vfiprintf_r+0x96>
 800a486:	ebba 0b04 	subs.w	fp, sl, r4
 800a48a:	d00b      	beq.n	800a4a4 <_vfiprintf_r+0xc0>
 800a48c:	465b      	mov	r3, fp
 800a48e:	4622      	mov	r2, r4
 800a490:	4629      	mov	r1, r5
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff ff93 	bl	800a3be <__sfputs_r>
 800a498:	3001      	adds	r0, #1
 800a49a:	f000 80aa 	beq.w	800a5f2 <_vfiprintf_r+0x20e>
 800a49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a0:	445a      	add	r2, fp
 800a4a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 80a2 	beq.w	800a5f2 <_vfiprintf_r+0x20e>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b8:	f10a 0a01 	add.w	sl, sl, #1
 800a4bc:	9304      	str	r3, [sp, #16]
 800a4be:	9307      	str	r3, [sp, #28]
 800a4c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4c4:	931a      	str	r3, [sp, #104]	; 0x68
 800a4c6:	4654      	mov	r4, sl
 800a4c8:	2205      	movs	r2, #5
 800a4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ce:	4858      	ldr	r0, [pc, #352]	; (800a630 <_vfiprintf_r+0x24c>)
 800a4d0:	f7f5 fe86 	bl	80001e0 <memchr>
 800a4d4:	9a04      	ldr	r2, [sp, #16]
 800a4d6:	b9d8      	cbnz	r0, 800a510 <_vfiprintf_r+0x12c>
 800a4d8:	06d1      	lsls	r1, r2, #27
 800a4da:	bf44      	itt	mi
 800a4dc:	2320      	movmi	r3, #32
 800a4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e2:	0713      	lsls	r3, r2, #28
 800a4e4:	bf44      	itt	mi
 800a4e6:	232b      	movmi	r3, #43	; 0x2b
 800a4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f2:	d015      	beq.n	800a520 <_vfiprintf_r+0x13c>
 800a4f4:	9a07      	ldr	r2, [sp, #28]
 800a4f6:	4654      	mov	r4, sl
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	f04f 0c0a 	mov.w	ip, #10
 800a4fe:	4621      	mov	r1, r4
 800a500:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a504:	3b30      	subs	r3, #48	; 0x30
 800a506:	2b09      	cmp	r3, #9
 800a508:	d94e      	bls.n	800a5a8 <_vfiprintf_r+0x1c4>
 800a50a:	b1b0      	cbz	r0, 800a53a <_vfiprintf_r+0x156>
 800a50c:	9207      	str	r2, [sp, #28]
 800a50e:	e014      	b.n	800a53a <_vfiprintf_r+0x156>
 800a510:	eba0 0308 	sub.w	r3, r0, r8
 800a514:	fa09 f303 	lsl.w	r3, r9, r3
 800a518:	4313      	orrs	r3, r2
 800a51a:	9304      	str	r3, [sp, #16]
 800a51c:	46a2      	mov	sl, r4
 800a51e:	e7d2      	b.n	800a4c6 <_vfiprintf_r+0xe2>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	1d19      	adds	r1, r3, #4
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	9103      	str	r1, [sp, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	bfbb      	ittet	lt
 800a52c:	425b      	neglt	r3, r3
 800a52e:	f042 0202 	orrlt.w	r2, r2, #2
 800a532:	9307      	strge	r3, [sp, #28]
 800a534:	9307      	strlt	r3, [sp, #28]
 800a536:	bfb8      	it	lt
 800a538:	9204      	strlt	r2, [sp, #16]
 800a53a:	7823      	ldrb	r3, [r4, #0]
 800a53c:	2b2e      	cmp	r3, #46	; 0x2e
 800a53e:	d10c      	bne.n	800a55a <_vfiprintf_r+0x176>
 800a540:	7863      	ldrb	r3, [r4, #1]
 800a542:	2b2a      	cmp	r3, #42	; 0x2a
 800a544:	d135      	bne.n	800a5b2 <_vfiprintf_r+0x1ce>
 800a546:	9b03      	ldr	r3, [sp, #12]
 800a548:	1d1a      	adds	r2, r3, #4
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	9203      	str	r2, [sp, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	bfb8      	it	lt
 800a552:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a556:	3402      	adds	r4, #2
 800a558:	9305      	str	r3, [sp, #20]
 800a55a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a640 <_vfiprintf_r+0x25c>
 800a55e:	7821      	ldrb	r1, [r4, #0]
 800a560:	2203      	movs	r2, #3
 800a562:	4650      	mov	r0, sl
 800a564:	f7f5 fe3c 	bl	80001e0 <memchr>
 800a568:	b140      	cbz	r0, 800a57c <_vfiprintf_r+0x198>
 800a56a:	2340      	movs	r3, #64	; 0x40
 800a56c:	eba0 000a 	sub.w	r0, r0, sl
 800a570:	fa03 f000 	lsl.w	r0, r3, r0
 800a574:	9b04      	ldr	r3, [sp, #16]
 800a576:	4303      	orrs	r3, r0
 800a578:	3401      	adds	r4, #1
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a580:	482c      	ldr	r0, [pc, #176]	; (800a634 <_vfiprintf_r+0x250>)
 800a582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a586:	2206      	movs	r2, #6
 800a588:	f7f5 fe2a 	bl	80001e0 <memchr>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d03f      	beq.n	800a610 <_vfiprintf_r+0x22c>
 800a590:	4b29      	ldr	r3, [pc, #164]	; (800a638 <_vfiprintf_r+0x254>)
 800a592:	bb1b      	cbnz	r3, 800a5dc <_vfiprintf_r+0x1f8>
 800a594:	9b03      	ldr	r3, [sp, #12]
 800a596:	3307      	adds	r3, #7
 800a598:	f023 0307 	bic.w	r3, r3, #7
 800a59c:	3308      	adds	r3, #8
 800a59e:	9303      	str	r3, [sp, #12]
 800a5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a2:	443b      	add	r3, r7
 800a5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a6:	e767      	b.n	800a478 <_vfiprintf_r+0x94>
 800a5a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	e7a5      	b.n	800a4fe <_vfiprintf_r+0x11a>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	3401      	adds	r4, #1
 800a5b6:	9305      	str	r3, [sp, #20]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	f04f 0c0a 	mov.w	ip, #10
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5c4:	3a30      	subs	r2, #48	; 0x30
 800a5c6:	2a09      	cmp	r2, #9
 800a5c8:	d903      	bls.n	800a5d2 <_vfiprintf_r+0x1ee>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0c5      	beq.n	800a55a <_vfiprintf_r+0x176>
 800a5ce:	9105      	str	r1, [sp, #20]
 800a5d0:	e7c3      	b.n	800a55a <_vfiprintf_r+0x176>
 800a5d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e7f0      	b.n	800a5be <_vfiprintf_r+0x1da>
 800a5dc:	ab03      	add	r3, sp, #12
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	4b16      	ldr	r3, [pc, #88]	; (800a63c <_vfiprintf_r+0x258>)
 800a5e4:	a904      	add	r1, sp, #16
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f3af 8000 	nop.w
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	1c78      	adds	r0, r7, #1
 800a5f0:	d1d6      	bne.n	800a5a0 <_vfiprintf_r+0x1bc>
 800a5f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f4:	07d9      	lsls	r1, r3, #31
 800a5f6:	d405      	bmi.n	800a604 <_vfiprintf_r+0x220>
 800a5f8:	89ab      	ldrh	r3, [r5, #12]
 800a5fa:	059a      	lsls	r2, r3, #22
 800a5fc:	d402      	bmi.n	800a604 <_vfiprintf_r+0x220>
 800a5fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a600:	f7ff fc5b 	bl	8009eba <__retarget_lock_release_recursive>
 800a604:	89ab      	ldrh	r3, [r5, #12]
 800a606:	065b      	lsls	r3, r3, #25
 800a608:	f53f af12 	bmi.w	800a430 <_vfiprintf_r+0x4c>
 800a60c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a60e:	e711      	b.n	800a434 <_vfiprintf_r+0x50>
 800a610:	ab03      	add	r3, sp, #12
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	462a      	mov	r2, r5
 800a616:	4b09      	ldr	r3, [pc, #36]	; (800a63c <_vfiprintf_r+0x258>)
 800a618:	a904      	add	r1, sp, #16
 800a61a:	4630      	mov	r0, r6
 800a61c:	f000 f880 	bl	800a720 <_printf_i>
 800a620:	e7e4      	b.n	800a5ec <_vfiprintf_r+0x208>
 800a622:	bf00      	nop
 800a624:	0800ad4c 	.word	0x0800ad4c
 800a628:	0800ad6c 	.word	0x0800ad6c
 800a62c:	0800ad2c 	.word	0x0800ad2c
 800a630:	0800ad8c 	.word	0x0800ad8c
 800a634:	0800ad96 	.word	0x0800ad96
 800a638:	00000000 	.word	0x00000000
 800a63c:	0800a3bf 	.word	0x0800a3bf
 800a640:	0800ad92 	.word	0x0800ad92

0800a644 <_printf_common>:
 800a644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a648:	4616      	mov	r6, r2
 800a64a:	4699      	mov	r9, r3
 800a64c:	688a      	ldr	r2, [r1, #8]
 800a64e:	690b      	ldr	r3, [r1, #16]
 800a650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a654:	4293      	cmp	r3, r2
 800a656:	bfb8      	it	lt
 800a658:	4613      	movlt	r3, r2
 800a65a:	6033      	str	r3, [r6, #0]
 800a65c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a660:	4607      	mov	r7, r0
 800a662:	460c      	mov	r4, r1
 800a664:	b10a      	cbz	r2, 800a66a <_printf_common+0x26>
 800a666:	3301      	adds	r3, #1
 800a668:	6033      	str	r3, [r6, #0]
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	0699      	lsls	r1, r3, #26
 800a66e:	bf42      	ittt	mi
 800a670:	6833      	ldrmi	r3, [r6, #0]
 800a672:	3302      	addmi	r3, #2
 800a674:	6033      	strmi	r3, [r6, #0]
 800a676:	6825      	ldr	r5, [r4, #0]
 800a678:	f015 0506 	ands.w	r5, r5, #6
 800a67c:	d106      	bne.n	800a68c <_printf_common+0x48>
 800a67e:	f104 0a19 	add.w	sl, r4, #25
 800a682:	68e3      	ldr	r3, [r4, #12]
 800a684:	6832      	ldr	r2, [r6, #0]
 800a686:	1a9b      	subs	r3, r3, r2
 800a688:	42ab      	cmp	r3, r5
 800a68a:	dc26      	bgt.n	800a6da <_printf_common+0x96>
 800a68c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a690:	1e13      	subs	r3, r2, #0
 800a692:	6822      	ldr	r2, [r4, #0]
 800a694:	bf18      	it	ne
 800a696:	2301      	movne	r3, #1
 800a698:	0692      	lsls	r2, r2, #26
 800a69a:	d42b      	bmi.n	800a6f4 <_printf_common+0xb0>
 800a69c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6a0:	4649      	mov	r1, r9
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	47c0      	blx	r8
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	d01e      	beq.n	800a6e8 <_printf_common+0xa4>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	68e5      	ldr	r5, [r4, #12]
 800a6ae:	6832      	ldr	r2, [r6, #0]
 800a6b0:	f003 0306 	and.w	r3, r3, #6
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	bf08      	it	eq
 800a6b8:	1aad      	subeq	r5, r5, r2
 800a6ba:	68a3      	ldr	r3, [r4, #8]
 800a6bc:	6922      	ldr	r2, [r4, #16]
 800a6be:	bf0c      	ite	eq
 800a6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6c4:	2500      	movne	r5, #0
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	bfc4      	itt	gt
 800a6ca:	1a9b      	subgt	r3, r3, r2
 800a6cc:	18ed      	addgt	r5, r5, r3
 800a6ce:	2600      	movs	r6, #0
 800a6d0:	341a      	adds	r4, #26
 800a6d2:	42b5      	cmp	r5, r6
 800a6d4:	d11a      	bne.n	800a70c <_printf_common+0xc8>
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e008      	b.n	800a6ec <_printf_common+0xa8>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4652      	mov	r2, sl
 800a6de:	4649      	mov	r1, r9
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	47c0      	blx	r8
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d103      	bne.n	800a6f0 <_printf_common+0xac>
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f0:	3501      	adds	r5, #1
 800a6f2:	e7c6      	b.n	800a682 <_printf_common+0x3e>
 800a6f4:	18e1      	adds	r1, r4, r3
 800a6f6:	1c5a      	adds	r2, r3, #1
 800a6f8:	2030      	movs	r0, #48	; 0x30
 800a6fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6fe:	4422      	add	r2, r4
 800a700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a708:	3302      	adds	r3, #2
 800a70a:	e7c7      	b.n	800a69c <_printf_common+0x58>
 800a70c:	2301      	movs	r3, #1
 800a70e:	4622      	mov	r2, r4
 800a710:	4649      	mov	r1, r9
 800a712:	4638      	mov	r0, r7
 800a714:	47c0      	blx	r8
 800a716:	3001      	adds	r0, #1
 800a718:	d0e6      	beq.n	800a6e8 <_printf_common+0xa4>
 800a71a:	3601      	adds	r6, #1
 800a71c:	e7d9      	b.n	800a6d2 <_printf_common+0x8e>
	...

0800a720 <_printf_i>:
 800a720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a724:	460c      	mov	r4, r1
 800a726:	4691      	mov	r9, r2
 800a728:	7e27      	ldrb	r7, [r4, #24]
 800a72a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a72c:	2f78      	cmp	r7, #120	; 0x78
 800a72e:	4680      	mov	r8, r0
 800a730:	469a      	mov	sl, r3
 800a732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a736:	d807      	bhi.n	800a748 <_printf_i+0x28>
 800a738:	2f62      	cmp	r7, #98	; 0x62
 800a73a:	d80a      	bhi.n	800a752 <_printf_i+0x32>
 800a73c:	2f00      	cmp	r7, #0
 800a73e:	f000 80d8 	beq.w	800a8f2 <_printf_i+0x1d2>
 800a742:	2f58      	cmp	r7, #88	; 0x58
 800a744:	f000 80a3 	beq.w	800a88e <_printf_i+0x16e>
 800a748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a74c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a750:	e03a      	b.n	800a7c8 <_printf_i+0xa8>
 800a752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a756:	2b15      	cmp	r3, #21
 800a758:	d8f6      	bhi.n	800a748 <_printf_i+0x28>
 800a75a:	a001      	add	r0, pc, #4	; (adr r0, 800a760 <_printf_i+0x40>)
 800a75c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a760:	0800a7b9 	.word	0x0800a7b9
 800a764:	0800a7cd 	.word	0x0800a7cd
 800a768:	0800a749 	.word	0x0800a749
 800a76c:	0800a749 	.word	0x0800a749
 800a770:	0800a749 	.word	0x0800a749
 800a774:	0800a749 	.word	0x0800a749
 800a778:	0800a7cd 	.word	0x0800a7cd
 800a77c:	0800a749 	.word	0x0800a749
 800a780:	0800a749 	.word	0x0800a749
 800a784:	0800a749 	.word	0x0800a749
 800a788:	0800a749 	.word	0x0800a749
 800a78c:	0800a8d9 	.word	0x0800a8d9
 800a790:	0800a7fd 	.word	0x0800a7fd
 800a794:	0800a8bb 	.word	0x0800a8bb
 800a798:	0800a749 	.word	0x0800a749
 800a79c:	0800a749 	.word	0x0800a749
 800a7a0:	0800a8fb 	.word	0x0800a8fb
 800a7a4:	0800a749 	.word	0x0800a749
 800a7a8:	0800a7fd 	.word	0x0800a7fd
 800a7ac:	0800a749 	.word	0x0800a749
 800a7b0:	0800a749 	.word	0x0800a749
 800a7b4:	0800a8c3 	.word	0x0800a8c3
 800a7b8:	680b      	ldr	r3, [r1, #0]
 800a7ba:	1d1a      	adds	r2, r3, #4
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	600a      	str	r2, [r1, #0]
 800a7c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e0a3      	b.n	800a914 <_printf_i+0x1f4>
 800a7cc:	6825      	ldr	r5, [r4, #0]
 800a7ce:	6808      	ldr	r0, [r1, #0]
 800a7d0:	062e      	lsls	r6, r5, #24
 800a7d2:	f100 0304 	add.w	r3, r0, #4
 800a7d6:	d50a      	bpl.n	800a7ee <_printf_i+0xce>
 800a7d8:	6805      	ldr	r5, [r0, #0]
 800a7da:	600b      	str	r3, [r1, #0]
 800a7dc:	2d00      	cmp	r5, #0
 800a7de:	da03      	bge.n	800a7e8 <_printf_i+0xc8>
 800a7e0:	232d      	movs	r3, #45	; 0x2d
 800a7e2:	426d      	negs	r5, r5
 800a7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7e8:	485e      	ldr	r0, [pc, #376]	; (800a964 <_printf_i+0x244>)
 800a7ea:	230a      	movs	r3, #10
 800a7ec:	e019      	b.n	800a822 <_printf_i+0x102>
 800a7ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a7f2:	6805      	ldr	r5, [r0, #0]
 800a7f4:	600b      	str	r3, [r1, #0]
 800a7f6:	bf18      	it	ne
 800a7f8:	b22d      	sxthne	r5, r5
 800a7fa:	e7ef      	b.n	800a7dc <_printf_i+0xbc>
 800a7fc:	680b      	ldr	r3, [r1, #0]
 800a7fe:	6825      	ldr	r5, [r4, #0]
 800a800:	1d18      	adds	r0, r3, #4
 800a802:	6008      	str	r0, [r1, #0]
 800a804:	0628      	lsls	r0, r5, #24
 800a806:	d501      	bpl.n	800a80c <_printf_i+0xec>
 800a808:	681d      	ldr	r5, [r3, #0]
 800a80a:	e002      	b.n	800a812 <_printf_i+0xf2>
 800a80c:	0669      	lsls	r1, r5, #25
 800a80e:	d5fb      	bpl.n	800a808 <_printf_i+0xe8>
 800a810:	881d      	ldrh	r5, [r3, #0]
 800a812:	4854      	ldr	r0, [pc, #336]	; (800a964 <_printf_i+0x244>)
 800a814:	2f6f      	cmp	r7, #111	; 0x6f
 800a816:	bf0c      	ite	eq
 800a818:	2308      	moveq	r3, #8
 800a81a:	230a      	movne	r3, #10
 800a81c:	2100      	movs	r1, #0
 800a81e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a822:	6866      	ldr	r6, [r4, #4]
 800a824:	60a6      	str	r6, [r4, #8]
 800a826:	2e00      	cmp	r6, #0
 800a828:	bfa2      	ittt	ge
 800a82a:	6821      	ldrge	r1, [r4, #0]
 800a82c:	f021 0104 	bicge.w	r1, r1, #4
 800a830:	6021      	strge	r1, [r4, #0]
 800a832:	b90d      	cbnz	r5, 800a838 <_printf_i+0x118>
 800a834:	2e00      	cmp	r6, #0
 800a836:	d04d      	beq.n	800a8d4 <_printf_i+0x1b4>
 800a838:	4616      	mov	r6, r2
 800a83a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a83e:	fb03 5711 	mls	r7, r3, r1, r5
 800a842:	5dc7      	ldrb	r7, [r0, r7]
 800a844:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a848:	462f      	mov	r7, r5
 800a84a:	42bb      	cmp	r3, r7
 800a84c:	460d      	mov	r5, r1
 800a84e:	d9f4      	bls.n	800a83a <_printf_i+0x11a>
 800a850:	2b08      	cmp	r3, #8
 800a852:	d10b      	bne.n	800a86c <_printf_i+0x14c>
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	07df      	lsls	r7, r3, #31
 800a858:	d508      	bpl.n	800a86c <_printf_i+0x14c>
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	6861      	ldr	r1, [r4, #4]
 800a85e:	4299      	cmp	r1, r3
 800a860:	bfde      	ittt	le
 800a862:	2330      	movle	r3, #48	; 0x30
 800a864:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a868:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a86c:	1b92      	subs	r2, r2, r6
 800a86e:	6122      	str	r2, [r4, #16]
 800a870:	f8cd a000 	str.w	sl, [sp]
 800a874:	464b      	mov	r3, r9
 800a876:	aa03      	add	r2, sp, #12
 800a878:	4621      	mov	r1, r4
 800a87a:	4640      	mov	r0, r8
 800a87c:	f7ff fee2 	bl	800a644 <_printf_common>
 800a880:	3001      	adds	r0, #1
 800a882:	d14c      	bne.n	800a91e <_printf_i+0x1fe>
 800a884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a888:	b004      	add	sp, #16
 800a88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a88e:	4835      	ldr	r0, [pc, #212]	; (800a964 <_printf_i+0x244>)
 800a890:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	680e      	ldr	r6, [r1, #0]
 800a898:	061f      	lsls	r7, r3, #24
 800a89a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a89e:	600e      	str	r6, [r1, #0]
 800a8a0:	d514      	bpl.n	800a8cc <_printf_i+0x1ac>
 800a8a2:	07d9      	lsls	r1, r3, #31
 800a8a4:	bf44      	itt	mi
 800a8a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a8aa:	6023      	strmi	r3, [r4, #0]
 800a8ac:	b91d      	cbnz	r5, 800a8b6 <_printf_i+0x196>
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	f023 0320 	bic.w	r3, r3, #32
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	2310      	movs	r3, #16
 800a8b8:	e7b0      	b.n	800a81c <_printf_i+0xfc>
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	f043 0320 	orr.w	r3, r3, #32
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	2378      	movs	r3, #120	; 0x78
 800a8c4:	4828      	ldr	r0, [pc, #160]	; (800a968 <_printf_i+0x248>)
 800a8c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8ca:	e7e3      	b.n	800a894 <_printf_i+0x174>
 800a8cc:	065e      	lsls	r6, r3, #25
 800a8ce:	bf48      	it	mi
 800a8d0:	b2ad      	uxthmi	r5, r5
 800a8d2:	e7e6      	b.n	800a8a2 <_printf_i+0x182>
 800a8d4:	4616      	mov	r6, r2
 800a8d6:	e7bb      	b.n	800a850 <_printf_i+0x130>
 800a8d8:	680b      	ldr	r3, [r1, #0]
 800a8da:	6826      	ldr	r6, [r4, #0]
 800a8dc:	6960      	ldr	r0, [r4, #20]
 800a8de:	1d1d      	adds	r5, r3, #4
 800a8e0:	600d      	str	r5, [r1, #0]
 800a8e2:	0635      	lsls	r5, r6, #24
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	d501      	bpl.n	800a8ec <_printf_i+0x1cc>
 800a8e8:	6018      	str	r0, [r3, #0]
 800a8ea:	e002      	b.n	800a8f2 <_printf_i+0x1d2>
 800a8ec:	0671      	lsls	r1, r6, #25
 800a8ee:	d5fb      	bpl.n	800a8e8 <_printf_i+0x1c8>
 800a8f0:	8018      	strh	r0, [r3, #0]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	6123      	str	r3, [r4, #16]
 800a8f6:	4616      	mov	r6, r2
 800a8f8:	e7ba      	b.n	800a870 <_printf_i+0x150>
 800a8fa:	680b      	ldr	r3, [r1, #0]
 800a8fc:	1d1a      	adds	r2, r3, #4
 800a8fe:	600a      	str	r2, [r1, #0]
 800a900:	681e      	ldr	r6, [r3, #0]
 800a902:	6862      	ldr	r2, [r4, #4]
 800a904:	2100      	movs	r1, #0
 800a906:	4630      	mov	r0, r6
 800a908:	f7f5 fc6a 	bl	80001e0 <memchr>
 800a90c:	b108      	cbz	r0, 800a912 <_printf_i+0x1f2>
 800a90e:	1b80      	subs	r0, r0, r6
 800a910:	6060      	str	r0, [r4, #4]
 800a912:	6863      	ldr	r3, [r4, #4]
 800a914:	6123      	str	r3, [r4, #16]
 800a916:	2300      	movs	r3, #0
 800a918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a91c:	e7a8      	b.n	800a870 <_printf_i+0x150>
 800a91e:	6923      	ldr	r3, [r4, #16]
 800a920:	4632      	mov	r2, r6
 800a922:	4649      	mov	r1, r9
 800a924:	4640      	mov	r0, r8
 800a926:	47d0      	blx	sl
 800a928:	3001      	adds	r0, #1
 800a92a:	d0ab      	beq.n	800a884 <_printf_i+0x164>
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	079b      	lsls	r3, r3, #30
 800a930:	d413      	bmi.n	800a95a <_printf_i+0x23a>
 800a932:	68e0      	ldr	r0, [r4, #12]
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	4298      	cmp	r0, r3
 800a938:	bfb8      	it	lt
 800a93a:	4618      	movlt	r0, r3
 800a93c:	e7a4      	b.n	800a888 <_printf_i+0x168>
 800a93e:	2301      	movs	r3, #1
 800a940:	4632      	mov	r2, r6
 800a942:	4649      	mov	r1, r9
 800a944:	4640      	mov	r0, r8
 800a946:	47d0      	blx	sl
 800a948:	3001      	adds	r0, #1
 800a94a:	d09b      	beq.n	800a884 <_printf_i+0x164>
 800a94c:	3501      	adds	r5, #1
 800a94e:	68e3      	ldr	r3, [r4, #12]
 800a950:	9903      	ldr	r1, [sp, #12]
 800a952:	1a5b      	subs	r3, r3, r1
 800a954:	42ab      	cmp	r3, r5
 800a956:	dcf2      	bgt.n	800a93e <_printf_i+0x21e>
 800a958:	e7eb      	b.n	800a932 <_printf_i+0x212>
 800a95a:	2500      	movs	r5, #0
 800a95c:	f104 0619 	add.w	r6, r4, #25
 800a960:	e7f5      	b.n	800a94e <_printf_i+0x22e>
 800a962:	bf00      	nop
 800a964:	0800ad9d 	.word	0x0800ad9d
 800a968:	0800adae 	.word	0x0800adae

0800a96c <_sbrk_r>:
 800a96c:	b538      	push	{r3, r4, r5, lr}
 800a96e:	4d06      	ldr	r5, [pc, #24]	; (800a988 <_sbrk_r+0x1c>)
 800a970:	2300      	movs	r3, #0
 800a972:	4604      	mov	r4, r0
 800a974:	4608      	mov	r0, r1
 800a976:	602b      	str	r3, [r5, #0]
 800a978:	f7f6 fd0a 	bl	8001390 <_sbrk>
 800a97c:	1c43      	adds	r3, r0, #1
 800a97e:	d102      	bne.n	800a986 <_sbrk_r+0x1a>
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	b103      	cbz	r3, 800a986 <_sbrk_r+0x1a>
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	bd38      	pop	{r3, r4, r5, pc}
 800a988:	20006040 	.word	0x20006040

0800a98c <__sread>:
 800a98c:	b510      	push	{r4, lr}
 800a98e:	460c      	mov	r4, r1
 800a990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a994:	f000 f8e0 	bl	800ab58 <_read_r>
 800a998:	2800      	cmp	r0, #0
 800a99a:	bfab      	itete	ge
 800a99c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a99e:	89a3      	ldrhlt	r3, [r4, #12]
 800a9a0:	181b      	addge	r3, r3, r0
 800a9a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9a6:	bfac      	ite	ge
 800a9a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9aa:	81a3      	strhlt	r3, [r4, #12]
 800a9ac:	bd10      	pop	{r4, pc}

0800a9ae <__swrite>:
 800a9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b2:	461f      	mov	r7, r3
 800a9b4:	898b      	ldrh	r3, [r1, #12]
 800a9b6:	05db      	lsls	r3, r3, #23
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	4616      	mov	r6, r2
 800a9be:	d505      	bpl.n	800a9cc <__swrite+0x1e>
 800a9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f000 f868 	bl	800aa9c <_lseek_r>
 800a9cc:	89a3      	ldrh	r3, [r4, #12]
 800a9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9d6:	81a3      	strh	r3, [r4, #12]
 800a9d8:	4632      	mov	r2, r6
 800a9da:	463b      	mov	r3, r7
 800a9dc:	4628      	mov	r0, r5
 800a9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e2:	f000 b817 	b.w	800aa14 <_write_r>

0800a9e6 <__sseek>:
 800a9e6:	b510      	push	{r4, lr}
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ee:	f000 f855 	bl	800aa9c <_lseek_r>
 800a9f2:	1c43      	adds	r3, r0, #1
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	bf15      	itete	ne
 800a9f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa02:	81a3      	strheq	r3, [r4, #12]
 800aa04:	bf18      	it	ne
 800aa06:	81a3      	strhne	r3, [r4, #12]
 800aa08:	bd10      	pop	{r4, pc}

0800aa0a <__sclose>:
 800aa0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa0e:	f000 b813 	b.w	800aa38 <_close_r>
	...

0800aa14 <_write_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4d07      	ldr	r5, [pc, #28]	; (800aa34 <_write_r+0x20>)
 800aa18:	4604      	mov	r4, r0
 800aa1a:	4608      	mov	r0, r1
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	2200      	movs	r2, #0
 800aa20:	602a      	str	r2, [r5, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	f7f6 fc63 	bl	80012ee <_write>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_write_r+0x1e>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_write_r+0x1e>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	20006040 	.word	0x20006040

0800aa38 <_close_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4d06      	ldr	r5, [pc, #24]	; (800aa54 <_close_r+0x1c>)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	4604      	mov	r4, r0
 800aa40:	4608      	mov	r0, r1
 800aa42:	602b      	str	r3, [r5, #0]
 800aa44:	f7f6 fc6f 	bl	8001326 <_close>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_close_r+0x1a>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_close_r+0x1a>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20006040 	.word	0x20006040

0800aa58 <_fstat_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d07      	ldr	r5, [pc, #28]	; (800aa78 <_fstat_r+0x20>)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4604      	mov	r4, r0
 800aa60:	4608      	mov	r0, r1
 800aa62:	4611      	mov	r1, r2
 800aa64:	602b      	str	r3, [r5, #0]
 800aa66:	f7f6 fc6a 	bl	800133e <_fstat>
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	d102      	bne.n	800aa74 <_fstat_r+0x1c>
 800aa6e:	682b      	ldr	r3, [r5, #0]
 800aa70:	b103      	cbz	r3, 800aa74 <_fstat_r+0x1c>
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	bd38      	pop	{r3, r4, r5, pc}
 800aa76:	bf00      	nop
 800aa78:	20006040 	.word	0x20006040

0800aa7c <_isatty_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4d06      	ldr	r5, [pc, #24]	; (800aa98 <_isatty_r+0x1c>)
 800aa80:	2300      	movs	r3, #0
 800aa82:	4604      	mov	r4, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	f7f6 fc69 	bl	800135e <_isatty>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d102      	bne.n	800aa96 <_isatty_r+0x1a>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	b103      	cbz	r3, 800aa96 <_isatty_r+0x1a>
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	bd38      	pop	{r3, r4, r5, pc}
 800aa98:	20006040 	.word	0x20006040

0800aa9c <_lseek_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4d07      	ldr	r5, [pc, #28]	; (800aabc <_lseek_r+0x20>)
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	4608      	mov	r0, r1
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	602a      	str	r2, [r5, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f7f6 fc62 	bl	8001374 <_lseek>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d102      	bne.n	800aaba <_lseek_r+0x1e>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	b103      	cbz	r3, 800aaba <_lseek_r+0x1e>
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	20006040 	.word	0x20006040

0800aac0 <memmove>:
 800aac0:	4288      	cmp	r0, r1
 800aac2:	b510      	push	{r4, lr}
 800aac4:	eb01 0402 	add.w	r4, r1, r2
 800aac8:	d902      	bls.n	800aad0 <memmove+0x10>
 800aaca:	4284      	cmp	r4, r0
 800aacc:	4623      	mov	r3, r4
 800aace:	d807      	bhi.n	800aae0 <memmove+0x20>
 800aad0:	1e43      	subs	r3, r0, #1
 800aad2:	42a1      	cmp	r1, r4
 800aad4:	d008      	beq.n	800aae8 <memmove+0x28>
 800aad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aada:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aade:	e7f8      	b.n	800aad2 <memmove+0x12>
 800aae0:	4402      	add	r2, r0
 800aae2:	4601      	mov	r1, r0
 800aae4:	428a      	cmp	r2, r1
 800aae6:	d100      	bne.n	800aaea <memmove+0x2a>
 800aae8:	bd10      	pop	{r4, pc}
 800aaea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaf2:	e7f7      	b.n	800aae4 <memmove+0x24>

0800aaf4 <__malloc_lock>:
 800aaf4:	4801      	ldr	r0, [pc, #4]	; (800aafc <__malloc_lock+0x8>)
 800aaf6:	f7ff b9df 	b.w	8009eb8 <__retarget_lock_acquire_recursive>
 800aafa:	bf00      	nop
 800aafc:	20006038 	.word	0x20006038

0800ab00 <__malloc_unlock>:
 800ab00:	4801      	ldr	r0, [pc, #4]	; (800ab08 <__malloc_unlock+0x8>)
 800ab02:	f7ff b9da 	b.w	8009eba <__retarget_lock_release_recursive>
 800ab06:	bf00      	nop
 800ab08:	20006038 	.word	0x20006038

0800ab0c <_realloc_r>:
 800ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0e:	4607      	mov	r7, r0
 800ab10:	4614      	mov	r4, r2
 800ab12:	460e      	mov	r6, r1
 800ab14:	b921      	cbnz	r1, 800ab20 <_realloc_r+0x14>
 800ab16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	f7ff ba82 	b.w	800a024 <_malloc_r>
 800ab20:	b922      	cbnz	r2, 800ab2c <_realloc_r+0x20>
 800ab22:	f7ff fa2f 	bl	8009f84 <_free_r>
 800ab26:	4625      	mov	r5, r4
 800ab28:	4628      	mov	r0, r5
 800ab2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab2c:	f000 f826 	bl	800ab7c <_malloc_usable_size_r>
 800ab30:	42a0      	cmp	r0, r4
 800ab32:	d20f      	bcs.n	800ab54 <_realloc_r+0x48>
 800ab34:	4621      	mov	r1, r4
 800ab36:	4638      	mov	r0, r7
 800ab38:	f7ff fa74 	bl	800a024 <_malloc_r>
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d0f2      	beq.n	800ab28 <_realloc_r+0x1c>
 800ab42:	4631      	mov	r1, r6
 800ab44:	4622      	mov	r2, r4
 800ab46:	f7fe fe7b 	bl	8009840 <memcpy>
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	f7ff fa19 	bl	8009f84 <_free_r>
 800ab52:	e7e9      	b.n	800ab28 <_realloc_r+0x1c>
 800ab54:	4635      	mov	r5, r6
 800ab56:	e7e7      	b.n	800ab28 <_realloc_r+0x1c>

0800ab58 <_read_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d07      	ldr	r5, [pc, #28]	; (800ab78 <_read_r+0x20>)
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	4608      	mov	r0, r1
 800ab60:	4611      	mov	r1, r2
 800ab62:	2200      	movs	r2, #0
 800ab64:	602a      	str	r2, [r5, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	f7f6 fba4 	bl	80012b4 <_read>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_read_r+0x1e>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_read_r+0x1e>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	20006040 	.word	0x20006040

0800ab7c <_malloc_usable_size_r>:
 800ab7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab80:	1f18      	subs	r0, r3, #4
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	bfbc      	itt	lt
 800ab86:	580b      	ldrlt	r3, [r1, r0]
 800ab88:	18c0      	addlt	r0, r0, r3
 800ab8a:	4770      	bx	lr

0800ab8c <_init>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	bf00      	nop
 800ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab92:	bc08      	pop	{r3}
 800ab94:	469e      	mov	lr, r3
 800ab96:	4770      	bx	lr

0800ab98 <_fini>:
 800ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9a:	bf00      	nop
 800ab9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9e:	bc08      	pop	{r3}
 800aba0:	469e      	mov	lr, r3
 800aba2:	4770      	bx	lr
