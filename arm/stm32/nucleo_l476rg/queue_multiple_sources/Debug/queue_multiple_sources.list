
queue_multiple_sources.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000759c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079b0  080079b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b8  080079b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b8  080079b8  000179b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080079c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a28  20000074  08007a34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a9c  08007a34  00021a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e13e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038cb  00000000  00000000  0003e1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00041ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  000431b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000541e  00000000  00000000  00044768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ab2  00000000  00000000  00049b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100bab  00000000  00000000  00061638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001621e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c0  00000000  00000000  00162238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007714 	.word	0x08007714

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007714 	.word	0x08007714

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fb96 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f84e 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8f2 	bl	800075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8c0 	bl	80006fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057c:	f003 f982 	bl	8003884 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  messageQueue0 = osMessageQueueNew(MESSAGE_QUEUE_0_SIZE, sizeof(Data_t), NULL);
 8000580:	2200      	movs	r2, #0
 8000582:	2102      	movs	r1, #2
 8000584:	2003      	movs	r0, #3
 8000586:	f003 fa74 	bl	8003a72 <osMessageQueueNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <main+0x70>)
 800058e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sender0Task */
  sender0TaskHandle = osThreadNew(StartSenderTask, (void *)&pxDatas[0], &sender0Task_attributes);
 8000590:	4a12      	ldr	r2, [pc, #72]	; (80005dc <main+0x74>)
 8000592:	4913      	ldr	r1, [pc, #76]	; (80005e0 <main+0x78>)
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <main+0x7c>)
 8000596:	f003 f9bf 	bl	8003918 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <main+0x80>)
 800059e:	6013      	str	r3, [r2, #0]

  /* creation of sender1Task */
  sender1TaskHandle = osThreadNew(StartSenderTask, (void *)&pxDatas[1], &sender1Task_attributes);
 80005a0:	4a12      	ldr	r2, [pc, #72]	; (80005ec <main+0x84>)
 80005a2:	4913      	ldr	r1, [pc, #76]	; (80005f0 <main+0x88>)
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <main+0x7c>)
 80005a6:	f003 f9b7 	bl	8003918 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <main+0x8c>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* creation of sender2Task */
  sender2TaskHandle = osThreadNew(StartSenderTask, (void *)&pxDatas[2], &sender2Task_attributes);
 80005b0:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <main+0x90>)
 80005b2:	4912      	ldr	r1, [pc, #72]	; (80005fc <main+0x94>)
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x7c>)
 80005b6:	f003 f9af 	bl	8003918 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a10      	ldr	r2, [pc, #64]	; (8000600 <main+0x98>)
 80005be:	6013      	str	r3, [r2, #0]

  /* creation of receiver0Task */
  receiver0TaskHandle = osThreadNew(StartReceiverTask, NULL, &receiver0Task_attributes);
 80005c0:	4a10      	ldr	r2, [pc, #64]	; (8000604 <main+0x9c>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4810      	ldr	r0, [pc, #64]	; (8000608 <main+0xa0>)
 80005c6:	f003 f9a7 	bl	8003918 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a0f      	ldr	r2, [pc, #60]	; (800060c <main+0xa4>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f003 f97c 	bl	80038cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (;;)
 80005d4:	e7fe      	b.n	80005d4 <main+0x6c>
 80005d6:	bf00      	nop
 80005d8:	20001970 	.word	0x20001970
 80005dc:	08007830 	.word	0x08007830
 80005e0:	080078c0 	.word	0x080078c0
 80005e4:	080007f9 	.word	0x080007f9
 80005e8:	20001964 	.word	0x20001964
 80005ec:	08007854 	.word	0x08007854
 80005f0:	080078c2 	.word	0x080078c2
 80005f4:	200019f8 	.word	0x200019f8
 80005f8:	08007878 	.word	0x08007878
 80005fc:	080078c4 	.word	0x080078c4
 8000600:	20001968 	.word	0x20001968
 8000604:	0800789c 	.word	0x0800789c
 8000608:	08000835 	.word	0x08000835
 800060c:	2000196c 	.word	0x2000196c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0b8      	sub	sp, #224	; 0xe0
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 f8a4 	bl	800676c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2288      	movs	r2, #136	; 0x88
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 f896 	bl	800676c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	2310      	movs	r3, #16
 8000650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065a:	2302      	movs	r3, #2
 800065c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000666:	230a      	movs	r3, #10
 8000668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066c:	2307      	movs	r3, #7
 800066e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fe3a 	bl	80012fc <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800068e:	f000 f91f 	bl	80008d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2303      	movs	r3, #3
 800069a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b4:	2104      	movs	r1, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fa06 	bl	8001ac8 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006c2:	f000 f905 	bl	80008d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fc31 	bl	8001f38 <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006dc:	f000 f8f8 	bl	80008d0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e4:	f000 fdb4 	bl	8001250 <HAL_PWREx_ControlVoltageScaling>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006ee:	f000 f8ef 	bl	80008d0 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	37e0      	adds	r7, #224	; 0xe0
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000740:	f002 fb88 	bl	8002e54 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f8c1 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20001974 	.word	0x20001974
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_GPIO_Init+0x74>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <MX_GPIO_Init+0x74>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_GPIO_Init+0x74>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0x74>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <MX_GPIO_Init+0x74>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_GPIO_Init+0x74>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_GPIO_Init+0x74>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <MX_GPIO_Init+0x74>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_GPIO_Init+0x74>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_GPIO_Init+0x74>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MX_GPIO_Init+0x74>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_GPIO_Init+0x74>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80007dc:	1d39      	adds	r1, r7, #4
 80007de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e2:	2201      	movs	r2, #1
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <__io_putchar+0x20>)
 80007e6:	f002 fb83 	bl	8002ef0 <HAL_UART_Transmit>
	return ch;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20001974 	.word	0x20001974

080007f8 <StartSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  static const uint32_t SEND_TICK_DELAY = osWaitForever;

  /* Infinite loop */
  for(;;)
  {
  	xStatus = osMessageQueuePut(messageQueue0, argument, 0, SEND_TICK_DELAY);
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <StartSenderTask+0x30>)
 8000802:	6818      	ldr	r0, [r3, #0]
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <StartSenderTask+0x34>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f003 f9a4 	bl	8003b58 <osMessageQueuePut>
 8000810:	60f8      	str	r0, [r7, #12]
  	osDelay(1000);
 8000812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000816:	f003 f911 	bl	8003a3c <osDelay>
  	if (xStatus != osOK)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0ef      	beq.n	8000800 <StartSenderTask+0x8>
  	{
  		printf("ERROR: Could not send to the queue. Queue is full.\r\n");
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <StartSenderTask+0x38>)
 8000822:	f006 f831 	bl	8006888 <puts>
  	xStatus = osMessageQueuePut(messageQueue0, argument, 0, SEND_TICK_DELAY);
 8000826:	e7eb      	b.n	8000800 <StartSenderTask+0x8>
 8000828:	20001970 	.word	0x20001970
 800082c:	080078c8 	.word	0x080078c8
 8000830:	08007760 	.word	0x08007760

08000834 <StartReceiverTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiverTask */
void StartReceiverTask(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	osStatus_t xStatus;
	static const int32_t RECEIVE_TICK_DELAY = osWaitForever;
  /* Infinite loop */
  for(;;)
  {
  	xStatus = osMessageQueueGet(messageQueue0, &xReceivedData, 0, RECEIVE_TICK_DELAY);
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <StartReceiverTask+0x60>)
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <StartReceiverTask+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f107 0108 	add.w	r1, r7, #8
 8000848:	2200      	movs	r2, #0
 800084a:	f003 f9e5 	bl	8003c18 <osMessageQueueGet>
 800084e:	60f8      	str	r0, [r7, #12]
  	if (xStatus == osOK)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d11a      	bne.n	800088c <StartReceiverTask+0x58>
  	{
  		// Process/Parse Data
  		if (xReceivedData.eDataSource == eSender0)
 8000856:	7a3b      	ldrb	r3, [r7, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d105      	bne.n	8000868 <StartReceiverTask+0x34>
  		{
        printf("From Sender0 = %ld\r\n", (int32_t)xReceivedData.ucValue);
 800085c:	7a7b      	ldrb	r3, [r7, #9]
 800085e:	4619      	mov	r1, r3
 8000860:	480e      	ldr	r0, [pc, #56]	; (800089c <StartReceiverTask+0x68>)
 8000862:	f005 ff8b 	bl	800677c <iprintf>
 8000866:	e7e9      	b.n	800083c <StartReceiverTask+0x8>
  		}
  		else if (xReceivedData.eDataSource == eSender1)
 8000868:	7a3b      	ldrb	r3, [r7, #8]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d105      	bne.n	800087a <StartReceiverTask+0x46>
  		{
        printf("From Sender1 = %ld\r\n", (int32_t)xReceivedData.ucValue);
 800086e:	7a7b      	ldrb	r3, [r7, #9]
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <StartReceiverTask+0x6c>)
 8000874:	f005 ff82 	bl	800677c <iprintf>
 8000878:	e7e0      	b.n	800083c <StartReceiverTask+0x8>
  		}
  		else if (xReceivedData.eDataSource == eSender2)
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d1dd      	bne.n	800083c <StartReceiverTask+0x8>
  		{
        printf("From Sender2 = %ld\r\n", (int32_t)xReceivedData.ucValue);
 8000880:	7a7b      	ldrb	r3, [r7, #9]
 8000882:	4619      	mov	r1, r3
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <StartReceiverTask+0x70>)
 8000886:	f005 ff79 	bl	800677c <iprintf>
 800088a:	e7d7      	b.n	800083c <StartReceiverTask+0x8>
  		}
  	}
  	else
  	{
  		printf("ERROR: Could not receive from the queue. Queue is empty.\r\n");
 800088c:	4806      	ldr	r0, [pc, #24]	; (80008a8 <StartReceiverTask+0x74>)
 800088e:	f005 fffb 	bl	8006888 <puts>
  	xStatus = osMessageQueueGet(messageQueue0, &xReceivedData, 0, RECEIVE_TICK_DELAY);
 8000892:	e7d3      	b.n	800083c <StartReceiverTask+0x8>
 8000894:	20001970 	.word	0x20001970
 8000898:	080078cc 	.word	0x080078cc
 800089c:	08007794 	.word	0x08007794
 80008a0:	080077ac 	.word	0x080077ac
 80008a4:	080077c4 	.word	0x080077c4
 80008a8:	080077dc 	.word	0x080077dc

080008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008be:	f000 fa0d 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40001000 	.word	0x40001000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_MspInit+0x4c>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <HAL_MspInit+0x4c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	; 0x60
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_MspInit+0x4c>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_MspInit+0x4c>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_MspInit+0x4c>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	f06f 0001 	mvn.w	r0, #1
 800091a:	f000 fab7 	bl	8000e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0x7c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d128      	bne.n	80009a0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_UART_MspInit+0x80>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x80>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x80>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 faa0 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	2036      	movs	r0, #54	; 0x36
 80009c6:	f000 fa61 	bl	8000e8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ca:	2036      	movs	r0, #54	; 0x36
 80009cc:	f000 fa7a 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_InitTick+0x9c>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_InitTick+0x9c>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6593      	str	r3, [r2, #88]	; 0x58
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_InitTick+0x9c>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 0210 	add.w	r2, r7, #16
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fa0e 	bl	8001e14 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009f8:	f001 f9e0 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80009fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <HAL_InitTick+0xa0>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	0c9b      	lsrs	r3, r3, #18
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_InitTick+0xa4>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <HAL_InitTick+0xa8>)
 8000a10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_InitTick+0xa4>)
 8000a14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_InitTick+0xa4>)
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_InitTick+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_InitTick+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <HAL_InitTick+0xa4>)
 8000a2e:	f001 ff3f 	bl	80028b0 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d104      	bne.n	8000a42 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a38:	4806      	ldr	r0, [pc, #24]	; (8000a54 <HAL_InitTick+0xa4>)
 8000a3a:	f001 ff9b 	bl	8002974 <HAL_TIM_Base_Start_IT>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	200019fc 	.word	0x200019fc
 8000a58:	40001000 	.word	0x40001000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM6_DAC_IRQHandler+0x10>)
 8000a8e:	f001 ffe1 	bl	8002a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200019fc 	.word	0x200019fc

08000a9c <_read>:
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e00a      	b.n	8000ac4 <_read+0x28>
 8000aae:	f3af 8000 	nop.w
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	b2ca      	uxtb	r2, r1
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf0      	blt.n	8000aae <_read+0x12>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_write>:
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e009      	b.n	8000afc <_write+0x26>
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe6f 	bl	80007d4 <__io_putchar>
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf1      	blt.n	8000ae8 <_write+0x12>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_fstat>:
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_isatty>:
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
 8000ba8:	f005 fda8 	bl	80066fc <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20018000 	.word	0x20018000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000090 	.word	0x20000090
 8000be0:	20001aa0 	.word	0x20001aa0

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <SystemInit+0x5c>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <SystemInit+0x5c>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <SystemInit+0x60>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <SystemInit+0x60>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <SystemInit+0x60>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <SystemInit+0x60>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <SystemInit+0x60>)
 8000c10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <SystemInit+0x60>)
 8000c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <SystemInit+0x60>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <SystemInit+0x60>)
 8000c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SystemInit+0x60>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00
 8000c44:	40021000 	.word	0x40021000

08000c48 <Reset_Handler>:
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopForever+0x2>
 8000c4c:	f7ff ffca 	bl	8000be4 <SystemInit>
 8000c50:	2100      	movs	r1, #0
 8000c52:	e003      	b.n	8000c5c <LoopCopyDataInit>

08000c54 <CopyDataInit>:
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <LoopForever+0x6>)
 8000c56:	585b      	ldr	r3, [r3, r1]
 8000c58:	5043      	str	r3, [r0, r1]
 8000c5a:	3104      	adds	r1, #4

08000c5c <LoopCopyDataInit>:
 8000c5c:	480a      	ldr	r0, [pc, #40]	; (8000c88 <LoopForever+0xa>)
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <LoopForever+0xe>)
 8000c60:	1842      	adds	r2, r0, r1
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d3f6      	bcc.n	8000c54 <CopyDataInit>
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
 8000c68:	e002      	b.n	8000c70 <LoopFillZerobss>

08000c6a <FillZerobss>:
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f842 3b04 	str.w	r3, [r2], #4

08000c70 <LoopFillZerobss>:
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <LoopForever+0x16>)
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d3f9      	bcc.n	8000c6a <FillZerobss>
 8000c76:	f005 fd47 	bl	8006708 <__libc_init_array>
 8000c7a:	f7ff fc75 	bl	8000568 <main>

08000c7e <LoopForever>:
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
 8000c80:	20018000 	.word	0x20018000
 8000c84:	080079c0 	.word	0x080079c0
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000074 	.word	0x20000074
 8000c90:	20000074 	.word	0x20000074
 8000c94:	20001a9c 	.word	0x20001a9c

08000c98 <ADC1_2_IRQHandler>:
 8000c98:	e7fe      	b.n	8000c98 <ADC1_2_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_Init+0x3c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <HAL_Init+0x3c>)
 8000cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f8df 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fe79 	bl	80009b0 <HAL_InitTick>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	e001      	b.n	8000cce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cca:	f7ff fe07 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cce:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20001a48 	.word	0x20001a48

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20001a48 	.word	0x20001a48

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	e17f      	b.n	80011f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8171 	beq.w	80011ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d00b      	beq.n	8000f28 <HAL_GPIO_Init+0x48>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1c:	2b11      	cmp	r3, #17
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b12      	cmp	r3, #18
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 0201 	and.w	r2, r3, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d118      	bne.n	8000fc8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	08db      	lsrs	r3, r3, #3
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x128>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b12      	cmp	r3, #18
 8001006:	d123      	bne.n	8001050 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	6939      	ldr	r1, [r7, #16]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0203 	and.w	r2, r3, #3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80ac 	beq.w	80011ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x330>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	4a5e      	ldr	r2, [pc, #376]	; (8001210 <HAL_GPIO_Init+0x330>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6613      	str	r3, [r2, #96]	; 0x60
 800109e:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <HAL_GPIO_Init+0x330>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010aa:	4a5a      	ldr	r2, [pc, #360]	; (8001214 <HAL_GPIO_Init+0x334>)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d4:	d025      	beq.n	8001122 <HAL_GPIO_Init+0x242>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x338>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x23e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_GPIO_Init+0x33c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x23a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x340>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x236>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x344>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x232>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x348>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x22e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_GPIO_Init+0x34c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x22a>
 8001106:	2306      	movs	r3, #6
 8001108:	e00c      	b.n	8001124 <HAL_GPIO_Init+0x244>
 800110a:	2307      	movs	r3, #7
 800110c:	e00a      	b.n	8001124 <HAL_GPIO_Init+0x244>
 800110e:	2305      	movs	r3, #5
 8001110:	e008      	b.n	8001124 <HAL_GPIO_Init+0x244>
 8001112:	2304      	movs	r3, #4
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x244>
 8001116:	2303      	movs	r3, #3
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x244>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x244>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x244>
 8001122:	2300      	movs	r3, #0
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	f002 0203 	and.w	r2, r2, #3
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	4093      	lsls	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001134:	4937      	ldr	r1, [pc, #220]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_GPIO_Init+0x350>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001166:	4a32      	ldr	r2, [pc, #200]	; (8001230 <HAL_GPIO_Init+0x350>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <HAL_GPIO_Init+0x350>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001190:	4a27      	ldr	r2, [pc, #156]	; (8001230 <HAL_GPIO_Init+0x350>)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <HAL_GPIO_Init+0x350>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ba:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_GPIO_Init+0x350>)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_GPIO_Init+0x350>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_GPIO_Init+0x350>)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa22 f303 	lsr.w	r3, r2, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f47f ae78 	bne.w	8000ef0 <HAL_GPIO_Init+0x10>
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	40010000 	.word	0x40010000
 8001218:	48000400 	.word	0x48000400
 800121c:	48000800 	.word	0x48000800
 8001220:	48000c00 	.word	0x48000c00
 8001224:	48001000 	.word	0x48001000
 8001228:	48001400 	.word	0x48001400
 800122c:	48001800 	.word	0x48001800
 8001230:	40010400 	.word	0x40010400

08001234 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <HAL_PWREx_GetVoltageRange+0x18>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40007000 	.word	0x40007000

08001250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125e:	d130      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001260:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800126c:	d038      	beq.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001276:	4a1e      	ldr	r2, [pc, #120]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2232      	movs	r2, #50	; 0x32
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9b      	lsrs	r3, r3, #18
 8001290:	3301      	adds	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001294:	e002      	b.n	800129c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3b01      	subs	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a8:	d102      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f2      	bne.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012bc:	d110      	bne.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e00f      	b.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ce:	d007      	beq.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40007000 	.word	0x40007000
 80012f4:	20000000 	.word	0x20000000
 80012f8:	431bde83 	.word	0x431bde83

080012fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e3d4      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800130e:	4ba1      	ldr	r3, [pc, #644]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001318:	4b9e      	ldr	r3, [pc, #632]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80e4 	beq.w	80014f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_RCC_OscConfig+0x4a>
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b0c      	cmp	r3, #12
 800133a:	f040 808b 	bne.w	8001454 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b01      	cmp	r3, #1
 8001342:	f040 8087 	bne.w	8001454 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001346:	4b93      	ldr	r3, [pc, #588]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x62>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e3ac      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1a      	ldr	r2, [r3, #32]
 8001362:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <HAL_RCC_OscConfig+0x7c>
 800136e:	4b89      	ldr	r3, [pc, #548]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001376:	e005      	b.n	8001384 <HAL_RCC_OscConfig+0x88>
 8001378:	4b86      	ldr	r3, [pc, #536]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800137a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001384:	4293      	cmp	r3, r2
 8001386:	d223      	bcs.n	80013d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fd73 	bl	8001e78 <RCC_SetFlashLatencyFromMSIRange>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e38d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800139c:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a7c      	ldr	r2, [pc, #496]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4977      	ldr	r1, [pc, #476]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ba:	4b76      	ldr	r3, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	4972      	ldr	r1, [pc, #456]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
 80013ce:	e025      	b.n	800141c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d0:	4b70      	ldr	r3, [pc, #448]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a6f      	ldr	r2, [pc, #444]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b6d      	ldr	r3, [pc, #436]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	496a      	ldr	r1, [pc, #424]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ee:	4b69      	ldr	r3, [pc, #420]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	4965      	ldr	r1, [pc, #404]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fd33 	bl	8001e78 <RCC_SetFlashLatencyFromMSIRange>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e34d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800141c:	f000 fc36 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001420:	4602      	mov	r2, r0
 8001422:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	495a      	ldr	r1, [pc, #360]	; (8001598 <HAL_RCC_OscConfig+0x29c>)
 800142e:	5ccb      	ldrb	r3, [r1, r3]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	4a58      	ldr	r2, [pc, #352]	; (800159c <HAL_RCC_OscConfig+0x2a0>)
 800143a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800143c:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <HAL_RCC_OscConfig+0x2a4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fab5 	bl	80009b0 <HAL_InitTick>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d052      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	e331      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d032      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800145c:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a4c      	ldr	r2, [pc, #304]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc4c 	bl	8000d04 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001470:	f7ff fc48 	bl	8000d04 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e31a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148e:	4b41      	ldr	r3, [pc, #260]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a40      	ldr	r2, [pc, #256]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b3e      	ldr	r3, [pc, #248]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	493b      	ldr	r1, [pc, #236]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	4936      	ldr	r1, [pc, #216]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e01a      	b.n	80014f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a33      	ldr	r2, [pc, #204]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fc19 	bl	8000d04 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc15 	bl	8000d04 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e2e7      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x1da>
 80014f4:	e000      	b.n	80014f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d074      	beq.n	80015ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b08      	cmp	r3, #8
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x21a>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d10e      	bne.n	800152e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d10b      	bne.n	800152e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d064      	beq.n	80015ec <HAL_RCC_OscConfig+0x2f0>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d160      	bne.n	80015ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e2c4      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x24a>
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a15      	ldr	r2, [pc, #84]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e01d      	b.n	8001582 <HAL_RCC_OscConfig+0x286>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x26e>
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x286>
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_RCC_OscConfig+0x298>)
 800157c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01c      	beq.n	80015c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fbbb 	bl	8000d04 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001590:	e011      	b.n	80015b6 <HAL_RCC_OscConfig+0x2ba>
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	080078d0 	.word	0x080078d0
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fbae 	bl	8000d04 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e280      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	4baf      	ldr	r3, [pc, #700]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2a8>
 80015c2:	e014      	b.n	80015ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb9e 	bl	8000d04 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fb9a 	bl	8000d04 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e26c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	4ba5      	ldr	r3, [pc, #660]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x2d0>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d060      	beq.n	80016bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x310>
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d119      	bne.n	800163a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d116      	bne.n	800163a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800160c:	4b99      	ldr	r3, [pc, #612]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_OscConfig+0x328>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e249      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b93      	ldr	r3, [pc, #588]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	4990      	ldr	r1, [pc, #576]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001638:	e040      	b.n	80016bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d023      	beq.n	800168a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001642:	4b8c      	ldr	r3, [pc, #560]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a8b      	ldr	r2, [pc, #556]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fb59 	bl	8000d04 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fb55 	bl	8000d04 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e227      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001668:	4b82      	ldr	r3, [pc, #520]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b7f      	ldr	r3, [pc, #508]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	061b      	lsls	r3, r3, #24
 8001682:	497c      	ldr	r1, [pc, #496]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
 8001688:	e018      	b.n	80016bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168a:	4b7a      	ldr	r3, [pc, #488]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a79      	ldr	r2, [pc, #484]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fb35 	bl	8000d04 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fb31 	bl	8000d04 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e203      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b0:	4b70      	ldr	r3, [pc, #448]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d03c      	beq.n	8001742 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01c      	beq.n	800170a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d6:	4a67      	ldr	r2, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff fb10 	bl	8000d04 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff fb0c 	bl	8000d04 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1de      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fa:	4b5e      	ldr	r3, [pc, #376]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ef      	beq.n	80016e8 <HAL_RCC_OscConfig+0x3ec>
 8001708:	e01b      	b.n	8001742 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170a:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 800170c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001710:	4a58      	ldr	r2, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff faf3 	bl	8000d04 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff faef 	bl	8000d04 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1c1      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001734:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ef      	bne.n	8001722 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80a6 	beq.w	800189c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001754:	4b47      	ldr	r3, [pc, #284]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10d      	bne.n	800177c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	4a43      	ldr	r2, [pc, #268]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176a:	6593      	str	r3, [r2, #88]	; 0x58
 800176c:	4b41      	ldr	r3, [pc, #260]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001778:	2301      	movs	r3, #1
 800177a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177c:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <HAL_RCC_OscConfig+0x57c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d118      	bne.n	80017ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001788:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <HAL_RCC_OscConfig+0x57c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a3a      	ldr	r2, [pc, #232]	; (8001878 <HAL_RCC_OscConfig+0x57c>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001794:	f7ff fab6 	bl	8000d04 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179c:	f7ff fab2 	bl	8000d04 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e184      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_RCC_OscConfig+0x57c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d108      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4d8>
 80017c2:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80017c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c8:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d2:	e024      	b.n	800181e <HAL_RCC_OscConfig+0x522>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d110      	bne.n	80017fe <HAL_RCC_OscConfig+0x502>
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	4a24      	ldr	r2, [pc, #144]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80017ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f2:	4a20      	ldr	r2, [pc, #128]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017fc:	e00f      	b.n	800181e <HAL_RCC_OscConfig+0x522>
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001804:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001814:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001816:	f023 0304 	bic.w	r3, r3, #4
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d016      	beq.n	8001854 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff fa6d 	bl	8000d04 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff fa69 	bl	8000d04 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e139      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_OscConfig+0x578>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0ed      	beq.n	800182e <HAL_RCC_OscConfig+0x532>
 8001852:	e01a      	b.n	800188a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff fa56 	bl	8000d04 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800185a:	e00f      	b.n	800187c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff fa52 	bl	8000d04 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d906      	bls.n	800187c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e122      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000
 8001878:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800187c:	4b90      	ldr	r3, [pc, #576]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 800187e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1e8      	bne.n	800185c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800188a:	7ffb      	ldrb	r3, [r7, #31]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	4a8a      	ldr	r2, [pc, #552]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8108 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	f040 80d0 	bne.w	8001a50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018b0:	4b83      	ldr	r3, [pc, #524]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d130      	bne.n	8001926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	3b01      	subs	r3, #1
 80018d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d127      	bne.n	8001926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d11f      	bne.n	8001926 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018f0:	2a07      	cmp	r2, #7
 80018f2:	bf14      	ite	ne
 80018f4:	2201      	movne	r2, #1
 80018f6:	2200      	moveq	r2, #0
 80018f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d113      	bne.n	8001926 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d109      	bne.n	8001926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d06e      	beq.n	8001a04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d069      	beq.n	8001a00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800192c:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001938:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b7      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001948:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 800194e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001952:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001954:	f7ff f9d6 	bl	8000d04 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f9d2 	bl	8000d04 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0a4      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196e:	4b54      	ldr	r3, [pc, #336]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197a:	4b51      	ldr	r3, [pc, #324]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	4b51      	ldr	r3, [pc, #324]	; (8001ac4 <HAL_RCC_OscConfig+0x7c8>)
 8001980:	4013      	ands	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800198a:	3a01      	subs	r2, #1
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	4311      	orrs	r1, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001994:	0212      	lsls	r2, r2, #8
 8001996:	4311      	orrs	r1, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800199c:	0852      	lsrs	r2, r2, #1
 800199e:	3a01      	subs	r2, #1
 80019a0:	0552      	lsls	r2, r2, #21
 80019a2:	4311      	orrs	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019a8:	0852      	lsrs	r2, r2, #1
 80019aa:	3a01      	subs	r2, #1
 80019ac:	0652      	lsls	r2, r2, #25
 80019ae:	4311      	orrs	r1, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019b4:	0912      	lsrs	r2, r2, #4
 80019b6:	0452      	lsls	r2, r2, #17
 80019b8:	430a      	orrs	r2, r1
 80019ba:	4941      	ldr	r1, [pc, #260]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019c0:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a3e      	ldr	r2, [pc, #248]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a3b      	ldr	r2, [pc, #236]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d8:	f7ff f994 	bl	8000d04 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f990 	bl	8000d04 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e062      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fe:	e05a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e059      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a04:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d152      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a28:	f7ff f96c 	bl	8000d04 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f968 	bl	8000d04 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e03a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x734>
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d02d      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a60:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a74:	f023 0303 	bic.w	r3, r3, #3
 8001a78:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001a80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f93b 	bl	8000d04 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff f937 	bl	8000d04 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e009      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_OscConfig+0x7c4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x796>
 8001ab0:	e001      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	f99d808c 	.word	0xf99d808c

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0c8      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_RCC_ClockConfig+0x1b0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d910      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <HAL_RCC_ClockConfig+0x1b0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4961      	ldr	r1, [pc, #388]	; (8001c78 <HAL_RCC_ClockConfig+0x1b0>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b5f      	ldr	r3, [pc, #380]	; (8001c78 <HAL_RCC_ClockConfig+0x1b0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b0      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d04c      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b20:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d121      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e09e      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b38:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d115      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e092      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b50:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e086      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b60:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e07e      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b70:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 0203 	bic.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	493f      	ldr	r1, [pc, #252]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b82:	f7ff f8bf 	bl	8000d04 <HAL_GetTick>
 8001b86:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8a:	f7ff f8bb 	bl	8000d04 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e066      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 020c 	and.w	r2, r3, #12
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d1eb      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	492c      	ldr	r1, [pc, #176]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d210      	bcs.n	8001c00 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_RCC_ClockConfig+0x1b0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 0207 	bic.w	r2, r3, #7
 8001be6:	4924      	ldr	r1, [pc, #144]	; (8001c78 <HAL_RCC_ClockConfig+0x1b0>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_RCC_ClockConfig+0x1b0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e036      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4918      	ldr	r1, [pc, #96]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4910      	ldr	r1, [pc, #64]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c3e:	f000 f825 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_RCC_ClockConfig+0x1b4>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	490c      	ldr	r1, [pc, #48]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fea4 	bl	80009b0 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	080078d0 	.word	0x080078d0
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d121      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d11e      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ccc:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e005      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10d      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	e004      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d134      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d003      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xac>
 8001d30:	e005      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d34:	617b      	str	r3, [r7, #20]
      break;
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d3a:	617b      	str	r3, [r7, #20]
      break;
 8001d3c:	e002      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	617b      	str	r3, [r7, #20]
      break;
 8001d42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	3301      	adds	r3, #1
 8001d50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	fb02 f203 	mul.w	r2, r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	0e5b      	lsrs	r3, r3, #25
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	3301      	adds	r3, #1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d84:	69bb      	ldr	r3, [r7, #24]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	080078e8 	.word	0x080078e8
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	007a1200 	.word	0x007a1200

08001da4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	080078e0 	.word	0x080078e0

08001de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dec:	f7ff ffda 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0adb      	lsrs	r3, r3, #11
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4904      	ldr	r1, [pc, #16]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	080078e0 	.word	0x080078e0

08001e14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	220f      	movs	r2, #15
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCC_GetClockConfig+0x60>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0207 	and.w	r2, r3, #7
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40022000 	.word	0x40022000

08001e78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e90:	f7ff f9d0 	bl	8001234 <HAL_PWREx_GetVoltageRange>
 8001e94:	6178      	str	r0, [r7, #20]
 8001e96:	e014      	b.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eb0:	f7ff f9c0 	bl	8001234 <HAL_PWREx_GetVoltageRange>
 8001eb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec8:	d10b      	bne.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d919      	bls.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ed4:	d902      	bls.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	e013      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001edc:	2301      	movs	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e010      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d902      	bls.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ee8:	2303      	movs	r3, #3
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	e00a      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b80      	cmp	r3, #128	; 0x80
 8001ef2:	d102      	bne.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e004      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b70      	cmp	r3, #112	; 0x70
 8001efe:	d101      	bne.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f00:	2301      	movs	r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 0207 	bic.w	r2, r3, #7
 8001f0c:	4909      	ldr	r1, [pc, #36]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40022000 	.word	0x40022000

08001f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f40:	2300      	movs	r3, #0
 8001f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f44:	2300      	movs	r3, #0
 8001f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d041      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f5c:	d02a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f62:	d824      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f68:	d008      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f6e:	d81e      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f78:	d010      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f7a:	e018      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f7c:	4b86      	ldr	r3, [pc, #536]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a85      	ldr	r2, [pc, #532]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f88:	e015      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fabb 	bl	800250c <RCCEx_PLLSAI1_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f9a:	e00c      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3320      	adds	r3, #32
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fba6 	bl	80026f4 <RCCEx_PLLSAI2_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fac:	e003      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fb6:	7cfb      	ldrb	r3, [r7, #19]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fbc:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fca:	4973      	ldr	r1, [pc, #460]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fd2:	e001      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d041      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fec:	d02a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ff2:	d824      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff8:	d008      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ffe:	d81e      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002008:	d010      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800200a:	e018      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800200c:	4b62      	ldr	r3, [pc, #392]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a61      	ldr	r2, [pc, #388]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002016:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002018:	e015      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fa73 	bl	800250c <RCCEx_PLLSAI1_Config>
 8002026:	4603      	mov	r3, r0
 8002028:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800202a:	e00c      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3320      	adds	r3, #32
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fb5e 	bl	80026f4 <RCCEx_PLLSAI2_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800203c:	e003      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	74fb      	strb	r3, [r7, #19]
      break;
 8002042:	e000      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10b      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800204c:	4b52      	ldr	r3, [pc, #328]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800205a:	494f      	ldr	r1, [pc, #316]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002062:	e001      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a0 	beq.w	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00d      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002090:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	4a40      	ldr	r2, [pc, #256]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209a:	6593      	str	r3, [r2, #88]	; 0x58
 800209c:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3a      	ldr	r2, [pc, #232]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fe24 	bl	8000d04 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7fe fe20 	bl	8000d04 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d902      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	74fb      	strb	r3, [r7, #19]
        break;
 80020d2:	e005      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d15c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01f      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	d019      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	4a20      	ldr	r2, [pc, #128]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d016      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7fe fddf 	bl	8000d04 <HAL_GetTick>
 8002146:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002148:	e00b      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe fddb 	bl	8000d04 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d902      	bls.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	74fb      	strb	r3, [r7, #19]
            break;
 8002160:	e006      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ec      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002186:	4904      	ldr	r1, [pc, #16]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800218e:	e009      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
 8002194:	e006      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a4:	7c7b      	ldrb	r3, [r7, #17]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4b9e      	ldr	r3, [pc, #632]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	4a9d      	ldr	r2, [pc, #628]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c2:	4b98      	ldr	r3, [pc, #608]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	f023 0203 	bic.w	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	4994      	ldr	r1, [pc, #592]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e4:	4b8f      	ldr	r3, [pc, #572]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f023 020c 	bic.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	498c      	ldr	r1, [pc, #560]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002206:	4b87      	ldr	r3, [pc, #540]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	4983      	ldr	r1, [pc, #524]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002228:	4b7e      	ldr	r3, [pc, #504]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	497b      	ldr	r1, [pc, #492]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800224a:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002258:	4972      	ldr	r1, [pc, #456]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800226c:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	496a      	ldr	r1, [pc, #424]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800228e:	4b65      	ldr	r3, [pc, #404]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	4961      	ldr	r1, [pc, #388]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022b0:	4b5c      	ldr	r3, [pc, #368]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	4959      	ldr	r1, [pc, #356]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d2:	4b54      	ldr	r3, [pc, #336]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e0:	4950      	ldr	r1, [pc, #320]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022f4:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	4948      	ldr	r1, [pc, #288]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	493f      	ldr	r1, [pc, #252]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d028      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002338:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002346:	4937      	ldr	r1, [pc, #220]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002356:	d106      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a31      	ldr	r2, [pc, #196]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002362:	60d3      	str	r3, [r2, #12]
 8002364:	e011      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800236e:	d10c      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	2101      	movs	r1, #1
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f8c8 	bl	800250c <RCCEx_PLLSAI1_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d028      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	491f      	ldr	r1, [pc, #124]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b4:	d106      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c0:	60d3      	str	r3, [r2, #12]
 80023c2:	e011      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f899 	bl	800250c <RCCEx_PLLSAI1_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d02b      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	4908      	ldr	r1, [pc, #32]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002412:	d109      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a02      	ldr	r2, [pc, #8]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241e:	60d3      	str	r3, [r2, #12]
 8002420:	e014      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002430:	d10c      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f867 	bl	800250c <RCCEx_PLLSAI1_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d02f      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002466:	4928      	ldr	r1, [pc, #160]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002476:	d10d      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	2102      	movs	r1, #2
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f844 	bl	800250c <RCCEx_PLLSAI1_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d014      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	74bb      	strb	r3, [r7, #18]
 8002492:	e011      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3320      	adds	r3, #32
 80024a2:	2102      	movs	r1, #2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f925 	bl	80026f4 <RCCEx_PLLSAI2_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024c4:	4b10      	ldr	r3, [pc, #64]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024d2:	490d      	ldr	r1, [pc, #52]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f6:	4904      	ldr	r1, [pc, #16]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000

0800250c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800251a:	4b75      	ldr	r3, [pc, #468]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d018      	beq.n	8002558 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002526:	4b72      	ldr	r3, [pc, #456]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0203 	and.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d10d      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
       ||
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800253e:	4b6c      	ldr	r3, [pc, #432]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
       ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d047      	beq.n	80025e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	e044      	b.n	80025e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d018      	beq.n	8002592 <RCCEx_PLLSAI1_Config+0x86>
 8002560:	2b03      	cmp	r3, #3
 8002562:	d825      	bhi.n	80025b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002564:	2b01      	cmp	r3, #1
 8002566:	d002      	beq.n	800256e <RCCEx_PLLSAI1_Config+0x62>
 8002568:	2b02      	cmp	r3, #2
 800256a:	d009      	beq.n	8002580 <RCCEx_PLLSAI1_Config+0x74>
 800256c:	e020      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800256e:	4b60      	ldr	r3, [pc, #384]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11d      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257e:	e01a      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002580:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d116      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002590:	e013      	b.n	80025ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002592:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800259e:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ae:	e006      	b.n	80025be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      break;
 80025b4:	e004      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b6:	bf00      	nop
 80025b8:	e002      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ba:	bf00      	nop
 80025bc:	e000      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025be:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025c6:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6819      	ldr	r1, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	430b      	orrs	r3, r1
 80025dc:	4944      	ldr	r1, [pc, #272]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d17d      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f4:	f7fe fb86 	bl	8000d04 <HAL_GetTick>
 80025f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025fa:	e009      	b.n	8002610 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025fc:	f7fe fb82 	bl	8000d04 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d902      	bls.n	8002610 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	73fb      	strb	r3, [r7, #15]
        break;
 800260e:	e005      	b.n	800261c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002610:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ef      	bne.n	80025fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d160      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002628:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6892      	ldr	r2, [r2, #8]
 8002638:	0211      	lsls	r1, r2, #8
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68d2      	ldr	r2, [r2, #12]
 800263e:	0912      	lsrs	r2, r2, #4
 8002640:	0452      	lsls	r2, r2, #17
 8002642:	430a      	orrs	r2, r1
 8002644:	492a      	ldr	r1, [pc, #168]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	610b      	str	r3, [r1, #16]
 800264a:	e027      	b.n	800269c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d112      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002652:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800265a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6892      	ldr	r2, [r2, #8]
 8002662:	0211      	lsls	r1, r2, #8
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6912      	ldr	r2, [r2, #16]
 8002668:	0852      	lsrs	r2, r2, #1
 800266a:	3a01      	subs	r2, #1
 800266c:	0552      	lsls	r2, r2, #21
 800266e:	430a      	orrs	r2, r1
 8002670:	491f      	ldr	r1, [pc, #124]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	610b      	str	r3, [r1, #16]
 8002676:	e011      	b.n	800269c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6892      	ldr	r2, [r2, #8]
 8002688:	0211      	lsls	r1, r2, #8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6952      	ldr	r2, [r2, #20]
 800268e:	0852      	lsrs	r2, r2, #1
 8002690:	3a01      	subs	r2, #1
 8002692:	0652      	lsls	r2, r2, #25
 8002694:	430a      	orrs	r2, r1
 8002696:	4916      	ldr	r1, [pc, #88]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fb2c 	bl	8000d04 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ae:	e009      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b0:	f7fe fb28 	bl	8000d04 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d902      	bls.n	80026c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	73fb      	strb	r3, [r7, #15]
          break;
 80026c2:	e005      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	4904      	ldr	r1, [pc, #16]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000

080026f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002702:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d018      	beq.n	8002740 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800270e:	4b67      	ldr	r3, [pc, #412]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0203 	and.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d10d      	bne.n	800273a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
       ||
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002726:	4b61      	ldr	r3, [pc, #388]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
       ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d047      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	e044      	b.n	80027ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d018      	beq.n	800277a <RCCEx_PLLSAI2_Config+0x86>
 8002748:	2b03      	cmp	r3, #3
 800274a:	d825      	bhi.n	8002798 <RCCEx_PLLSAI2_Config+0xa4>
 800274c:	2b01      	cmp	r3, #1
 800274e:	d002      	beq.n	8002756 <RCCEx_PLLSAI2_Config+0x62>
 8002750:	2b02      	cmp	r3, #2
 8002752:	d009      	beq.n	8002768 <RCCEx_PLLSAI2_Config+0x74>
 8002754:	e020      	b.n	8002798 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002756:	4b55      	ldr	r3, [pc, #340]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11d      	bne.n	800279e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002766:	e01a      	b.n	800279e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002768:	4b50      	ldr	r3, [pc, #320]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d116      	bne.n	80027a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002778:	e013      	b.n	80027a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800277a:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10f      	bne.n	80027a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002786:	4b49      	ldr	r3, [pc, #292]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002796:	e006      	b.n	80027a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e004      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800279e:	bf00      	nop
 80027a0:	e002      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027a2:	bf00      	nop
 80027a4:	e000      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10d      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	430b      	orrs	r3, r1
 80027c4:	4939      	ldr	r1, [pc, #228]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d167      	bne.n	80028a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027d0:	4b36      	ldr	r3, [pc, #216]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a35      	ldr	r2, [pc, #212]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027dc:	f7fe fa92 	bl	8000d04 <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027e2:	e009      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027e4:	f7fe fa8e 	bl	8000d04 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d902      	bls.n	80027f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	73fb      	strb	r3, [r7, #15]
        break;
 80027f6:	e005      	b.n	8002804 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027f8:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ef      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d14a      	bne.n	80028a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6892      	ldr	r2, [r2, #8]
 8002820:	0211      	lsls	r1, r2, #8
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68d2      	ldr	r2, [r2, #12]
 8002826:	0912      	lsrs	r2, r2, #4
 8002828:	0452      	lsls	r2, r2, #17
 800282a:	430a      	orrs	r2, r1
 800282c:	491f      	ldr	r1, [pc, #124]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800282e:	4313      	orrs	r3, r2
 8002830:	614b      	str	r3, [r1, #20]
 8002832:	e011      	b.n	8002858 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800283c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	0211      	lsls	r1, r2, #8
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6912      	ldr	r2, [r2, #16]
 800284a:	0852      	lsrs	r2, r2, #1
 800284c:	3a01      	subs	r2, #1
 800284e:	0652      	lsls	r2, r2, #25
 8002850:	430a      	orrs	r2, r1
 8002852:	4916      	ldr	r1, [pc, #88]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002854:	4313      	orrs	r3, r2
 8002856:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a13      	ldr	r2, [pc, #76]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fa4e 	bl	8000d04 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800286a:	e009      	b.n	8002880 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800286c:	f7fe fa4a 	bl	8000d04 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d902      	bls.n	8002880 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	73fb      	strb	r3, [r7, #15]
          break;
 800287e:	e005      	b.n	800288c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ef      	beq.n	800286c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	4904      	ldr	r1, [pc, #16]	; (80028ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800289c:	4313      	orrs	r3, r2
 800289e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e049      	b.n	8002956 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f841 	bl	800295e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f000 f9f8 	bl	8002ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e04f      	b.n	8002a2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a23      	ldr	r2, [pc, #140]	; (8002a38 <HAL_TIM_Base_Start_IT+0xc4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01d      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d018      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_TIM_Base_Start_IT+0xc8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_TIM_Base_Start_IT+0xcc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIM_Base_Start_IT+0x76>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d115      	bne.n	8002a16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b06      	cmp	r3, #6
 80029fa:	d015      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0xb4>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a02:	d011      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	e008      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e000      	b.n	8002a2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40013400 	.word	0x40013400
 8002a4c:	40014000 	.word	0x40014000
 8002a50:	00010007 	.word	0x00010007

08002a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d122      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0202 	mvn.w	r2, #2
 8002a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f905 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e005      	b.n	8002aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8f7 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f908 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d122      	bne.n	8002b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d11b      	bne.n	8002b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0204 	mvn.w	r2, #4
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8db 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8cd 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f8de 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d122      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d11b      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0208 	mvn.w	r2, #8
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f8b1 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8a3 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f8b4 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0210 	mvn.w	r2, #16
 8002b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2208      	movs	r2, #8
 8002b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f887 	bl	8002ca6 <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f879 	bl	8002c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f88a 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10e      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0201 	mvn.w	r2, #1
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fe6a 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d10e      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d107      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f914 	bl	8002e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c12:	d10e      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b80      	cmp	r3, #128	; 0x80
 8002c20:	d107      	bne.n	8002c32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f907 	bl	8002e40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d10e      	bne.n	8002c5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d107      	bne.n	8002c5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f838 	bl	8002cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d10e      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d107      	bne.n	8002c8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f06f 0220 	mvn.w	r2, #32
 8002c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f8c7 	bl	8002e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a40      	ldr	r2, [pc, #256]	; (8002df8 <TIM_Base_SetConfig+0x114>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d02:	d00f      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3d      	ldr	r2, [pc, #244]	; (8002dfc <TIM_Base_SetConfig+0x118>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3c      	ldr	r2, [pc, #240]	; (8002e00 <TIM_Base_SetConfig+0x11c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <TIM_Base_SetConfig+0x120>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <TIM_Base_SetConfig+0x124>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2f      	ldr	r2, [pc, #188]	; (8002df8 <TIM_Base_SetConfig+0x114>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d01b      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <TIM_Base_SetConfig+0x118>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d017      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2b      	ldr	r2, [pc, #172]	; (8002e00 <TIM_Base_SetConfig+0x11c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a2a      	ldr	r2, [pc, #168]	; (8002e04 <TIM_Base_SetConfig+0x120>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <TIM_Base_SetConfig+0x124>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a28      	ldr	r2, [pc, #160]	; (8002e0c <TIM_Base_SetConfig+0x128>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0x9a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a26      	ldr	r2, [pc, #152]	; (8002e14 <TIM_Base_SetConfig+0x130>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <TIM_Base_SetConfig+0x114>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00f      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <TIM_Base_SetConfig+0x124>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00b      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <TIM_Base_SetConfig+0x128>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <TIM_Base_SetConfig+0x12c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_Base_SetConfig+0xf8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	; (8002e14 <TIM_Base_SetConfig+0x130>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d103      	bne.n	8002de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	615a      	str	r2, [r3, #20]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40013400 	.word	0x40013400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800

08002e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e040      	b.n	8002ee8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fd58 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2224      	movs	r2, #36	; 0x24
 8002e80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f8c0 	bl	8003018 <UART_SetConfig>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e022      	b.n	8002ee8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fb3e 	bl	800352c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fbc5 	bl	8003670 <UART_CheckIdleState>
 8002ee6:	4603      	mov	r3, r0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	f040 8082 	bne.w	800300e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_UART_Transmit+0x26>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07a      	b.n	8003010 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_UART_Transmit+0x38>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e073      	b.n	8003010 <HAL_UART_Transmit+0x120>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2221      	movs	r2, #33	; 0x21
 8002f3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f3e:	f7fd fee1 	bl	8000d04 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5c:	d108      	bne.n	8002f70 <HAL_UART_Transmit+0x80>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d104      	bne.n	8002f70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	e003      	b.n	8002f78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f80:	e02d      	b.n	8002fde <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fbb8 	bl	8003702 <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e039      	b.n	8003010 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e008      	b.n	8002fcc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1cb      	bne.n	8002f82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2140      	movs	r1, #64	; 0x40
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fb84 	bl	8003702 <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e005      	b.n	8003010 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4313      	orrs	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4bad      	ldr	r3, [pc, #692]	; (80032f8 <UART_SetConfig+0x2e0>)
 8003044:	4013      	ands	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	430b      	orrs	r3, r1
 800304e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4aa2      	ldr	r2, [pc, #648]	; (80032fc <UART_SetConfig+0x2e4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	4313      	orrs	r3, r2
 800307e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	430a      	orrs	r2, r1
 8003092:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a99      	ldr	r2, [pc, #612]	; (8003300 <UART_SetConfig+0x2e8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d121      	bne.n	80030e2 <UART_SetConfig+0xca>
 800309e:	4b99      	ldr	r3, [pc, #612]	; (8003304 <UART_SetConfig+0x2ec>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d817      	bhi.n	80030dc <UART_SetConfig+0xc4>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <UART_SetConfig+0x9c>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030c5 	.word	0x080030c5
 80030b8:	080030d1 	.word	0x080030d1
 80030bc:	080030cb 	.word	0x080030cb
 80030c0:	080030d7 	.word	0x080030d7
 80030c4:	2301      	movs	r3, #1
 80030c6:	76fb      	strb	r3, [r7, #27]
 80030c8:	e0e7      	b.n	800329a <UART_SetConfig+0x282>
 80030ca:	2302      	movs	r3, #2
 80030cc:	76fb      	strb	r3, [r7, #27]
 80030ce:	e0e4      	b.n	800329a <UART_SetConfig+0x282>
 80030d0:	2304      	movs	r3, #4
 80030d2:	76fb      	strb	r3, [r7, #27]
 80030d4:	e0e1      	b.n	800329a <UART_SetConfig+0x282>
 80030d6:	2308      	movs	r3, #8
 80030d8:	76fb      	strb	r3, [r7, #27]
 80030da:	e0de      	b.n	800329a <UART_SetConfig+0x282>
 80030dc:	2310      	movs	r3, #16
 80030de:	76fb      	strb	r3, [r7, #27]
 80030e0:	e0db      	b.n	800329a <UART_SetConfig+0x282>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a88      	ldr	r2, [pc, #544]	; (8003308 <UART_SetConfig+0x2f0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d132      	bne.n	8003152 <UART_SetConfig+0x13a>
 80030ec:	4b85      	ldr	r3, [pc, #532]	; (8003304 <UART_SetConfig+0x2ec>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d828      	bhi.n	800314c <UART_SetConfig+0x134>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <UART_SetConfig+0xe8>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003135 	.word	0x08003135
 8003104:	0800314d 	.word	0x0800314d
 8003108:	0800314d 	.word	0x0800314d
 800310c:	0800314d 	.word	0x0800314d
 8003110:	08003141 	.word	0x08003141
 8003114:	0800314d 	.word	0x0800314d
 8003118:	0800314d 	.word	0x0800314d
 800311c:	0800314d 	.word	0x0800314d
 8003120:	0800313b 	.word	0x0800313b
 8003124:	0800314d 	.word	0x0800314d
 8003128:	0800314d 	.word	0x0800314d
 800312c:	0800314d 	.word	0x0800314d
 8003130:	08003147 	.word	0x08003147
 8003134:	2300      	movs	r3, #0
 8003136:	76fb      	strb	r3, [r7, #27]
 8003138:	e0af      	b.n	800329a <UART_SetConfig+0x282>
 800313a:	2302      	movs	r3, #2
 800313c:	76fb      	strb	r3, [r7, #27]
 800313e:	e0ac      	b.n	800329a <UART_SetConfig+0x282>
 8003140:	2304      	movs	r3, #4
 8003142:	76fb      	strb	r3, [r7, #27]
 8003144:	e0a9      	b.n	800329a <UART_SetConfig+0x282>
 8003146:	2308      	movs	r3, #8
 8003148:	76fb      	strb	r3, [r7, #27]
 800314a:	e0a6      	b.n	800329a <UART_SetConfig+0x282>
 800314c:	2310      	movs	r3, #16
 800314e:	76fb      	strb	r3, [r7, #27]
 8003150:	e0a3      	b.n	800329a <UART_SetConfig+0x282>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6d      	ldr	r2, [pc, #436]	; (800330c <UART_SetConfig+0x2f4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d120      	bne.n	800319e <UART_SetConfig+0x186>
 800315c:	4b69      	ldr	r3, [pc, #420]	; (8003304 <UART_SetConfig+0x2ec>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003166:	2b30      	cmp	r3, #48	; 0x30
 8003168:	d013      	beq.n	8003192 <UART_SetConfig+0x17a>
 800316a:	2b30      	cmp	r3, #48	; 0x30
 800316c:	d814      	bhi.n	8003198 <UART_SetConfig+0x180>
 800316e:	2b20      	cmp	r3, #32
 8003170:	d009      	beq.n	8003186 <UART_SetConfig+0x16e>
 8003172:	2b20      	cmp	r3, #32
 8003174:	d810      	bhi.n	8003198 <UART_SetConfig+0x180>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <UART_SetConfig+0x168>
 800317a:	2b10      	cmp	r3, #16
 800317c:	d006      	beq.n	800318c <UART_SetConfig+0x174>
 800317e:	e00b      	b.n	8003198 <UART_SetConfig+0x180>
 8003180:	2300      	movs	r3, #0
 8003182:	76fb      	strb	r3, [r7, #27]
 8003184:	e089      	b.n	800329a <UART_SetConfig+0x282>
 8003186:	2302      	movs	r3, #2
 8003188:	76fb      	strb	r3, [r7, #27]
 800318a:	e086      	b.n	800329a <UART_SetConfig+0x282>
 800318c:	2304      	movs	r3, #4
 800318e:	76fb      	strb	r3, [r7, #27]
 8003190:	e083      	b.n	800329a <UART_SetConfig+0x282>
 8003192:	2308      	movs	r3, #8
 8003194:	76fb      	strb	r3, [r7, #27]
 8003196:	e080      	b.n	800329a <UART_SetConfig+0x282>
 8003198:	2310      	movs	r3, #16
 800319a:	76fb      	strb	r3, [r7, #27]
 800319c:	e07d      	b.n	800329a <UART_SetConfig+0x282>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5b      	ldr	r2, [pc, #364]	; (8003310 <UART_SetConfig+0x2f8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d120      	bne.n	80031ea <UART_SetConfig+0x1d2>
 80031a8:	4b56      	ldr	r3, [pc, #344]	; (8003304 <UART_SetConfig+0x2ec>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031b2:	2bc0      	cmp	r3, #192	; 0xc0
 80031b4:	d013      	beq.n	80031de <UART_SetConfig+0x1c6>
 80031b6:	2bc0      	cmp	r3, #192	; 0xc0
 80031b8:	d814      	bhi.n	80031e4 <UART_SetConfig+0x1cc>
 80031ba:	2b80      	cmp	r3, #128	; 0x80
 80031bc:	d009      	beq.n	80031d2 <UART_SetConfig+0x1ba>
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d810      	bhi.n	80031e4 <UART_SetConfig+0x1cc>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <UART_SetConfig+0x1b4>
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d006      	beq.n	80031d8 <UART_SetConfig+0x1c0>
 80031ca:	e00b      	b.n	80031e4 <UART_SetConfig+0x1cc>
 80031cc:	2300      	movs	r3, #0
 80031ce:	76fb      	strb	r3, [r7, #27]
 80031d0:	e063      	b.n	800329a <UART_SetConfig+0x282>
 80031d2:	2302      	movs	r3, #2
 80031d4:	76fb      	strb	r3, [r7, #27]
 80031d6:	e060      	b.n	800329a <UART_SetConfig+0x282>
 80031d8:	2304      	movs	r3, #4
 80031da:	76fb      	strb	r3, [r7, #27]
 80031dc:	e05d      	b.n	800329a <UART_SetConfig+0x282>
 80031de:	2308      	movs	r3, #8
 80031e0:	76fb      	strb	r3, [r7, #27]
 80031e2:	e05a      	b.n	800329a <UART_SetConfig+0x282>
 80031e4:	2310      	movs	r3, #16
 80031e6:	76fb      	strb	r3, [r7, #27]
 80031e8:	e057      	b.n	800329a <UART_SetConfig+0x282>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a49      	ldr	r2, [pc, #292]	; (8003314 <UART_SetConfig+0x2fc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d125      	bne.n	8003240 <UART_SetConfig+0x228>
 80031f4:	4b43      	ldr	r3, [pc, #268]	; (8003304 <UART_SetConfig+0x2ec>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003202:	d017      	beq.n	8003234 <UART_SetConfig+0x21c>
 8003204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003208:	d817      	bhi.n	800323a <UART_SetConfig+0x222>
 800320a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320e:	d00b      	beq.n	8003228 <UART_SetConfig+0x210>
 8003210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003214:	d811      	bhi.n	800323a <UART_SetConfig+0x222>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <UART_SetConfig+0x20a>
 800321a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321e:	d006      	beq.n	800322e <UART_SetConfig+0x216>
 8003220:	e00b      	b.n	800323a <UART_SetConfig+0x222>
 8003222:	2300      	movs	r3, #0
 8003224:	76fb      	strb	r3, [r7, #27]
 8003226:	e038      	b.n	800329a <UART_SetConfig+0x282>
 8003228:	2302      	movs	r3, #2
 800322a:	76fb      	strb	r3, [r7, #27]
 800322c:	e035      	b.n	800329a <UART_SetConfig+0x282>
 800322e:	2304      	movs	r3, #4
 8003230:	76fb      	strb	r3, [r7, #27]
 8003232:	e032      	b.n	800329a <UART_SetConfig+0x282>
 8003234:	2308      	movs	r3, #8
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e02f      	b.n	800329a <UART_SetConfig+0x282>
 800323a:	2310      	movs	r3, #16
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e02c      	b.n	800329a <UART_SetConfig+0x282>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <UART_SetConfig+0x2e4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d125      	bne.n	8003296 <UART_SetConfig+0x27e>
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <UART_SetConfig+0x2ec>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003258:	d017      	beq.n	800328a <UART_SetConfig+0x272>
 800325a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325e:	d817      	bhi.n	8003290 <UART_SetConfig+0x278>
 8003260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003264:	d00b      	beq.n	800327e <UART_SetConfig+0x266>
 8003266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326a:	d811      	bhi.n	8003290 <UART_SetConfig+0x278>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <UART_SetConfig+0x260>
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d006      	beq.n	8003284 <UART_SetConfig+0x26c>
 8003276:	e00b      	b.n	8003290 <UART_SetConfig+0x278>
 8003278:	2300      	movs	r3, #0
 800327a:	76fb      	strb	r3, [r7, #27]
 800327c:	e00d      	b.n	800329a <UART_SetConfig+0x282>
 800327e:	2302      	movs	r3, #2
 8003280:	76fb      	strb	r3, [r7, #27]
 8003282:	e00a      	b.n	800329a <UART_SetConfig+0x282>
 8003284:	2304      	movs	r3, #4
 8003286:	76fb      	strb	r3, [r7, #27]
 8003288:	e007      	b.n	800329a <UART_SetConfig+0x282>
 800328a:	2308      	movs	r3, #8
 800328c:	76fb      	strb	r3, [r7, #27]
 800328e:	e004      	b.n	800329a <UART_SetConfig+0x282>
 8003290:	2310      	movs	r3, #16
 8003292:	76fb      	strb	r3, [r7, #27]
 8003294:	e001      	b.n	800329a <UART_SetConfig+0x282>
 8003296:	2310      	movs	r3, #16
 8003298:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a17      	ldr	r2, [pc, #92]	; (80032fc <UART_SetConfig+0x2e4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	f040 8087 	bne.w	80033b4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032a6:	7efb      	ldrb	r3, [r7, #27]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d837      	bhi.n	800331c <UART_SetConfig+0x304>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <UART_SetConfig+0x29c>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	0800331d 	.word	0x0800331d
 80032bc:	080032e1 	.word	0x080032e1
 80032c0:	0800331d 	.word	0x0800331d
 80032c4:	080032e7 	.word	0x080032e7
 80032c8:	0800331d 	.word	0x0800331d
 80032cc:	0800331d 	.word	0x0800331d
 80032d0:	0800331d 	.word	0x0800331d
 80032d4:	080032ef 	.word	0x080032ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d8:	f7fe fd70 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80032dc:	6178      	str	r0, [r7, #20]
        break;
 80032de:	e022      	b.n	8003326 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e0:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <UART_SetConfig+0x300>)
 80032e2:	617b      	str	r3, [r7, #20]
        break;
 80032e4:	e01f      	b.n	8003326 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e6:	f7fe fcd1 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 80032ea:	6178      	str	r0, [r7, #20]
        break;
 80032ec:	e01b      	b.n	8003326 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f2:	617b      	str	r3, [r7, #20]
        break;
 80032f4:	e017      	b.n	8003326 <UART_SetConfig+0x30e>
 80032f6:	bf00      	nop
 80032f8:	efff69f3 	.word	0xefff69f3
 80032fc:	40008000 	.word	0x40008000
 8003300:	40013800 	.word	0x40013800
 8003304:	40021000 	.word	0x40021000
 8003308:	40004400 	.word	0x40004400
 800330c:	40004800 	.word	0x40004800
 8003310:	40004c00 	.word	0x40004c00
 8003314:	40005000 	.word	0x40005000
 8003318:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	76bb      	strb	r3, [r7, #26]
        break;
 8003324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80f1 	beq.w	8003510 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	429a      	cmp	r2, r3
 800333c:	d305      	bcc.n	800334a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	429a      	cmp	r2, r3
 8003348:	d902      	bls.n	8003350 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	76bb      	strb	r3, [r7, #26]
 800334e:	e0df      	b.n	8003510 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	4618      	mov	r0, r3
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	020b      	lsls	r3, r1, #8
 8003362:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003366:	0202      	lsls	r2, r0, #8
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	6849      	ldr	r1, [r1, #4]
 800336c:	0849      	lsrs	r1, r1, #1
 800336e:	4608      	mov	r0, r1
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	1814      	adds	r4, r2, r0
 8003376:	eb43 0501 	adc.w	r5, r3, r1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	461a      	mov	r2, r3
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	4620      	mov	r0, r4
 8003386:	4629      	mov	r1, r5
 8003388:	f7fc ff72 	bl	8000270 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339a:	d308      	bcc.n	80033ae <UART_SetConfig+0x396>
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a2:	d204      	bcs.n	80033ae <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	60da      	str	r2, [r3, #12]
 80033ac:	e0b0      	b.n	8003510 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	76bb      	strb	r3, [r7, #26]
 80033b2:	e0ad      	b.n	8003510 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033bc:	d15c      	bne.n	8003478 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80033be:	7efb      	ldrb	r3, [r7, #27]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d828      	bhi.n	8003416 <UART_SetConfig+0x3fe>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0x3b4>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	080033f9 	.word	0x080033f9
 80033d4:	08003401 	.word	0x08003401
 80033d8:	08003417 	.word	0x08003417
 80033dc:	08003407 	.word	0x08003407
 80033e0:	08003417 	.word	0x08003417
 80033e4:	08003417 	.word	0x08003417
 80033e8:	08003417 	.word	0x08003417
 80033ec:	0800340f 	.word	0x0800340f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f0:	f7fe fce4 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80033f4:	6178      	str	r0, [r7, #20]
        break;
 80033f6:	e013      	b.n	8003420 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f8:	f7fe fcf6 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 80033fc:	6178      	str	r0, [r7, #20]
        break;
 80033fe:	e00f      	b.n	8003420 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003400:	4b49      	ldr	r3, [pc, #292]	; (8003528 <UART_SetConfig+0x510>)
 8003402:	617b      	str	r3, [r7, #20]
        break;
 8003404:	e00c      	b.n	8003420 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003406:	f7fe fc41 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 800340a:	6178      	str	r0, [r7, #20]
        break;
 800340c:	e008      	b.n	8003420 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003412:	617b      	str	r3, [r7, #20]
        break;
 8003414:	e004      	b.n	8003420 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	76bb      	strb	r3, [r7, #26]
        break;
 800341e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d074      	beq.n	8003510 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	005a      	lsls	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	b29b      	uxth	r3, r3
 800343c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b0f      	cmp	r3, #15
 8003442:	d916      	bls.n	8003472 <UART_SetConfig+0x45a>
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344a:	d212      	bcs.n	8003472 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f023 030f 	bic.w	r3, r3, #15
 8003454:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	b29b      	uxth	r3, r3
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	b29a      	uxth	r2, r3
 8003462:	89fb      	ldrh	r3, [r7, #14]
 8003464:	4313      	orrs	r3, r2
 8003466:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	89fa      	ldrh	r2, [r7, #14]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	e04e      	b.n	8003510 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	76bb      	strb	r3, [r7, #26]
 8003476:	e04b      	b.n	8003510 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003478:	7efb      	ldrb	r3, [r7, #27]
 800347a:	2b08      	cmp	r3, #8
 800347c:	d827      	bhi.n	80034ce <UART_SetConfig+0x4b6>
 800347e:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <UART_SetConfig+0x46c>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034b9 	.word	0x080034b9
 8003490:	080034cf 	.word	0x080034cf
 8003494:	080034bf 	.word	0x080034bf
 8003498:	080034cf 	.word	0x080034cf
 800349c:	080034cf 	.word	0x080034cf
 80034a0:	080034cf 	.word	0x080034cf
 80034a4:	080034c7 	.word	0x080034c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a8:	f7fe fc88 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80034ac:	6178      	str	r0, [r7, #20]
        break;
 80034ae:	e013      	b.n	80034d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b0:	f7fe fc9a 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 80034b4:	6178      	str	r0, [r7, #20]
        break;
 80034b6:	e00f      	b.n	80034d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <UART_SetConfig+0x510>)
 80034ba:	617b      	str	r3, [r7, #20]
        break;
 80034bc:	e00c      	b.n	80034d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034be:	f7fe fbe5 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 80034c2:	6178      	str	r0, [r7, #20]
        break;
 80034c4:	e008      	b.n	80034d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ca:	617b      	str	r3, [r7, #20]
        break;
 80034cc:	e004      	b.n	80034d8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	76bb      	strb	r3, [r7, #26]
        break;
 80034d6:	bf00      	nop
    }

    if (pclk != 0U)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d018      	beq.n	8003510 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	085a      	lsrs	r2, r3, #1
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	441a      	add	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b0f      	cmp	r3, #15
 80034f8:	d908      	bls.n	800350c <UART_SetConfig+0x4f4>
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d204      	bcs.n	800350c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	e001      	b.n	8003510 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800351c:	7ebb      	ldrb	r3, [r7, #26]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bdb0      	pop	{r4, r5, r7, pc}
 8003526:	bf00      	nop
 8003528:	00f42400 	.word	0x00f42400

0800352c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01a      	beq.n	8003642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362a:	d10a      	bne.n	8003642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af02      	add	r7, sp, #8
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003680:	f7fd fb40 	bl	8000d04 <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d10e      	bne.n	80036b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f82d 	bl	8003702 <UART_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e023      	b.n	80036fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d10e      	bne.n	80036de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f817 	bl	8003702 <UART_WaitOnFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e00d      	b.n	80036fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003712:	e05e      	b.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800371a:	d05a      	beq.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371c:	f7fd faf2 	bl	8000d04 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	429a      	cmp	r2, r3
 800372a:	d302      	bcc.n	8003732 <UART_WaitOnFlagUntilTimeout+0x30>
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d11b      	bne.n	800376a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003740:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e043      	b.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d02c      	beq.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003786:	d124      	bne.n	80037d2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003790:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037a0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e00f      	b.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d091      	beq.n	8003714 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <__NVIC_SetPriority>:
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	; (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <SysTick_Handler+0x1c>)
 8003856:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003858:	f001 fee8 	bl	800562c <xTaskGetSchedulerState>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003862:	f002 fcd1 	bl	8006208 <xPortSysTickHandler>
  }
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	e000e010 	.word	0xe000e010

08003870 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003874:	2100      	movs	r1, #0
 8003876:	f06f 0004 	mvn.w	r0, #4
 800387a:	f7ff ffbf 	bl	80037fc <__NVIC_SetPriority>
#endif
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800388a:	f3ef 8305 	mrs	r3, IPSR
 800388e:	603b      	str	r3, [r7, #0]
  return(result);
 8003890:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003896:	f06f 0305 	mvn.w	r3, #5
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	e00c      	b.n	80038b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <osKernelInitialize+0x44>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <osKernelInitialize+0x44>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	e002      	b.n	80038b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038b8:	687b      	ldr	r3, [r7, #4]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000094 	.word	0x20000094

080038cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038d2:	f3ef 8305 	mrs	r3, IPSR
 80038d6:	603b      	str	r3, [r7, #0]
  return(result);
 80038d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80038de:	f06f 0305 	mvn.w	r3, #5
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	e010      	b.n	8003908 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <osKernelStart+0x48>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d109      	bne.n	8003902 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038ee:	f7ff ffbf 	bl	8003870 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <osKernelStart+0x48>)
 80038f4:	2202      	movs	r2, #2
 80038f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038f8:	f001 fa50 	bl	8004d9c <vTaskStartScheduler>
      stat = osOK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	e002      	b.n	8003908 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003908:	687b      	ldr	r3, [r7, #4]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000094 	.word	0x20000094

08003918 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b08e      	sub	sp, #56	; 0x38
 800391c:	af04      	add	r7, sp, #16
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003928:	f3ef 8305 	mrs	r3, IPSR
 800392c:	617b      	str	r3, [r7, #20]
  return(result);
 800392e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003930:	2b00      	cmp	r3, #0
 8003932:	d17e      	bne.n	8003a32 <osThreadNew+0x11a>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d07b      	beq.n	8003a32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800393e:	2318      	movs	r3, #24
 8003940:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800394a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d045      	beq.n	80039de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <osThreadNew+0x48>
        name = attr->name;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <osThreadNew+0x6e>
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b38      	cmp	r3, #56	; 0x38
 8003978:	d805      	bhi.n	8003986 <osThreadNew+0x6e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <osThreadNew+0x72>
        return (NULL);
 8003986:	2300      	movs	r3, #0
 8003988:	e054      	b.n	8003a34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00e      	beq.n	80039c0 <osThreadNew+0xa8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b5b      	cmp	r3, #91	; 0x5b
 80039a8:	d90a      	bls.n	80039c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d006      	beq.n	80039c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <osThreadNew+0xa8>
        mem = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e010      	b.n	80039e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10c      	bne.n	80039e2 <osThreadNew+0xca>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d108      	bne.n	80039e2 <osThreadNew+0xca>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <osThreadNew+0xca>
          mem = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	e001      	b.n	80039e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d110      	bne.n	8003a0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039f0:	9202      	str	r2, [sp, #8]
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	6a3a      	ldr	r2, [r7, #32]
 80039fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fff6 	bl	80049f0 <xTaskCreateStatic>
 8003a04:	4603      	mov	r3, r0
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	e013      	b.n	8003a32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d110      	bne.n	8003a32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f001 f841 	bl	8004aaa <xTaskCreate>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <osThreadNew+0x11a>
            hTask = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a32:	693b      	ldr	r3, [r7, #16]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3728      	adds	r7, #40	; 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a44:	f3ef 8305 	mrs	r3, IPSR
 8003a48:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <osDelay+0x1c>
    stat = osErrorISR;
 8003a50:	f06f 0305 	mvn.w	r3, #5
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e007      	b.n	8003a68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f001 f966 	bl	8004d34 <vTaskDelay>
    }
  }

  return (stat);
 8003a68:	68fb      	ldr	r3, [r7, #12]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b08a      	sub	sp, #40	; 0x28
 8003a76:	af02      	add	r7, sp, #8
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a82:	f3ef 8305 	mrs	r3, IPSR
 8003a86:	613b      	str	r3, [r7, #16]
  return(result);
 8003a88:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d15f      	bne.n	8003b4e <osMessageQueueNew+0xdc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d05c      	beq.n	8003b4e <osMessageQueueNew+0xdc>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d059      	beq.n	8003b4e <osMessageQueueNew+0xdc>
    mem = -1;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d029      	beq.n	8003afa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d012      	beq.n	8003ad4 <osMessageQueueNew+0x62>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b4f      	cmp	r3, #79	; 0x4f
 8003ab4:	d90e      	bls.n	8003ad4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <osMessageQueueNew+0x62>
        mem = 1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	e014      	b.n	8003afe <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d110      	bne.n	8003afe <osMessageQueueNew+0x8c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10c      	bne.n	8003afe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d108      	bne.n	8003afe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <osMessageQueueNew+0x8c>
          mem = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	e001      	b.n	8003afe <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10b      	bne.n	8003b1c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	9100      	str	r1, [sp, #0]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fa2e 	bl	8003f74 <xQueueGenericCreateStatic>
 8003b18:	61f8      	str	r0, [r7, #28]
 8003b1a:	e008      	b.n	8003b2e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003b22:	2200      	movs	r2, #0
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fa9c 	bl	8004064 <xQueueGenericCreate>
 8003b2c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00c      	beq.n	8003b4e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	e001      	b.n	8003b46 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b46:	6979      	ldr	r1, [r7, #20]
 8003b48:	69f8      	ldr	r0, [r7, #28]
 8003b4a:	f000 fef3 	bl	8004934 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003b4e:	69fb      	ldr	r3, [r7, #28]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b70:	f3ef 8305 	mrs	r3, IPSR
 8003b74:	617b      	str	r3, [r7, #20]
  return(result);
 8003b76:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d028      	beq.n	8003bce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <osMessageQueuePut+0x36>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <osMessageQueuePut+0x36>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003b8e:	f06f 0303 	mvn.w	r3, #3
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	e038      	b.n	8003c08 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003b9a:	f107 0210 	add.w	r2, r7, #16
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	69b8      	ldr	r0, [r7, #24]
 8003ba4:	f000 fbba 	bl	800431c <xQueueGenericSendFromISR>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d003      	beq.n	8003bb6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003bae:	f06f 0302 	mvn.w	r3, #2
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e028      	b.n	8003c08 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d025      	beq.n	8003c08 <osMessageQueuePut+0xb0>
 8003bbc:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <osMessageQueuePut+0xbc>)
 8003bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	e01c      	b.n	8003c08 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <osMessageQueuePut+0x82>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003bda:	f06f 0303 	mvn.w	r3, #3
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e012      	b.n	8003c08 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003be2:	2300      	movs	r3, #0
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	69b8      	ldr	r0, [r7, #24]
 8003bea:	f000 fa99 	bl	8004120 <xQueueGenericSend>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d009      	beq.n	8003c08 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003bfa:	f06f 0301 	mvn.w	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	e002      	b.n	8003c08 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003c02:	f06f 0302 	mvn.w	r3, #2
 8003c06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003c08:	69fb      	ldr	r3, [r7, #28]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	e000ed04 	.word	0xe000ed04

08003c18 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c2e:	f3ef 8305 	mrs	r3, IPSR
 8003c32:	617b      	str	r3, [r7, #20]
  return(result);
 8003c34:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d028      	beq.n	8003c8c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <osMessageQueueGet+0x34>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <osMessageQueueGet+0x34>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003c4c:	f06f 0303 	mvn.w	r3, #3
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	e037      	b.n	8003cc4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003c58:	f107 0310 	add.w	r3, r7, #16
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	69b8      	ldr	r0, [r7, #24]
 8003c62:	f000 fcd7 	bl	8004614 <xQueueReceiveFromISR>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d003      	beq.n	8003c74 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003c6c:	f06f 0302 	mvn.w	r3, #2
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e027      	b.n	8003cc4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d024      	beq.n	8003cc4 <osMessageQueueGet+0xac>
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <osMessageQueueGet+0xb8>)
 8003c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	e01b      	b.n	8003cc4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <osMessageQueueGet+0x80>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003c98:	f06f 0303 	mvn.w	r3, #3
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	e011      	b.n	8003cc4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	69b8      	ldr	r0, [r7, #24]
 8003ca6:	f000 fbd5 	bl	8004454 <xQueueReceive>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d009      	beq.n	8003cc4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003cb6:	f06f 0301 	mvn.w	r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	e002      	b.n	8003cc4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003cbe:	f06f 0302 	mvn.w	r3, #2
 8003cc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ce4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4a06      	ldr	r2, [pc, #24]	; (8003d04 <vApplicationGetIdleTaskMemory+0x30>)
 8003cea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000098 	.word	0x20000098
 8003d04:	200000f4 	.word	0x200000f4

08003d08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <vApplicationGetTimerTaskMemory+0x30>)
 8003d1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d26:	601a      	str	r2, [r3, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	200002f4 	.word	0x200002f4
 8003d38:	20000350 	.word	0x20000350

08003d3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 0208 	add.w	r2, r3, #8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f103 0208 	add.w	r2, r3, #8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f103 0208 	add.w	r2, r3, #8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003df4:	d103      	bne.n	8003dfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	e00c      	b.n	8003e18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3308      	adds	r3, #8
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e002      	b.n	8003e0c <vListInsert+0x2e>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d2f6      	bcs.n	8003e06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	601a      	str	r2, [r3, #0]
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6892      	ldr	r2, [r2, #8]
 8003e66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6852      	ldr	r2, [r2, #4]
 8003e70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d103      	bne.n	8003e84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	1e5a      	subs	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ece:	f002 f909 	bl	80060e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	441a      	add	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	3b01      	subs	r3, #1
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	441a      	add	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	22ff      	movs	r2, #255	; 0xff
 8003f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d114      	bne.n	8003f4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01a      	beq.n	8003f62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3310      	adds	r3, #16
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 f9bd 	bl	80052b0 <xTaskRemoveFromEventList>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d012      	beq.n	8003f62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <xQueueGenericReset+0xcc>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	e009      	b.n	8003f62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3310      	adds	r3, #16
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fef2 	bl	8003d3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff feed 	bl	8003d3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f62:	f002 f8ef 	bl	8006144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f66:	2301      	movs	r3, #1
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08e      	sub	sp, #56	; 0x38
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <xQueueGenericCreateStatic+0x52>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <xQueueGenericCreateStatic+0x56>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <xQueueGenericCreateStatic+0x58>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	623b      	str	r3, [r7, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <xQueueGenericCreateStatic+0x7e>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <xQueueGenericCreateStatic+0x82>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <xQueueGenericCreateStatic+0x84>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	61fb      	str	r3, [r7, #28]
}
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004012:	2350      	movs	r3, #80	; 0x50
 8004014:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b50      	cmp	r3, #80	; 0x50
 800401a:	d00a      	beq.n	8004032 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	61bb      	str	r3, [r7, #24]
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004032:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004046:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f83f 	bl	80040d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800405c:	4618      	mov	r0, r3
 800405e:	3730      	adds	r7, #48	; 0x30
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	613b      	str	r3, [r7, #16]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3350      	adds	r3, #80	; 0x50
 800409c:	4618      	mov	r0, r3
 800409e:	f002 f943 	bl	8006328 <pvPortMalloc>
 80040a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d011      	beq.n	80040ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	3350      	adds	r3, #80	; 0x50
 80040b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040bc:	79fa      	ldrb	r2, [r7, #7]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4613      	mov	r3, r2
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f805 	bl	80040d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040ce:	69bb      	ldr	r3, [r7, #24]
	}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e002      	b.n	80040fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004106:	2101      	movs	r1, #1
 8004108:	69b8      	ldr	r0, [r7, #24]
 800410a:	f7ff fecb 	bl	8003ea4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08e      	sub	sp, #56	; 0x38
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800412e:	2300      	movs	r3, #0
 8004130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <xQueueGenericSend+0x32>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <xQueueGenericSend+0x40>
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <xQueueGenericSend+0x44>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <xQueueGenericSend+0x46>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <xQueueGenericSend+0x60>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d103      	bne.n	800418e <xQueueGenericSend+0x6e>
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <xQueueGenericSend+0x72>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <xQueueGenericSend+0x74>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <xQueueGenericSend+0x8e>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	623b      	str	r3, [r7, #32]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ae:	f001 fa3d 	bl	800562c <xTaskGetSchedulerState>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <xQueueGenericSend+0x9e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <xQueueGenericSend+0xa2>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <xQueueGenericSend+0xa4>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <xQueueGenericSend+0xbe>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	61fb      	str	r3, [r7, #28]
}
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041de:	f001 ff81 	bl	80060e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d302      	bcc.n	80041f4 <xQueueGenericSend+0xd4>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d129      	bne.n	8004248 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041fa:	f000 fa8b 	bl	8004714 <prvCopyDataToQueue>
 80041fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	3324      	adds	r3, #36	; 0x24
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f84f 	bl	80052b0 <xTaskRemoveFromEventList>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d013      	beq.n	8004240 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004218:	4b3f      	ldr	r3, [pc, #252]	; (8004318 <xQueueGenericSend+0x1f8>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	e00a      	b.n	8004240 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004230:	4b39      	ldr	r3, [pc, #228]	; (8004318 <xQueueGenericSend+0x1f8>)
 8004232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004240:	f001 ff80 	bl	8006144 <vPortExitCritical>
				return pdPASS;
 8004244:	2301      	movs	r3, #1
 8004246:	e063      	b.n	8004310 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800424e:	f001 ff79 	bl	8006144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004252:	2300      	movs	r3, #0
 8004254:	e05c      	b.n	8004310 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800425c:	f107 0314 	add.w	r3, r7, #20
 8004260:	4618      	mov	r0, r3
 8004262:	f001 f889 	bl	8005378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004266:	2301      	movs	r3, #1
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800426a:	f001 ff6b 	bl	8006144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800426e:	f000 fdfb 	bl	8004e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004272:	f001 ff37 	bl	80060e4 <vPortEnterCritical>
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800427c:	b25b      	sxtb	r3, r3
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004282:	d103      	bne.n	800428c <xQueueGenericSend+0x16c>
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004292:	b25b      	sxtb	r3, r3
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004298:	d103      	bne.n	80042a2 <xQueueGenericSend+0x182>
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a2:	f001 ff4f 	bl	8006144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042a6:	1d3a      	adds	r2, r7, #4
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 f878 	bl	80053a4 <xTaskCheckForTimeOut>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d124      	bne.n	8004304 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042bc:	f000 fb22 	bl	8004904 <prvIsQueueFull>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d018      	beq.n	80042f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	3310      	adds	r3, #16
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 ff9e 	bl	8005210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d6:	f000 faad 	bl	8004834 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042da:	f000 fdd3 	bl	8004e84 <xTaskResumeAll>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f47f af7c 	bne.w	80041de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <xQueueGenericSend+0x1f8>)
 80042e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	e772      	b.n	80041de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fa:	f000 fa9b 	bl	8004834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042fe:	f000 fdc1 	bl	8004e84 <xTaskResumeAll>
 8004302:	e76c      	b.n	80041de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004306:	f000 fa95 	bl	8004834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800430a:	f000 fdbb 	bl	8004e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800430e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004310:	4618      	mov	r0, r3
 8004312:	3738      	adds	r7, #56	; 0x38
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b090      	sub	sp, #64	; 0x40
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d103      	bne.n	8004358 <xQueueGenericSendFromISR+0x3c>
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <xQueueGenericSendFromISR+0x40>
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <xQueueGenericSendFromISR+0x42>
 800435c:	2300      	movs	r3, #0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d103      	bne.n	8004386 <xQueueGenericSendFromISR+0x6a>
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <xQueueGenericSendFromISR+0x6e>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <xQueueGenericSendFromISR+0x70>
 800438a:	2300      	movs	r3, #0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	623b      	str	r3, [r7, #32]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043a6:	f001 ff7f 	bl	80062a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043aa:	f3ef 8211 	mrs	r2, BASEPRI
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	61fa      	str	r2, [r7, #28]
 80043c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <xQueueGenericSendFromISR+0xbc>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d12f      	bne.n	8004438 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043ee:	f000 f991 	bl	8004714 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fa:	d112      	bne.n	8004422 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d016      	beq.n	8004432 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	3324      	adds	r3, #36	; 0x24
 8004408:	4618      	mov	r0, r3
 800440a:	f000 ff51 	bl	80052b0 <xTaskRemoveFromEventList>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00e      	beq.n	8004432 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e007      	b.n	8004432 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004422:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004426:	3301      	adds	r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	b25a      	sxtb	r2, r3
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004432:	2301      	movs	r3, #1
 8004434:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004436:	e001      	b.n	800443c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004438:	2300      	movs	r3, #0
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004446:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800444a:	4618      	mov	r0, r3
 800444c:	3740      	adds	r7, #64	; 0x40
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	; 0x30
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004460:	2300      	movs	r3, #0
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <xQueueReceive+0x30>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	623b      	str	r3, [r7, #32]
}
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <xQueueReceive+0x3e>
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <xQueueReceive+0x42>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <xQueueReceive+0x44>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xQueueReceive+0x5e>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	61fb      	str	r3, [r7, #28]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044b2:	f001 f8bb 	bl	800562c <xTaskGetSchedulerState>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <xQueueReceive+0x6e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <xQueueReceive+0x72>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <xQueueReceive+0x74>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xQueueReceive+0x8e>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	61bb      	str	r3, [r7, #24]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044e2:	f001 fdff 	bl	80060e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01f      	beq.n	8004532 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f6:	f000 f977 	bl	80047e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	1e5a      	subs	r2, r3, #1
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00f      	beq.n	800452a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	3310      	adds	r3, #16
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fece 	bl	80052b0 <xTaskRemoveFromEventList>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800451a:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <xQueueReceive+0x1bc>)
 800451c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800452a:	f001 fe0b 	bl	8006144 <vPortExitCritical>
				return pdPASS;
 800452e:	2301      	movs	r3, #1
 8004530:	e069      	b.n	8004606 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004538:	f001 fe04 	bl	8006144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800453c:	2300      	movs	r3, #0
 800453e:	e062      	b.n	8004606 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004546:	f107 0310 	add.w	r3, r7, #16
 800454a:	4618      	mov	r0, r3
 800454c:	f000 ff14 	bl	8005378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004550:	2301      	movs	r3, #1
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004554:	f001 fdf6 	bl	8006144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004558:	f000 fc86 	bl	8004e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800455c:	f001 fdc2 	bl	80060e4 <vPortEnterCritical>
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004566:	b25b      	sxtb	r3, r3
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456c:	d103      	bne.n	8004576 <xQueueReceive+0x122>
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800457c:	b25b      	sxtb	r3, r3
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004582:	d103      	bne.n	800458c <xQueueReceive+0x138>
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458c:	f001 fdda 	bl	8006144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004590:	1d3a      	adds	r2, r7, #4
 8004592:	f107 0310 	add.w	r3, r7, #16
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 ff03 	bl	80053a4 <xTaskCheckForTimeOut>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d123      	bne.n	80045ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045a6:	f000 f997 	bl	80048d8 <prvIsQueueEmpty>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d017      	beq.n	80045e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	3324      	adds	r3, #36	; 0x24
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fe29 	bl	8005210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c0:	f000 f938 	bl	8004834 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045c4:	f000 fc5e 	bl	8004e84 <xTaskResumeAll>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d189      	bne.n	80044e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <xQueueReceive+0x1bc>)
 80045d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	e780      	b.n	80044e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e2:	f000 f927 	bl	8004834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045e6:	f000 fc4d 	bl	8004e84 <xTaskResumeAll>
 80045ea:	e77a      	b.n	80044e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ee:	f000 f921 	bl	8004834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045f2:	f000 fc47 	bl	8004e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f8:	f000 f96e 	bl	80048d8 <prvIsQueueEmpty>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f43f af6f 	beq.w	80044e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004606:	4618      	mov	r0, r3
 8004608:	3730      	adds	r7, #48	; 0x30
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	e000ed04 	.word	0xe000ed04

08004614 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08e      	sub	sp, #56	; 0x38
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	623b      	str	r3, [r7, #32]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <xQueueReceiveFromISR+0x3a>
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <xQueueReceiveFromISR+0x3e>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <xQueueReceiveFromISR+0x40>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	61fb      	str	r3, [r7, #28]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800466e:	f001 fe1b 	bl	80062a8 <vPortValidateInterruptPriority>
	__asm volatile
 8004672:	f3ef 8211 	mrs	r2, BASEPRI
 8004676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	61ba      	str	r2, [r7, #24]
 8004688:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800468a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d02f      	beq.n	80046fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a8:	f000 f89e 	bl	80047e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80046b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046bc:	d112      	bne.n	80046e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	3310      	adds	r3, #16
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fdf0 	bl	80052b0 <xTaskRemoveFromEventList>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00e      	beq.n	80046f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e007      	b.n	80046f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80046e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046e8:	3301      	adds	r3, #1
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	b25a      	sxtb	r2, r3
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80046f4:	2301      	movs	r3, #1
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
 80046f8:	e001      	b.n	80046fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f383 8811 	msr	BASEPRI, r3
}
 8004708:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800470a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800470c:	4618      	mov	r0, r3
 800470e:	3738      	adds	r7, #56	; 0x38
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10d      	bne.n	800474e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d14d      	bne.n	80047d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 ff92 	bl	8005668 <xTaskPriorityDisinherit>
 8004744:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	e043      	b.n	80047d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d119      	bne.n	8004788 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6858      	ldr	r0, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	461a      	mov	r2, r3
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	f001 fff6 	bl	8006750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	441a      	add	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	d32b      	bcc.n	80047d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	e026      	b.n	80047d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68d8      	ldr	r0, [r3, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	461a      	mov	r2, r3
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	f001 ffdc 	bl	8006750 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	425b      	negs	r3, r3
 80047a2:	441a      	add	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d207      	bcs.n	80047c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	425b      	negs	r3, r3
 80047be:	441a      	add	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d105      	bne.n	80047d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047de:	697b      	ldr	r3, [r7, #20]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d018      	beq.n	800482c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	441a      	add	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	429a      	cmp	r2, r3
 8004812:	d303      	bcc.n	800481c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68d9      	ldr	r1, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	461a      	mov	r2, r3
 8004826:	6838      	ldr	r0, [r7, #0]
 8004828:	f001 ff92 	bl	8006750 <memcpy>
	}
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800483c:	f001 fc52 	bl	80060e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004846:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004848:	e011      	b.n	800486e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	d012      	beq.n	8004878 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3324      	adds	r3, #36	; 0x24
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fd2a 	bl	80052b0 <xTaskRemoveFromEventList>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004862:	f000 fe01 	bl	8005468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	3b01      	subs	r3, #1
 800486a:	b2db      	uxtb	r3, r3
 800486c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800486e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	dce9      	bgt.n	800484a <prvUnlockQueue+0x16>
 8004876:	e000      	b.n	800487a <prvUnlockQueue+0x46>
					break;
 8004878:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	22ff      	movs	r2, #255	; 0xff
 800487e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004882:	f001 fc5f 	bl	8006144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004886:	f001 fc2d 	bl	80060e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004890:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004892:	e011      	b.n	80048b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d012      	beq.n	80048c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3310      	adds	r3, #16
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fd05 	bl	80052b0 <xTaskRemoveFromEventList>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048ac:	f000 fddc 	bl	8005468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048b0:	7bbb      	ldrb	r3, [r7, #14]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	dce9      	bgt.n	8004894 <prvUnlockQueue+0x60>
 80048c0:	e000      	b.n	80048c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	22ff      	movs	r2, #255	; 0xff
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048cc:	f001 fc3a 	bl	8006144 <vPortExitCritical>
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048e0:	f001 fc00 	bl	80060e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d102      	bne.n	80048f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e001      	b.n	80048f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048f6:	f001 fc25 	bl	8006144 <vPortExitCritical>

	return xReturn;
 80048fa:	68fb      	ldr	r3, [r7, #12]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800490c:	f001 fbea 	bl	80060e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004918:	429a      	cmp	r2, r3
 800491a:	d102      	bne.n	8004922 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800491c:	2301      	movs	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e001      	b.n	8004926 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004926:	f001 fc0d 	bl	8006144 <vPortExitCritical>

	return xReturn;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e014      	b.n	800496e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004944:	4a0f      	ldr	r2, [pc, #60]	; (8004984 <vQueueAddToRegistry+0x50>)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004950:	490c      	ldr	r1, [pc, #48]	; (8004984 <vQueueAddToRegistry+0x50>)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <vQueueAddToRegistry+0x50>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4413      	add	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004966:	e006      	b.n	8004976 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b07      	cmp	r3, #7
 8004972:	d9e7      	bls.n	8004944 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20001a4c 	.word	0x20001a4c

08004988 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004998:	f001 fba4 	bl	80060e4 <vPortEnterCritical>
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049a2:	b25b      	sxtb	r3, r3
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a8:	d103      	bne.n	80049b2 <vQueueWaitForMessageRestricted+0x2a>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049b8:	b25b      	sxtb	r3, r3
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049be:	d103      	bne.n	80049c8 <vQueueWaitForMessageRestricted+0x40>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c8:	f001 fbbc 	bl	8006144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	3324      	adds	r3, #36	; 0x24
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fc3b 	bl	8005258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049e2:	6978      	ldr	r0, [r7, #20]
 80049e4:	f7ff ff26 	bl	8004834 <prvUnlockQueue>
	}
 80049e8:	bf00      	nop
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08e      	sub	sp, #56	; 0x38
 80049f4:	af04      	add	r7, sp, #16
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	623b      	str	r3, [r7, #32]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	61fb      	str	r3, [r7, #28]
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a36:	235c      	movs	r3, #92	; 0x5c
 8004a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8004a3e:	d00a      	beq.n	8004a56 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61bb      	str	r3, [r7, #24]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01e      	beq.n	8004a9c <xTaskCreateStatic+0xac>
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a76:	2300      	movs	r3, #0
 8004a78:	9303      	str	r3, [sp, #12]
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	9302      	str	r3, [sp, #8]
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f850 	bl	8004b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a96:	f000 f8dd 	bl	8004c54 <prvAddNewTaskToReadyList>
 8004a9a:	e001      	b.n	8004aa0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004aa0:	697b      	ldr	r3, [r7, #20]
	}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3728      	adds	r7, #40	; 0x28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b08c      	sub	sp, #48	; 0x30
 8004aae:	af04      	add	r7, sp, #16
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fc32 	bl	8006328 <pvPortMalloc>
 8004ac4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00e      	beq.n	8004aea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004acc:	205c      	movs	r0, #92	; 0x5c
 8004ace:	f001 fc2b 	bl	8006328 <pvPortMalloc>
 8004ad2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
 8004ae0:	e005      	b.n	8004aee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	f001 fcec 	bl	80064c0 <vPortFree>
 8004ae8:	e001      	b.n	8004aee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d017      	beq.n	8004b24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	2300      	movs	r3, #0
 8004b00:	9303      	str	r3, [sp, #12]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	9302      	str	r3, [sp, #8]
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f80e 	bl	8004b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b18:	69f8      	ldr	r0, [r7, #28]
 8004b1a:	f000 f89b 	bl	8004c54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	e002      	b.n	8004b2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	21a5      	movs	r1, #165	; 0xa5
 8004b4e:	f001 fe0d 	bl	800676c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f023 0307 	bic.w	r3, r3, #7
 8004b6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	617b      	str	r3, [r7, #20]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01f      	beq.n	8004bd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	e012      	b.n	8004bbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	7819      	ldrb	r1, [r3, #0]
 8004ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3334      	adds	r3, #52	; 0x34
 8004ba8:	460a      	mov	r2, r1
 8004baa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d006      	beq.n	8004bc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	2b0f      	cmp	r3, #15
 8004bc2:	d9e9      	bls.n	8004b98 <prvInitialiseNewTask+0x64>
 8004bc4:	e000      	b.n	8004bc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8004bc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd0:	e003      	b.n	8004bda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	2b37      	cmp	r3, #55	; 0x37
 8004bde:	d901      	bls.n	8004be4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004be0:	2337      	movs	r3, #55	; 0x37
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004be8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff f8be 	bl	8003d7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	3318      	adds	r3, #24
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff f8b9 	bl	8003d7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	2200      	movs	r2, #0
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	68f9      	ldr	r1, [r7, #12]
 8004c32:	69b8      	ldr	r0, [r7, #24]
 8004c34:	f001 f928 	bl	8005e88 <pxPortInitialiseStack>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c4a:	bf00      	nop
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c5c:	f001 fa42 	bl	80060e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c60:	4b2d      	ldr	r3, [pc, #180]	; (8004d18 <prvAddNewTaskToReadyList+0xc4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a2c      	ldr	r2, [pc, #176]	; (8004d18 <prvAddNewTaskToReadyList+0xc4>)
 8004c68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c6a:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c72:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c78:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <prvAddNewTaskToReadyList+0xc4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d110      	bne.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c80:	f000 fc16 	bl	80054b0 <prvInitialiseTaskLists>
 8004c84:	e00d      	b.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c86:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <prvAddNewTaskToReadyList+0xcc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d802      	bhi.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ca2:	4b20      	ldr	r3, [pc, #128]	; (8004d24 <prvAddNewTaskToReadyList+0xd0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4a1e      	ldr	r2, [pc, #120]	; (8004d24 <prvAddNewTaskToReadyList+0xd0>)
 8004caa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <prvAddNewTaskToReadyList+0xd0>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <prvAddNewTaskToReadyList+0xd4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d903      	bls.n	8004cc8 <prvAddNewTaskToReadyList+0x74>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <prvAddNewTaskToReadyList+0xd4>)
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <prvAddNewTaskToReadyList+0xd8>)
 8004cd6:	441a      	add	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f7ff f859 	bl	8003d96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ce4:	f001 fa2e 	bl	8006144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <prvAddNewTaskToReadyList+0xcc>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00e      	beq.n	8004d0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d207      	bcs.n	8004d0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <prvAddNewTaskToReadyList+0xdc>)
 8004d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000c24 	.word	0x20000c24
 8004d1c:	20000750 	.word	0x20000750
 8004d20:	20000c30 	.word	0x20000c30
 8004d24:	20000c40 	.word	0x20000c40
 8004d28:	20000c2c 	.word	0x20000c2c
 8004d2c:	20000754 	.word	0x20000754
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d017      	beq.n	8004d76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <vTaskDelay+0x60>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <vTaskDelay+0x30>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	60bb      	str	r3, [r7, #8]
}
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d64:	f000 f880 	bl	8004e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d68:	2100      	movs	r1, #0
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fcea 	bl	8005744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d70:	f000 f888 	bl	8004e84 <xTaskResumeAll>
 8004d74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d107      	bne.n	8004d8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <vTaskDelay+0x64>)
 8004d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000c4c 	.word	0x20000c4c
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004daa:	463a      	mov	r2, r7
 8004dac:	1d39      	adds	r1, r7, #4
 8004dae:	f107 0308 	add.w	r3, r7, #8
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe ff8e 	bl	8003cd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	9202      	str	r2, [sp, #8]
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	460a      	mov	r2, r1
 8004dca:	4921      	ldr	r1, [pc, #132]	; (8004e50 <vTaskStartScheduler+0xb4>)
 8004dcc:	4821      	ldr	r0, [pc, #132]	; (8004e54 <vTaskStartScheduler+0xb8>)
 8004dce:	f7ff fe0f 	bl	80049f0 <xTaskCreateStatic>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <vTaskStartScheduler+0xbc>)
 8004dd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004dd8:	4b1f      	ldr	r3, [pc, #124]	; (8004e58 <vTaskStartScheduler+0xbc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e001      	b.n	8004dea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d102      	bne.n	8004df6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004df0:	f000 fcfc 	bl	80057ec <xTimerCreateTimerTask>
 8004df4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d116      	bne.n	8004e2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	613b      	str	r3, [r7, #16]
}
 8004e0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e10:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <vTaskStartScheduler+0xc0>)
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <vTaskStartScheduler+0xc4>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <vTaskStartScheduler+0xc8>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e24:	f001 f8bc 	bl	8005fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e28:	e00e      	b.n	8004e48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e30:	d10a      	bne.n	8004e48 <vTaskStartScheduler+0xac>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	60fb      	str	r3, [r7, #12]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <vTaskStartScheduler+0xaa>
}
 8004e48:	bf00      	nop
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	08007818 	.word	0x08007818
 8004e54:	08005481 	.word	0x08005481
 8004e58:	20000c48 	.word	0x20000c48
 8004e5c:	20000c44 	.word	0x20000c44
 8004e60:	20000c30 	.word	0x20000c30
 8004e64:	20000c28 	.word	0x20000c28

08004e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <vTaskSuspendAll+0x18>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	4a03      	ldr	r2, [pc, #12]	; (8004e80 <vTaskSuspendAll+0x18>)
 8004e74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e76:	bf00      	nop
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	20000c4c 	.word	0x20000c4c

08004e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e92:	4b42      	ldr	r3, [pc, #264]	; (8004f9c <xTaskResumeAll+0x118>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	603b      	str	r3, [r7, #0]
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004eb0:	f001 f918 	bl	80060e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004eb4:	4b39      	ldr	r3, [pc, #228]	; (8004f9c <xTaskResumeAll+0x118>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	4a38      	ldr	r2, [pc, #224]	; (8004f9c <xTaskResumeAll+0x118>)
 8004ebc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebe:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <xTaskResumeAll+0x118>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d162      	bne.n	8004f8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <xTaskResumeAll+0x11c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d05e      	beq.n	8004f8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ece:	e02f      	b.n	8004f30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed0:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <xTaskResumeAll+0x120>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3318      	adds	r3, #24
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fe ffb7 	bl	8003e50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe ffb2 	bl	8003e50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <xTaskResumeAll+0x124>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d903      	bls.n	8004f00 <xTaskResumeAll+0x7c>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	4a2a      	ldr	r2, [pc, #168]	; (8004fa8 <xTaskResumeAll+0x124>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4a27      	ldr	r2, [pc, #156]	; (8004fac <xTaskResumeAll+0x128>)
 8004f0e:	441a      	add	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7fe ff3d 	bl	8003d96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	4b23      	ldr	r3, [pc, #140]	; (8004fb0 <xTaskResumeAll+0x12c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <xTaskResumeAll+0x130>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f30:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <xTaskResumeAll+0x120>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1cb      	bne.n	8004ed0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f3e:	f000 fb55 	bl	80055ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f42:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <xTaskResumeAll+0x134>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f4e:	f000 f847 	bl	8004fe0 <xTaskIncrementTick>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f58:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <xTaskResumeAll+0x130>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f1      	bne.n	8004f4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <xTaskResumeAll+0x134>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f70:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <xTaskResumeAll+0x130>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d009      	beq.n	8004f8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <xTaskResumeAll+0x138>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f8c:	f001 f8da 	bl	8006144 <vPortExitCritical>

	return xAlreadyYielded;
 8004f90:	68bb      	ldr	r3, [r7, #8]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000c4c 	.word	0x20000c4c
 8004fa0:	20000c24 	.word	0x20000c24
 8004fa4:	20000be4 	.word	0x20000be4
 8004fa8:	20000c2c 	.word	0x20000c2c
 8004fac:	20000754 	.word	0x20000754
 8004fb0:	20000750 	.word	0x20000750
 8004fb4:	20000c38 	.word	0x20000c38
 8004fb8:	20000c34 	.word	0x20000c34
 8004fbc:	e000ed04 	.word	0xe000ed04

08004fc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <xTaskGetTickCount+0x1c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fcc:	687b      	ldr	r3, [r7, #4]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000c28 	.word	0x20000c28

08004fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fea:	4b4f      	ldr	r3, [pc, #316]	; (8005128 <xTaskIncrementTick+0x148>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 808f 	bne.w	8005112 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ff4:	4b4d      	ldr	r3, [pc, #308]	; (800512c <xTaskIncrementTick+0x14c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ffc:	4a4b      	ldr	r2, [pc, #300]	; (800512c <xTaskIncrementTick+0x14c>)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d120      	bne.n	800504a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005008:	4b49      	ldr	r3, [pc, #292]	; (8005130 <xTaskIncrementTick+0x150>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <xTaskIncrementTick+0x48>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	603b      	str	r3, [r7, #0]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <xTaskIncrementTick+0x46>
 8005028:	4b41      	ldr	r3, [pc, #260]	; (8005130 <xTaskIncrementTick+0x150>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	4b41      	ldr	r3, [pc, #260]	; (8005134 <xTaskIncrementTick+0x154>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3f      	ldr	r2, [pc, #252]	; (8005130 <xTaskIncrementTick+0x150>)
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4a3f      	ldr	r2, [pc, #252]	; (8005134 <xTaskIncrementTick+0x154>)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4b3e      	ldr	r3, [pc, #248]	; (8005138 <xTaskIncrementTick+0x158>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3301      	adds	r3, #1
 8005042:	4a3d      	ldr	r2, [pc, #244]	; (8005138 <xTaskIncrementTick+0x158>)
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	f000 fad1 	bl	80055ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800504a:	4b3c      	ldr	r3, [pc, #240]	; (800513c <xTaskIncrementTick+0x15c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	429a      	cmp	r2, r3
 8005052:	d349      	bcc.n	80050e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005054:	4b36      	ldr	r3, [pc, #216]	; (8005130 <xTaskIncrementTick+0x150>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505e:	4b37      	ldr	r3, [pc, #220]	; (800513c <xTaskIncrementTick+0x15c>)
 8005060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005064:	601a      	str	r2, [r3, #0]
					break;
 8005066:	e03f      	b.n	80050e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005068:	4b31      	ldr	r3, [pc, #196]	; (8005130 <xTaskIncrementTick+0x150>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d203      	bcs.n	8005088 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005080:	4a2e      	ldr	r2, [pc, #184]	; (800513c <xTaskIncrementTick+0x15c>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005086:	e02f      	b.n	80050e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	3304      	adds	r3, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe fedf 	bl	8003e50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	3318      	adds	r3, #24
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fed6 	bl	8003e50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a8:	4b25      	ldr	r3, [pc, #148]	; (8005140 <xTaskIncrementTick+0x160>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d903      	bls.n	80050b8 <xTaskIncrementTick+0xd8>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4a22      	ldr	r2, [pc, #136]	; (8005140 <xTaskIncrementTick+0x160>)
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <xTaskIncrementTick+0x164>)
 80050c6:	441a      	add	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fe fe61 	bl	8003d96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <xTaskIncrementTick+0x168>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	429a      	cmp	r2, r3
 80050e0:	d3b8      	bcc.n	8005054 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050e6:	e7b5      	b.n	8005054 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050e8:	4b17      	ldr	r3, [pc, #92]	; (8005148 <xTaskIncrementTick+0x168>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ee:	4915      	ldr	r1, [pc, #84]	; (8005144 <xTaskIncrementTick+0x164>)
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d901      	bls.n	8005104 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005104:	4b11      	ldr	r3, [pc, #68]	; (800514c <xTaskIncrementTick+0x16c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800510c:	2301      	movs	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	e004      	b.n	800511c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <xTaskIncrementTick+0x170>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	4a0d      	ldr	r2, [pc, #52]	; (8005150 <xTaskIncrementTick+0x170>)
 800511a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800511c:	697b      	ldr	r3, [r7, #20]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000c4c 	.word	0x20000c4c
 800512c:	20000c28 	.word	0x20000c28
 8005130:	20000bdc 	.word	0x20000bdc
 8005134:	20000be0 	.word	0x20000be0
 8005138:	20000c3c 	.word	0x20000c3c
 800513c:	20000c44 	.word	0x20000c44
 8005140:	20000c2c 	.word	0x20000c2c
 8005144:	20000754 	.word	0x20000754
 8005148:	20000750 	.word	0x20000750
 800514c:	20000c38 	.word	0x20000c38
 8005150:	20000c34 	.word	0x20000c34

08005154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800515a:	4b28      	ldr	r3, [pc, #160]	; (80051fc <vTaskSwitchContext+0xa8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005162:	4b27      	ldr	r3, [pc, #156]	; (8005200 <vTaskSwitchContext+0xac>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005168:	e041      	b.n	80051ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800516a:	4b25      	ldr	r3, [pc, #148]	; (8005200 <vTaskSwitchContext+0xac>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005170:	4b24      	ldr	r3, [pc, #144]	; (8005204 <vTaskSwitchContext+0xb0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e010      	b.n	800519a <vTaskSwitchContext+0x46>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <vTaskSwitchContext+0x40>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	607b      	str	r3, [r7, #4]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <vTaskSwitchContext+0x3e>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3b01      	subs	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	491b      	ldr	r1, [pc, #108]	; (8005208 <vTaskSwitchContext+0xb4>)
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0e4      	beq.n	8005178 <vTaskSwitchContext+0x24>
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4a13      	ldr	r2, [pc, #76]	; (8005208 <vTaskSwitchContext+0xb4>)
 80051ba:	4413      	add	r3, r2
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	3308      	adds	r3, #8
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d104      	bne.n	80051de <vTaskSwitchContext+0x8a>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a09      	ldr	r2, [pc, #36]	; (800520c <vTaskSwitchContext+0xb8>)
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4a06      	ldr	r2, [pc, #24]	; (8005204 <vTaskSwitchContext+0xb0>)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6013      	str	r3, [r2, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000c4c 	.word	0x20000c4c
 8005200:	20000c38 	.word	0x20000c38
 8005204:	20000c2c 	.word	0x20000c2c
 8005208:	20000754 	.word	0x20000754
 800520c:	20000750 	.word	0x20000750

08005210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	60fb      	str	r3, [r7, #12]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <vTaskPlaceOnEventList+0x44>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3318      	adds	r3, #24
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fe fdcd 	bl	8003dde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005244:	2101      	movs	r1, #1
 8005246:	6838      	ldr	r0, [r7, #0]
 8005248:	f000 fa7c 	bl	8005744 <prvAddCurrentTaskToDelayedList>
}
 800524c:	bf00      	nop
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000750 	.word	0x20000750

08005258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	617b      	str	r3, [r7, #20]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <vTaskPlaceOnEventListRestricted+0x54>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3318      	adds	r3, #24
 8005286:	4619      	mov	r1, r3
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7fe fd84 	bl	8003d96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	68b8      	ldr	r0, [r7, #8]
 800529e:	f000 fa51 	bl	8005744 <prvAddCurrentTaskToDelayedList>
	}
 80052a2:	bf00      	nop
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000750 	.word	0x20000750

080052b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	3318      	adds	r3, #24
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe fdb5 	bl	8003e50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052e6:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <xTaskRemoveFromEventList+0xb0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d11d      	bne.n	800532a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fdac 	bl	8003e50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	4b19      	ldr	r3, [pc, #100]	; (8005364 <xTaskRemoveFromEventList+0xb4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d903      	bls.n	800530c <xTaskRemoveFromEventList+0x5c>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	4a16      	ldr	r2, [pc, #88]	; (8005364 <xTaskRemoveFromEventList+0xb4>)
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <xTaskRemoveFromEventList+0xb8>)
 800531a:	441a      	add	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f7fe fd37 	bl	8003d96 <vListInsertEnd>
 8005328:	e005      	b.n	8005336 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3318      	adds	r3, #24
 800532e:	4619      	mov	r1, r3
 8005330:	480e      	ldr	r0, [pc, #56]	; (800536c <xTaskRemoveFromEventList+0xbc>)
 8005332:	f7fe fd30 	bl	8003d96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <xTaskRemoveFromEventList+0xc0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	429a      	cmp	r2, r3
 8005342:	d905      	bls.n	8005350 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <xTaskRemoveFromEventList+0xc4>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e001      	b.n	8005354 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005354:	697b      	ldr	r3, [r7, #20]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000c4c 	.word	0x20000c4c
 8005364:	20000c2c 	.word	0x20000c2c
 8005368:	20000754 	.word	0x20000754
 800536c:	20000be4 	.word	0x20000be4
 8005370:	20000750 	.word	0x20000750
 8005374:	20000c38 	.word	0x20000c38

08005378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <vTaskInternalSetTimeOutState+0x24>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <vTaskInternalSetTimeOutState+0x28>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	605a      	str	r2, [r3, #4]
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	20000c3c 	.word	0x20000c3c
 80053a0:	20000c28 	.word	0x20000c28

080053a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	613b      	str	r3, [r7, #16]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60fb      	str	r3, [r7, #12]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80053e6:	f000 fe7d 	bl	80060e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053ea:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <xTaskCheckForTimeOut+0xbc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005402:	d102      	bne.n	800540a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005404:	2300      	movs	r3, #0
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	e023      	b.n	8005452 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4b15      	ldr	r3, [pc, #84]	; (8005464 <xTaskCheckForTimeOut+0xc0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d007      	beq.n	8005426 <xTaskCheckForTimeOut+0x82>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005420:	2301      	movs	r3, #1
 8005422:	61fb      	str	r3, [r7, #28]
 8005424:	e015      	b.n	8005452 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	429a      	cmp	r2, r3
 800542e:	d20b      	bcs.n	8005448 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff ff9b 	bl	8005378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	e004      	b.n	8005452 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800544e:	2301      	movs	r3, #1
 8005450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005452:	f000 fe77 	bl	8006144 <vPortExitCritical>

	return xReturn;
 8005456:	69fb      	ldr	r3, [r7, #28]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20000c28 	.word	0x20000c28
 8005464:	20000c3c 	.word	0x20000c3c

08005468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <vTaskMissedYield+0x14>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
}
 8005472:	bf00      	nop
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	20000c38 	.word	0x20000c38

08005480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005488:	f000 f852 	bl	8005530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <prvIdleTask+0x28>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d9f9      	bls.n	8005488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <prvIdleTask+0x2c>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054a4:	e7f0      	b.n	8005488 <prvIdleTask+0x8>
 80054a6:	bf00      	nop
 80054a8:	20000754 	.word	0x20000754
 80054ac:	e000ed04 	.word	0xe000ed04

080054b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054b6:	2300      	movs	r3, #0
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	e00c      	b.n	80054d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4a12      	ldr	r2, [pc, #72]	; (8005510 <prvInitialiseTaskLists+0x60>)
 80054c8:	4413      	add	r3, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fe fc36 	bl	8003d3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3301      	adds	r3, #1
 80054d4:	607b      	str	r3, [r7, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b37      	cmp	r3, #55	; 0x37
 80054da:	d9ef      	bls.n	80054bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054dc:	480d      	ldr	r0, [pc, #52]	; (8005514 <prvInitialiseTaskLists+0x64>)
 80054de:	f7fe fc2d 	bl	8003d3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054e2:	480d      	ldr	r0, [pc, #52]	; (8005518 <prvInitialiseTaskLists+0x68>)
 80054e4:	f7fe fc2a 	bl	8003d3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054e8:	480c      	ldr	r0, [pc, #48]	; (800551c <prvInitialiseTaskLists+0x6c>)
 80054ea:	f7fe fc27 	bl	8003d3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054ee:	480c      	ldr	r0, [pc, #48]	; (8005520 <prvInitialiseTaskLists+0x70>)
 80054f0:	f7fe fc24 	bl	8003d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054f4:	480b      	ldr	r0, [pc, #44]	; (8005524 <prvInitialiseTaskLists+0x74>)
 80054f6:	f7fe fc21 	bl	8003d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <prvInitialiseTaskLists+0x78>)
 80054fc:	4a05      	ldr	r2, [pc, #20]	; (8005514 <prvInitialiseTaskLists+0x64>)
 80054fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <prvInitialiseTaskLists+0x7c>)
 8005502:	4a05      	ldr	r2, [pc, #20]	; (8005518 <prvInitialiseTaskLists+0x68>)
 8005504:	601a      	str	r2, [r3, #0]
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000754 	.word	0x20000754
 8005514:	20000bb4 	.word	0x20000bb4
 8005518:	20000bc8 	.word	0x20000bc8
 800551c:	20000be4 	.word	0x20000be4
 8005520:	20000bf8 	.word	0x20000bf8
 8005524:	20000c10 	.word	0x20000c10
 8005528:	20000bdc 	.word	0x20000bdc
 800552c:	20000be0 	.word	0x20000be0

08005530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005536:	e019      	b.n	800556c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005538:	f000 fdd4 	bl	80060e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <prvCheckTasksWaitingTermination+0x50>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe fc81 	bl	8003e50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800554e:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <prvCheckTasksWaitingTermination+0x54>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3b01      	subs	r3, #1
 8005554:	4a0b      	ldr	r2, [pc, #44]	; (8005584 <prvCheckTasksWaitingTermination+0x54>)
 8005556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005558:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <prvCheckTasksWaitingTermination+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <prvCheckTasksWaitingTermination+0x58>)
 8005560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005562:	f000 fdef 	bl	8006144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f810 	bl	800558c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <prvCheckTasksWaitingTermination+0x58>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e1      	bne.n	8005538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000bf8 	.word	0x20000bf8
 8005584:	20000c24 	.word	0x20000c24
 8005588:	20000c0c 	.word	0x20000c0c

0800558c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 ff8c 	bl	80064c0 <vPortFree>
				vPortFree( pxTCB );
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 ff89 	bl	80064c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055ae:	e018      	b.n	80055e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d103      	bne.n	80055c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 ff80 	bl	80064c0 <vPortFree>
	}
 80055c0:	e00f      	b.n	80055e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d00a      	beq.n	80055e2 <prvDeleteTCB+0x56>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60fb      	str	r3, [r7, #12]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <prvDeleteTCB+0x54>
	}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055f2:	4b0c      	ldr	r3, [pc, #48]	; (8005624 <prvResetNextTaskUnblockTime+0x38>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <prvResetNextTaskUnblockTime+0x3c>)
 80055fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005602:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005604:	e008      	b.n	8005618 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005606:	4b07      	ldr	r3, [pc, #28]	; (8005624 <prvResetNextTaskUnblockTime+0x38>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4a04      	ldr	r2, [pc, #16]	; (8005628 <prvResetNextTaskUnblockTime+0x3c>)
 8005616:	6013      	str	r3, [r2, #0]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	20000bdc 	.word	0x20000bdc
 8005628:	20000c44 	.word	0x20000c44

0800562c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <xTaskGetSchedulerState+0x34>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800563a:	2301      	movs	r3, #1
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	e008      	b.n	8005652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <xTaskGetSchedulerState+0x38>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005648:	2302      	movs	r3, #2
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	e001      	b.n	8005652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005652:	687b      	ldr	r3, [r7, #4]
	}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20000c30 	.word	0x20000c30
 8005664:	20000c4c 	.word	0x20000c4c

08005668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d056      	beq.n	800572c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800567e:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <xTaskPriorityDisinherit+0xd0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	429a      	cmp	r2, r3
 8005686:	d00a      	beq.n	800569e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60fb      	str	r3, [r7, #12]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	60bb      	str	r3, [r7, #8]
}
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c0:	1e5a      	subs	r2, r3, #1
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d02c      	beq.n	800572c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d128      	bne.n	800572c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	3304      	adds	r3, #4
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fbb6 	bl	8003e50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	4b0f      	ldr	r3, [pc, #60]	; (800573c <xTaskPriorityDisinherit+0xd4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d903      	bls.n	800570c <xTaskPriorityDisinherit+0xa4>
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	4a0c      	ldr	r2, [pc, #48]	; (800573c <xTaskPriorityDisinherit+0xd4>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4a09      	ldr	r2, [pc, #36]	; (8005740 <xTaskPriorityDisinherit+0xd8>)
 800571a:	441a      	add	r2, r3
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7fe fb37 	bl	8003d96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800572c:	697b      	ldr	r3, [r7, #20]
	}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000750 	.word	0x20000750
 800573c:	20000c2c 	.word	0x20000c2c
 8005740:	20000754 	.word	0x20000754

08005744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800574e:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005754:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3304      	adds	r3, #4
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe fb78 	bl	8003e50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005766:	d10a      	bne.n	800577e <prvAddCurrentTaskToDelayedList+0x3a>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576e:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3304      	adds	r3, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4819      	ldr	r0, [pc, #100]	; (80057dc <prvAddCurrentTaskToDelayedList+0x98>)
 8005778:	f7fe fb0d 	bl	8003d96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800577c:	e026      	b.n	80057cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	429a      	cmp	r2, r3
 8005794:	d209      	bcs.n	80057aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005796:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7fe fb1b 	bl	8003dde <vListInsert>
}
 80057a8:	e010      	b.n	80057cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057aa:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f7fe fb11 	bl	8003dde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d202      	bcs.n	80057cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057c6:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	6013      	str	r3, [r2, #0]
}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	20000c28 	.word	0x20000c28
 80057d8:	20000750 	.word	0x20000750
 80057dc:	20000c10 	.word	0x20000c10
 80057e0:	20000be0 	.word	0x20000be0
 80057e4:	20000bdc 	.word	0x20000bdc
 80057e8:	20000c44 	.word	0x20000c44

080057ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057f6:	f000 fb07 	bl	8005e08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057fa:	4b1c      	ldr	r3, [pc, #112]	; (800586c <xTimerCreateTimerTask+0x80>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d021      	beq.n	8005846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005806:	2300      	movs	r3, #0
 8005808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800580a:	1d3a      	adds	r2, r7, #4
 800580c:	f107 0108 	add.w	r1, r7, #8
 8005810:	f107 030c 	add.w	r3, r7, #12
 8005814:	4618      	mov	r0, r3
 8005816:	f7fe fa77 	bl	8003d08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	9202      	str	r2, [sp, #8]
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	2302      	movs	r3, #2
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	2300      	movs	r3, #0
 800582a:	460a      	mov	r2, r1
 800582c:	4910      	ldr	r1, [pc, #64]	; (8005870 <xTimerCreateTimerTask+0x84>)
 800582e:	4811      	ldr	r0, [pc, #68]	; (8005874 <xTimerCreateTimerTask+0x88>)
 8005830:	f7ff f8de 	bl	80049f0 <xTaskCreateStatic>
 8005834:	4603      	mov	r3, r0
 8005836:	4a10      	ldr	r2, [pc, #64]	; (8005878 <xTimerCreateTimerTask+0x8c>)
 8005838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <xTimerCreateTimerTask+0x8c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005842:	2301      	movs	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	613b      	str	r3, [r7, #16]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005862:	697b      	ldr	r3, [r7, #20]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000c80 	.word	0x20000c80
 8005870:	08007820 	.word	0x08007820
 8005874:	080059b1 	.word	0x080059b1
 8005878:	20000c84 	.word	0x20000c84

0800587c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058aa:	4b1a      	ldr	r3, [pc, #104]	; (8005914 <xTimerGenericCommand+0x98>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d02a      	beq.n	8005908 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	dc18      	bgt.n	80058f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058c4:	f7ff feb2 	bl	800562c <xTaskGetSchedulerState>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d109      	bne.n	80058e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058ce:	4b11      	ldr	r3, [pc, #68]	; (8005914 <xTimerGenericCommand+0x98>)
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	f107 0110 	add.w	r1, r7, #16
 80058d6:	2300      	movs	r3, #0
 80058d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058da:	f7fe fc21 	bl	8004120 <xQueueGenericSend>
 80058de:	6278      	str	r0, [r7, #36]	; 0x24
 80058e0:	e012      	b.n	8005908 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058e2:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <xTimerGenericCommand+0x98>)
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	f107 0110 	add.w	r1, r7, #16
 80058ea:	2300      	movs	r3, #0
 80058ec:	2200      	movs	r2, #0
 80058ee:	f7fe fc17 	bl	8004120 <xQueueGenericSend>
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24
 80058f4:	e008      	b.n	8005908 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <xTimerGenericCommand+0x98>)
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f107 0110 	add.w	r1, r7, #16
 80058fe:	2300      	movs	r3, #0
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	f7fe fd0b 	bl	800431c <xQueueGenericSendFromISR>
 8005906:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800590a:	4618      	mov	r0, r3
 800590c:	3728      	adds	r7, #40	; 0x28
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000c80 	.word	0x20000c80

08005918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af02      	add	r7, sp, #8
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005922:	4b22      	ldr	r3, [pc, #136]	; (80059ac <prvProcessExpiredTimer+0x94>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	3304      	adds	r3, #4
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe fa8d 	bl	8003e50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d022      	beq.n	800598a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	18d1      	adds	r1, r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	6978      	ldr	r0, [r7, #20]
 8005952:	f000 f8d1 	bl	8005af8 <prvInsertTimerInActiveList>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01f      	beq.n	800599c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800595c:	2300      	movs	r3, #0
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2300      	movs	r3, #0
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	2100      	movs	r1, #0
 8005966:	6978      	ldr	r0, [r7, #20]
 8005968:	f7ff ff88 	bl	800587c <xTimerGenericCommand>
 800596c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d113      	bne.n	800599c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	6978      	ldr	r0, [r7, #20]
 80059a2:	4798      	blx	r3
}
 80059a4:	bf00      	nop
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000c78 	.word	0x20000c78

080059b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059b8:	f107 0308 	add.w	r3, r7, #8
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 f857 	bl	8005a70 <prvGetNextExpireTime>
 80059c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f803 	bl	80059d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059ce:	f000 f8d5 	bl	8005b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059d2:	e7f1      	b.n	80059b8 <prvTimerTask+0x8>

080059d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059de:	f7ff fa43 	bl	8004e68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f866 	bl	8005ab8 <prvSampleTimeNow>
 80059ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d130      	bne.n	8005a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <prvProcessTimerOrBlockTask+0x3c>
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d806      	bhi.n	8005a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a02:	f7ff fa3f 	bl	8004e84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a06:	68f9      	ldr	r1, [r7, #12]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff ff85 	bl	8005918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a0e:	e024      	b.n	8005a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a16:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <prvProcessTimerOrBlockTask+0x90>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <prvProcessTimerOrBlockTask+0x50>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <prvProcessTimerOrBlockTask+0x52>
 8005a24:	2300      	movs	r3, #0
 8005a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <prvProcessTimerOrBlockTask+0x94>)
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	4619      	mov	r1, r3
 8005a36:	f7fe ffa7 	bl	8004988 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a3a:	f7ff fa23 	bl	8004e84 <xTaskResumeAll>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <prvProcessTimerOrBlockTask+0x98>)
 8005a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	f3bf 8f6f 	isb	sy
}
 8005a54:	e001      	b.n	8005a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a56:	f7ff fa15 	bl	8004e84 <xTaskResumeAll>
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000c7c 	.word	0x20000c7c
 8005a68:	20000c80 	.word	0x20000c80
 8005a6c:	e000ed04 	.word	0xe000ed04

08005a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a78:	4b0e      	ldr	r3, [pc, #56]	; (8005ab4 <prvGetNextExpireTime+0x44>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <prvGetNextExpireTime+0x16>
 8005a82:	2201      	movs	r2, #1
 8005a84:	e000      	b.n	8005a88 <prvGetNextExpireTime+0x18>
 8005a86:	2200      	movs	r2, #0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a94:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <prvGetNextExpireTime+0x44>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e001      	b.n	8005aa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000c78 	.word	0x20000c78

08005ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ac0:	f7ff fa7e 	bl	8004fc0 <xTaskGetTickCount>
 8005ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <prvSampleTimeNow+0x3c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d205      	bcs.n	8005adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ad0:	f000 f936 	bl	8005d40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ae2:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <prvSampleTimeNow+0x3c>)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000c88 	.word	0x20000c88

08005af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d812      	bhi.n	8005b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	1ad2      	subs	r2, r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e01b      	b.n	8005b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b32:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <prvInsertTimerInActiveList+0x7c>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7fe f94e 	bl	8003dde <vListInsert>
 8005b42:	e012      	b.n	8005b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d206      	bcs.n	8005b5a <prvInsertTimerInActiveList+0x62>
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d302      	bcc.n	8005b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	e007      	b.n	8005b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <prvInsertTimerInActiveList+0x80>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f7fe f93a 	bl	8003dde <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b6a:	697b      	ldr	r3, [r7, #20]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000c7c 	.word	0x20000c7c
 8005b78:	20000c78 	.word	0x20000c78

08005b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08e      	sub	sp, #56	; 0x38
 8005b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b82:	e0ca      	b.n	8005d1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da18      	bge.n	8005bbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	61fb      	str	r3, [r7, #28]
}
 8005ba8:	bf00      	nop
 8005baa:	e7fe      	b.n	8005baa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb2:	6850      	ldr	r0, [r2, #4]
 8005bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb6:	6892      	ldr	r2, [r2, #8]
 8005bb8:	4611      	mov	r1, r2
 8005bba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f2c0 80aa 	blt.w	8005d18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe f93b 	bl	8003e50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bda:	463b      	mov	r3, r7
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff ff6b 	bl	8005ab8 <prvSampleTimeNow>
 8005be2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b09      	cmp	r3, #9
 8005be8:	f200 8097 	bhi.w	8005d1a <prvProcessReceivedCommands+0x19e>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <prvProcessReceivedCommands+0x78>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c1d 	.word	0x08005c1d
 8005c00:	08005c91 	.word	0x08005c91
 8005c04:	08005ca5 	.word	0x08005ca5
 8005c08:	08005cef 	.word	0x08005cef
 8005c0c:	08005c1d 	.word	0x08005c1d
 8005c10:	08005c1d 	.word	0x08005c1d
 8005c14:	08005c91 	.word	0x08005c91
 8005c18:	08005ca5 	.word	0x08005ca5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	18d1      	adds	r1, r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3c:	f7ff ff5c 	bl	8005af8 <prvInsertTimerInActiveList>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d069      	beq.n	8005d1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d05e      	beq.n	8005d1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	441a      	add	r2, r3
 8005c64:	2300      	movs	r3, #0
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c6e:	f7ff fe05 	bl	800587c <xTimerGenericCommand>
 8005c72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d14f      	bne.n	8005d1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	61bb      	str	r3, [r7, #24]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ca2:	e03a      	b.n	8005d1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	617b      	str	r3, [r7, #20]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	18d1      	adds	r1, r2, r3
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce8:	f7ff ff06 	bl	8005af8 <prvInsertTimerInActiveList>
					break;
 8005cec:	e015      	b.n	8005d1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d103      	bne.n	8005d04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfe:	f000 fbdf 	bl	80064c0 <vPortFree>
 8005d02:	e00a      	b.n	8005d1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d16:	e000      	b.n	8005d1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d1a:	4b08      	ldr	r3, [pc, #32]	; (8005d3c <prvProcessReceivedCommands+0x1c0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	1d39      	adds	r1, r7, #4
 8005d20:	2200      	movs	r2, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fb96 	bl	8004454 <xQueueReceive>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f47f af2a 	bne.w	8005b84 <prvProcessReceivedCommands+0x8>
	}
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	3730      	adds	r7, #48	; 0x30
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000c80 	.word	0x20000c80

08005d40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d46:	e048      	b.n	8005dda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d48:	4b2d      	ldr	r3, [pc, #180]	; (8005e00 <prvSwitchTimerLists+0xc0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d52:	4b2b      	ldr	r3, [pc, #172]	; (8005e00 <prvSwitchTimerLists+0xc0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe f875 	bl	8003e50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d02e      	beq.n	8005dda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4413      	add	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d90e      	bls.n	8005dac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d9a:	4b19      	ldr	r3, [pc, #100]	; (8005e00 <prvSwitchTimerLists+0xc0>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f7fe f81a 	bl	8003dde <vListInsert>
 8005daa:	e016      	b.n	8005dda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dac:	2300      	movs	r3, #0
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	2300      	movs	r3, #0
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	2100      	movs	r1, #0
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff fd60 	bl	800587c <xTimerGenericCommand>
 8005dbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	603b      	str	r3, [r7, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dda:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <prvSwitchTimerLists+0xc0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1b1      	bne.n	8005d48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <prvSwitchTimerLists+0xc0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <prvSwitchTimerLists+0xc4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <prvSwitchTimerLists+0xc0>)
 8005df0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005df2:	4a04      	ldr	r2, [pc, #16]	; (8005e04 <prvSwitchTimerLists+0xc4>)
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	6013      	str	r3, [r2, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000c78 	.word	0x20000c78
 8005e04:	20000c7c 	.word	0x20000c7c

08005e08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e0e:	f000 f969 	bl	80060e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e12:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <prvCheckForValidListAndQueue+0x60>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d120      	bne.n	8005e5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e1a:	4814      	ldr	r0, [pc, #80]	; (8005e6c <prvCheckForValidListAndQueue+0x64>)
 8005e1c:	f7fd ff8e 	bl	8003d3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e20:	4813      	ldr	r0, [pc, #76]	; (8005e70 <prvCheckForValidListAndQueue+0x68>)
 8005e22:	f7fd ff8b 	bl	8003d3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e26:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <prvCheckForValidListAndQueue+0x6c>)
 8005e28:	4a10      	ldr	r2, [pc, #64]	; (8005e6c <prvCheckForValidListAndQueue+0x64>)
 8005e2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e2c:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <prvCheckForValidListAndQueue+0x70>)
 8005e2e:	4a10      	ldr	r2, [pc, #64]	; (8005e70 <prvCheckForValidListAndQueue+0x68>)
 8005e30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e32:	2300      	movs	r3, #0
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <prvCheckForValidListAndQueue+0x74>)
 8005e38:	4a11      	ldr	r2, [pc, #68]	; (8005e80 <prvCheckForValidListAndQueue+0x78>)
 8005e3a:	2110      	movs	r1, #16
 8005e3c:	200a      	movs	r0, #10
 8005e3e:	f7fe f899 	bl	8003f74 <xQueueGenericCreateStatic>
 8005e42:	4603      	mov	r3, r0
 8005e44:	4a08      	ldr	r2, [pc, #32]	; (8005e68 <prvCheckForValidListAndQueue+0x60>)
 8005e46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <prvCheckForValidListAndQueue+0x60>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <prvCheckForValidListAndQueue+0x60>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	490b      	ldr	r1, [pc, #44]	; (8005e84 <prvCheckForValidListAndQueue+0x7c>)
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe fd6c 	bl	8004934 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e5c:	f000 f972 	bl	8006144 <vPortExitCritical>
}
 8005e60:	bf00      	nop
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000c80 	.word	0x20000c80
 8005e6c:	20000c50 	.word	0x20000c50
 8005e70:	20000c64 	.word	0x20000c64
 8005e74:	20000c78 	.word	0x20000c78
 8005e78:	20000c7c 	.word	0x20000c7c
 8005e7c:	20000d2c 	.word	0x20000d2c
 8005e80:	20000c8c 	.word	0x20000c8c
 8005e84:	08007828 	.word	0x08007828

08005e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3b04      	subs	r3, #4
 8005e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3b04      	subs	r3, #4
 8005ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f023 0201 	bic.w	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3b04      	subs	r3, #4
 8005eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005eb8:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <pxPortInitialiseStack+0x64>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3b14      	subs	r3, #20
 8005ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3b04      	subs	r3, #4
 8005ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f06f 0202 	mvn.w	r2, #2
 8005ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3b20      	subs	r3, #32
 8005edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ede:	68fb      	ldr	r3, [r7, #12]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	08005ef1 	.word	0x08005ef1

08005ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005efa:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <prvTaskExitError+0x54>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f02:	d00a      	beq.n	8005f1a <prvTaskExitError+0x2a>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	60fb      	str	r3, [r7, #12]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <prvTaskExitError+0x28>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	60bb      	str	r3, [r7, #8]
}
 8005f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f2e:	bf00      	nop
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0fc      	beq.n	8005f30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	2000000c 	.word	0x2000000c
	...

08005f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f50:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <pxCurrentTCBConst2>)
 8005f52:	6819      	ldr	r1, [r3, #0]
 8005f54:	6808      	ldr	r0, [r1, #0]
 8005f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5a:	f380 8809 	msr	PSP, r0
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f380 8811 	msr	BASEPRI, r0
 8005f6a:	4770      	bx	lr
 8005f6c:	f3af 8000 	nop.w

08005f70 <pxCurrentTCBConst2>:
 8005f70:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop

08005f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f78:	4808      	ldr	r0, [pc, #32]	; (8005f9c <prvPortStartFirstTask+0x24>)
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	6800      	ldr	r0, [r0, #0]
 8005f7e:	f380 8808 	msr	MSP, r0
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f380 8814 	msr	CONTROL, r0
 8005f8a:	b662      	cpsie	i
 8005f8c:	b661      	cpsie	f
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	df00      	svc	0
 8005f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f9a:	bf00      	nop
 8005f9c:	e000ed08 	.word	0xe000ed08

08005fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fa6:	4b46      	ldr	r3, [pc, #280]	; (80060c0 <xPortStartScheduler+0x120>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a46      	ldr	r2, [pc, #280]	; (80060c4 <xPortStartScheduler+0x124>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10a      	bne.n	8005fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	613b      	str	r3, [r7, #16]
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	; (80060c0 <xPortStartScheduler+0x120>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3f      	ldr	r2, [pc, #252]	; (80060c8 <xPortStartScheduler+0x128>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d10a      	bne.n	8005fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60fb      	str	r3, [r7, #12]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fe6:	4b39      	ldr	r3, [pc, #228]	; (80060cc <xPortStartScheduler+0x12c>)
 8005fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	22ff      	movs	r2, #255	; 0xff
 8005ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4b31      	ldr	r3, [pc, #196]	; (80060d0 <xPortStartScheduler+0x130>)
 800600c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800600e:	4b31      	ldr	r3, [pc, #196]	; (80060d4 <xPortStartScheduler+0x134>)
 8006010:	2207      	movs	r2, #7
 8006012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006014:	e009      	b.n	800602a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006016:	4b2f      	ldr	r3, [pc, #188]	; (80060d4 <xPortStartScheduler+0x134>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3b01      	subs	r3, #1
 800601c:	4a2d      	ldr	r2, [pc, #180]	; (80060d4 <xPortStartScheduler+0x134>)
 800601e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	b2db      	uxtb	r3, r3
 8006028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006032:	2b80      	cmp	r3, #128	; 0x80
 8006034:	d0ef      	beq.n	8006016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006036:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <xPortStartScheduler+0x134>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f1c3 0307 	rsb	r3, r3, #7
 800603e:	2b04      	cmp	r3, #4
 8006040:	d00a      	beq.n	8006058 <xPortStartScheduler+0xb8>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	60bb      	str	r3, [r7, #8]
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006058:	4b1e      	ldr	r3, [pc, #120]	; (80060d4 <xPortStartScheduler+0x134>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <xPortStartScheduler+0x134>)
 8006060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006062:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <xPortStartScheduler+0x134>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800606a:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <xPortStartScheduler+0x134>)
 800606c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006076:	4b18      	ldr	r3, [pc, #96]	; (80060d8 <xPortStartScheduler+0x138>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a17      	ldr	r2, [pc, #92]	; (80060d8 <xPortStartScheduler+0x138>)
 800607c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006082:	4b15      	ldr	r3, [pc, #84]	; (80060d8 <xPortStartScheduler+0x138>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <xPortStartScheduler+0x138>)
 8006088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800608c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800608e:	f000 f8dd 	bl	800624c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006092:	4b12      	ldr	r3, [pc, #72]	; (80060dc <xPortStartScheduler+0x13c>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006098:	f000 f8fc 	bl	8006294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800609c:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <xPortStartScheduler+0x140>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0f      	ldr	r2, [pc, #60]	; (80060e0 <xPortStartScheduler+0x140>)
 80060a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060a8:	f7ff ff66 	bl	8005f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060ac:	f7ff f852 	bl	8005154 <vTaskSwitchContext>
	prvTaskExitError();
 80060b0:	f7ff ff1e 	bl	8005ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	e000ed00 	.word	0xe000ed00
 80060c4:	410fc271 	.word	0x410fc271
 80060c8:	410fc270 	.word	0x410fc270
 80060cc:	e000e400 	.word	0xe000e400
 80060d0:	20000d7c 	.word	0x20000d7c
 80060d4:	20000d80 	.word	0x20000d80
 80060d8:	e000ed20 	.word	0xe000ed20
 80060dc:	2000000c 	.word	0x2000000c
 80060e0:	e000ef34 	.word	0xe000ef34

080060e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	607b      	str	r3, [r7, #4]
}
 80060fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060fe:	4b0f      	ldr	r3, [pc, #60]	; (800613c <vPortEnterCritical+0x58>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	4a0d      	ldr	r2, [pc, #52]	; (800613c <vPortEnterCritical+0x58>)
 8006106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006108:	4b0c      	ldr	r3, [pc, #48]	; (800613c <vPortEnterCritical+0x58>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10f      	bne.n	8006130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <vPortEnterCritical+0x5c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <vPortEnterCritical+0x4c>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	603b      	str	r3, [r7, #0]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <vPortEnterCritical+0x4a>
	}
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	2000000c 	.word	0x2000000c
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <vPortExitCritical+0x50>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <vPortExitCritical+0x24>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	607b      	str	r3, [r7, #4]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <vPortExitCritical+0x50>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3b01      	subs	r3, #1
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <vPortExitCritical+0x50>)
 8006170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006172:	4b08      	ldr	r3, [pc, #32]	; (8006194 <vPortExitCritical+0x50>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d105      	bne.n	8006186 <vPortExitCritical+0x42>
 800617a:	2300      	movs	r3, #0
 800617c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	f383 8811 	msr	BASEPRI, r3
}
 8006184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	2000000c 	.word	0x2000000c
	...

080061a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061a0:	f3ef 8009 	mrs	r0, PSP
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	4b15      	ldr	r3, [pc, #84]	; (8006200 <pxCurrentTCBConst>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	f01e 0f10 	tst.w	lr, #16
 80061b0:	bf08      	it	eq
 80061b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ba:	6010      	str	r0, [r2, #0]
 80061bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061c4:	f380 8811 	msr	BASEPRI, r0
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f7fe ffc0 	bl	8005154 <vTaskSwitchContext>
 80061d4:	f04f 0000 	mov.w	r0, #0
 80061d8:	f380 8811 	msr	BASEPRI, r0
 80061dc:	bc09      	pop	{r0, r3}
 80061de:	6819      	ldr	r1, [r3, #0]
 80061e0:	6808      	ldr	r0, [r1, #0]
 80061e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e6:	f01e 0f10 	tst.w	lr, #16
 80061ea:	bf08      	it	eq
 80061ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061f0:	f380 8809 	msr	PSP, r0
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	f3af 8000 	nop.w

08006200 <pxCurrentTCBConst>:
 8006200:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	607b      	str	r3, [r7, #4]
}
 8006220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006222:	f7fe fedd 	bl	8004fe0 <xTaskIncrementTick>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800622c:	4b06      	ldr	r3, [pc, #24]	; (8006248 <xPortSysTickHandler+0x40>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	2300      	movs	r3, #0
 8006236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	f383 8811 	msr	BASEPRI, r3
}
 800623e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <vPortSetupTimerInterrupt+0x34>)
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006256:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <vPortSetupTimerInterrupt+0x38>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <vPortSetupTimerInterrupt+0x3c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a0a      	ldr	r2, [pc, #40]	; (800628c <vPortSetupTimerInterrupt+0x40>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	099b      	lsrs	r3, r3, #6
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <vPortSetupTimerInterrupt+0x44>)
 800626a:	3b01      	subs	r3, #1
 800626c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800626e:	4b04      	ldr	r3, [pc, #16]	; (8006280 <vPortSetupTimerInterrupt+0x34>)
 8006270:	2207      	movs	r2, #7
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	e000e010 	.word	0xe000e010
 8006284:	e000e018 	.word	0xe000e018
 8006288:	20000000 	.word	0x20000000
 800628c:	10624dd3 	.word	0x10624dd3
 8006290:	e000e014 	.word	0xe000e014

08006294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062a4 <vPortEnableVFP+0x10>
 8006298:	6801      	ldr	r1, [r0, #0]
 800629a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800629e:	6001      	str	r1, [r0, #0]
 80062a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062a2:	bf00      	nop
 80062a4:	e000ed88 	.word	0xe000ed88

080062a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062ae:	f3ef 8305 	mrs	r3, IPSR
 80062b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b0f      	cmp	r3, #15
 80062b8:	d914      	bls.n	80062e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062ba:	4a17      	ldr	r2, [pc, #92]	; (8006318 <vPortValidateInterruptPriority+0x70>)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062c4:	4b15      	ldr	r3, [pc, #84]	; (800631c <vPortValidateInterruptPriority+0x74>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	7afa      	ldrb	r2, [r7, #11]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d20a      	bcs.n	80062e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	607b      	str	r3, [r7, #4]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062e4:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <vPortValidateInterruptPriority+0x78>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062ec:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <vPortValidateInterruptPriority+0x7c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d90a      	bls.n	800630a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	603b      	str	r3, [r7, #0]
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <vPortValidateInterruptPriority+0x60>
	}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	e000e3f0 	.word	0xe000e3f0
 800631c:	20000d7c 	.word	0x20000d7c
 8006320:	e000ed0c 	.word	0xe000ed0c
 8006324:	20000d80 	.word	0x20000d80

08006328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08a      	sub	sp, #40	; 0x28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006334:	f7fe fd98 	bl	8004e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006338:	4b5b      	ldr	r3, [pc, #364]	; (80064a8 <pvPortMalloc+0x180>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006340:	f000 f920 	bl	8006584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006344:	4b59      	ldr	r3, [pc, #356]	; (80064ac <pvPortMalloc+0x184>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	f040 8093 	bne.w	8006478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01d      	beq.n	8006394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006358:	2208      	movs	r2, #8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	2b00      	cmp	r3, #0
 8006368:	d014      	beq.n	8006394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f023 0307 	bic.w	r3, r3, #7
 8006370:	3308      	adds	r3, #8
 8006372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <pvPortMalloc+0x6c>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	617b      	str	r3, [r7, #20]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d06e      	beq.n	8006478 <pvPortMalloc+0x150>
 800639a:	4b45      	ldr	r3, [pc, #276]	; (80064b0 <pvPortMalloc+0x188>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d869      	bhi.n	8006478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063a4:	4b43      	ldr	r3, [pc, #268]	; (80064b4 <pvPortMalloc+0x18c>)
 80063a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063a8:	4b42      	ldr	r3, [pc, #264]	; (80064b4 <pvPortMalloc+0x18c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ae:	e004      	b.n	80063ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d903      	bls.n	80063cc <pvPortMalloc+0xa4>
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f1      	bne.n	80063b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063cc:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <pvPortMalloc+0x180>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d050      	beq.n	8006478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2208      	movs	r2, #8
 80063dc:	4413      	add	r3, r2
 80063de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	2308      	movs	r3, #8
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d91f      	bls.n	8006438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4413      	add	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <pvPortMalloc+0xf8>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	613b      	str	r3, [r7, #16]
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1ad2      	subs	r2, r2, r3
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006432:	69b8      	ldr	r0, [r7, #24]
 8006434:	f000 f908 	bl	8006648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006438:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <pvPortMalloc+0x188>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <pvPortMalloc+0x188>)
 8006444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006446:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <pvPortMalloc+0x188>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <pvPortMalloc+0x190>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d203      	bcs.n	800645a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006452:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <pvPortMalloc+0x188>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <pvPortMalloc+0x190>)
 8006458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <pvPortMalloc+0x184>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	431a      	orrs	r2, r3
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800646e:	4b13      	ldr	r3, [pc, #76]	; (80064bc <pvPortMalloc+0x194>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3301      	adds	r3, #1
 8006474:	4a11      	ldr	r2, [pc, #68]	; (80064bc <pvPortMalloc+0x194>)
 8006476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006478:	f7fe fd04 	bl	8004e84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <pvPortMalloc+0x174>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	60fb      	str	r3, [r7, #12]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <pvPortMalloc+0x172>
	return pvReturn;
 800649c:	69fb      	ldr	r3, [r7, #28]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3728      	adds	r7, #40	; 0x28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20001944 	.word	0x20001944
 80064ac:	20001958 	.word	0x20001958
 80064b0:	20001948 	.word	0x20001948
 80064b4:	2000193c 	.word	0x2000193c
 80064b8:	2000194c 	.word	0x2000194c
 80064bc:	20001950 	.word	0x20001950

080064c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d04d      	beq.n	800656e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064d2:	2308      	movs	r3, #8
 80064d4:	425b      	negs	r3, r3
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4413      	add	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	4b24      	ldr	r3, [pc, #144]	; (8006578 <vPortFree+0xb8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <vPortFree+0x44>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60fb      	str	r3, [r7, #12]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <vPortFree+0x62>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	60bb      	str	r3, [r7, #8]
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <vPortFree+0xb8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01e      	beq.n	800656e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d11a      	bne.n	800656e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <vPortFree+0xb8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	43db      	mvns	r3, r3
 8006542:	401a      	ands	r2, r3
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006548:	f7fe fc8e 	bl	8004e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <vPortFree+0xbc>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4413      	add	r3, r2
 8006556:	4a09      	ldr	r2, [pc, #36]	; (800657c <vPortFree+0xbc>)
 8006558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f000 f874 	bl	8006648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006560:	4b07      	ldr	r3, [pc, #28]	; (8006580 <vPortFree+0xc0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	4a06      	ldr	r2, [pc, #24]	; (8006580 <vPortFree+0xc0>)
 8006568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800656a:	f7fe fc8b 	bl	8004e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800656e:	bf00      	nop
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20001958 	.word	0x20001958
 800657c:	20001948 	.word	0x20001948
 8006580:	20001954 	.word	0x20001954

08006584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800658a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800658e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006590:	4b27      	ldr	r3, [pc, #156]	; (8006630 <prvHeapInit+0xac>)
 8006592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00c      	beq.n	80065b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3307      	adds	r3, #7
 80065a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0307 	bic.w	r3, r3, #7
 80065aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	4a1f      	ldr	r2, [pc, #124]	; (8006630 <prvHeapInit+0xac>)
 80065b4:	4413      	add	r3, r2
 80065b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065bc:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <prvHeapInit+0xb0>)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065c2:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <prvHeapInit+0xb0>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	4413      	add	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065d0:	2208      	movs	r2, #8
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0307 	bic.w	r3, r3, #7
 80065de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4a15      	ldr	r2, [pc, #84]	; (8006638 <prvHeapInit+0xb4>)
 80065e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065e6:	4b14      	ldr	r3, [pc, #80]	; (8006638 <prvHeapInit+0xb4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065ee:	4b12      	ldr	r3, [pc, #72]	; (8006638 <prvHeapInit+0xb4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006604:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <prvHeapInit+0xb4>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <prvHeapInit+0xb8>)
 8006612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <prvHeapInit+0xbc>)
 800661a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <prvHeapInit+0xc0>)
 800661e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	20000d84 	.word	0x20000d84
 8006634:	2000193c 	.word	0x2000193c
 8006638:	20001944 	.word	0x20001944
 800663c:	2000194c 	.word	0x2000194c
 8006640:	20001948 	.word	0x20001948
 8006644:	20001958 	.word	0x20001958

08006648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006650:	4b28      	ldr	r3, [pc, #160]	; (80066f4 <prvInsertBlockIntoFreeList+0xac>)
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e002      	b.n	800665c <prvInsertBlockIntoFreeList+0x14>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	429a      	cmp	r2, r3
 8006664:	d8f7      	bhi.n	8006656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4413      	add	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d108      	bne.n	800668a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	441a      	add	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	441a      	add	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d118      	bne.n	80066d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <prvInsertBlockIntoFreeList+0xb0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d00d      	beq.n	80066c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	441a      	add	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e008      	b.n	80066d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <prvInsertBlockIntoFreeList+0xb0>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	e003      	b.n	80066d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d002      	beq.n	80066e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	2000193c 	.word	0x2000193c
 80066f8:	20001944 	.word	0x20001944

080066fc <__errno>:
 80066fc:	4b01      	ldr	r3, [pc, #4]	; (8006704 <__errno+0x8>)
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20000010 	.word	0x20000010

08006708 <__libc_init_array>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	4d0d      	ldr	r5, [pc, #52]	; (8006740 <__libc_init_array+0x38>)
 800670c:	4c0d      	ldr	r4, [pc, #52]	; (8006744 <__libc_init_array+0x3c>)
 800670e:	1b64      	subs	r4, r4, r5
 8006710:	10a4      	asrs	r4, r4, #2
 8006712:	2600      	movs	r6, #0
 8006714:	42a6      	cmp	r6, r4
 8006716:	d109      	bne.n	800672c <__libc_init_array+0x24>
 8006718:	4d0b      	ldr	r5, [pc, #44]	; (8006748 <__libc_init_array+0x40>)
 800671a:	4c0c      	ldr	r4, [pc, #48]	; (800674c <__libc_init_array+0x44>)
 800671c:	f000 fffa 	bl	8007714 <_init>
 8006720:	1b64      	subs	r4, r4, r5
 8006722:	10a4      	asrs	r4, r4, #2
 8006724:	2600      	movs	r6, #0
 8006726:	42a6      	cmp	r6, r4
 8006728:	d105      	bne.n	8006736 <__libc_init_array+0x2e>
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006730:	4798      	blx	r3
 8006732:	3601      	adds	r6, #1
 8006734:	e7ee      	b.n	8006714 <__libc_init_array+0xc>
 8006736:	f855 3b04 	ldr.w	r3, [r5], #4
 800673a:	4798      	blx	r3
 800673c:	3601      	adds	r6, #1
 800673e:	e7f2      	b.n	8006726 <__libc_init_array+0x1e>
 8006740:	080079b8 	.word	0x080079b8
 8006744:	080079b8 	.word	0x080079b8
 8006748:	080079b8 	.word	0x080079b8
 800674c:	080079bc 	.word	0x080079bc

08006750 <memcpy>:
 8006750:	440a      	add	r2, r1
 8006752:	4291      	cmp	r1, r2
 8006754:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006758:	d100      	bne.n	800675c <memcpy+0xc>
 800675a:	4770      	bx	lr
 800675c:	b510      	push	{r4, lr}
 800675e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006766:	4291      	cmp	r1, r2
 8006768:	d1f9      	bne.n	800675e <memcpy+0xe>
 800676a:	bd10      	pop	{r4, pc}

0800676c <memset>:
 800676c:	4402      	add	r2, r0
 800676e:	4603      	mov	r3, r0
 8006770:	4293      	cmp	r3, r2
 8006772:	d100      	bne.n	8006776 <memset+0xa>
 8006774:	4770      	bx	lr
 8006776:	f803 1b01 	strb.w	r1, [r3], #1
 800677a:	e7f9      	b.n	8006770 <memset+0x4>

0800677c <iprintf>:
 800677c:	b40f      	push	{r0, r1, r2, r3}
 800677e:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <iprintf+0x2c>)
 8006780:	b513      	push	{r0, r1, r4, lr}
 8006782:	681c      	ldr	r4, [r3, #0]
 8006784:	b124      	cbz	r4, 8006790 <iprintf+0x14>
 8006786:	69a3      	ldr	r3, [r4, #24]
 8006788:	b913      	cbnz	r3, 8006790 <iprintf+0x14>
 800678a:	4620      	mov	r0, r4
 800678c:	f000 fa5e 	bl	8006c4c <__sinit>
 8006790:	ab05      	add	r3, sp, #20
 8006792:	9a04      	ldr	r2, [sp, #16]
 8006794:	68a1      	ldr	r1, [r4, #8]
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fc2f 	bl	8006ffc <_vfiprintf_r>
 800679e:	b002      	add	sp, #8
 80067a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a4:	b004      	add	sp, #16
 80067a6:	4770      	bx	lr
 80067a8:	20000010 	.word	0x20000010

080067ac <_puts_r>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	460e      	mov	r6, r1
 80067b0:	4605      	mov	r5, r0
 80067b2:	b118      	cbz	r0, 80067bc <_puts_r+0x10>
 80067b4:	6983      	ldr	r3, [r0, #24]
 80067b6:	b90b      	cbnz	r3, 80067bc <_puts_r+0x10>
 80067b8:	f000 fa48 	bl	8006c4c <__sinit>
 80067bc:	69ab      	ldr	r3, [r5, #24]
 80067be:	68ac      	ldr	r4, [r5, #8]
 80067c0:	b913      	cbnz	r3, 80067c8 <_puts_r+0x1c>
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 fa42 	bl	8006c4c <__sinit>
 80067c8:	4b2c      	ldr	r3, [pc, #176]	; (800687c <_puts_r+0xd0>)
 80067ca:	429c      	cmp	r4, r3
 80067cc:	d120      	bne.n	8006810 <_puts_r+0x64>
 80067ce:	686c      	ldr	r4, [r5, #4]
 80067d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d2:	07db      	lsls	r3, r3, #31
 80067d4:	d405      	bmi.n	80067e2 <_puts_r+0x36>
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	0598      	lsls	r0, r3, #22
 80067da:	d402      	bmi.n	80067e2 <_puts_r+0x36>
 80067dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067de:	f000 fad3 	bl	8006d88 <__retarget_lock_acquire_recursive>
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	0719      	lsls	r1, r3, #28
 80067e6:	d51d      	bpl.n	8006824 <_puts_r+0x78>
 80067e8:	6923      	ldr	r3, [r4, #16]
 80067ea:	b1db      	cbz	r3, 8006824 <_puts_r+0x78>
 80067ec:	3e01      	subs	r6, #1
 80067ee:	68a3      	ldr	r3, [r4, #8]
 80067f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067f4:	3b01      	subs	r3, #1
 80067f6:	60a3      	str	r3, [r4, #8]
 80067f8:	bb39      	cbnz	r1, 800684a <_puts_r+0x9e>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da38      	bge.n	8006870 <_puts_r+0xc4>
 80067fe:	4622      	mov	r2, r4
 8006800:	210a      	movs	r1, #10
 8006802:	4628      	mov	r0, r5
 8006804:	f000 f848 	bl	8006898 <__swbuf_r>
 8006808:	3001      	adds	r0, #1
 800680a:	d011      	beq.n	8006830 <_puts_r+0x84>
 800680c:	250a      	movs	r5, #10
 800680e:	e011      	b.n	8006834 <_puts_r+0x88>
 8006810:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <_puts_r+0xd4>)
 8006812:	429c      	cmp	r4, r3
 8006814:	d101      	bne.n	800681a <_puts_r+0x6e>
 8006816:	68ac      	ldr	r4, [r5, #8]
 8006818:	e7da      	b.n	80067d0 <_puts_r+0x24>
 800681a:	4b1a      	ldr	r3, [pc, #104]	; (8006884 <_puts_r+0xd8>)
 800681c:	429c      	cmp	r4, r3
 800681e:	bf08      	it	eq
 8006820:	68ec      	ldreq	r4, [r5, #12]
 8006822:	e7d5      	b.n	80067d0 <_puts_r+0x24>
 8006824:	4621      	mov	r1, r4
 8006826:	4628      	mov	r0, r5
 8006828:	f000 f888 	bl	800693c <__swsetup_r>
 800682c:	2800      	cmp	r0, #0
 800682e:	d0dd      	beq.n	80067ec <_puts_r+0x40>
 8006830:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006836:	07da      	lsls	r2, r3, #31
 8006838:	d405      	bmi.n	8006846 <_puts_r+0x9a>
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	059b      	lsls	r3, r3, #22
 800683e:	d402      	bmi.n	8006846 <_puts_r+0x9a>
 8006840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006842:	f000 faa2 	bl	8006d8a <__retarget_lock_release_recursive>
 8006846:	4628      	mov	r0, r5
 8006848:	bd70      	pop	{r4, r5, r6, pc}
 800684a:	2b00      	cmp	r3, #0
 800684c:	da04      	bge.n	8006858 <_puts_r+0xac>
 800684e:	69a2      	ldr	r2, [r4, #24]
 8006850:	429a      	cmp	r2, r3
 8006852:	dc06      	bgt.n	8006862 <_puts_r+0xb6>
 8006854:	290a      	cmp	r1, #10
 8006856:	d004      	beq.n	8006862 <_puts_r+0xb6>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	6022      	str	r2, [r4, #0]
 800685e:	7019      	strb	r1, [r3, #0]
 8006860:	e7c5      	b.n	80067ee <_puts_r+0x42>
 8006862:	4622      	mov	r2, r4
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f817 	bl	8006898 <__swbuf_r>
 800686a:	3001      	adds	r0, #1
 800686c:	d1bf      	bne.n	80067ee <_puts_r+0x42>
 800686e:	e7df      	b.n	8006830 <_puts_r+0x84>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	250a      	movs	r5, #10
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	701d      	strb	r5, [r3, #0]
 800687a:	e7db      	b.n	8006834 <_puts_r+0x88>
 800687c:	0800793c 	.word	0x0800793c
 8006880:	0800795c 	.word	0x0800795c
 8006884:	0800791c 	.word	0x0800791c

08006888 <puts>:
 8006888:	4b02      	ldr	r3, [pc, #8]	; (8006894 <puts+0xc>)
 800688a:	4601      	mov	r1, r0
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	f7ff bf8d 	b.w	80067ac <_puts_r>
 8006892:	bf00      	nop
 8006894:	20000010 	.word	0x20000010

08006898 <__swbuf_r>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	460e      	mov	r6, r1
 800689c:	4614      	mov	r4, r2
 800689e:	4605      	mov	r5, r0
 80068a0:	b118      	cbz	r0, 80068aa <__swbuf_r+0x12>
 80068a2:	6983      	ldr	r3, [r0, #24]
 80068a4:	b90b      	cbnz	r3, 80068aa <__swbuf_r+0x12>
 80068a6:	f000 f9d1 	bl	8006c4c <__sinit>
 80068aa:	4b21      	ldr	r3, [pc, #132]	; (8006930 <__swbuf_r+0x98>)
 80068ac:	429c      	cmp	r4, r3
 80068ae:	d12b      	bne.n	8006908 <__swbuf_r+0x70>
 80068b0:	686c      	ldr	r4, [r5, #4]
 80068b2:	69a3      	ldr	r3, [r4, #24]
 80068b4:	60a3      	str	r3, [r4, #8]
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	071a      	lsls	r2, r3, #28
 80068ba:	d52f      	bpl.n	800691c <__swbuf_r+0x84>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	b36b      	cbz	r3, 800691c <__swbuf_r+0x84>
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	6820      	ldr	r0, [r4, #0]
 80068c4:	1ac0      	subs	r0, r0, r3
 80068c6:	6963      	ldr	r3, [r4, #20]
 80068c8:	b2f6      	uxtb	r6, r6
 80068ca:	4283      	cmp	r3, r0
 80068cc:	4637      	mov	r7, r6
 80068ce:	dc04      	bgt.n	80068da <__swbuf_r+0x42>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 f926 	bl	8006b24 <_fflush_r>
 80068d8:	bb30      	cbnz	r0, 8006928 <__swbuf_r+0x90>
 80068da:	68a3      	ldr	r3, [r4, #8]
 80068dc:	3b01      	subs	r3, #1
 80068de:	60a3      	str	r3, [r4, #8]
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	6022      	str	r2, [r4, #0]
 80068e6:	701e      	strb	r6, [r3, #0]
 80068e8:	6963      	ldr	r3, [r4, #20]
 80068ea:	3001      	adds	r0, #1
 80068ec:	4283      	cmp	r3, r0
 80068ee:	d004      	beq.n	80068fa <__swbuf_r+0x62>
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	07db      	lsls	r3, r3, #31
 80068f4:	d506      	bpl.n	8006904 <__swbuf_r+0x6c>
 80068f6:	2e0a      	cmp	r6, #10
 80068f8:	d104      	bne.n	8006904 <__swbuf_r+0x6c>
 80068fa:	4621      	mov	r1, r4
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 f911 	bl	8006b24 <_fflush_r>
 8006902:	b988      	cbnz	r0, 8006928 <__swbuf_r+0x90>
 8006904:	4638      	mov	r0, r7
 8006906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <__swbuf_r+0x9c>)
 800690a:	429c      	cmp	r4, r3
 800690c:	d101      	bne.n	8006912 <__swbuf_r+0x7a>
 800690e:	68ac      	ldr	r4, [r5, #8]
 8006910:	e7cf      	b.n	80068b2 <__swbuf_r+0x1a>
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <__swbuf_r+0xa0>)
 8006914:	429c      	cmp	r4, r3
 8006916:	bf08      	it	eq
 8006918:	68ec      	ldreq	r4, [r5, #12]
 800691a:	e7ca      	b.n	80068b2 <__swbuf_r+0x1a>
 800691c:	4621      	mov	r1, r4
 800691e:	4628      	mov	r0, r5
 8006920:	f000 f80c 	bl	800693c <__swsetup_r>
 8006924:	2800      	cmp	r0, #0
 8006926:	d0cb      	beq.n	80068c0 <__swbuf_r+0x28>
 8006928:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800692c:	e7ea      	b.n	8006904 <__swbuf_r+0x6c>
 800692e:	bf00      	nop
 8006930:	0800793c 	.word	0x0800793c
 8006934:	0800795c 	.word	0x0800795c
 8006938:	0800791c 	.word	0x0800791c

0800693c <__swsetup_r>:
 800693c:	4b32      	ldr	r3, [pc, #200]	; (8006a08 <__swsetup_r+0xcc>)
 800693e:	b570      	push	{r4, r5, r6, lr}
 8006940:	681d      	ldr	r5, [r3, #0]
 8006942:	4606      	mov	r6, r0
 8006944:	460c      	mov	r4, r1
 8006946:	b125      	cbz	r5, 8006952 <__swsetup_r+0x16>
 8006948:	69ab      	ldr	r3, [r5, #24]
 800694a:	b913      	cbnz	r3, 8006952 <__swsetup_r+0x16>
 800694c:	4628      	mov	r0, r5
 800694e:	f000 f97d 	bl	8006c4c <__sinit>
 8006952:	4b2e      	ldr	r3, [pc, #184]	; (8006a0c <__swsetup_r+0xd0>)
 8006954:	429c      	cmp	r4, r3
 8006956:	d10f      	bne.n	8006978 <__swsetup_r+0x3c>
 8006958:	686c      	ldr	r4, [r5, #4]
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006960:	0719      	lsls	r1, r3, #28
 8006962:	d42c      	bmi.n	80069be <__swsetup_r+0x82>
 8006964:	06dd      	lsls	r5, r3, #27
 8006966:	d411      	bmi.n	800698c <__swsetup_r+0x50>
 8006968:	2309      	movs	r3, #9
 800696a:	6033      	str	r3, [r6, #0]
 800696c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006976:	e03e      	b.n	80069f6 <__swsetup_r+0xba>
 8006978:	4b25      	ldr	r3, [pc, #148]	; (8006a10 <__swsetup_r+0xd4>)
 800697a:	429c      	cmp	r4, r3
 800697c:	d101      	bne.n	8006982 <__swsetup_r+0x46>
 800697e:	68ac      	ldr	r4, [r5, #8]
 8006980:	e7eb      	b.n	800695a <__swsetup_r+0x1e>
 8006982:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <__swsetup_r+0xd8>)
 8006984:	429c      	cmp	r4, r3
 8006986:	bf08      	it	eq
 8006988:	68ec      	ldreq	r4, [r5, #12]
 800698a:	e7e6      	b.n	800695a <__swsetup_r+0x1e>
 800698c:	0758      	lsls	r0, r3, #29
 800698e:	d512      	bpl.n	80069b6 <__swsetup_r+0x7a>
 8006990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006992:	b141      	cbz	r1, 80069a6 <__swsetup_r+0x6a>
 8006994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006998:	4299      	cmp	r1, r3
 800699a:	d002      	beq.n	80069a2 <__swsetup_r+0x66>
 800699c:	4630      	mov	r0, r6
 800699e:	f000 fa59 	bl	8006e54 <_free_r>
 80069a2:	2300      	movs	r3, #0
 80069a4:	6363      	str	r3, [r4, #52]	; 0x34
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069ac:	81a3      	strh	r3, [r4, #12]
 80069ae:	2300      	movs	r3, #0
 80069b0:	6063      	str	r3, [r4, #4]
 80069b2:	6923      	ldr	r3, [r4, #16]
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	f043 0308 	orr.w	r3, r3, #8
 80069bc:	81a3      	strh	r3, [r4, #12]
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	b94b      	cbnz	r3, 80069d6 <__swsetup_r+0x9a>
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069cc:	d003      	beq.n	80069d6 <__swsetup_r+0x9a>
 80069ce:	4621      	mov	r1, r4
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 f9ff 	bl	8006dd4 <__smakebuf_r>
 80069d6:	89a0      	ldrh	r0, [r4, #12]
 80069d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069dc:	f010 0301 	ands.w	r3, r0, #1
 80069e0:	d00a      	beq.n	80069f8 <__swsetup_r+0xbc>
 80069e2:	2300      	movs	r3, #0
 80069e4:	60a3      	str	r3, [r4, #8]
 80069e6:	6963      	ldr	r3, [r4, #20]
 80069e8:	425b      	negs	r3, r3
 80069ea:	61a3      	str	r3, [r4, #24]
 80069ec:	6923      	ldr	r3, [r4, #16]
 80069ee:	b943      	cbnz	r3, 8006a02 <__swsetup_r+0xc6>
 80069f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069f4:	d1ba      	bne.n	800696c <__swsetup_r+0x30>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	0781      	lsls	r1, r0, #30
 80069fa:	bf58      	it	pl
 80069fc:	6963      	ldrpl	r3, [r4, #20]
 80069fe:	60a3      	str	r3, [r4, #8]
 8006a00:	e7f4      	b.n	80069ec <__swsetup_r+0xb0>
 8006a02:	2000      	movs	r0, #0
 8006a04:	e7f7      	b.n	80069f6 <__swsetup_r+0xba>
 8006a06:	bf00      	nop
 8006a08:	20000010 	.word	0x20000010
 8006a0c:	0800793c 	.word	0x0800793c
 8006a10:	0800795c 	.word	0x0800795c
 8006a14:	0800791c 	.word	0x0800791c

08006a18 <__sflush_r>:
 8006a18:	898a      	ldrh	r2, [r1, #12]
 8006a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1e:	4605      	mov	r5, r0
 8006a20:	0710      	lsls	r0, r2, #28
 8006a22:	460c      	mov	r4, r1
 8006a24:	d458      	bmi.n	8006ad8 <__sflush_r+0xc0>
 8006a26:	684b      	ldr	r3, [r1, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	dc05      	bgt.n	8006a38 <__sflush_r+0x20>
 8006a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dc02      	bgt.n	8006a38 <__sflush_r+0x20>
 8006a32:	2000      	movs	r0, #0
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	d0f9      	beq.n	8006a32 <__sflush_r+0x1a>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a44:	682f      	ldr	r7, [r5, #0]
 8006a46:	602b      	str	r3, [r5, #0]
 8006a48:	d032      	beq.n	8006ab0 <__sflush_r+0x98>
 8006a4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	075a      	lsls	r2, r3, #29
 8006a50:	d505      	bpl.n	8006a5e <__sflush_r+0x46>
 8006a52:	6863      	ldr	r3, [r4, #4]
 8006a54:	1ac0      	subs	r0, r0, r3
 8006a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a58:	b10b      	cbz	r3, 8006a5e <__sflush_r+0x46>
 8006a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a5c:	1ac0      	subs	r0, r0, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	4602      	mov	r2, r0
 8006a62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a64:	6a21      	ldr	r1, [r4, #32]
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b0      	blx	r6
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	d106      	bne.n	8006a7e <__sflush_r+0x66>
 8006a70:	6829      	ldr	r1, [r5, #0]
 8006a72:	291d      	cmp	r1, #29
 8006a74:	d82c      	bhi.n	8006ad0 <__sflush_r+0xb8>
 8006a76:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <__sflush_r+0x108>)
 8006a78:	40ca      	lsrs	r2, r1
 8006a7a:	07d6      	lsls	r6, r2, #31
 8006a7c:	d528      	bpl.n	8006ad0 <__sflush_r+0xb8>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	6062      	str	r2, [r4, #4]
 8006a82:	04d9      	lsls	r1, r3, #19
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	d504      	bpl.n	8006a94 <__sflush_r+0x7c>
 8006a8a:	1c42      	adds	r2, r0, #1
 8006a8c:	d101      	bne.n	8006a92 <__sflush_r+0x7a>
 8006a8e:	682b      	ldr	r3, [r5, #0]
 8006a90:	b903      	cbnz	r3, 8006a94 <__sflush_r+0x7c>
 8006a92:	6560      	str	r0, [r4, #84]	; 0x54
 8006a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a96:	602f      	str	r7, [r5, #0]
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	d0ca      	beq.n	8006a32 <__sflush_r+0x1a>
 8006a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aa0:	4299      	cmp	r1, r3
 8006aa2:	d002      	beq.n	8006aaa <__sflush_r+0x92>
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f9d5 	bl	8006e54 <_free_r>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	6360      	str	r0, [r4, #52]	; 0x34
 8006aae:	e7c1      	b.n	8006a34 <__sflush_r+0x1c>
 8006ab0:	6a21      	ldr	r1, [r4, #32]
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b0      	blx	r6
 8006ab8:	1c41      	adds	r1, r0, #1
 8006aba:	d1c7      	bne.n	8006a4c <__sflush_r+0x34>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0c4      	beq.n	8006a4c <__sflush_r+0x34>
 8006ac2:	2b1d      	cmp	r3, #29
 8006ac4:	d001      	beq.n	8006aca <__sflush_r+0xb2>
 8006ac6:	2b16      	cmp	r3, #22
 8006ac8:	d101      	bne.n	8006ace <__sflush_r+0xb6>
 8006aca:	602f      	str	r7, [r5, #0]
 8006acc:	e7b1      	b.n	8006a32 <__sflush_r+0x1a>
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	e7ad      	b.n	8006a34 <__sflush_r+0x1c>
 8006ad8:	690f      	ldr	r7, [r1, #16]
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	d0a9      	beq.n	8006a32 <__sflush_r+0x1a>
 8006ade:	0793      	lsls	r3, r2, #30
 8006ae0:	680e      	ldr	r6, [r1, #0]
 8006ae2:	bf08      	it	eq
 8006ae4:	694b      	ldreq	r3, [r1, #20]
 8006ae6:	600f      	str	r7, [r1, #0]
 8006ae8:	bf18      	it	ne
 8006aea:	2300      	movne	r3, #0
 8006aec:	eba6 0807 	sub.w	r8, r6, r7
 8006af0:	608b      	str	r3, [r1, #8]
 8006af2:	f1b8 0f00 	cmp.w	r8, #0
 8006af6:	dd9c      	ble.n	8006a32 <__sflush_r+0x1a>
 8006af8:	6a21      	ldr	r1, [r4, #32]
 8006afa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006afc:	4643      	mov	r3, r8
 8006afe:	463a      	mov	r2, r7
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b0      	blx	r6
 8006b04:	2800      	cmp	r0, #0
 8006b06:	dc06      	bgt.n	8006b16 <__sflush_r+0xfe>
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b14:	e78e      	b.n	8006a34 <__sflush_r+0x1c>
 8006b16:	4407      	add	r7, r0
 8006b18:	eba8 0800 	sub.w	r8, r8, r0
 8006b1c:	e7e9      	b.n	8006af2 <__sflush_r+0xda>
 8006b1e:	bf00      	nop
 8006b20:	20400001 	.word	0x20400001

08006b24 <_fflush_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	4605      	mov	r5, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	b913      	cbnz	r3, 8006b34 <_fflush_r+0x10>
 8006b2e:	2500      	movs	r5, #0
 8006b30:	4628      	mov	r0, r5
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	b118      	cbz	r0, 8006b3e <_fflush_r+0x1a>
 8006b36:	6983      	ldr	r3, [r0, #24]
 8006b38:	b90b      	cbnz	r3, 8006b3e <_fflush_r+0x1a>
 8006b3a:	f000 f887 	bl	8006c4c <__sinit>
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <_fflush_r+0x6c>)
 8006b40:	429c      	cmp	r4, r3
 8006b42:	d11b      	bne.n	8006b7c <_fflush_r+0x58>
 8006b44:	686c      	ldr	r4, [r5, #4]
 8006b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0ef      	beq.n	8006b2e <_fflush_r+0xa>
 8006b4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b50:	07d0      	lsls	r0, r2, #31
 8006b52:	d404      	bmi.n	8006b5e <_fflush_r+0x3a>
 8006b54:	0599      	lsls	r1, r3, #22
 8006b56:	d402      	bmi.n	8006b5e <_fflush_r+0x3a>
 8006b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b5a:	f000 f915 	bl	8006d88 <__retarget_lock_acquire_recursive>
 8006b5e:	4628      	mov	r0, r5
 8006b60:	4621      	mov	r1, r4
 8006b62:	f7ff ff59 	bl	8006a18 <__sflush_r>
 8006b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b68:	07da      	lsls	r2, r3, #31
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	d4e0      	bmi.n	8006b30 <_fflush_r+0xc>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	059b      	lsls	r3, r3, #22
 8006b72:	d4dd      	bmi.n	8006b30 <_fflush_r+0xc>
 8006b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b76:	f000 f908 	bl	8006d8a <__retarget_lock_release_recursive>
 8006b7a:	e7d9      	b.n	8006b30 <_fflush_r+0xc>
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <_fflush_r+0x70>)
 8006b7e:	429c      	cmp	r4, r3
 8006b80:	d101      	bne.n	8006b86 <_fflush_r+0x62>
 8006b82:	68ac      	ldr	r4, [r5, #8]
 8006b84:	e7df      	b.n	8006b46 <_fflush_r+0x22>
 8006b86:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <_fflush_r+0x74>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	bf08      	it	eq
 8006b8c:	68ec      	ldreq	r4, [r5, #12]
 8006b8e:	e7da      	b.n	8006b46 <_fflush_r+0x22>
 8006b90:	0800793c 	.word	0x0800793c
 8006b94:	0800795c 	.word	0x0800795c
 8006b98:	0800791c 	.word	0x0800791c

08006b9c <std>:
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006baa:	6083      	str	r3, [r0, #8]
 8006bac:	8181      	strh	r1, [r0, #12]
 8006bae:	6643      	str	r3, [r0, #100]	; 0x64
 8006bb0:	81c2      	strh	r2, [r0, #14]
 8006bb2:	6183      	str	r3, [r0, #24]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	305c      	adds	r0, #92	; 0x5c
 8006bba:	f7ff fdd7 	bl	800676c <memset>
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <std+0x38>)
 8006bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8006bc2:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <std+0x3c>)
 8006bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <std+0x40>)
 8006bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <std+0x44>)
 8006bcc:	6224      	str	r4, [r4, #32]
 8006bce:	6323      	str	r3, [r4, #48]	; 0x30
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	080075a5 	.word	0x080075a5
 8006bd8:	080075c7 	.word	0x080075c7
 8006bdc:	080075ff 	.word	0x080075ff
 8006be0:	08007623 	.word	0x08007623

08006be4 <_cleanup_r>:
 8006be4:	4901      	ldr	r1, [pc, #4]	; (8006bec <_cleanup_r+0x8>)
 8006be6:	f000 b8af 	b.w	8006d48 <_fwalk_reent>
 8006bea:	bf00      	nop
 8006bec:	08006b25 	.word	0x08006b25

08006bf0 <__sfmoreglue>:
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	1e4a      	subs	r2, r1, #1
 8006bf4:	2568      	movs	r5, #104	; 0x68
 8006bf6:	4355      	muls	r5, r2
 8006bf8:	460e      	mov	r6, r1
 8006bfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bfe:	f000 f979 	bl	8006ef4 <_malloc_r>
 8006c02:	4604      	mov	r4, r0
 8006c04:	b140      	cbz	r0, 8006c18 <__sfmoreglue+0x28>
 8006c06:	2100      	movs	r1, #0
 8006c08:	e9c0 1600 	strd	r1, r6, [r0]
 8006c0c:	300c      	adds	r0, #12
 8006c0e:	60a0      	str	r0, [r4, #8]
 8006c10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c14:	f7ff fdaa 	bl	800676c <memset>
 8006c18:	4620      	mov	r0, r4
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}

08006c1c <__sfp_lock_acquire>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	; (8006c24 <__sfp_lock_acquire+0x8>)
 8006c1e:	f000 b8b3 	b.w	8006d88 <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	20001a94 	.word	0x20001a94

08006c28 <__sfp_lock_release>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__sfp_lock_release+0x8>)
 8006c2a:	f000 b8ae 	b.w	8006d8a <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20001a94 	.word	0x20001a94

08006c34 <__sinit_lock_acquire>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__sinit_lock_acquire+0x8>)
 8006c36:	f000 b8a7 	b.w	8006d88 <__retarget_lock_acquire_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	20001a8f 	.word	0x20001a8f

08006c40 <__sinit_lock_release>:
 8006c40:	4801      	ldr	r0, [pc, #4]	; (8006c48 <__sinit_lock_release+0x8>)
 8006c42:	f000 b8a2 	b.w	8006d8a <__retarget_lock_release_recursive>
 8006c46:	bf00      	nop
 8006c48:	20001a8f 	.word	0x20001a8f

08006c4c <__sinit>:
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	4604      	mov	r4, r0
 8006c50:	f7ff fff0 	bl	8006c34 <__sinit_lock_acquire>
 8006c54:	69a3      	ldr	r3, [r4, #24]
 8006c56:	b11b      	cbz	r3, 8006c60 <__sinit+0x14>
 8006c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c5c:	f7ff bff0 	b.w	8006c40 <__sinit_lock_release>
 8006c60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c64:	6523      	str	r3, [r4, #80]	; 0x50
 8006c66:	4b13      	ldr	r3, [pc, #76]	; (8006cb4 <__sinit+0x68>)
 8006c68:	4a13      	ldr	r2, [pc, #76]	; (8006cb8 <__sinit+0x6c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c6e:	42a3      	cmp	r3, r4
 8006c70:	bf04      	itt	eq
 8006c72:	2301      	moveq	r3, #1
 8006c74:	61a3      	streq	r3, [r4, #24]
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 f820 	bl	8006cbc <__sfp>
 8006c7c:	6060      	str	r0, [r4, #4]
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 f81c 	bl	8006cbc <__sfp>
 8006c84:	60a0      	str	r0, [r4, #8]
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 f818 	bl	8006cbc <__sfp>
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	60e0      	str	r0, [r4, #12]
 8006c90:	2104      	movs	r1, #4
 8006c92:	6860      	ldr	r0, [r4, #4]
 8006c94:	f7ff ff82 	bl	8006b9c <std>
 8006c98:	68a0      	ldr	r0, [r4, #8]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	2109      	movs	r1, #9
 8006c9e:	f7ff ff7d 	bl	8006b9c <std>
 8006ca2:	68e0      	ldr	r0, [r4, #12]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	2112      	movs	r1, #18
 8006ca8:	f7ff ff78 	bl	8006b9c <std>
 8006cac:	2301      	movs	r3, #1
 8006cae:	61a3      	str	r3, [r4, #24]
 8006cb0:	e7d2      	b.n	8006c58 <__sinit+0xc>
 8006cb2:	bf00      	nop
 8006cb4:	08007918 	.word	0x08007918
 8006cb8:	08006be5 	.word	0x08006be5

08006cbc <__sfp>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	f7ff ffac 	bl	8006c1c <__sfp_lock_acquire>
 8006cc4:	4b1e      	ldr	r3, [pc, #120]	; (8006d40 <__sfp+0x84>)
 8006cc6:	681e      	ldr	r6, [r3, #0]
 8006cc8:	69b3      	ldr	r3, [r6, #24]
 8006cca:	b913      	cbnz	r3, 8006cd2 <__sfp+0x16>
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7ff ffbd 	bl	8006c4c <__sinit>
 8006cd2:	3648      	adds	r6, #72	; 0x48
 8006cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	d503      	bpl.n	8006ce4 <__sfp+0x28>
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	b30b      	cbz	r3, 8006d24 <__sfp+0x68>
 8006ce0:	6836      	ldr	r6, [r6, #0]
 8006ce2:	e7f7      	b.n	8006cd4 <__sfp+0x18>
 8006ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ce8:	b9d5      	cbnz	r5, 8006d20 <__sfp+0x64>
 8006cea:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <__sfp+0x88>)
 8006cec:	60e3      	str	r3, [r4, #12]
 8006cee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cf2:	6665      	str	r5, [r4, #100]	; 0x64
 8006cf4:	f000 f847 	bl	8006d86 <__retarget_lock_init_recursive>
 8006cf8:	f7ff ff96 	bl	8006c28 <__sfp_lock_release>
 8006cfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d04:	6025      	str	r5, [r4, #0]
 8006d06:	61a5      	str	r5, [r4, #24]
 8006d08:	2208      	movs	r2, #8
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d10:	f7ff fd2c 	bl	800676c <memset>
 8006d14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d20:	3468      	adds	r4, #104	; 0x68
 8006d22:	e7d9      	b.n	8006cd8 <__sfp+0x1c>
 8006d24:	2104      	movs	r1, #4
 8006d26:	4638      	mov	r0, r7
 8006d28:	f7ff ff62 	bl	8006bf0 <__sfmoreglue>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	6030      	str	r0, [r6, #0]
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d1d5      	bne.n	8006ce0 <__sfp+0x24>
 8006d34:	f7ff ff78 	bl	8006c28 <__sfp_lock_release>
 8006d38:	230c      	movs	r3, #12
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	e7ee      	b.n	8006d1c <__sfp+0x60>
 8006d3e:	bf00      	nop
 8006d40:	08007918 	.word	0x08007918
 8006d44:	ffff0001 	.word	0xffff0001

08006d48 <_fwalk_reent>:
 8006d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	4688      	mov	r8, r1
 8006d50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d54:	2700      	movs	r7, #0
 8006d56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d5a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d5e:	d505      	bpl.n	8006d6c <_fwalk_reent+0x24>
 8006d60:	6824      	ldr	r4, [r4, #0]
 8006d62:	2c00      	cmp	r4, #0
 8006d64:	d1f7      	bne.n	8006d56 <_fwalk_reent+0xe>
 8006d66:	4638      	mov	r0, r7
 8006d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d6c:	89ab      	ldrh	r3, [r5, #12]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d907      	bls.n	8006d82 <_fwalk_reent+0x3a>
 8006d72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d76:	3301      	adds	r3, #1
 8006d78:	d003      	beq.n	8006d82 <_fwalk_reent+0x3a>
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	47c0      	blx	r8
 8006d80:	4307      	orrs	r7, r0
 8006d82:	3568      	adds	r5, #104	; 0x68
 8006d84:	e7e9      	b.n	8006d5a <_fwalk_reent+0x12>

08006d86 <__retarget_lock_init_recursive>:
 8006d86:	4770      	bx	lr

08006d88 <__retarget_lock_acquire_recursive>:
 8006d88:	4770      	bx	lr

08006d8a <__retarget_lock_release_recursive>:
 8006d8a:	4770      	bx	lr

08006d8c <__swhatbuf_r>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	460e      	mov	r6, r1
 8006d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d94:	2900      	cmp	r1, #0
 8006d96:	b096      	sub	sp, #88	; 0x58
 8006d98:	4614      	mov	r4, r2
 8006d9a:	461d      	mov	r5, r3
 8006d9c:	da07      	bge.n	8006dae <__swhatbuf_r+0x22>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	89b3      	ldrh	r3, [r6, #12]
 8006da4:	061a      	lsls	r2, r3, #24
 8006da6:	d410      	bmi.n	8006dca <__swhatbuf_r+0x3e>
 8006da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dac:	e00e      	b.n	8006dcc <__swhatbuf_r+0x40>
 8006dae:	466a      	mov	r2, sp
 8006db0:	f000 fc5e 	bl	8007670 <_fstat_r>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	dbf2      	blt.n	8006d9e <__swhatbuf_r+0x12>
 8006db8:	9a01      	ldr	r2, [sp, #4]
 8006dba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006dbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006dc2:	425a      	negs	r2, r3
 8006dc4:	415a      	adcs	r2, r3
 8006dc6:	602a      	str	r2, [r5, #0]
 8006dc8:	e7ee      	b.n	8006da8 <__swhatbuf_r+0x1c>
 8006dca:	2340      	movs	r3, #64	; 0x40
 8006dcc:	2000      	movs	r0, #0
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	b016      	add	sp, #88	; 0x58
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}

08006dd4 <__smakebuf_r>:
 8006dd4:	898b      	ldrh	r3, [r1, #12]
 8006dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dd8:	079d      	lsls	r5, r3, #30
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460c      	mov	r4, r1
 8006dde:	d507      	bpl.n	8006df0 <__smakebuf_r+0x1c>
 8006de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	6123      	str	r3, [r4, #16]
 8006de8:	2301      	movs	r3, #1
 8006dea:	6163      	str	r3, [r4, #20]
 8006dec:	b002      	add	sp, #8
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	ab01      	add	r3, sp, #4
 8006df2:	466a      	mov	r2, sp
 8006df4:	f7ff ffca 	bl	8006d8c <__swhatbuf_r>
 8006df8:	9900      	ldr	r1, [sp, #0]
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f000 f879 	bl	8006ef4 <_malloc_r>
 8006e02:	b948      	cbnz	r0, 8006e18 <__smakebuf_r+0x44>
 8006e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e08:	059a      	lsls	r2, r3, #22
 8006e0a:	d4ef      	bmi.n	8006dec <__smakebuf_r+0x18>
 8006e0c:	f023 0303 	bic.w	r3, r3, #3
 8006e10:	f043 0302 	orr.w	r3, r3, #2
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	e7e3      	b.n	8006de0 <__smakebuf_r+0xc>
 8006e18:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <__smakebuf_r+0x7c>)
 8006e1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	6020      	str	r0, [r4, #0]
 8006e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	9b00      	ldr	r3, [sp, #0]
 8006e28:	6163      	str	r3, [r4, #20]
 8006e2a:	9b01      	ldr	r3, [sp, #4]
 8006e2c:	6120      	str	r0, [r4, #16]
 8006e2e:	b15b      	cbz	r3, 8006e48 <__smakebuf_r+0x74>
 8006e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e34:	4630      	mov	r0, r6
 8006e36:	f000 fc2d 	bl	8007694 <_isatty_r>
 8006e3a:	b128      	cbz	r0, 8006e48 <__smakebuf_r+0x74>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	f043 0301 	orr.w	r3, r3, #1
 8006e46:	81a3      	strh	r3, [r4, #12]
 8006e48:	89a0      	ldrh	r0, [r4, #12]
 8006e4a:	4305      	orrs	r5, r0
 8006e4c:	81a5      	strh	r5, [r4, #12]
 8006e4e:	e7cd      	b.n	8006dec <__smakebuf_r+0x18>
 8006e50:	08006be5 	.word	0x08006be5

08006e54 <_free_r>:
 8006e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e56:	2900      	cmp	r1, #0
 8006e58:	d048      	beq.n	8006eec <_free_r+0x98>
 8006e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5e:	9001      	str	r0, [sp, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f1a1 0404 	sub.w	r4, r1, #4
 8006e66:	bfb8      	it	lt
 8006e68:	18e4      	addlt	r4, r4, r3
 8006e6a:	f000 fc35 	bl	80076d8 <__malloc_lock>
 8006e6e:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <_free_r+0x9c>)
 8006e70:	9801      	ldr	r0, [sp, #4]
 8006e72:	6813      	ldr	r3, [r2, #0]
 8006e74:	4615      	mov	r5, r2
 8006e76:	b933      	cbnz	r3, 8006e86 <_free_r+0x32>
 8006e78:	6063      	str	r3, [r4, #4]
 8006e7a:	6014      	str	r4, [r2, #0]
 8006e7c:	b003      	add	sp, #12
 8006e7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e82:	f000 bc2f 	b.w	80076e4 <__malloc_unlock>
 8006e86:	42a3      	cmp	r3, r4
 8006e88:	d90b      	bls.n	8006ea2 <_free_r+0x4e>
 8006e8a:	6821      	ldr	r1, [r4, #0]
 8006e8c:	1862      	adds	r2, r4, r1
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	bf04      	itt	eq
 8006e92:	681a      	ldreq	r2, [r3, #0]
 8006e94:	685b      	ldreq	r3, [r3, #4]
 8006e96:	6063      	str	r3, [r4, #4]
 8006e98:	bf04      	itt	eq
 8006e9a:	1852      	addeq	r2, r2, r1
 8006e9c:	6022      	streq	r2, [r4, #0]
 8006e9e:	602c      	str	r4, [r5, #0]
 8006ea0:	e7ec      	b.n	8006e7c <_free_r+0x28>
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	b10b      	cbz	r3, 8006eac <_free_r+0x58>
 8006ea8:	42a3      	cmp	r3, r4
 8006eaa:	d9fa      	bls.n	8006ea2 <_free_r+0x4e>
 8006eac:	6811      	ldr	r1, [r2, #0]
 8006eae:	1855      	adds	r5, r2, r1
 8006eb0:	42a5      	cmp	r5, r4
 8006eb2:	d10b      	bne.n	8006ecc <_free_r+0x78>
 8006eb4:	6824      	ldr	r4, [r4, #0]
 8006eb6:	4421      	add	r1, r4
 8006eb8:	1854      	adds	r4, r2, r1
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	6011      	str	r1, [r2, #0]
 8006ebe:	d1dd      	bne.n	8006e7c <_free_r+0x28>
 8006ec0:	681c      	ldr	r4, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	6053      	str	r3, [r2, #4]
 8006ec6:	4421      	add	r1, r4
 8006ec8:	6011      	str	r1, [r2, #0]
 8006eca:	e7d7      	b.n	8006e7c <_free_r+0x28>
 8006ecc:	d902      	bls.n	8006ed4 <_free_r+0x80>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	6003      	str	r3, [r0, #0]
 8006ed2:	e7d3      	b.n	8006e7c <_free_r+0x28>
 8006ed4:	6825      	ldr	r5, [r4, #0]
 8006ed6:	1961      	adds	r1, r4, r5
 8006ed8:	428b      	cmp	r3, r1
 8006eda:	bf04      	itt	eq
 8006edc:	6819      	ldreq	r1, [r3, #0]
 8006ede:	685b      	ldreq	r3, [r3, #4]
 8006ee0:	6063      	str	r3, [r4, #4]
 8006ee2:	bf04      	itt	eq
 8006ee4:	1949      	addeq	r1, r1, r5
 8006ee6:	6021      	streq	r1, [r4, #0]
 8006ee8:	6054      	str	r4, [r2, #4]
 8006eea:	e7c7      	b.n	8006e7c <_free_r+0x28>
 8006eec:	b003      	add	sp, #12
 8006eee:	bd30      	pop	{r4, r5, pc}
 8006ef0:	2000195c 	.word	0x2000195c

08006ef4 <_malloc_r>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	1ccd      	adds	r5, r1, #3
 8006ef8:	f025 0503 	bic.w	r5, r5, #3
 8006efc:	3508      	adds	r5, #8
 8006efe:	2d0c      	cmp	r5, #12
 8006f00:	bf38      	it	cc
 8006f02:	250c      	movcc	r5, #12
 8006f04:	2d00      	cmp	r5, #0
 8006f06:	4606      	mov	r6, r0
 8006f08:	db01      	blt.n	8006f0e <_malloc_r+0x1a>
 8006f0a:	42a9      	cmp	r1, r5
 8006f0c:	d903      	bls.n	8006f16 <_malloc_r+0x22>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	6033      	str	r3, [r6, #0]
 8006f12:	2000      	movs	r0, #0
 8006f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f16:	f000 fbdf 	bl	80076d8 <__malloc_lock>
 8006f1a:	4921      	ldr	r1, [pc, #132]	; (8006fa0 <_malloc_r+0xac>)
 8006f1c:	680a      	ldr	r2, [r1, #0]
 8006f1e:	4614      	mov	r4, r2
 8006f20:	b99c      	cbnz	r4, 8006f4a <_malloc_r+0x56>
 8006f22:	4f20      	ldr	r7, [pc, #128]	; (8006fa4 <_malloc_r+0xb0>)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	b923      	cbnz	r3, 8006f32 <_malloc_r+0x3e>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f000 fb2a 	bl	8007584 <_sbrk_r>
 8006f30:	6038      	str	r0, [r7, #0]
 8006f32:	4629      	mov	r1, r5
 8006f34:	4630      	mov	r0, r6
 8006f36:	f000 fb25 	bl	8007584 <_sbrk_r>
 8006f3a:	1c43      	adds	r3, r0, #1
 8006f3c:	d123      	bne.n	8006f86 <_malloc_r+0x92>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	6033      	str	r3, [r6, #0]
 8006f42:	4630      	mov	r0, r6
 8006f44:	f000 fbce 	bl	80076e4 <__malloc_unlock>
 8006f48:	e7e3      	b.n	8006f12 <_malloc_r+0x1e>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	1b5b      	subs	r3, r3, r5
 8006f4e:	d417      	bmi.n	8006f80 <_malloc_r+0x8c>
 8006f50:	2b0b      	cmp	r3, #11
 8006f52:	d903      	bls.n	8006f5c <_malloc_r+0x68>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	441c      	add	r4, r3
 8006f58:	6025      	str	r5, [r4, #0]
 8006f5a:	e004      	b.n	8006f66 <_malloc_r+0x72>
 8006f5c:	6863      	ldr	r3, [r4, #4]
 8006f5e:	42a2      	cmp	r2, r4
 8006f60:	bf0c      	ite	eq
 8006f62:	600b      	streq	r3, [r1, #0]
 8006f64:	6053      	strne	r3, [r2, #4]
 8006f66:	4630      	mov	r0, r6
 8006f68:	f000 fbbc 	bl	80076e4 <__malloc_unlock>
 8006f6c:	f104 000b 	add.w	r0, r4, #11
 8006f70:	1d23      	adds	r3, r4, #4
 8006f72:	f020 0007 	bic.w	r0, r0, #7
 8006f76:	1ac2      	subs	r2, r0, r3
 8006f78:	d0cc      	beq.n	8006f14 <_malloc_r+0x20>
 8006f7a:	1a1b      	subs	r3, r3, r0
 8006f7c:	50a3      	str	r3, [r4, r2]
 8006f7e:	e7c9      	b.n	8006f14 <_malloc_r+0x20>
 8006f80:	4622      	mov	r2, r4
 8006f82:	6864      	ldr	r4, [r4, #4]
 8006f84:	e7cc      	b.n	8006f20 <_malloc_r+0x2c>
 8006f86:	1cc4      	adds	r4, r0, #3
 8006f88:	f024 0403 	bic.w	r4, r4, #3
 8006f8c:	42a0      	cmp	r0, r4
 8006f8e:	d0e3      	beq.n	8006f58 <_malloc_r+0x64>
 8006f90:	1a21      	subs	r1, r4, r0
 8006f92:	4630      	mov	r0, r6
 8006f94:	f000 faf6 	bl	8007584 <_sbrk_r>
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d1dd      	bne.n	8006f58 <_malloc_r+0x64>
 8006f9c:	e7cf      	b.n	8006f3e <_malloc_r+0x4a>
 8006f9e:	bf00      	nop
 8006fa0:	2000195c 	.word	0x2000195c
 8006fa4:	20001960 	.word	0x20001960

08006fa8 <__sfputc_r>:
 8006fa8:	6893      	ldr	r3, [r2, #8]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	b410      	push	{r4}
 8006fb0:	6093      	str	r3, [r2, #8]
 8006fb2:	da08      	bge.n	8006fc6 <__sfputc_r+0x1e>
 8006fb4:	6994      	ldr	r4, [r2, #24]
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	db01      	blt.n	8006fbe <__sfputc_r+0x16>
 8006fba:	290a      	cmp	r1, #10
 8006fbc:	d103      	bne.n	8006fc6 <__sfputc_r+0x1e>
 8006fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fc2:	f7ff bc69 	b.w	8006898 <__swbuf_r>
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	1c58      	adds	r0, r3, #1
 8006fca:	6010      	str	r0, [r2, #0]
 8006fcc:	7019      	strb	r1, [r3, #0]
 8006fce:	4608      	mov	r0, r1
 8006fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <__sfputs_r>:
 8006fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd8:	4606      	mov	r6, r0
 8006fda:	460f      	mov	r7, r1
 8006fdc:	4614      	mov	r4, r2
 8006fde:	18d5      	adds	r5, r2, r3
 8006fe0:	42ac      	cmp	r4, r5
 8006fe2:	d101      	bne.n	8006fe8 <__sfputs_r+0x12>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e007      	b.n	8006ff8 <__sfputs_r+0x22>
 8006fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fec:	463a      	mov	r2, r7
 8006fee:	4630      	mov	r0, r6
 8006ff0:	f7ff ffda 	bl	8006fa8 <__sfputc_r>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d1f3      	bne.n	8006fe0 <__sfputs_r+0xa>
 8006ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ffc <_vfiprintf_r>:
 8006ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	460d      	mov	r5, r1
 8007002:	b09d      	sub	sp, #116	; 0x74
 8007004:	4614      	mov	r4, r2
 8007006:	4698      	mov	r8, r3
 8007008:	4606      	mov	r6, r0
 800700a:	b118      	cbz	r0, 8007014 <_vfiprintf_r+0x18>
 800700c:	6983      	ldr	r3, [r0, #24]
 800700e:	b90b      	cbnz	r3, 8007014 <_vfiprintf_r+0x18>
 8007010:	f7ff fe1c 	bl	8006c4c <__sinit>
 8007014:	4b89      	ldr	r3, [pc, #548]	; (800723c <_vfiprintf_r+0x240>)
 8007016:	429d      	cmp	r5, r3
 8007018:	d11b      	bne.n	8007052 <_vfiprintf_r+0x56>
 800701a:	6875      	ldr	r5, [r6, #4]
 800701c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800701e:	07d9      	lsls	r1, r3, #31
 8007020:	d405      	bmi.n	800702e <_vfiprintf_r+0x32>
 8007022:	89ab      	ldrh	r3, [r5, #12]
 8007024:	059a      	lsls	r2, r3, #22
 8007026:	d402      	bmi.n	800702e <_vfiprintf_r+0x32>
 8007028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800702a:	f7ff fead 	bl	8006d88 <__retarget_lock_acquire_recursive>
 800702e:	89ab      	ldrh	r3, [r5, #12]
 8007030:	071b      	lsls	r3, r3, #28
 8007032:	d501      	bpl.n	8007038 <_vfiprintf_r+0x3c>
 8007034:	692b      	ldr	r3, [r5, #16]
 8007036:	b9eb      	cbnz	r3, 8007074 <_vfiprintf_r+0x78>
 8007038:	4629      	mov	r1, r5
 800703a:	4630      	mov	r0, r6
 800703c:	f7ff fc7e 	bl	800693c <__swsetup_r>
 8007040:	b1c0      	cbz	r0, 8007074 <_vfiprintf_r+0x78>
 8007042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007044:	07dc      	lsls	r4, r3, #31
 8007046:	d50e      	bpl.n	8007066 <_vfiprintf_r+0x6a>
 8007048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800704c:	b01d      	add	sp, #116	; 0x74
 800704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007052:	4b7b      	ldr	r3, [pc, #492]	; (8007240 <_vfiprintf_r+0x244>)
 8007054:	429d      	cmp	r5, r3
 8007056:	d101      	bne.n	800705c <_vfiprintf_r+0x60>
 8007058:	68b5      	ldr	r5, [r6, #8]
 800705a:	e7df      	b.n	800701c <_vfiprintf_r+0x20>
 800705c:	4b79      	ldr	r3, [pc, #484]	; (8007244 <_vfiprintf_r+0x248>)
 800705e:	429d      	cmp	r5, r3
 8007060:	bf08      	it	eq
 8007062:	68f5      	ldreq	r5, [r6, #12]
 8007064:	e7da      	b.n	800701c <_vfiprintf_r+0x20>
 8007066:	89ab      	ldrh	r3, [r5, #12]
 8007068:	0598      	lsls	r0, r3, #22
 800706a:	d4ed      	bmi.n	8007048 <_vfiprintf_r+0x4c>
 800706c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800706e:	f7ff fe8c 	bl	8006d8a <__retarget_lock_release_recursive>
 8007072:	e7e9      	b.n	8007048 <_vfiprintf_r+0x4c>
 8007074:	2300      	movs	r3, #0
 8007076:	9309      	str	r3, [sp, #36]	; 0x24
 8007078:	2320      	movs	r3, #32
 800707a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800707e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007082:	2330      	movs	r3, #48	; 0x30
 8007084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007248 <_vfiprintf_r+0x24c>
 8007088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800708c:	f04f 0901 	mov.w	r9, #1
 8007090:	4623      	mov	r3, r4
 8007092:	469a      	mov	sl, r3
 8007094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007098:	b10a      	cbz	r2, 800709e <_vfiprintf_r+0xa2>
 800709a:	2a25      	cmp	r2, #37	; 0x25
 800709c:	d1f9      	bne.n	8007092 <_vfiprintf_r+0x96>
 800709e:	ebba 0b04 	subs.w	fp, sl, r4
 80070a2:	d00b      	beq.n	80070bc <_vfiprintf_r+0xc0>
 80070a4:	465b      	mov	r3, fp
 80070a6:	4622      	mov	r2, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7ff ff93 	bl	8006fd6 <__sfputs_r>
 80070b0:	3001      	adds	r0, #1
 80070b2:	f000 80aa 	beq.w	800720a <_vfiprintf_r+0x20e>
 80070b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b8:	445a      	add	r2, fp
 80070ba:	9209      	str	r2, [sp, #36]	; 0x24
 80070bc:	f89a 3000 	ldrb.w	r3, [sl]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 80a2 	beq.w	800720a <_vfiprintf_r+0x20e>
 80070c6:	2300      	movs	r3, #0
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d0:	f10a 0a01 	add.w	sl, sl, #1
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070dc:	931a      	str	r3, [sp, #104]	; 0x68
 80070de:	4654      	mov	r4, sl
 80070e0:	2205      	movs	r2, #5
 80070e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e6:	4858      	ldr	r0, [pc, #352]	; (8007248 <_vfiprintf_r+0x24c>)
 80070e8:	f7f9 f872 	bl	80001d0 <memchr>
 80070ec:	9a04      	ldr	r2, [sp, #16]
 80070ee:	b9d8      	cbnz	r0, 8007128 <_vfiprintf_r+0x12c>
 80070f0:	06d1      	lsls	r1, r2, #27
 80070f2:	bf44      	itt	mi
 80070f4:	2320      	movmi	r3, #32
 80070f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070fa:	0713      	lsls	r3, r2, #28
 80070fc:	bf44      	itt	mi
 80070fe:	232b      	movmi	r3, #43	; 0x2b
 8007100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007104:	f89a 3000 	ldrb.w	r3, [sl]
 8007108:	2b2a      	cmp	r3, #42	; 0x2a
 800710a:	d015      	beq.n	8007138 <_vfiprintf_r+0x13c>
 800710c:	9a07      	ldr	r2, [sp, #28]
 800710e:	4654      	mov	r4, sl
 8007110:	2000      	movs	r0, #0
 8007112:	f04f 0c0a 	mov.w	ip, #10
 8007116:	4621      	mov	r1, r4
 8007118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800711c:	3b30      	subs	r3, #48	; 0x30
 800711e:	2b09      	cmp	r3, #9
 8007120:	d94e      	bls.n	80071c0 <_vfiprintf_r+0x1c4>
 8007122:	b1b0      	cbz	r0, 8007152 <_vfiprintf_r+0x156>
 8007124:	9207      	str	r2, [sp, #28]
 8007126:	e014      	b.n	8007152 <_vfiprintf_r+0x156>
 8007128:	eba0 0308 	sub.w	r3, r0, r8
 800712c:	fa09 f303 	lsl.w	r3, r9, r3
 8007130:	4313      	orrs	r3, r2
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	46a2      	mov	sl, r4
 8007136:	e7d2      	b.n	80070de <_vfiprintf_r+0xe2>
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	1d19      	adds	r1, r3, #4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	9103      	str	r1, [sp, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	bfbb      	ittet	lt
 8007144:	425b      	neglt	r3, r3
 8007146:	f042 0202 	orrlt.w	r2, r2, #2
 800714a:	9307      	strge	r3, [sp, #28]
 800714c:	9307      	strlt	r3, [sp, #28]
 800714e:	bfb8      	it	lt
 8007150:	9204      	strlt	r2, [sp, #16]
 8007152:	7823      	ldrb	r3, [r4, #0]
 8007154:	2b2e      	cmp	r3, #46	; 0x2e
 8007156:	d10c      	bne.n	8007172 <_vfiprintf_r+0x176>
 8007158:	7863      	ldrb	r3, [r4, #1]
 800715a:	2b2a      	cmp	r3, #42	; 0x2a
 800715c:	d135      	bne.n	80071ca <_vfiprintf_r+0x1ce>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	1d1a      	adds	r2, r3, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	9203      	str	r2, [sp, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	bfb8      	it	lt
 800716a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800716e:	3402      	adds	r4, #2
 8007170:	9305      	str	r3, [sp, #20]
 8007172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007258 <_vfiprintf_r+0x25c>
 8007176:	7821      	ldrb	r1, [r4, #0]
 8007178:	2203      	movs	r2, #3
 800717a:	4650      	mov	r0, sl
 800717c:	f7f9 f828 	bl	80001d0 <memchr>
 8007180:	b140      	cbz	r0, 8007194 <_vfiprintf_r+0x198>
 8007182:	2340      	movs	r3, #64	; 0x40
 8007184:	eba0 000a 	sub.w	r0, r0, sl
 8007188:	fa03 f000 	lsl.w	r0, r3, r0
 800718c:	9b04      	ldr	r3, [sp, #16]
 800718e:	4303      	orrs	r3, r0
 8007190:	3401      	adds	r4, #1
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007198:	482c      	ldr	r0, [pc, #176]	; (800724c <_vfiprintf_r+0x250>)
 800719a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800719e:	2206      	movs	r2, #6
 80071a0:	f7f9 f816 	bl	80001d0 <memchr>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d03f      	beq.n	8007228 <_vfiprintf_r+0x22c>
 80071a8:	4b29      	ldr	r3, [pc, #164]	; (8007250 <_vfiprintf_r+0x254>)
 80071aa:	bb1b      	cbnz	r3, 80071f4 <_vfiprintf_r+0x1f8>
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	3307      	adds	r3, #7
 80071b0:	f023 0307 	bic.w	r3, r3, #7
 80071b4:	3308      	adds	r3, #8
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ba:	443b      	add	r3, r7
 80071bc:	9309      	str	r3, [sp, #36]	; 0x24
 80071be:	e767      	b.n	8007090 <_vfiprintf_r+0x94>
 80071c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071c4:	460c      	mov	r4, r1
 80071c6:	2001      	movs	r0, #1
 80071c8:	e7a5      	b.n	8007116 <_vfiprintf_r+0x11a>
 80071ca:	2300      	movs	r3, #0
 80071cc:	3401      	adds	r4, #1
 80071ce:	9305      	str	r3, [sp, #20]
 80071d0:	4619      	mov	r1, r3
 80071d2:	f04f 0c0a 	mov.w	ip, #10
 80071d6:	4620      	mov	r0, r4
 80071d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071dc:	3a30      	subs	r2, #48	; 0x30
 80071de:	2a09      	cmp	r2, #9
 80071e0:	d903      	bls.n	80071ea <_vfiprintf_r+0x1ee>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0c5      	beq.n	8007172 <_vfiprintf_r+0x176>
 80071e6:	9105      	str	r1, [sp, #20]
 80071e8:	e7c3      	b.n	8007172 <_vfiprintf_r+0x176>
 80071ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ee:	4604      	mov	r4, r0
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7f0      	b.n	80071d6 <_vfiprintf_r+0x1da>
 80071f4:	ab03      	add	r3, sp, #12
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	462a      	mov	r2, r5
 80071fa:	4b16      	ldr	r3, [pc, #88]	; (8007254 <_vfiprintf_r+0x258>)
 80071fc:	a904      	add	r1, sp, #16
 80071fe:	4630      	mov	r0, r6
 8007200:	f3af 8000 	nop.w
 8007204:	4607      	mov	r7, r0
 8007206:	1c78      	adds	r0, r7, #1
 8007208:	d1d6      	bne.n	80071b8 <_vfiprintf_r+0x1bc>
 800720a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800720c:	07d9      	lsls	r1, r3, #31
 800720e:	d405      	bmi.n	800721c <_vfiprintf_r+0x220>
 8007210:	89ab      	ldrh	r3, [r5, #12]
 8007212:	059a      	lsls	r2, r3, #22
 8007214:	d402      	bmi.n	800721c <_vfiprintf_r+0x220>
 8007216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007218:	f7ff fdb7 	bl	8006d8a <__retarget_lock_release_recursive>
 800721c:	89ab      	ldrh	r3, [r5, #12]
 800721e:	065b      	lsls	r3, r3, #25
 8007220:	f53f af12 	bmi.w	8007048 <_vfiprintf_r+0x4c>
 8007224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007226:	e711      	b.n	800704c <_vfiprintf_r+0x50>
 8007228:	ab03      	add	r3, sp, #12
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	462a      	mov	r2, r5
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <_vfiprintf_r+0x258>)
 8007230:	a904      	add	r1, sp, #16
 8007232:	4630      	mov	r0, r6
 8007234:	f000 f880 	bl	8007338 <_printf_i>
 8007238:	e7e4      	b.n	8007204 <_vfiprintf_r+0x208>
 800723a:	bf00      	nop
 800723c:	0800793c 	.word	0x0800793c
 8007240:	0800795c 	.word	0x0800795c
 8007244:	0800791c 	.word	0x0800791c
 8007248:	0800797c 	.word	0x0800797c
 800724c:	08007986 	.word	0x08007986
 8007250:	00000000 	.word	0x00000000
 8007254:	08006fd7 	.word	0x08006fd7
 8007258:	08007982 	.word	0x08007982

0800725c <_printf_common>:
 800725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007260:	4616      	mov	r6, r2
 8007262:	4699      	mov	r9, r3
 8007264:	688a      	ldr	r2, [r1, #8]
 8007266:	690b      	ldr	r3, [r1, #16]
 8007268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800726c:	4293      	cmp	r3, r2
 800726e:	bfb8      	it	lt
 8007270:	4613      	movlt	r3, r2
 8007272:	6033      	str	r3, [r6, #0]
 8007274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007278:	4607      	mov	r7, r0
 800727a:	460c      	mov	r4, r1
 800727c:	b10a      	cbz	r2, 8007282 <_printf_common+0x26>
 800727e:	3301      	adds	r3, #1
 8007280:	6033      	str	r3, [r6, #0]
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	0699      	lsls	r1, r3, #26
 8007286:	bf42      	ittt	mi
 8007288:	6833      	ldrmi	r3, [r6, #0]
 800728a:	3302      	addmi	r3, #2
 800728c:	6033      	strmi	r3, [r6, #0]
 800728e:	6825      	ldr	r5, [r4, #0]
 8007290:	f015 0506 	ands.w	r5, r5, #6
 8007294:	d106      	bne.n	80072a4 <_printf_common+0x48>
 8007296:	f104 0a19 	add.w	sl, r4, #25
 800729a:	68e3      	ldr	r3, [r4, #12]
 800729c:	6832      	ldr	r2, [r6, #0]
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	dc26      	bgt.n	80072f2 <_printf_common+0x96>
 80072a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072a8:	1e13      	subs	r3, r2, #0
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	bf18      	it	ne
 80072ae:	2301      	movne	r3, #1
 80072b0:	0692      	lsls	r2, r2, #26
 80072b2:	d42b      	bmi.n	800730c <_printf_common+0xb0>
 80072b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072b8:	4649      	mov	r1, r9
 80072ba:	4638      	mov	r0, r7
 80072bc:	47c0      	blx	r8
 80072be:	3001      	adds	r0, #1
 80072c0:	d01e      	beq.n	8007300 <_printf_common+0xa4>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	68e5      	ldr	r5, [r4, #12]
 80072c6:	6832      	ldr	r2, [r6, #0]
 80072c8:	f003 0306 	and.w	r3, r3, #6
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	bf08      	it	eq
 80072d0:	1aad      	subeq	r5, r5, r2
 80072d2:	68a3      	ldr	r3, [r4, #8]
 80072d4:	6922      	ldr	r2, [r4, #16]
 80072d6:	bf0c      	ite	eq
 80072d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072dc:	2500      	movne	r5, #0
 80072de:	4293      	cmp	r3, r2
 80072e0:	bfc4      	itt	gt
 80072e2:	1a9b      	subgt	r3, r3, r2
 80072e4:	18ed      	addgt	r5, r5, r3
 80072e6:	2600      	movs	r6, #0
 80072e8:	341a      	adds	r4, #26
 80072ea:	42b5      	cmp	r5, r6
 80072ec:	d11a      	bne.n	8007324 <_printf_common+0xc8>
 80072ee:	2000      	movs	r0, #0
 80072f0:	e008      	b.n	8007304 <_printf_common+0xa8>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4652      	mov	r2, sl
 80072f6:	4649      	mov	r1, r9
 80072f8:	4638      	mov	r0, r7
 80072fa:	47c0      	blx	r8
 80072fc:	3001      	adds	r0, #1
 80072fe:	d103      	bne.n	8007308 <_printf_common+0xac>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007308:	3501      	adds	r5, #1
 800730a:	e7c6      	b.n	800729a <_printf_common+0x3e>
 800730c:	18e1      	adds	r1, r4, r3
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	2030      	movs	r0, #48	; 0x30
 8007312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007316:	4422      	add	r2, r4
 8007318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800731c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007320:	3302      	adds	r3, #2
 8007322:	e7c7      	b.n	80072b4 <_printf_common+0x58>
 8007324:	2301      	movs	r3, #1
 8007326:	4622      	mov	r2, r4
 8007328:	4649      	mov	r1, r9
 800732a:	4638      	mov	r0, r7
 800732c:	47c0      	blx	r8
 800732e:	3001      	adds	r0, #1
 8007330:	d0e6      	beq.n	8007300 <_printf_common+0xa4>
 8007332:	3601      	adds	r6, #1
 8007334:	e7d9      	b.n	80072ea <_printf_common+0x8e>
	...

08007338 <_printf_i>:
 8007338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	460c      	mov	r4, r1
 800733e:	4691      	mov	r9, r2
 8007340:	7e27      	ldrb	r7, [r4, #24]
 8007342:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007344:	2f78      	cmp	r7, #120	; 0x78
 8007346:	4680      	mov	r8, r0
 8007348:	469a      	mov	sl, r3
 800734a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800734e:	d807      	bhi.n	8007360 <_printf_i+0x28>
 8007350:	2f62      	cmp	r7, #98	; 0x62
 8007352:	d80a      	bhi.n	800736a <_printf_i+0x32>
 8007354:	2f00      	cmp	r7, #0
 8007356:	f000 80d8 	beq.w	800750a <_printf_i+0x1d2>
 800735a:	2f58      	cmp	r7, #88	; 0x58
 800735c:	f000 80a3 	beq.w	80074a6 <_printf_i+0x16e>
 8007360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007368:	e03a      	b.n	80073e0 <_printf_i+0xa8>
 800736a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800736e:	2b15      	cmp	r3, #21
 8007370:	d8f6      	bhi.n	8007360 <_printf_i+0x28>
 8007372:	a001      	add	r0, pc, #4	; (adr r0, 8007378 <_printf_i+0x40>)
 8007374:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007378:	080073d1 	.word	0x080073d1
 800737c:	080073e5 	.word	0x080073e5
 8007380:	08007361 	.word	0x08007361
 8007384:	08007361 	.word	0x08007361
 8007388:	08007361 	.word	0x08007361
 800738c:	08007361 	.word	0x08007361
 8007390:	080073e5 	.word	0x080073e5
 8007394:	08007361 	.word	0x08007361
 8007398:	08007361 	.word	0x08007361
 800739c:	08007361 	.word	0x08007361
 80073a0:	08007361 	.word	0x08007361
 80073a4:	080074f1 	.word	0x080074f1
 80073a8:	08007415 	.word	0x08007415
 80073ac:	080074d3 	.word	0x080074d3
 80073b0:	08007361 	.word	0x08007361
 80073b4:	08007361 	.word	0x08007361
 80073b8:	08007513 	.word	0x08007513
 80073bc:	08007361 	.word	0x08007361
 80073c0:	08007415 	.word	0x08007415
 80073c4:	08007361 	.word	0x08007361
 80073c8:	08007361 	.word	0x08007361
 80073cc:	080074db 	.word	0x080074db
 80073d0:	680b      	ldr	r3, [r1, #0]
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	600a      	str	r2, [r1, #0]
 80073d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0a3      	b.n	800752c <_printf_i+0x1f4>
 80073e4:	6825      	ldr	r5, [r4, #0]
 80073e6:	6808      	ldr	r0, [r1, #0]
 80073e8:	062e      	lsls	r6, r5, #24
 80073ea:	f100 0304 	add.w	r3, r0, #4
 80073ee:	d50a      	bpl.n	8007406 <_printf_i+0xce>
 80073f0:	6805      	ldr	r5, [r0, #0]
 80073f2:	600b      	str	r3, [r1, #0]
 80073f4:	2d00      	cmp	r5, #0
 80073f6:	da03      	bge.n	8007400 <_printf_i+0xc8>
 80073f8:	232d      	movs	r3, #45	; 0x2d
 80073fa:	426d      	negs	r5, r5
 80073fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007400:	485e      	ldr	r0, [pc, #376]	; (800757c <_printf_i+0x244>)
 8007402:	230a      	movs	r3, #10
 8007404:	e019      	b.n	800743a <_printf_i+0x102>
 8007406:	f015 0f40 	tst.w	r5, #64	; 0x40
 800740a:	6805      	ldr	r5, [r0, #0]
 800740c:	600b      	str	r3, [r1, #0]
 800740e:	bf18      	it	ne
 8007410:	b22d      	sxthne	r5, r5
 8007412:	e7ef      	b.n	80073f4 <_printf_i+0xbc>
 8007414:	680b      	ldr	r3, [r1, #0]
 8007416:	6825      	ldr	r5, [r4, #0]
 8007418:	1d18      	adds	r0, r3, #4
 800741a:	6008      	str	r0, [r1, #0]
 800741c:	0628      	lsls	r0, r5, #24
 800741e:	d501      	bpl.n	8007424 <_printf_i+0xec>
 8007420:	681d      	ldr	r5, [r3, #0]
 8007422:	e002      	b.n	800742a <_printf_i+0xf2>
 8007424:	0669      	lsls	r1, r5, #25
 8007426:	d5fb      	bpl.n	8007420 <_printf_i+0xe8>
 8007428:	881d      	ldrh	r5, [r3, #0]
 800742a:	4854      	ldr	r0, [pc, #336]	; (800757c <_printf_i+0x244>)
 800742c:	2f6f      	cmp	r7, #111	; 0x6f
 800742e:	bf0c      	ite	eq
 8007430:	2308      	moveq	r3, #8
 8007432:	230a      	movne	r3, #10
 8007434:	2100      	movs	r1, #0
 8007436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800743a:	6866      	ldr	r6, [r4, #4]
 800743c:	60a6      	str	r6, [r4, #8]
 800743e:	2e00      	cmp	r6, #0
 8007440:	bfa2      	ittt	ge
 8007442:	6821      	ldrge	r1, [r4, #0]
 8007444:	f021 0104 	bicge.w	r1, r1, #4
 8007448:	6021      	strge	r1, [r4, #0]
 800744a:	b90d      	cbnz	r5, 8007450 <_printf_i+0x118>
 800744c:	2e00      	cmp	r6, #0
 800744e:	d04d      	beq.n	80074ec <_printf_i+0x1b4>
 8007450:	4616      	mov	r6, r2
 8007452:	fbb5 f1f3 	udiv	r1, r5, r3
 8007456:	fb03 5711 	mls	r7, r3, r1, r5
 800745a:	5dc7      	ldrb	r7, [r0, r7]
 800745c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007460:	462f      	mov	r7, r5
 8007462:	42bb      	cmp	r3, r7
 8007464:	460d      	mov	r5, r1
 8007466:	d9f4      	bls.n	8007452 <_printf_i+0x11a>
 8007468:	2b08      	cmp	r3, #8
 800746a:	d10b      	bne.n	8007484 <_printf_i+0x14c>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	07df      	lsls	r7, r3, #31
 8007470:	d508      	bpl.n	8007484 <_printf_i+0x14c>
 8007472:	6923      	ldr	r3, [r4, #16]
 8007474:	6861      	ldr	r1, [r4, #4]
 8007476:	4299      	cmp	r1, r3
 8007478:	bfde      	ittt	le
 800747a:	2330      	movle	r3, #48	; 0x30
 800747c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007480:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007484:	1b92      	subs	r2, r2, r6
 8007486:	6122      	str	r2, [r4, #16]
 8007488:	f8cd a000 	str.w	sl, [sp]
 800748c:	464b      	mov	r3, r9
 800748e:	aa03      	add	r2, sp, #12
 8007490:	4621      	mov	r1, r4
 8007492:	4640      	mov	r0, r8
 8007494:	f7ff fee2 	bl	800725c <_printf_common>
 8007498:	3001      	adds	r0, #1
 800749a:	d14c      	bne.n	8007536 <_printf_i+0x1fe>
 800749c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074a0:	b004      	add	sp, #16
 80074a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a6:	4835      	ldr	r0, [pc, #212]	; (800757c <_printf_i+0x244>)
 80074a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	680e      	ldr	r6, [r1, #0]
 80074b0:	061f      	lsls	r7, r3, #24
 80074b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80074b6:	600e      	str	r6, [r1, #0]
 80074b8:	d514      	bpl.n	80074e4 <_printf_i+0x1ac>
 80074ba:	07d9      	lsls	r1, r3, #31
 80074bc:	bf44      	itt	mi
 80074be:	f043 0320 	orrmi.w	r3, r3, #32
 80074c2:	6023      	strmi	r3, [r4, #0]
 80074c4:	b91d      	cbnz	r5, 80074ce <_printf_i+0x196>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f023 0320 	bic.w	r3, r3, #32
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	2310      	movs	r3, #16
 80074d0:	e7b0      	b.n	8007434 <_printf_i+0xfc>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	f043 0320 	orr.w	r3, r3, #32
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	2378      	movs	r3, #120	; 0x78
 80074dc:	4828      	ldr	r0, [pc, #160]	; (8007580 <_printf_i+0x248>)
 80074de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074e2:	e7e3      	b.n	80074ac <_printf_i+0x174>
 80074e4:	065e      	lsls	r6, r3, #25
 80074e6:	bf48      	it	mi
 80074e8:	b2ad      	uxthmi	r5, r5
 80074ea:	e7e6      	b.n	80074ba <_printf_i+0x182>
 80074ec:	4616      	mov	r6, r2
 80074ee:	e7bb      	b.n	8007468 <_printf_i+0x130>
 80074f0:	680b      	ldr	r3, [r1, #0]
 80074f2:	6826      	ldr	r6, [r4, #0]
 80074f4:	6960      	ldr	r0, [r4, #20]
 80074f6:	1d1d      	adds	r5, r3, #4
 80074f8:	600d      	str	r5, [r1, #0]
 80074fa:	0635      	lsls	r5, r6, #24
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	d501      	bpl.n	8007504 <_printf_i+0x1cc>
 8007500:	6018      	str	r0, [r3, #0]
 8007502:	e002      	b.n	800750a <_printf_i+0x1d2>
 8007504:	0671      	lsls	r1, r6, #25
 8007506:	d5fb      	bpl.n	8007500 <_printf_i+0x1c8>
 8007508:	8018      	strh	r0, [r3, #0]
 800750a:	2300      	movs	r3, #0
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	4616      	mov	r6, r2
 8007510:	e7ba      	b.n	8007488 <_printf_i+0x150>
 8007512:	680b      	ldr	r3, [r1, #0]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	600a      	str	r2, [r1, #0]
 8007518:	681e      	ldr	r6, [r3, #0]
 800751a:	6862      	ldr	r2, [r4, #4]
 800751c:	2100      	movs	r1, #0
 800751e:	4630      	mov	r0, r6
 8007520:	f7f8 fe56 	bl	80001d0 <memchr>
 8007524:	b108      	cbz	r0, 800752a <_printf_i+0x1f2>
 8007526:	1b80      	subs	r0, r0, r6
 8007528:	6060      	str	r0, [r4, #4]
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	6123      	str	r3, [r4, #16]
 800752e:	2300      	movs	r3, #0
 8007530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007534:	e7a8      	b.n	8007488 <_printf_i+0x150>
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	4632      	mov	r2, r6
 800753a:	4649      	mov	r1, r9
 800753c:	4640      	mov	r0, r8
 800753e:	47d0      	blx	sl
 8007540:	3001      	adds	r0, #1
 8007542:	d0ab      	beq.n	800749c <_printf_i+0x164>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	079b      	lsls	r3, r3, #30
 8007548:	d413      	bmi.n	8007572 <_printf_i+0x23a>
 800754a:	68e0      	ldr	r0, [r4, #12]
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	4298      	cmp	r0, r3
 8007550:	bfb8      	it	lt
 8007552:	4618      	movlt	r0, r3
 8007554:	e7a4      	b.n	80074a0 <_printf_i+0x168>
 8007556:	2301      	movs	r3, #1
 8007558:	4632      	mov	r2, r6
 800755a:	4649      	mov	r1, r9
 800755c:	4640      	mov	r0, r8
 800755e:	47d0      	blx	sl
 8007560:	3001      	adds	r0, #1
 8007562:	d09b      	beq.n	800749c <_printf_i+0x164>
 8007564:	3501      	adds	r5, #1
 8007566:	68e3      	ldr	r3, [r4, #12]
 8007568:	9903      	ldr	r1, [sp, #12]
 800756a:	1a5b      	subs	r3, r3, r1
 800756c:	42ab      	cmp	r3, r5
 800756e:	dcf2      	bgt.n	8007556 <_printf_i+0x21e>
 8007570:	e7eb      	b.n	800754a <_printf_i+0x212>
 8007572:	2500      	movs	r5, #0
 8007574:	f104 0619 	add.w	r6, r4, #25
 8007578:	e7f5      	b.n	8007566 <_printf_i+0x22e>
 800757a:	bf00      	nop
 800757c:	0800798d 	.word	0x0800798d
 8007580:	0800799e 	.word	0x0800799e

08007584 <_sbrk_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d06      	ldr	r5, [pc, #24]	; (80075a0 <_sbrk_r+0x1c>)
 8007588:	2300      	movs	r3, #0
 800758a:	4604      	mov	r4, r0
 800758c:	4608      	mov	r0, r1
 800758e:	602b      	str	r3, [r5, #0]
 8007590:	f7f9 faf2 	bl	8000b78 <_sbrk>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_sbrk_r+0x1a>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_sbrk_r+0x1a>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	20001a98 	.word	0x20001a98

080075a4 <__sread>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	460c      	mov	r4, r1
 80075a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ac:	f000 f8a0 	bl	80076f0 <_read_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	bfab      	itete	ge
 80075b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075b6:	89a3      	ldrhlt	r3, [r4, #12]
 80075b8:	181b      	addge	r3, r3, r0
 80075ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075be:	bfac      	ite	ge
 80075c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80075c2:	81a3      	strhlt	r3, [r4, #12]
 80075c4:	bd10      	pop	{r4, pc}

080075c6 <__swrite>:
 80075c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ca:	461f      	mov	r7, r3
 80075cc:	898b      	ldrh	r3, [r1, #12]
 80075ce:	05db      	lsls	r3, r3, #23
 80075d0:	4605      	mov	r5, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	4616      	mov	r6, r2
 80075d6:	d505      	bpl.n	80075e4 <__swrite+0x1e>
 80075d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075dc:	2302      	movs	r3, #2
 80075de:	2200      	movs	r2, #0
 80075e0:	f000 f868 	bl	80076b4 <_lseek_r>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ee:	81a3      	strh	r3, [r4, #12]
 80075f0:	4632      	mov	r2, r6
 80075f2:	463b      	mov	r3, r7
 80075f4:	4628      	mov	r0, r5
 80075f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075fa:	f000 b817 	b.w	800762c <_write_r>

080075fe <__sseek>:
 80075fe:	b510      	push	{r4, lr}
 8007600:	460c      	mov	r4, r1
 8007602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007606:	f000 f855 	bl	80076b4 <_lseek_r>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	bf15      	itete	ne
 8007610:	6560      	strne	r0, [r4, #84]	; 0x54
 8007612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800761a:	81a3      	strheq	r3, [r4, #12]
 800761c:	bf18      	it	ne
 800761e:	81a3      	strhne	r3, [r4, #12]
 8007620:	bd10      	pop	{r4, pc}

08007622 <__sclose>:
 8007622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007626:	f000 b813 	b.w	8007650 <_close_r>
	...

0800762c <_write_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	; (800764c <_write_r+0x20>)
 8007630:	4604      	mov	r4, r0
 8007632:	4608      	mov	r0, r1
 8007634:	4611      	mov	r1, r2
 8007636:	2200      	movs	r2, #0
 8007638:	602a      	str	r2, [r5, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	f7f9 fa4b 	bl	8000ad6 <_write>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_write_r+0x1e>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_write_r+0x1e>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20001a98 	.word	0x20001a98

08007650 <_close_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d06      	ldr	r5, [pc, #24]	; (800766c <_close_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7f9 fa57 	bl	8000b0e <_close>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_close_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_close_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	20001a98 	.word	0x20001a98

08007670 <_fstat_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d07      	ldr	r5, [pc, #28]	; (8007690 <_fstat_r+0x20>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	f7f9 fa52 	bl	8000b26 <_fstat>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	d102      	bne.n	800768c <_fstat_r+0x1c>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	b103      	cbz	r3, 800768c <_fstat_r+0x1c>
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	bf00      	nop
 8007690:	20001a98 	.word	0x20001a98

08007694 <_isatty_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d06      	ldr	r5, [pc, #24]	; (80076b0 <_isatty_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	f7f9 fa51 	bl	8000b46 <_isatty>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_isatty_r+0x1a>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_isatty_r+0x1a>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	20001a98 	.word	0x20001a98

080076b4 <_lseek_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d07      	ldr	r5, [pc, #28]	; (80076d4 <_lseek_r+0x20>)
 80076b8:	4604      	mov	r4, r0
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	602a      	str	r2, [r5, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7f9 fa4a 	bl	8000b5c <_lseek>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_lseek_r+0x1e>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_lseek_r+0x1e>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20001a98 	.word	0x20001a98

080076d8 <__malloc_lock>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__malloc_lock+0x8>)
 80076da:	f7ff bb55 	b.w	8006d88 <__retarget_lock_acquire_recursive>
 80076de:	bf00      	nop
 80076e0:	20001a90 	.word	0x20001a90

080076e4 <__malloc_unlock>:
 80076e4:	4801      	ldr	r0, [pc, #4]	; (80076ec <__malloc_unlock+0x8>)
 80076e6:	f7ff bb50 	b.w	8006d8a <__retarget_lock_release_recursive>
 80076ea:	bf00      	nop
 80076ec:	20001a90 	.word	0x20001a90

080076f0 <_read_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d07      	ldr	r5, [pc, #28]	; (8007710 <_read_r+0x20>)
 80076f4:	4604      	mov	r4, r0
 80076f6:	4608      	mov	r0, r1
 80076f8:	4611      	mov	r1, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	602a      	str	r2, [r5, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f7f9 f9cc 	bl	8000a9c <_read>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_read_r+0x1e>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_read_r+0x1e>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	20001a98 	.word	0x20001a98

08007714 <_init>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr

08007720 <_fini>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr
