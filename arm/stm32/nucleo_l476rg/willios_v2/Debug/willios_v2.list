
willios_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006690  08006690  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006698  08006698  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006698  08006698  00016698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080066a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000000c  080066b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  080066b4  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f71  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bd  00000000  00000000  00034fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00037470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00038388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b33  00000000  00000000  000391d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ba5  00000000  00000000  00062d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6852  00000000  00000000  000738b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e4  00000000  00000000  0016a158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006260 	.word	0x08006260

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006260 	.word	0x08006260

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d06:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d0a:	f004 fcf1 	bl	80056f0 <tanf>
 8000d0e:	eef0 7a40 	vmov.f32	s15, s0
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_ZN7WS2812BC1EmmP17TIM_HandleTypeDef>:

	LEDData _colorData[WS2812B_LED_COUNT];
	LEDData _brightnessData[WS2812B_LED_COUNT];

public:
	WS2812B(uint32_t frequency, uint32_t ledCount, TIM_HandleTypeDef* timer) : _FREQUENCY(frequency), _LED_COUNT(ledCount), _timer(timer) {}
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_ZN7WS2812BD1Ev>:
	~WS2812B() {}
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_ZN7WS2812B8setColorEhhhh>:
	}
	*/



	void setColor(uint8_t index, uint8_t red, uint8_t green, uint8_t blue)
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4603      	mov	r3, r0
 8000d70:	70fb      	strb	r3, [r7, #3]
 8000d72:	460b      	mov	r3, r1
 8000d74:	70bb      	strb	r3, [r7, #2]
 8000d76:	4613      	mov	r3, r2
 8000d78:	707b      	strb	r3, [r7, #1]
	{
		this->_colorData[index].index = index;
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	3376      	adds	r3, #118	; 0x76
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	78fa      	ldrb	r2, [r7, #3]
 8000d86:	725a      	strb	r2, [r3, #9]
		this->_colorData[index].green = green;
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	3376      	adds	r3, #118	; 0x76
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	787a      	ldrb	r2, [r7, #1]
 8000d94:	719a      	strb	r2, [r3, #6]
		this->_colorData[index].red = red;
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	3376      	adds	r3, #118	; 0x76
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	78ba      	ldrb	r2, [r7, #2]
 8000da2:	71da      	strb	r2, [r3, #7]
		this->_colorData[index].blue = blue;
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	3376      	adds	r3, #118	; 0x76
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	7c3a      	ldrb	r2, [r7, #16]
 8000db0:	721a      	strb	r2, [r3, #8]
	}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_ZN7WS2812B13setBrightnessEh>:


	void setBrightness(uint8_t brightness)
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	ed2d 8b02 	vpush	{d8}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	72fb      	strb	r3, [r7, #11]
	{
	#if WS2812B_USE_BRIGHTNESS
		if (brightness > 45) brightness = 45;
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	2b2d      	cmp	r3, #45	; 0x2d
 8000dd4:	d901      	bls.n	8000dda <_ZN7WS2812B13setBrightnessEh+0x1a>
 8000dd6:	232d      	movs	r3, #45	; 0x2d
 8000dd8:	72fb      	strb	r3, [r7, #11]
		for (int i = 0; i < this->_LED_COUNT; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f240 8090 	bls.w	8000f0a <_ZN7WS2812B13setBrightnessEh+0x14a>
		{
			this->_brightnessData[i].index = this->_colorData[i].index;
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3376      	adds	r3, #118	; 0x76
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	7a59      	ldrb	r1, [r3, #9]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	337e      	adds	r3, #126	; 0x7e
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	460a      	mov	r2, r1
 8000e02:	725a      	strb	r2, [r3, #9]
			float angle = 90 - brightness;
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e12:	edc7 7a04 	vstr	s15, [r7, #16]
			angle = angle*M_PI / 180;
 8000e16:	6938      	ldr	r0, [r7, #16]
 8000e18:	f7ff fb3a 	bl	8000490 <__aeabi_f2d>
 8000e1c:	a33f      	add	r3, pc, #252	; (adr r3, 8000f1c <_ZN7WS2812B13setBrightnessEh+0x15c>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fb8d 	bl	8000540 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <_ZN7WS2812B13setBrightnessEh+0x158>)
 8000e34:	f7ff fcae 	bl	8000794 <__aeabi_ddiv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fd90 	bl	8000964 <__aeabi_d2f>
 8000e44:	4603      	mov	r3, r0
 8000e46:	613b      	str	r3, [r7, #16]
			this->_brightnessData[i].green = (this->_colorData[i].green)/(tan(angle));
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3376      	adds	r3, #118	; 0x76
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	799b      	ldrb	r3, [r3, #6]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e5c:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e60:	f7ff ff4c 	bl	8000cfc <_ZSt3tanf>
 8000e64:	eeb0 7a40 	vmov.f32	s14, s0
 8000e68:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e70:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e74:	793b      	ldrb	r3, [r7, #4]
 8000e76:	b2d9      	uxtb	r1, r3
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	337e      	adds	r3, #126	; 0x7e
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	460a      	mov	r2, r1
 8000e84:	719a      	strb	r2, [r3, #6]
			this->_brightnessData[i].red = (this->_colorData[i].red)/(tan(angle));
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3376      	adds	r3, #118	; 0x76
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	79db      	ldrb	r3, [r3, #7]
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e9a:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e9e:	f7ff ff2d 	bl	8000cfc <_ZSt3tanf>
 8000ea2:	eeb0 7a40 	vmov.f32	s14, s0
 8000ea6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eae:	edc7 7a01 	vstr	s15, [r7, #4]
 8000eb2:	793b      	ldrb	r3, [r7, #4]
 8000eb4:	b2d9      	uxtb	r1, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	337e      	adds	r3, #126	; 0x7e
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	71da      	strb	r2, [r3, #7]
			this->_brightnessData[i].blue = (this->_colorData[i].blue)/(tan(angle));
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3376      	adds	r3, #118	; 0x76
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	7a1b      	ldrb	r3, [r3, #8]
 8000ed0:	ee07 3a90 	vmov	s15, r3
 8000ed4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000ed8:	ed97 0a04 	vldr	s0, [r7, #16]
 8000edc:	f7ff ff0e 	bl	8000cfc <_ZSt3tanf>
 8000ee0:	eeb0 7a40 	vmov.f32	s14, s0
 8000ee4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eec:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ef0:	793b      	ldrb	r3, [r7, #4]
 8000ef2:	b2d9      	uxtb	r1, r3
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	337e      	adds	r3, #126	; 0x7e
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	460a      	mov	r2, r1
 8000f00:	721a      	strb	r2, [r3, #8]
		for (int i = 0; i < this->_LED_COUNT; i++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e769      	b.n	8000dde <_ZN7WS2812B13setBrightnessEh+0x1e>
			this->_brightnessData[i].green = this->_colorData[i].green;
			this->_brightnessData[i].red = this->_colorData[i].red;
			this->_brightnessData[i].blue = this->_colorData[i].blue;
		}
	#endif
	}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	ecbd 8b02 	vpop	{d8}
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40668000 	.word	0x40668000
 8000f1c:	54442d18 	.word	0x54442d18
 8000f20:	400921fb 	.word	0x400921fb

08000f24 <_ZN7WS2812B10resetColorEh>:




	void resetColor(uint8_t index)
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
	{
		this->_colorData[index].green = 0;
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	3376      	adds	r3, #118	; 0x76
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	719a      	strb	r2, [r3, #6]
		this->_colorData[index].red = 0;
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	3376      	adds	r3, #118	; 0x76
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	2200      	movs	r2, #0
 8000f4a:	71da      	strb	r2, [r3, #7]
		this->_colorData[index].blue = 0;
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	3376      	adds	r3, #118	; 0x76
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	2200      	movs	r2, #0
 8000f58:	721a      	strb	r2, [r3, #8]
	}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_ZN7WS2812B11resetColorsEv>:

	void resetColors()
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	{
		for (int i = 0; i < this->_LED_COUNT; i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d909      	bls.n	8000f90 <_ZN7WS2812B11resetColorsEv+0x2a>
		{
			this->resetColor(i);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	4619      	mov	r1, r3
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffce 	bl	8000f24 <_ZN7WS2812B10resetColorEh>
		for (int i = 0; i < this->_LED_COUNT; i++)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	e7f0      	b.n	8000f72 <_ZN7WS2812B11resetColorsEv+0xc>
		}
	}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_ZN7WS2812B6updateEv>:

	void update()
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	{
		uint32_t colorData = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
		int32_t bit_index = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]

		for (int led_index = 0; led_index < this->_LED_COUNT; led_index++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d93e      	bls.n	8001034 <_ZN7WS2812B6updateEv+0x9c>
		{
			colorData = (((uint32_t)this->_brightnessData[led_index].green << 16) | ((uint32_t)this->_brightnessData[led_index].red << 8) | ((uint32_t)this->_brightnessData[led_index].blue << 0));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	337e      	adds	r3, #126	; 0x7e
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	799b      	ldrb	r3, [r3, #6]
 8000fc2:	041a      	lsls	r2, r3, #16
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	337e      	adds	r3, #126	; 0x7e
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	79db      	ldrb	r3, [r3, #7]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	337e      	adds	r3, #126	; 0x7e
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	7a1b      	ldrb	r3, [r3, #8]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
			//colorData = (((uint32_t)this->_colorData[led_index].green << 16) | ((uint32_t)this->_colorData[led_index].red << 8) | ((uint32_t)this->_colorData[led_index].blue << 0));

			for (int j = 23; j >= 0; j--)
 8000fe4:	2317      	movs	r3, #23
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db1e      	blt.n	800102c <_ZN7WS2812B6updateEv+0x94>
			{
				if (colorData & (1 << j))
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <_ZN7WS2812B6updateEv+0x78>
				{
					this->_pwmData[bit_index] = WS2812B_T1H_TICKS;
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	2240      	movs	r2, #64	; 0x40
 800100c:	809a      	strh	r2, [r3, #4]
 800100e:	e006      	b.n	800101e <_ZN7WS2812B6updateEv+0x86>
				}
				else
				{
					this->_pwmData[bit_index] = WS2812B_T0H_TICKS;
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	2220      	movs	r2, #32
 800101c:	809a      	strh	r2, [r3, #4]
				}
				bit_index++;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
			for (int j = 23; j >= 0; j--)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3b01      	subs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e7dd      	b.n	8000fe8 <_ZN7WS2812B6updateEv+0x50>
		for (int led_index = 0; led_index < this->_LED_COUNT; led_index++)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	3301      	adds	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	e7bb      	b.n	8000fac <_ZN7WS2812B6updateEv+0x14>
			}
		}


		for (int32_t resetCount = 0; resetCount < WS2812B_RESET_PERIOD_COUNT; resetCount++)
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2b28      	cmp	r3, #40	; 0x28
 800103c:	d80c      	bhi.n	8001058 <_ZN7WS2812B6updateEv+0xc0>
		{
				this->_pwmData[bit_index++] = 0;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	61fa      	str	r2, [r7, #28]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	3304      	adds	r3, #4
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	2200      	movs	r2, #0
 800104e:	809a      	strh	r2, [r3, #4]
		for (int32_t resetCount = 0; resetCount < WS2812B_RESET_PERIOD_COUNT; resetCount++)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	3301      	adds	r3, #1
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e7ef      	b.n	8001038 <_ZN7WS2812B6updateEv+0xa0>
		}


		HAL_TIM_PWM_Start_DMA(this->_timer, WS2812B_TIMER_CHANNEL, (uint32_t*)this->_pwmData, bit_index);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6898      	ldr	r0, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f103 020c 	add.w	r2, r3, #12
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	b29b      	uxth	r3, r3
 8001066:	2100      	movs	r1, #0
 8001068:	f002 fde6 	bl	8003c38 <HAL_TIM_PWM_Start_DMA>

		HAL_Delay(100);
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f000 fd37 	bl	8001ae0 <HAL_Delay>
		// BLOCK for a period of time

		// RESET
		 resetColors();
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff77 	bl	8000f66 <_ZN7WS2812B11resetColorsEv>
	}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f000 fcaf 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f847 	bl	800111c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 f9f5 	bl	800147c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001092:	f000 f9cd 	bl	8001430 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001096:	f000 f997 	bl	80013c8 <_ZL19MX_USART3_UART_Initv>
  MX_TIM3_Init();
 800109a:	f000 f8c5 	bl	8001228 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800109e:	f000 f92b 	bl	80012f8 <_ZL12MX_TIM4_Initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80010a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a6:	481a      	ldr	r0, [pc, #104]	; (8001110 <main+0x90>)
 80010a8:	f001 fa4a 	bl	8002540 <HAL_GPIO_TogglePin>
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	4818      	ldr	r0, [pc, #96]	; (8001114 <main+0x94>)
 80010b2:	f001 fa45 	bl	8002540 <HAL_GPIO_TogglePin>
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	4816      	ldr	r0, [pc, #88]	; (8001114 <main+0x94>)
 80010ba:	f001 fa41 	bl	8002540 <HAL_GPIO_TogglePin>
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <main+0x94>)
 80010c2:	f001 fa3d 	bl	8002540 <HAL_GPIO_TogglePin>
  	HAL_Delay(500);
 80010c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ca:	f000 fd09 	bl	8001ae0 <HAL_Delay>



  	ws2812b.setColor(0, 0, 255, 0);
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	480f      	ldr	r0, [pc, #60]	; (8001118 <main+0x98>)
 80010da:	f7ff fe41 	bl	8000d60 <_ZN7WS2812B8setColorEhhhh>
  	ws2812b.setColor(1, 255, 255, 0);
 80010de:	2300      	movs	r3, #0
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	22ff      	movs	r2, #255	; 0xff
 80010e6:	2101      	movs	r1, #1
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <main+0x98>)
 80010ea:	f7ff fe39 	bl	8000d60 <_ZN7WS2812B8setColorEhhhh>
  	ws2812b.setColor(2, 255, 0, 0);
 80010ee:	2300      	movs	r3, #0
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	2102      	movs	r1, #2
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <main+0x98>)
 80010fa:	f7ff fe31 	bl	8000d60 <_ZN7WS2812B8setColorEhhhh>

  	ws2812b.setBrightness(1);
 80010fe:	2101      	movs	r1, #1
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <main+0x98>)
 8001102:	f7ff fe5d 	bl	8000dc0 <_ZN7WS2812B13setBrightnessEh>
  	ws2812b.update();
 8001106:	4804      	ldr	r0, [pc, #16]	; (8001118 <main+0x98>)
 8001108:	f7ff ff46 	bl	8000f98 <_ZN7WS2812B6updateEv>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800110c:	e7c9      	b.n	80010a2 <main+0x22>
 800110e:	bf00      	nop
 8001110:	48000400 	.word	0x48000400
 8001114:	48000800 	.word	0x48000800
 8001118:	200001d4 	.word	0x200001d4

0800111c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b0b8      	sub	sp, #224	; 0xe0
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001126:	2244      	movs	r2, #68	; 0x44
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f005 f890 	bl	8006250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2288      	movs	r2, #136	; 0x88
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f005 f882 	bl	8006250 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114c:	2301      	movs	r3, #1
 800114e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001160:	2303      	movs	r3, #3
 8001162:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800116c:	230a      	movs	r3, #10
 800116e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001172:	2307      	movs	r3, #7
 8001174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fa57 	bl	800263c <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf14      	ite	ne
 8001194:	2301      	movne	r3, #1
 8001196:	2300      	moveq	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 800119e:	f000 f9dd 	bl	800155c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2303      	movs	r3, #3
 80011aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011c4:	2104      	movs	r1, #4
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fe1e 	bl	8002e08 <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80011dc:	f000 f9be 	bl	800155c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e0:	2304      	movs	r3, #4
 80011e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f810 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8001200:	f000 f9ac 	bl	800155c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001204:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001208:	f001 f9c2 	bl	8002590 <HAL_PWREx_ControlVoltageScaling>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	bf14      	ite	ne
 8001212:	2301      	movne	r3, #1
 8001214:	2300      	moveq	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 800121c:	f000 f99e 	bl	800155c <Error_Handler>
  }
}
 8001220:	bf00      	nop
 8001222:	37e0      	adds	r7, #224	; 0xe0
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 800124e:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <_ZL12MX_TIM3_Initv+0xcc>)
 8001250:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 8001260:	2263      	movs	r2, #99	; 0x63
 8001262:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001270:	481f      	ldr	r0, [pc, #124]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 8001272:	f002 fc89 	bl	8003b88 <HAL_TIM_PWM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf14      	ite	ne
 800127c:	2301      	movne	r3, #1
 800127e:	2300      	moveq	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8001286:	f000 f969 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	4815      	ldr	r0, [pc, #84]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 800129a:	f003 fd61 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80012ae:	f000 f955 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b2:	2360      	movs	r3, #96	; 0x60
 80012b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 80012ca:	f002 ffbd 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf14      	ite	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	2300      	moveq	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 80012de:	f000 f93d 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <_ZL12MX_TIM3_Initv+0xc8>)
 80012e4:	f000 fa32 	bl	800174c <HAL_TIM_MspPostInit>

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000028 	.word	0x20000028
 80012f4:	40000400 	.word	0x40000400

080012f8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	615a      	str	r2, [r3, #20]
 800131a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 800131e:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <_ZL12MX_TIM4_Initv+0xcc>)
 8001320:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 8001330:	2263      	movs	r2, #99	; 0x63
 8001332:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001340:	481f      	ldr	r0, [pc, #124]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 8001342:	f002 fc21 	bl	8003b88 <HAL_TIM_PWM_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf14      	ite	ne
 800134c:	2301      	movne	r3, #1
 800134e:	2300      	moveq	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8001356:	f000 f901 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4815      	ldr	r0, [pc, #84]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 800136a:	f003 fcf9 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf14      	ite	ne
 8001374:	2301      	movne	r3, #1
 8001376:	2300      	moveq	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800137e:	f000 f8ed 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	; 0x60
 8001384:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 800139a:	f002 ff55 	bl	8004248 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80013ae:	f000 f8d5 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <_ZL12MX_TIM4_Initv+0xc8>)
 80013b4:	f000 f9ca 	bl	800174c <HAL_TIM_MspPostInit>

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000074 	.word	0x20000074
 80013c4:	40000800 	.word	0x40000800

080013c8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <_ZL19MX_USART3_UART_Initv+0x64>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <_ZL19MX_USART3_UART_Initv+0x60>)
 800140c:	f003 fd30 	bl	8004e70 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf14      	ite	ne
 8001416:	2301      	movne	r3, #1
 8001418:	2300      	moveq	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8001420:	f000 f89c 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000150 	.word	0x20000150
 800142c:	40004800 	.word	0x40004800

08001430 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_ZL11MX_DMA_Initv+0x48>)
 8001438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <_ZL11MX_DMA_Initv+0x48>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6493      	str	r3, [r2, #72]	; 0x48
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <_ZL11MX_DMA_Initv+0x48>)
 8001444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	200b      	movs	r0, #11
 8001454:	f000 fc43 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001458:	200b      	movs	r0, #11
 800145a:	f000 fc5c 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2010      	movs	r0, #16
 8001464:	f000 fc3b 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001468:	2010      	movs	r0, #16
 800146a:	f000 fc54 	bl	8001d16 <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a2e      	ldr	r2, [pc, #184]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a28      	ldr	r2, [pc, #160]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a22      	ldr	r2, [pc, #136]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <_ZL12MX_GPIO_Initv+0xd4>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f8:	4816      	ldr	r0, [pc, #88]	; (8001554 <_ZL12MX_GPIO_Initv+0xd8>)
 80014fa:	f001 f809 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <_ZL12MX_GPIO_Initv+0xdc>)
 8001506:	f001 f803 	bl	8002510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800150a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	480c      	ldr	r0, [pc, #48]	; (8001554 <_ZL12MX_GPIO_Initv+0xd8>)
 8001524:	f000 fe4a 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001528:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <_ZL12MX_GPIO_Initv+0xdc>)
 8001542:	f000 fe3b 	bl	80021bc <HAL_GPIO_Init>

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	48000400 	.word	0x48000400
 8001558:	48000800 	.word	0x48000800

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10a      	bne.n	800158e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157e:	4293      	cmp	r3, r2
 8001580:	d105      	bne.n	800158e <_Z41__static_initialization_and_destruction_0ii+0x26>
WS2812B ws2812b(FCPU_HZ, WS2812B_LED_COUNT, &htim3);
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001584:	2208      	movs	r2, #8
 8001586:	490a      	ldr	r1, [pc, #40]	; (80015b0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001588:	480a      	ldr	r0, [pc, #40]	; (80015b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800158a:	f7ff fbc7 	bl	8000d1c <_ZN7WS2812BC1EmmP17TIM_HandleTypeDef>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d107      	bne.n	80015a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159a:	4293      	cmp	r3, r2
 800159c:	d102      	bne.n	80015a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80015a0:	f7ff fbd3 	bl	8000d4a <_ZN7WS2812BD1Ev>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000028 	.word	0x20000028
 80015b0:	04c4b400 	.word	0x04c4b400
 80015b4:	200001d4 	.word	0x200001d4

080015b8 <_GLOBAL__sub_I_htim3>:
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff ffd1 	bl	8001568 <_Z41__static_initialization_and_destruction_0ii>
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_GLOBAL__sub_D_htim3>:
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff ffc9 	bl	8001568 <_Z41__static_initialization_and_destruction_0ii>
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_MspInit+0x44>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_MspInit+0x44>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_MspInit+0x44>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_MspInit+0x44>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_MspInit+0x44>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6593      	str	r3, [r2, #88]	; 0x58
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_MspInit+0x44>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a40      	ldr	r2, [pc, #256]	; (8001730 <HAL_TIM_PWM_MspInit+0x110>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d13d      	bne.n	80016ae <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <HAL_TIM_PWM_MspInit+0x114>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	4a3f      	ldr	r2, [pc, #252]	; (8001734 <HAL_TIM_PWM_MspInit+0x114>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6593      	str	r3, [r2, #88]	; 0x58
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <HAL_TIM_PWM_MspInit+0x114>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 800164c:	4a3b      	ldr	r2, [pc, #236]	; (800173c <HAL_TIM_PWM_MspInit+0x11c>)
 800164e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 8001652:	2205      	movs	r2, #5
 8001654:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 8001658:	2210      	movs	r2, #16
 800165a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001662:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 800166a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001670:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 8001672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001676:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001684:	482c      	ldr	r0, [pc, #176]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 8001686:	f000 fb61 	bl	8001d4c <HAL_DMA_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8001690:	f7ff ff64 	bl	800155c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a28      	ldr	r2, [pc, #160]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
 800169a:	4a27      	ldr	r2, [pc, #156]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a25      	ldr	r2, [pc, #148]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
 80016a6:	4a24      	ldr	r2, [pc, #144]	; (8001738 <HAL_TIM_PWM_MspInit+0x118>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016ac:	e03b      	b.n	8001726 <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM4)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a23      	ldr	r2, [pc, #140]	; (8001740 <HAL_TIM_PWM_MspInit+0x120>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d136      	bne.n	8001726 <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_TIM_PWM_MspInit+0x114>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <HAL_TIM_PWM_MspInit+0x114>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6593      	str	r3, [r2, #88]	; 0x58
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_TIM_PWM_MspInit+0x114>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 80016d2:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_TIM_PWM_MspInit+0x128>)
 80016d4:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_6;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 80016d8:	2206      	movs	r2, #6
 80016da:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 80016de:	2210      	movs	r2, #16
 80016e0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 80016f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f4:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 80016f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fc:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 800170c:	f000 fb1e 	bl	8001d4c <HAL_DMA_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_TIM_PWM_MspInit+0xfa>
      Error_Handler();
 8001716:	f7ff ff21 	bl	800155c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
 8001720:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_TIM_PWM_MspInit+0x124>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40000400 	.word	0x40000400
 8001734:	40021000 	.word	0x40021000
 8001738:	200000c0 	.word	0x200000c0
 800173c:	4002006c 	.word	0x4002006c
 8001740:	40000800 	.word	0x40000800
 8001744:	20000108 	.word	0x20000108
 8001748:	40020008 	.word	0x40020008

0800174c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <HAL_TIM_MspPostInit+0xa8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d11c      	bne.n	80017a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_TIM_MspPostInit+0xac>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <HAL_TIM_MspPostInit+0xac>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_TIM_MspPostInit+0xac>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001786:	2310      	movs	r3, #16
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001796:	2302      	movs	r3, #2
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4816      	ldr	r0, [pc, #88]	; (80017fc <HAL_TIM_MspPostInit+0xb0>)
 80017a2:	f000 fd0b 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017a6:	e020      	b.n	80017ea <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <HAL_TIM_MspPostInit+0xb4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d11b      	bne.n	80017ea <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_TIM_MspPostInit+0xac>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <HAL_TIM_MspPostInit+0xac>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_TIM_MspPostInit+0xac>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ca:	2340      	movs	r3, #64	; 0x40
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017da:	2302      	movs	r3, #2
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <HAL_TIM_MspPostInit+0xb0>)
 80017e6:	f000 fce9 	bl	80021bc <HAL_GPIO_Init>
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40000400 	.word	0x40000400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	48000400 	.word	0x48000400
 8001800:	40000800 	.word	0x40000800

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_UART_MspInit+0x7c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d128      	bne.n	8001878 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_UART_MspInit+0x80>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a16      	ldr	r2, [pc, #88]	; (8001884 <HAL_UART_MspInit+0x80>)
 800182c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_UART_MspInit+0x80>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_UART_MspInit+0x80>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_UART_MspInit+0x80>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_UART_MspInit+0x80>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001856:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001868:	2307      	movs	r3, #7
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_UART_MspInit+0x84>)
 8001874:	f000 fca2 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40004800 	.word	0x40004800
 8001884:	40021000 	.word	0x40021000
 8001888:	48000400 	.word	0x48000400

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 f8e2 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <DMA1_Channel1_IRQHandler+0x10>)
 80018e6:	f000 fb8a 	bl	8001ffe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000108 	.word	0x20000108

080018f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA1_Channel6_IRQHandler+0x10>)
 80018fa:	f000 fb80 	bl	8001ffe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200000c0 	.word	0x200000c0

08001908 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <SystemInit+0x5c>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <SystemInit+0x5c>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <SystemInit+0x60>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <SystemInit+0x60>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <SystemInit+0x60>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <SystemInit+0x60>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <SystemInit+0x60>)
 8001934:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001938:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800193c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <SystemInit+0x60>)
 8001940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001944:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <SystemInit+0x60>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <SystemInit+0x60>)
 800194c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SystemInit+0x60>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_TIM_PWM_PulseFinishedCallback>:

#include "ws2812b.h"


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a05      	ldr	r2, [pc, #20]	; (8001990 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d103      	bne.n	8001986 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
	{
		HAL_TIM_PWM_Stop_DMA(htim, WS2812B_TIMER_CHANNEL);
 800197e:	2100      	movs	r1, #0
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f002 fb71 	bl	8004068 <HAL_TIM_PWM_Stop_DMA>
	}
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40000400 	.word	0x40000400

08001994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001998:	f7ff ffb6 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800199c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800199e:	e003      	b.n	80019a8 <LoopCopyDataInit>

080019a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019a6:	3104      	adds	r1, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019a8:	480a      	ldr	r0, [pc, #40]	; (80019d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80019ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019b0:	d3f6      	bcc.n	80019a0 <CopyDataInit>
	ldr	r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80019b4:	e002      	b.n	80019bc <LoopFillZerobss>

080019b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019b8:	f842 3b04 	str.w	r3, [r2], #4

080019bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <LoopForever+0x16>)
	cmp	r2, r3
 80019be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019c0:	d3f9      	bcc.n	80019b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c2:	f004 fc21 	bl	8006208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019c6:	f7ff fb5b 	bl	8001080 <main>

080019ca <LoopForever>:

LoopForever:
    b LoopForever
 80019ca:	e7fe      	b.n	80019ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019cc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80019d0:	080066a8 	.word	0x080066a8
	ldr	r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019d8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80019dc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80019e0:	200003f8 	.word	0x200003f8

080019e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC1_2_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_Init+0x3c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <HAL_Init+0x3c>)
 80019f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fe:	2003      	movs	r0, #3
 8001a00:	f000 f962 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a04:	2000      	movs	r0, #0
 8001a06:	f000 f80f 	bl	8001a28 <HAL_InitTick>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	e001      	b.n	8001a1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a16:	f7ff fddf 	bl	80015d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_InitTick+0x6c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d023      	beq.n	8001a84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_InitTick+0x70>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_InitTick+0x6c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f96d 	bl	8001d32 <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d809      	bhi.n	8001a78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 f937 	bl	8001cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_InitTick+0x74>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e007      	b.n	8001a88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e004      	b.n	8001a88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e001      	b.n	8001a88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	200003f4 	.word	0x200003f4

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200003f4 	.word	0x200003f4

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e098      	b.n	8001e90 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <HAL_DMA_Init+0x150>)
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d80f      	bhi.n	8001d8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b4b      	ldr	r3, [pc, #300]	; (8001ea0 <HAL_DMA_Init+0x154>)
 8001d72:	4413      	add	r3, r2
 8001d74:	4a4b      	ldr	r2, [pc, #300]	; (8001ea4 <HAL_DMA_Init+0x158>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	009a      	lsls	r2, r3, #2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_DMA_Init+0x15c>)
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
 8001d88:	e00e      	b.n	8001da8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_DMA_Init+0x160>)
 8001d92:	4413      	add	r3, r2
 8001d94:	4a43      	ldr	r2, [pc, #268]	; (8001ea4 <HAL_DMA_Init+0x158>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	009a      	lsls	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a42      	ldr	r2, [pc, #264]	; (8001eb0 <HAL_DMA_Init+0x164>)
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e02:	d039      	beq.n	8001e78 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_DMA_Init+0x15c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d11a      	bne.n	8001e44 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e0e:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_DMA_Init+0x168>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f003 031c 	and.w	r3, r3, #28
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4924      	ldr	r1, [pc, #144]	; (8001eb4 <HAL_DMA_Init+0x168>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_DMA_Init+0x168>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	f003 031c 	and.w	r3, r3, #28
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	491d      	ldr	r1, [pc, #116]	; (8001eb4 <HAL_DMA_Init+0x168>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
 8001e42:	e019      	b.n	8001e78 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_DMA_Init+0x16c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	f003 031c 	and.w	r3, r3, #28
 8001e50:	210f      	movs	r1, #15
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	4917      	ldr	r1, [pc, #92]	; (8001eb8 <HAL_DMA_Init+0x16c>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_DMA_Init+0x16c>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f003 031c 	and.w	r3, r3, #28
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	4911      	ldr	r1, [pc, #68]	; (8001eb8 <HAL_DMA_Init+0x16c>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	40020407 	.word	0x40020407
 8001ea0:	bffdfff8 	.word	0xbffdfff8
 8001ea4:	cccccccd 	.word	0xcccccccd
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	bffdfbf8 	.word	0xbffdfbf8
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	400200a8 	.word	0x400200a8
 8001eb8:	400204a8 	.word	0x400204a8

08001ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_DMA_Start_IT+0x20>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e04b      	b.n	8001f74 <HAL_DMA_Start_IT+0xb8>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d13a      	bne.n	8001f66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f921 	bl	800215c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 020e 	orr.w	r2, r2, #14
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e00f      	b.n	8001f54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0204 	bic.w	r2, r2, #4
 8001f42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 020a 	orr.w	r2, r2, #10
 8001f52:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e005      	b.n	8001f72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d005      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2204      	movs	r2, #4
 8001f98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	e029      	b.n	8001ff4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 020e 	bic.w	r2, r2, #14
 8001fae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f003 021c 	and.w	r2, r3, #28
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
    }
  }
  return status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f003 031c 	and.w	r3, r3, #28
 800201e:	2204      	movs	r2, #4
 8002020:	409a      	lsls	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d026      	beq.n	8002078 <HAL_DMA_IRQHandler+0x7a>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d021      	beq.n	8002078 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0204 	bic.w	r2, r2, #4
 8002050:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f003 021c 	and.w	r2, r3, #28
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2104      	movs	r1, #4
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	2b00      	cmp	r3, #0
 800206c:	d071      	beq.n	8002152 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002076:	e06c      	b.n	8002152 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207c:	f003 031c 	and.w	r3, r3, #28
 8002080:	2202      	movs	r2, #2
 8002082:	409a      	lsls	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d02e      	beq.n	80020ea <HAL_DMA_IRQHandler+0xec>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d029      	beq.n	80020ea <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 020a 	bic.w	r2, r2, #10
 80020b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	f003 021c 	and.w	r2, r3, #28
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	2102      	movs	r1, #2
 80020ca:	fa01 f202 	lsl.w	r2, r1, r2
 80020ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d038      	beq.n	8002152 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020e8:	e033      	b.n	8002152 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f003 031c 	and.w	r3, r3, #28
 80020f2:	2208      	movs	r2, #8
 80020f4:	409a      	lsls	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02a      	beq.n	8002154 <HAL_DMA_IRQHandler+0x156>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d025      	beq.n	8002154 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 020e 	bic.w	r2, r2, #14
 8002116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	f003 021c 	and.w	r2, r3, #28
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002152:	bf00      	nop
 8002154:	bf00      	nop
}
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f003 021c 	and.w	r2, r3, #28
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f202 	lsl.w	r2, r1, r2
 800217c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b10      	cmp	r3, #16
 800218c:	d108      	bne.n	80021a0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800219e:	e007      	b.n	80021b0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	60da      	str	r2, [r3, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ca:	e17f      	b.n	80024cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8171 	beq.w	80024c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d00b      	beq.n	8002204 <HAL_GPIO_Init+0x48>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d007      	beq.n	8002204 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f8:	2b11      	cmp	r3, #17
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b12      	cmp	r3, #18
 8002202:	d130      	bne.n	8002266 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800223a:	2201      	movs	r2, #1
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 0201 	and.w	r2, r3, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b03      	cmp	r3, #3
 8002270:	d118      	bne.n	80022a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002278:	2201      	movs	r2, #1
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	f003 0201 	and.w	r2, r3, #1
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x128>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d123      	bne.n	800232c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80ac 	beq.w	80024c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236e:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <HAL_GPIO_Init+0x330>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	4a5e      	ldr	r2, [pc, #376]	; (80024ec <HAL_GPIO_Init+0x330>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6613      	str	r3, [r2, #96]	; 0x60
 800237a:	4b5c      	ldr	r3, [pc, #368]	; (80024ec <HAL_GPIO_Init+0x330>)
 800237c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002386:	4a5a      	ldr	r2, [pc, #360]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023b0:	d025      	beq.n	80023fe <HAL_GPIO_Init+0x242>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4f      	ldr	r2, [pc, #316]	; (80024f4 <HAL_GPIO_Init+0x338>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01f      	beq.n	80023fa <HAL_GPIO_Init+0x23e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4e      	ldr	r2, [pc, #312]	; (80024f8 <HAL_GPIO_Init+0x33c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x23a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_GPIO_Init+0x340>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x236>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <HAL_GPIO_Init+0x344>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x232>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4b      	ldr	r2, [pc, #300]	; (8002504 <HAL_GPIO_Init+0x348>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x22e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4a      	ldr	r2, [pc, #296]	; (8002508 <HAL_GPIO_Init+0x34c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x22a>
 80023e2:	2306      	movs	r3, #6
 80023e4:	e00c      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e00a      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023ea:	2305      	movs	r3, #5
 80023ec:	e008      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023ee:	2304      	movs	r3, #4
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e004      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_GPIO_Init+0x244>
 80023fe:	2300      	movs	r3, #0
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	f002 0203 	and.w	r2, r2, #3
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	4093      	lsls	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002410:	4937      	ldr	r1, [pc, #220]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_GPIO_Init+0x350>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002442:	4a32      	ldr	r2, [pc, #200]	; (800250c <HAL_GPIO_Init+0x350>)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002448:	4b30      	ldr	r3, [pc, #192]	; (800250c <HAL_GPIO_Init+0x350>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_GPIO_Init+0x350>)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_GPIO_Init+0x350>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_GPIO_Init+0x350>)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_GPIO_Init+0x350>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_GPIO_Init+0x350>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f47f ae78 	bne.w	80021cc <HAL_GPIO_Init+0x10>
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010000 	.word	0x40010000
 80024f4:	48000400 	.word	0x48000400
 80024f8:	48000800 	.word	0x48000800
 80024fc:	48000c00 	.word	0x48000c00
 8002500:	48001000 	.word	0x48001000
 8002504:	48001400 	.word	0x48001400
 8002508:	48001800 	.word	0x48001800
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
 800251c:	4613      	mov	r3, r2
 800251e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800252c:	e002      	b.n	8002534 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4013      	ands	r3, r2
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43d9      	mvns	r1, r3
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	400b      	ands	r3, r1
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	619a      	str	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <HAL_PWREx_GetVoltageRange+0x18>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40007000 	.word	0x40007000

08002590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259e:	d130      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ac:	d038      	beq.n	8002620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2232      	movs	r2, #50	; 0x32
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0c9b      	lsrs	r3, r3, #18
 80025d0:	3301      	adds	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d4:	e002      	b.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3b01      	subs	r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e8:	d102      	bne.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f2      	bne.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fc:	d110      	bne.n	8002620 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e00f      	b.n	8002622 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800260a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260e:	d007      	beq.n	8002620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002618:	4a05      	ldr	r2, [pc, #20]	; (8002630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40007000 	.word	0x40007000
 8002634:	20000000 	.word	0x20000000
 8002638:	431bde83 	.word	0x431bde83

0800263c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e3d4      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4ba1      	ldr	r3, [pc, #644]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002658:	4b9e      	ldr	r3, [pc, #632]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80e4 	beq.w	8002838 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_RCC_OscConfig+0x4a>
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	f040 808b 	bne.w	8002794 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b01      	cmp	r3, #1
 8002682:	f040 8087 	bne.w	8002794 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002686:	4b93      	ldr	r3, [pc, #588]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x62>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e3ac      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1a      	ldr	r2, [r3, #32]
 80026a2:	4b8c      	ldr	r3, [pc, #560]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_RCC_OscConfig+0x7c>
 80026ae:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b6:	e005      	b.n	80026c4 <HAL_RCC_OscConfig+0x88>
 80026b8:	4b86      	ldr	r3, [pc, #536]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d223      	bcs.n	8002710 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fd3f 	bl	8003150 <RCC_SetFlashLatencyFromMSIRange>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e38d      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026dc:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a7c      	ldr	r2, [pc, #496]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4977      	ldr	r1, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fa:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	4972      	ldr	r1, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
 800270e:	e025      	b.n	800275c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002710:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a6f      	ldr	r2, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002716:	f043 0308 	orr.w	r3, r3, #8
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	496a      	ldr	r1, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800272e:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	4965      	ldr	r1, [pc, #404]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fcff 	bl	8003150 <RCC_SetFlashLatencyFromMSIRange>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e34d      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800275c:	f000 fc36 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b5c      	ldr	r3, [pc, #368]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	495a      	ldr	r1, [pc, #360]	; (80028d8 <HAL_RCC_OscConfig+0x29c>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_OscConfig+0x2a0>)
 800277a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800277c:	4b58      	ldr	r3, [pc, #352]	; (80028e0 <HAL_RCC_OscConfig+0x2a4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f951 	bl	8001a28 <HAL_InitTick>
 8002786:	4603      	mov	r3, r0
 8002788:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d052      	beq.n	8002836 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	e331      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d032      	beq.n	8002802 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4c      	ldr	r2, [pc, #304]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a8:	f7ff f98e 	bl	8001ac8 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b0:	f7ff f98a 	bl	8001ac8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e31a      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c2:	4b44      	ldr	r3, [pc, #272]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a40      	ldr	r2, [pc, #256]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027d4:	f043 0308 	orr.w	r3, r3, #8
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	493b      	ldr	r1, [pc, #236]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	4936      	ldr	r1, [pc, #216]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
 8002800:	e01a      	b.n	8002838 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002802:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a33      	ldr	r2, [pc, #204]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800280e:	f7ff f95b 	bl	8001ac8 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002816:	f7ff f957 	bl	8001ac8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e2e7      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x1da>
 8002834:	e000      	b.n	8002838 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002836:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d074      	beq.n	800292e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b08      	cmp	r3, #8
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x21a>
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b0c      	cmp	r3, #12
 800284e:	d10e      	bne.n	800286e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d10b      	bne.n	800286e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d064      	beq.n	800292c <HAL_RCC_OscConfig+0x2f0>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d160      	bne.n	800292c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e2c4      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x24a>
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e01d      	b.n	80028c2 <HAL_RCC_OscConfig+0x286>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288e:	d10c      	bne.n	80028aa <HAL_RCC_OscConfig+0x26e>
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 8002896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	e00b      	b.n	80028c2 <HAL_RCC_OscConfig+0x286>
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <HAL_RCC_OscConfig+0x298>)
 80028bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01c      	beq.n	8002904 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7ff f8fd 	bl	8001ac8 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d0:	e011      	b.n	80028f6 <HAL_RCC_OscConfig+0x2ba>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08006278 	.word	0x08006278
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff f8f0 	bl	8001ac8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e280      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f6:	4baf      	ldr	r3, [pc, #700]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2a8>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7ff f8e0 	bl	8001ac8 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7ff f8dc 	bl	8001ac8 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e26c      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800291e:	4ba5      	ldr	r3, [pc, #660]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x2d0>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d060      	beq.n	80029fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d005      	beq.n	800294c <HAL_RCC_OscConfig+0x310>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d119      	bne.n	800297a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d116      	bne.n	800297a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	4b99      	ldr	r3, [pc, #612]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_OscConfig+0x328>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e249      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b93      	ldr	r3, [pc, #588]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	4990      	ldr	r1, [pc, #576]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002978:	e040      	b.n	80029fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d023      	beq.n	80029ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002982:	4b8c      	ldr	r3, [pc, #560]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a8b      	ldr	r2, [pc, #556]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7ff f89b 	bl	8001ac8 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002996:	f7ff f897 	bl	8001ac8 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e227      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a8:	4b82      	ldr	r3, [pc, #520]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	497c      	ldr	r1, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e018      	b.n	80029fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ca:	4b7a      	ldr	r3, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a79      	ldr	r2, [pc, #484]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7ff f877 	bl	8001ac8 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7ff f873 	bl	8001ac8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e203      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f0:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d03c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a10:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a16:	4a67      	ldr	r2, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7ff f852 	bl	8001ac8 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a28:	f7ff f84e 	bl	8001ac8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1de      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a3a:	4b5e      	ldr	r3, [pc, #376]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <HAL_RCC_OscConfig+0x3ec>
 8002a48:	e01b      	b.n	8002a82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4a:	4b5a      	ldr	r3, [pc, #360]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7ff f835 	bl	8001ac8 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a62:	f7ff f831 	bl	8001ac8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1c1      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a74:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ef      	bne.n	8002a62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a6 	beq.w	8002bdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a94:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a43      	ldr	r2, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002aac:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abc:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <HAL_RCC_OscConfig+0x57c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d118      	bne.n	8002afa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCC_OscConfig+0x57c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a3a      	ldr	r2, [pc, #232]	; (8002bb8 <HAL_RCC_OscConfig+0x57c>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fff8 	bl	8001ac8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002adc:	f7fe fff4 	bl	8001ac8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e184      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aee:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_RCC_OscConfig+0x57c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d108      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
 8002b02:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	4a2a      	ldr	r2, [pc, #168]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b12:	e024      	b.n	8002b5e <HAL_RCC_OscConfig+0x522>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d110      	bne.n	8002b3e <HAL_RCC_OscConfig+0x502>
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b3c:	e00f      	b.n	8002b5e <HAL_RCC_OscConfig+0x522>
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b56:	f023 0304 	bic.w	r3, r3, #4
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe ffaf 	bl	8001ac8 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe ffab 	bl	8001ac8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e139      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x578>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ed      	beq.n	8002b6e <HAL_RCC_OscConfig+0x532>
 8002b92:	e01a      	b.n	8002bca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe ff98 	bl	8001ac8 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b9a:	e00f      	b.n	8002bbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe ff94 	bl	8001ac8 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d906      	bls.n	8002bbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e122      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bbc:	4b90      	ldr	r3, [pc, #576]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e8      	bne.n	8002b9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b8b      	ldr	r3, [pc, #556]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	4a8a      	ldr	r2, [pc, #552]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8108 	beq.w	8002df6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	f040 80d0 	bne.w	8002d90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bf0:	4b83      	ldr	r3, [pc, #524]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d130      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d127      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d11f      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c30:	2a07      	cmp	r2, #7
 8002c32:	bf14      	ite	ne
 8002c34:	2201      	movne	r2, #1
 8002c36:	2200      	moveq	r2, #0
 8002c38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d113      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d06e      	beq.n	8002d44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	d069      	beq.n	8002d40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c6c:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c78:	4b61      	ldr	r3, [pc, #388]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0b7      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c88:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5c      	ldr	r2, [pc, #368]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c94:	f7fe ff18 	bl	8001ac8 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe ff14 	bl	8001ac8 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0a4      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cae:	4b54      	ldr	r3, [pc, #336]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cba:	4b51      	ldr	r3, [pc, #324]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <HAL_RCC_OscConfig+0x7c8>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cca:	3a01      	subs	r2, #1
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cd4:	0212      	lsls	r2, r2, #8
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cdc:	0852      	lsrs	r2, r2, #1
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	0552      	lsls	r2, r2, #21
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ce8:	0852      	lsrs	r2, r2, #1
 8002cea:	3a01      	subs	r2, #1
 8002cec:	0652      	lsls	r2, r2, #25
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cf4:	0912      	lsrs	r2, r2, #4
 8002cf6:	0452      	lsls	r2, r2, #17
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	4941      	ldr	r1, [pc, #260]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d00:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a3e      	ldr	r2, [pc, #248]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d0c:	4b3c      	ldr	r3, [pc, #240]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a3b      	ldr	r2, [pc, #236]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d18:	f7fe fed6 	bl	8001ac8 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fed2 	bl	8001ac8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e062      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d3e:	e05a      	b.n	8002df6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e059      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d44:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d152      	bne.n	8002df6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d50:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d68:	f7fe feae 	bl	8001ac8 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe feaa 	bl	8001ac8 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e03a      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x734>
 8002d8e:	e032      	b.n	8002df6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d02d      	beq.n	8002df2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002db4:	f023 0303 	bic.w	r3, r3, #3
 8002db8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002dc0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe fe7d 	bl	8001ac8 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe fe79 	bl	8001ac8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e009      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_OscConfig+0x7c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x796>
 8002df0:	e001      	b.n	8002df6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	f99d808c 	.word	0xf99d808c

08002e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0c8      	b.n	8002fae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d910      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	4961      	ldr	r1, [pc, #388]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b5f      	ldr	r3, [pc, #380]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0b0      	b.n	8002fae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d04c      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e60:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d121      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e09e      	b.n	8002fae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d115      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e092      	b.n	8002fae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e90:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e086      	b.n	8002fae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea0:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e07e      	b.n	8002fae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb0:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 0203 	bic.w	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	493f      	ldr	r1, [pc, #252]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec2:	f7fe fe01 	bl	8001ac8 <HAL_GetTick>
 8002ec6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eca:	f7fe fdfd 	bl	8001ac8 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e066      	b.n	8002fae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee0:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 020c 	and.w	r2, r3, #12
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d1eb      	bne.n	8002eca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efe:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	492c      	ldr	r1, [pc, #176]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d210      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 0207 	bic.w	r2, r3, #7
 8002f26:	4924      	ldr	r1, [pc, #144]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e036      	b.n	8002fae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4918      	ldr	r1, [pc, #96]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4910      	ldr	r1, [pc, #64]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f7e:	f000 f825 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_RCC_ClockConfig+0x1b4>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490c      	ldr	r1, [pc, #48]	; (8002fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fd40 	bl	8001a28 <HAL_InitTick>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fac:	7afb      	ldrb	r3, [r7, #11]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	08006278 	.word	0x08006278
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	20000004 	.word	0x20000004

08002fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d121      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d11e      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003000:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800300c:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e005      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800301c:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003028:	4a2b      	ldr	r2, [pc, #172]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d102      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e004      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d101      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003052:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d134      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800305a:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d003      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0xa6>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d003      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0xac>
 8003070:	e005      	b.n	800307e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003072:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003074:	617b      	str	r3, [r7, #20]
      break;
 8003076:	e005      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 800307a:	617b      	str	r3, [r7, #20]
      break;
 800307c:	e002      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	617b      	str	r3, [r7, #20]
      break;
 8003082:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	3301      	adds	r3, #1
 8003090:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	fb02 f203 	mul.w	r2, r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	0e5b      	lsrs	r3, r3, #25
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	3301      	adds	r3, #1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030c4:	69bb      	ldr	r3, [r7, #24]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08006290 	.word	0x08006290
 80030dc:	00f42400 	.word	0x00f42400

080030e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000000 	.word	0x20000000

080030f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030fc:	f7ff fff0 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4904      	ldr	r1, [pc, #16]	; (8003120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08006288 	.word	0x08006288

08003124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003128:	f7ff ffda 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0adb      	lsrs	r3, r3, #11
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <HAL_RCC_GetPCLK2Freq+0x28>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	08006288 	.word	0x08006288

08003150 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800315c:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003168:	f7ff fa04 	bl	8002574 <HAL_PWREx_GetVoltageRange>
 800316c:	6178      	str	r0, [r7, #20]
 800316e:	e014      	b.n	800319a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	4a24      	ldr	r2, [pc, #144]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317a:	6593      	str	r3, [r2, #88]	; 0x58
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003188:	f7ff f9f4 	bl	8002574 <HAL_PWREx_GetVoltageRange>
 800318c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003198:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a0:	d10b      	bne.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d919      	bls.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2ba0      	cmp	r3, #160	; 0xa0
 80031ac:	d902      	bls.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ae:	2302      	movs	r3, #2
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e013      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b4:	2301      	movs	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e010      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b80      	cmp	r3, #128	; 0x80
 80031be:	d902      	bls.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031c0:	2303      	movs	r3, #3
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e00a      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b80      	cmp	r3, #128	; 0x80
 80031ca:	d102      	bne.n	80031d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031cc:	2302      	movs	r3, #2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	e004      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b70      	cmp	r3, #112	; 0x70
 80031d6:	d101      	bne.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d8:	2301      	movs	r3, #1
 80031da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 0207 	bic.w	r2, r3, #7
 80031e4:	4909      	ldr	r1, [pc, #36]	; (800320c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d001      	beq.n	80031fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	40022000 	.word	0x40022000

08003210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003218:	2300      	movs	r3, #0
 800321a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800321c:	2300      	movs	r3, #0
 800321e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003228:	2b00      	cmp	r3, #0
 800322a:	d041      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003230:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003234:	d02a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003236:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800323a:	d824      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800323c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003240:	d008      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003242:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003246:	d81e      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800324c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003250:	d010      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003252:	e018      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003254:	4b86      	ldr	r3, [pc, #536]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a85      	ldr	r2, [pc, #532]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003260:	e015      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fabb 	bl	80037e4 <RCCEx_PLLSAI1_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003272:	e00c      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3320      	adds	r3, #32
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fba6 	bl	80039cc <RCCEx_PLLSAI2_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003284:	e003      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	74fb      	strb	r3, [r7, #19]
      break;
 800328a:	e000      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800328c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003294:	4b76      	ldr	r3, [pc, #472]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032a2:	4973      	ldr	r1, [pc, #460]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032aa:	e001      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d041      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032c4:	d02a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032ca:	d824      	bhi.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032d0:	d008      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032d6:	d81e      	bhi.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e0:	d010      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032e2:	e018      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032e4:	4b62      	ldr	r3, [pc, #392]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4a61      	ldr	r2, [pc, #388]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f0:	e015      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fa73 	bl	80037e4 <RCCEx_PLLSAI1_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003302:	e00c      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3320      	adds	r3, #32
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fb5e 	bl	80039cc <RCCEx_PLLSAI2_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003314:	e003      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	74fb      	strb	r3, [r7, #19]
      break;
 800331a:	e000      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800331c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003324:	4b52      	ldr	r3, [pc, #328]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003332:	494f      	ldr	r1, [pc, #316]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800333a:	e001      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80a0 	beq.w	800348e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b41      	ldr	r3, [pc, #260]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	4a40      	ldr	r2, [pc, #256]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003372:	6593      	str	r3, [r2, #88]	; 0x58
 8003374:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003380:	2301      	movs	r3, #1
 8003382:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003384:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a3a      	ldr	r2, [pc, #232]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003390:	f7fe fb9a 	bl	8001ac8 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003396:	e009      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fe fb96 	bl	8001ac8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d902      	bls.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	74fb      	strb	r3, [r7, #19]
        break;
 80033aa:	e005      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ac:	4b31      	ldr	r3, [pc, #196]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ef      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d15c      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033be:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01f      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d019      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033dc:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033e8:	4b21      	ldr	r3, [pc, #132]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	4a20      	ldr	r2, [pc, #128]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003408:	4a19      	ldr	r2, [pc, #100]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fe fb55 	bl	8001ac8 <HAL_GetTick>
 800341e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003420:	e00b      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003422:	f7fe fb51 	bl	8001ac8 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003430:	4293      	cmp	r3, r2
 8003432:	d902      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	74fb      	strb	r3, [r7, #19]
            break;
 8003438:	e006      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ec      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800345e:	4904      	ldr	r1, [pc, #16]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003466:	e009      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
 800346c:	e006      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800347c:	7c7b      	ldrb	r3, [r7, #17]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d105      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003482:	4b9e      	ldr	r3, [pc, #632]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	4a9d      	ldr	r2, [pc, #628]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800349a:	4b98      	ldr	r3, [pc, #608]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f023 0203 	bic.w	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	4994      	ldr	r1, [pc, #592]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034bc:	4b8f      	ldr	r3, [pc, #572]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 020c 	bic.w	r2, r3, #12
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	498c      	ldr	r1, [pc, #560]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034de:	4b87      	ldr	r3, [pc, #540]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	4983      	ldr	r1, [pc, #524]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003500:	4b7e      	ldr	r3, [pc, #504]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	497b      	ldr	r1, [pc, #492]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003522:	4b76      	ldr	r3, [pc, #472]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003530:	4972      	ldr	r1, [pc, #456]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003544:	4b6d      	ldr	r3, [pc, #436]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	496a      	ldr	r1, [pc, #424]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003566:	4b65      	ldr	r3, [pc, #404]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	4961      	ldr	r1, [pc, #388]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003588:	4b5c      	ldr	r3, [pc, #368]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003596:	4959      	ldr	r1, [pc, #356]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035aa:	4b54      	ldr	r3, [pc, #336]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	4950      	ldr	r1, [pc, #320]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035cc:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	4948      	ldr	r1, [pc, #288]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ee:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	493f      	ldr	r1, [pc, #252]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d028      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003610:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361e:	4937      	ldr	r1, [pc, #220]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362e:	d106      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363a:	60d3      	str	r3, [r2, #12]
 800363c:	e011      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003646:	d10c      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	2101      	movs	r1, #1
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f8c8 	bl	80037e4 <RCCEx_PLLSAI1_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d028      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800366e:	4b23      	ldr	r3, [pc, #140]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	491f      	ldr	r1, [pc, #124]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368c:	d106      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368e:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	4a1a      	ldr	r2, [pc, #104]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003698:	60d3      	str	r3, [r2, #12]
 800369a:	e011      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f899 	bl	80037e4 <RCCEx_PLLSAI1_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d02b      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036da:	4908      	ldr	r1, [pc, #32]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ea:	d109      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a02      	ldr	r2, [pc, #8]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f6:	60d3      	str	r3, [r2, #12]
 80036f8:	e014      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003708:	d10c      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	2101      	movs	r1, #1
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f867 	bl	80037e4 <RCCEx_PLLSAI1_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d02f      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	4928      	ldr	r1, [pc, #160]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800374e:	d10d      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	2102      	movs	r1, #2
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f844 	bl	80037e4 <RCCEx_PLLSAI1_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d014      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	74bb      	strb	r3, [r7, #18]
 800376a:	e011      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003774:	d10c      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3320      	adds	r3, #32
 800377a:	2102      	movs	r1, #2
 800377c:	4618      	mov	r0, r3
 800377e:	f000 f925 	bl	80039cc <RCCEx_PLLSAI2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003786:	7cfb      	ldrb	r3, [r7, #19]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037aa:	490d      	ldr	r1, [pc, #52]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ce:	4904      	ldr	r1, [pc, #16]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000

080037e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037f2:	4b75      	ldr	r3, [pc, #468]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037fe:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d10d      	bne.n	800382a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
       ||
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003816:	4b6c      	ldr	r3, [pc, #432]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
       ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d047      	beq.n	80038ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
 800382e:	e044      	b.n	80038ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d018      	beq.n	800386a <RCCEx_PLLSAI1_Config+0x86>
 8003838:	2b03      	cmp	r3, #3
 800383a:	d825      	bhi.n	8003888 <RCCEx_PLLSAI1_Config+0xa4>
 800383c:	2b01      	cmp	r3, #1
 800383e:	d002      	beq.n	8003846 <RCCEx_PLLSAI1_Config+0x62>
 8003840:	2b02      	cmp	r3, #2
 8003842:	d009      	beq.n	8003858 <RCCEx_PLLSAI1_Config+0x74>
 8003844:	e020      	b.n	8003888 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003846:	4b60      	ldr	r3, [pc, #384]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11d      	bne.n	800388e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003856:	e01a      	b.n	800388e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003858:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	2b00      	cmp	r3, #0
 8003862:	d116      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003868:	e013      	b.n	8003892 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800386a:	4b57      	ldr	r3, [pc, #348]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10f      	bne.n	8003896 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003876:	4b54      	ldr	r3, [pc, #336]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003886:	e006      	b.n	8003896 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e004      	b.n	8003898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003896:	bf00      	nop
    }

    if(status == HAL_OK)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10d      	bne.n	80038ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	430b      	orrs	r3, r1
 80038b4:	4944      	ldr	r1, [pc, #272]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d17d      	bne.n	80039bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a40      	ldr	r2, [pc, #256]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fe f8fc 	bl	8001ac8 <HAL_GetTick>
 80038d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d2:	e009      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038d4:	f7fe f8f8 	bl	8001ac8 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d902      	bls.n	80038e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	73fb      	strb	r3, [r7, #15]
        break;
 80038e6:	e005      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038e8:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ef      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d160      	bne.n	80039bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d111      	bne.n	8003924 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003900:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6892      	ldr	r2, [r2, #8]
 8003910:	0211      	lsls	r1, r2, #8
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68d2      	ldr	r2, [r2, #12]
 8003916:	0912      	lsrs	r2, r2, #4
 8003918:	0452      	lsls	r2, r2, #17
 800391a:	430a      	orrs	r2, r1
 800391c:	492a      	ldr	r1, [pc, #168]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	610b      	str	r3, [r1, #16]
 8003922:	e027      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d112      	bne.n	8003950 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800392a:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003932:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6892      	ldr	r2, [r2, #8]
 800393a:	0211      	lsls	r1, r2, #8
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6912      	ldr	r2, [r2, #16]
 8003940:	0852      	lsrs	r2, r2, #1
 8003942:	3a01      	subs	r2, #1
 8003944:	0552      	lsls	r2, r2, #21
 8003946:	430a      	orrs	r2, r1
 8003948:	491f      	ldr	r1, [pc, #124]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	610b      	str	r3, [r1, #16]
 800394e:	e011      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6892      	ldr	r2, [r2, #8]
 8003960:	0211      	lsls	r1, r2, #8
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6952      	ldr	r2, [r2, #20]
 8003966:	0852      	lsrs	r2, r2, #1
 8003968:	3a01      	subs	r2, #1
 800396a:	0652      	lsls	r2, r2, #25
 800396c:	430a      	orrs	r2, r1
 800396e:	4916      	ldr	r1, [pc, #88]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800397e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fe f8a2 	bl	8001ac8 <HAL_GetTick>
 8003984:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003986:	e009      	b.n	800399c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003988:	f7fe f89e 	bl	8001ac8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d902      	bls.n	800399c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	73fb      	strb	r3, [r7, #15]
          break;
 800399a:	e005      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0ef      	beq.n	8003988 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000

080039cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039da:	4b6a      	ldr	r3, [pc, #424]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d018      	beq.n	8003a18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039e6:	4b67      	ldr	r3, [pc, #412]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d10d      	bne.n	8003a12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
       ||
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039fe:	4b61      	ldr	r3, [pc, #388]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d047      	beq.n	8003aa2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e044      	b.n	8003aa2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d018      	beq.n	8003a52 <RCCEx_PLLSAI2_Config+0x86>
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d825      	bhi.n	8003a70 <RCCEx_PLLSAI2_Config+0xa4>
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d002      	beq.n	8003a2e <RCCEx_PLLSAI2_Config+0x62>
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d009      	beq.n	8003a40 <RCCEx_PLLSAI2_Config+0x74>
 8003a2c:	e020      	b.n	8003a70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a2e:	4b55      	ldr	r3, [pc, #340]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11d      	bne.n	8003a76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3e:	e01a      	b.n	8003a76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a40:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d116      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e013      	b.n	8003a7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a52:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10f      	bne.n	8003a7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a5e:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a6e:	e006      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      break;
 8003a74:	e004      	b.n	8003a80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10d      	bne.n	8003aa2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a86:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	4939      	ldr	r1, [pc, #228]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d167      	bne.n	8003b78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003aa8:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a35      	ldr	r2, [pc, #212]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab4:	f7fe f808 	bl	8001ac8 <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aba:	e009      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003abc:	f7fe f804 	bl	8001ac8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d902      	bls.n	8003ad0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ace:	e005      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ad0:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1ef      	bne.n	8003abc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d14a      	bne.n	8003b78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d111      	bne.n	8003b0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae8:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	0211      	lsls	r1, r2, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	0912      	lsrs	r2, r2, #4
 8003b00:	0452      	lsls	r2, r2, #17
 8003b02:	430a      	orrs	r2, r1
 8003b04:	491f      	ldr	r1, [pc, #124]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	614b      	str	r3, [r1, #20]
 8003b0a:	e011      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6892      	ldr	r2, [r2, #8]
 8003b1c:	0211      	lsls	r1, r2, #8
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6912      	ldr	r2, [r2, #16]
 8003b22:	0852      	lsrs	r2, r2, #1
 8003b24:	3a01      	subs	r2, #1
 8003b26:	0652      	lsls	r2, r2, #25
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	4916      	ldr	r1, [pc, #88]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b30:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fd ffc4 	bl	8001ac8 <HAL_GetTick>
 8003b40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b42:	e009      	b.n	8003b58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b44:	f7fd ffc0 	bl	8001ac8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d902      	bls.n	8003b58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	73fb      	strb	r3, [r7, #15]
          break;
 8003b56:	e005      	b.n	8003b64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	4904      	ldr	r1, [pc, #16]	; (8003b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000

08003b88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e049      	b.n	8003c2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fd fd36 	bl	8001620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f000 fd34 	bl	8004634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x28>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e03c      	b.n	8003cda <HAL_TIM_PWM_Start_DMA+0xa2>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d109      	bne.n	8003c7a <HAL_TIM_PWM_Start_DMA+0x42>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e02f      	b.n	8003cda <HAL_TIM_PWM_Start_DMA+0xa2>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d109      	bne.n	8003c94 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e022      	b.n	8003cda <HAL_TIM_PWM_Start_DMA+0xa2>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d109      	bne.n	8003cae <HAL_TIM_PWM_Start_DMA+0x76>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	e015      	b.n	8003cda <HAL_TIM_PWM_Start_DMA+0xa2>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d109      	bne.n	8003cc8 <HAL_TIM_PWM_Start_DMA+0x90>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e008      	b.n	8003cda <HAL_TIM_PWM_Start_DMA+0xa2>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e1a6      	b.n	8004030 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d109      	bne.n	8003cfc <HAL_TIM_PWM_Start_DMA+0xc4>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e03c      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d109      	bne.n	8003d16 <HAL_TIM_PWM_Start_DMA+0xde>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	e02f      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d109      	bne.n	8003d30 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	e022      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d109      	bne.n	8003d4a <HAL_TIM_PWM_Start_DMA+0x112>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	e015      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d109      	bne.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e008      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d034      	beq.n	8003de4 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_PWM_Start_DMA+0x152>
 8003d80:	887b      	ldrh	r3, [r7, #2]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e152      	b.n	8004030 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <HAL_TIM_PWM_Start_DMA+0x162>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d98:	e026      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d104      	bne.n	8003daa <HAL_TIM_PWM_Start_DMA+0x172>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da8:	e01e      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_PWM_Start_DMA+0x182>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db8:	e016      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b0c      	cmp	r3, #12
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_PWM_Start_DMA+0x192>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dc8:	e00e      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Start_DMA+0x1a2>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd8:	e006      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003de2:	e001      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e123      	b.n	8004030 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	f200 80ae 	bhi.w	8003f4c <HAL_TIM_PWM_Start_DMA+0x314>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003f4d 	.word	0x08003f4d
 8003e00:	08003f4d 	.word	0x08003f4d
 8003e04:	08003f4d 	.word	0x08003f4d
 8003e08:	08003e75 	.word	0x08003e75
 8003e0c:	08003f4d 	.word	0x08003f4d
 8003e10:	08003f4d 	.word	0x08003f4d
 8003e14:	08003f4d 	.word	0x08003f4d
 8003e18:	08003ebd 	.word	0x08003ebd
 8003e1c:	08003f4d 	.word	0x08003f4d
 8003e20:	08003f4d 	.word	0x08003f4d
 8003e24:	08003f4d 	.word	0x08003f4d
 8003e28:	08003f05 	.word	0x08003f05
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	4a81      	ldr	r2, [pc, #516]	; (8004038 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003e32:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	4a80      	ldr	r2, [pc, #512]	; (800403c <HAL_TIM_PWM_Start_DMA+0x404>)
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	4a7f      	ldr	r2, [pc, #508]	; (8004040 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003e42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3334      	adds	r3, #52	; 0x34
 8003e50:	461a      	mov	r2, r3
 8003e52:	887b      	ldrh	r3, [r7, #2]
 8003e54:	f7fe f832 	bl	8001ebc <HAL_DMA_Start_IT>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e0e6      	b.n	8004030 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e70:	60da      	str	r2, [r3, #12]
      break;
 8003e72:	e06c      	b.n	8003f4e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	4a6f      	ldr	r2, [pc, #444]	; (8004038 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003e7a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	4a6e      	ldr	r2, [pc, #440]	; (800403c <HAL_TIM_PWM_Start_DMA+0x404>)
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	4a6d      	ldr	r2, [pc, #436]	; (8004040 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3338      	adds	r3, #56	; 0x38
 8003e98:	461a      	mov	r2, r3
 8003e9a:	887b      	ldrh	r3, [r7, #2]
 8003e9c:	f7fe f80e 	bl	8001ebc <HAL_DMA_Start_IT>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0c2      	b.n	8004030 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eb8:	60da      	str	r2, [r3, #12]
      break;
 8003eba:	e048      	b.n	8003f4e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	4a5d      	ldr	r2, [pc, #372]	; (8004038 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a5c      	ldr	r2, [pc, #368]	; (800403c <HAL_TIM_PWM_Start_DMA+0x404>)
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	4a5b      	ldr	r2, [pc, #364]	; (8004040 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003ed2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	333c      	adds	r3, #60	; 0x3c
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	f7fd ffea 	bl	8001ebc <HAL_DMA_Start_IT>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e09e      	b.n	8004030 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f00:	60da      	str	r2, [r3, #12]
      break;
 8003f02:	e024      	b.n	8003f4e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	4a4b      	ldr	r2, [pc, #300]	; (8004038 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	4a4a      	ldr	r2, [pc, #296]	; (800403c <HAL_TIM_PWM_Start_DMA+0x404>)
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	4a49      	ldr	r2, [pc, #292]	; (8004040 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3340      	adds	r3, #64	; 0x40
 8003f28:	461a      	mov	r2, r3
 8003f2a:	887b      	ldrh	r3, [r7, #2]
 8003f2c:	f7fd ffc6 	bl	8001ebc <HAL_DMA_Start_IT>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07a      	b.n	8004030 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f48:	60da      	str	r2, [r3, #12]
      break;
 8003f4a:	e000      	b.n	8003f4e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8003f4c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2201      	movs	r2, #1
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fedc 	bl	8004d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a38      	ldr	r2, [pc, #224]	; (8004044 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x356>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a37      	ldr	r2, [pc, #220]	; (8004048 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x356>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a35      	ldr	r2, [pc, #212]	; (800404c <HAL_TIM_PWM_Start_DMA+0x414>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x356>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a34      	ldr	r2, [pc, #208]	; (8004050 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x356>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a32      	ldr	r2, [pc, #200]	; (8004054 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_PWM_Start_DMA+0x35a>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_TIM_PWM_Start_DMA+0x35c>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a25      	ldr	r2, [pc, #148]	; (8004044 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01d      	beq.n	8003fee <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d018      	beq.n	8003fee <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a25      	ldr	r2, [pc, #148]	; (8004058 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a24      	ldr	r2, [pc, #144]	; (800405c <HAL_TIM_PWM_Start_DMA+0x424>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a22      	ldr	r2, [pc, #136]	; (8004060 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1a      	ldr	r2, [pc, #104]	; (8004048 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a18      	ldr	r2, [pc, #96]	; (800404c <HAL_TIM_PWM_Start_DMA+0x414>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d115      	bne.n	800401a <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b06      	cmp	r3, #6
 8003ffe:	d015      	beq.n	800402c <HAL_TIM_PWM_Start_DMA+0x3f4>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004006:	d011      	beq.n	800402c <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004018:	e008      	b.n	800402c <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e000      	b.n	800402e <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	08004523 	.word	0x08004523
 800403c:	080045cb 	.word	0x080045cb
 8004040:	08004491 	.word	0x08004491
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40013400 	.word	0x40013400
 800404c:	40014000 	.word	0x40014000
 8004050:	40014400 	.word	0x40014400
 8004054:	40014800 	.word	0x40014800
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	00010007 	.word	0x00010007

08004068 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d855      	bhi.n	8004124 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8004078:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407e:	bf00      	nop
 8004080:	080040b5 	.word	0x080040b5
 8004084:	08004125 	.word	0x08004125
 8004088:	08004125 	.word	0x08004125
 800408c:	08004125 	.word	0x08004125
 8004090:	080040d1 	.word	0x080040d1
 8004094:	08004125 	.word	0x08004125
 8004098:	08004125 	.word	0x08004125
 800409c:	08004125 	.word	0x08004125
 80040a0:	080040ed 	.word	0x080040ed
 80040a4:	08004125 	.word	0x08004125
 80040a8:	08004125 	.word	0x08004125
 80040ac:	08004125 	.word	0x08004125
 80040b0:	08004109 	.word	0x08004109
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd ff57 	bl	8001f7c <HAL_DMA_Abort_IT>
      break;
 80040ce:	e02a      	b.n	8004126 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fd ff49 	bl	8001f7c <HAL_DMA_Abort_IT>
      break;
 80040ea:	e01c      	b.n	8004126 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	4618      	mov	r0, r3
 8004102:	f7fd ff3b 	bl	8001f7c <HAL_DMA_Abort_IT>
      break;
 8004106:	e00e      	b.n	8004126 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004116:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd ff2d 	bl	8001f7c <HAL_DMA_Abort_IT>
      break;
 8004122:	e000      	b.n	8004126 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8004124:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	6839      	ldr	r1, [r7, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fdf0 	bl	8004d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a3e      	ldr	r2, [pc, #248]	; (8004234 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3d      	ldr	r2, [pc, #244]	; (8004238 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a3b      	ldr	r2, [pc, #236]	; (800423c <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a3a      	ldr	r2, [pc, #232]	; (8004240 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a38      	ldr	r2, [pc, #224]	; (8004244 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <HAL_TIM_PWM_Stop_DMA+0x102>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <HAL_TIM_PWM_Stop_DMA+0x104>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d017      	beq.n	80041a0 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6a1a      	ldr	r2, [r3, #32]
 8004176:	f241 1311 	movw	r3, #4369	; 0x1111
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10f      	bne.n	80041a0 <HAL_TIM_PWM_Stop_DMA+0x138>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	f240 4344 	movw	r3, #1092	; 0x444
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_PWM_Stop_DMA+0x138>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a1a      	ldr	r2, [r3, #32]
 80041a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10f      	bne.n	80041d0 <HAL_TIM_PWM_Stop_DMA+0x168>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6a1a      	ldr	r2, [r3, #32]
 80041b6:	f240 4344 	movw	r3, #1092	; 0x444
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_TIM_PWM_Stop_DMA+0x168>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d104      	bne.n	80041e0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041de:	e023      	b.n	8004228 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d104      	bne.n	80041f0 <HAL_TIM_PWM_Stop_DMA+0x188>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ee:	e01b      	b.n	8004228 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d104      	bne.n	8004200 <HAL_TIM_PWM_Stop_DMA+0x198>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041fe:	e013      	b.n	8004228 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d104      	bne.n	8004210 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800420e:	e00b      	b.n	8004228 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b10      	cmp	r3, #16
 8004214:	d104      	bne.n	8004220 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421e:	e003      	b.n	8004228 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40013400 	.word	0x40013400
 800423c:	40014000 	.word	0x40014000
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800

08004248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800425e:	2302      	movs	r3, #2
 8004260:	e0fd      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b14      	cmp	r3, #20
 800426e:	f200 80f0 	bhi.w	8004452 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042cd 	.word	0x080042cd
 800427c:	08004453 	.word	0x08004453
 8004280:	08004453 	.word	0x08004453
 8004284:	08004453 	.word	0x08004453
 8004288:	0800430d 	.word	0x0800430d
 800428c:	08004453 	.word	0x08004453
 8004290:	08004453 	.word	0x08004453
 8004294:	08004453 	.word	0x08004453
 8004298:	0800434f 	.word	0x0800434f
 800429c:	08004453 	.word	0x08004453
 80042a0:	08004453 	.word	0x08004453
 80042a4:	08004453 	.word	0x08004453
 80042a8:	0800438f 	.word	0x0800438f
 80042ac:	08004453 	.word	0x08004453
 80042b0:	08004453 	.word	0x08004453
 80042b4:	08004453 	.word	0x08004453
 80042b8:	080043d1 	.word	0x080043d1
 80042bc:	08004453 	.word	0x08004453
 80042c0:	08004453 	.word	0x08004453
 80042c4:	08004453 	.word	0x08004453
 80042c8:	08004411 	.word	0x08004411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fa48 	bl	8004768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
      break;
 800430a:	e0a3      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fab8 	bl	8004888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      break;
 800434c:	e082      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fb21 	bl	800499c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0204 	bic.w	r2, r2, #4
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e062      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fb89 	bl	8004aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	61da      	str	r2, [r3, #28]
      break;
 80043ce:	e041      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fbd2 	bl	8004b80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0208 	orr.w	r2, r2, #8
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800440e:	e021      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fc16 	bl	8004c48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	021a      	lsls	r2, r3, #8
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004450:	e000      	b.n	8004454 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004452:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop

08004468 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d107      	bne.n	80044b8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b6:	e02a      	b.n	800450e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d107      	bne.n	80044d2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2202      	movs	r2, #2
 80044c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d0:	e01d      	b.n	800450e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d107      	bne.n	80044ec <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2204      	movs	r2, #4
 80044e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ea:	e010      	b.n	800450e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d107      	bne.n	8004506 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2208      	movs	r2, #8
 80044fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004504:	e003      	b.n	800450e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff ffb4 	bl	800447c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	771a      	strb	r2, [r3, #28]
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d10b      	bne.n	8004552 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d136      	bne.n	80045b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004550:	e031      	b.n	80045b6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	d10b      	bne.n	8004574 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2202      	movs	r2, #2
 8004560:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d125      	bne.n	80045b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004572:	e020      	b.n	80045b6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	429a      	cmp	r2, r3
 800457c:	d10b      	bne.n	8004596 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2204      	movs	r2, #4
 8004582:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d114      	bne.n	80045b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004594:	e00f      	b.n	80045b6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d10a      	bne.n	80045b6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2208      	movs	r2, #8
 80045a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d103      	bne.n	80045b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7fd f9d8 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	771a      	strb	r2, [r3, #28]
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d103      	bne.n	80045ea <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	771a      	strb	r2, [r3, #28]
 80045e8:	e019      	b.n	800461e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d103      	bne.n	80045fc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2202      	movs	r2, #2
 80045f8:	771a      	strb	r2, [r3, #28]
 80045fa:	e010      	b.n	800461e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d103      	bne.n	800460e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2204      	movs	r2, #4
 800460a:	771a      	strb	r2, [r3, #28]
 800460c:	e007      	b.n	800461e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d102      	bne.n	800461e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2208      	movs	r2, #8
 800461c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff ff22 	bl	8004468 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	771a      	strb	r2, [r3, #28]
}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a40      	ldr	r2, [pc, #256]	; (8004748 <TIM_Base_SetConfig+0x114>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <TIM_Base_SetConfig+0x40>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004652:	d00f      	beq.n	8004674 <TIM_Base_SetConfig+0x40>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a3d      	ldr	r2, [pc, #244]	; (800474c <TIM_Base_SetConfig+0x118>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00b      	beq.n	8004674 <TIM_Base_SetConfig+0x40>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a3c      	ldr	r2, [pc, #240]	; (8004750 <TIM_Base_SetConfig+0x11c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_Base_SetConfig+0x40>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a3b      	ldr	r2, [pc, #236]	; (8004754 <TIM_Base_SetConfig+0x120>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_Base_SetConfig+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a3a      	ldr	r2, [pc, #232]	; (8004758 <TIM_Base_SetConfig+0x124>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d108      	bne.n	8004686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <TIM_Base_SetConfig+0x114>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01f      	beq.n	80046ce <TIM_Base_SetConfig+0x9a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004694:	d01b      	beq.n	80046ce <TIM_Base_SetConfig+0x9a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a2c      	ldr	r2, [pc, #176]	; (800474c <TIM_Base_SetConfig+0x118>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d017      	beq.n	80046ce <TIM_Base_SetConfig+0x9a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a2b      	ldr	r2, [pc, #172]	; (8004750 <TIM_Base_SetConfig+0x11c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <TIM_Base_SetConfig+0x9a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a2a      	ldr	r2, [pc, #168]	; (8004754 <TIM_Base_SetConfig+0x120>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00f      	beq.n	80046ce <TIM_Base_SetConfig+0x9a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a29      	ldr	r2, [pc, #164]	; (8004758 <TIM_Base_SetConfig+0x124>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_Base_SetConfig+0x9a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a28      	ldr	r2, [pc, #160]	; (800475c <TIM_Base_SetConfig+0x128>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_Base_SetConfig+0x9a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a27      	ldr	r2, [pc, #156]	; (8004760 <TIM_Base_SetConfig+0x12c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_Base_SetConfig+0x9a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a26      	ldr	r2, [pc, #152]	; (8004764 <TIM_Base_SetConfig+0x130>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d108      	bne.n	80046e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a10      	ldr	r2, [pc, #64]	; (8004748 <TIM_Base_SetConfig+0x114>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00f      	beq.n	800472c <TIM_Base_SetConfig+0xf8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a12      	ldr	r2, [pc, #72]	; (8004758 <TIM_Base_SetConfig+0x124>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00b      	beq.n	800472c <TIM_Base_SetConfig+0xf8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a11      	ldr	r2, [pc, #68]	; (800475c <TIM_Base_SetConfig+0x128>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <TIM_Base_SetConfig+0xf8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <TIM_Base_SetConfig+0x12c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_Base_SetConfig+0xf8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a0f      	ldr	r2, [pc, #60]	; (8004764 <TIM_Base_SetConfig+0x130>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d103      	bne.n	8004734 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	615a      	str	r2, [r3, #20]
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40013400 	.word	0x40013400
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800

08004768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f023 0201 	bic.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f023 0302 	bic.w	r3, r3, #2
 80047b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <TIM_OC1_SetConfig+0x10c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00f      	beq.n	80047e8 <TIM_OC1_SetConfig+0x80>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a2b      	ldr	r2, [pc, #172]	; (8004878 <TIM_OC1_SetConfig+0x110>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00b      	beq.n	80047e8 <TIM_OC1_SetConfig+0x80>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a2a      	ldr	r2, [pc, #168]	; (800487c <TIM_OC1_SetConfig+0x114>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d007      	beq.n	80047e8 <TIM_OC1_SetConfig+0x80>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a29      	ldr	r2, [pc, #164]	; (8004880 <TIM_OC1_SetConfig+0x118>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_OC1_SetConfig+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a28      	ldr	r2, [pc, #160]	; (8004884 <TIM_OC1_SetConfig+0x11c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d10c      	bne.n	8004802 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0308 	bic.w	r3, r3, #8
 80047ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 0304 	bic.w	r3, r3, #4
 8004800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <TIM_OC1_SetConfig+0x10c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00f      	beq.n	800482a <TIM_OC1_SetConfig+0xc2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1a      	ldr	r2, [pc, #104]	; (8004878 <TIM_OC1_SetConfig+0x110>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00b      	beq.n	800482a <TIM_OC1_SetConfig+0xc2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a19      	ldr	r2, [pc, #100]	; (800487c <TIM_OC1_SetConfig+0x114>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <TIM_OC1_SetConfig+0xc2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a18      	ldr	r2, [pc, #96]	; (8004880 <TIM_OC1_SetConfig+0x118>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_OC1_SetConfig+0xc2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a17      	ldr	r2, [pc, #92]	; (8004884 <TIM_OC1_SetConfig+0x11c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d111      	bne.n	800484e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	621a      	str	r2, [r3, #32]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40013400 	.word	0x40013400
 800487c:	40014000 	.word	0x40014000
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800

08004888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0210 	bic.w	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0320 	bic.w	r3, r3, #32
 80048d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a28      	ldr	r2, [pc, #160]	; (8004988 <TIM_OC2_SetConfig+0x100>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_OC2_SetConfig+0x6c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a27      	ldr	r2, [pc, #156]	; (800498c <TIM_OC2_SetConfig+0x104>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10d      	bne.n	8004910 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <TIM_OC2_SetConfig+0x100>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00f      	beq.n	8004938 <TIM_OC2_SetConfig+0xb0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1c      	ldr	r2, [pc, #112]	; (800498c <TIM_OC2_SetConfig+0x104>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_OC2_SetConfig+0xb0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <TIM_OC2_SetConfig+0x108>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_OC2_SetConfig+0xb0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <TIM_OC2_SetConfig+0x10c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_OC2_SetConfig+0xb0>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a19      	ldr	r2, [pc, #100]	; (8004998 <TIM_OC2_SetConfig+0x110>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d113      	bne.n	8004960 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800493e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <TIM_OC3_SetConfig+0xfc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_OC3_SetConfig+0x6a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a26      	ldr	r2, [pc, #152]	; (8004a9c <TIM_OC3_SetConfig+0x100>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d10d      	bne.n	8004a22 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <TIM_OC3_SetConfig+0xfc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00f      	beq.n	8004a4a <TIM_OC3_SetConfig+0xae>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <TIM_OC3_SetConfig+0x100>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00b      	beq.n	8004a4a <TIM_OC3_SetConfig+0xae>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <TIM_OC3_SetConfig+0x104>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d007      	beq.n	8004a4a <TIM_OC3_SetConfig+0xae>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a19      	ldr	r2, [pc, #100]	; (8004aa4 <TIM_OC3_SetConfig+0x108>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d003      	beq.n	8004a4a <TIM_OC3_SetConfig+0xae>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <TIM_OC3_SetConfig+0x10c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d113      	bne.n	8004a72 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	621a      	str	r2, [r3, #32]
}
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40013400 	.word	0x40013400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400
 8004aa8:	40014800 	.word	0x40014800

08004aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	031b      	lsls	r3, r3, #12
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <TIM_OC4_SetConfig+0xc0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00f      	beq.n	8004b30 <TIM_OC4_SetConfig+0x84>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <TIM_OC4_SetConfig+0xc4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <TIM_OC4_SetConfig+0x84>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <TIM_OC4_SetConfig+0xc8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <TIM_OC4_SetConfig+0x84>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <TIM_OC4_SetConfig+0xcc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_OC4_SetConfig+0x84>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <TIM_OC4_SetConfig+0xd0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d109      	bne.n	8004b44 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	019b      	lsls	r3, r3, #6
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40013400 	.word	0x40013400
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40014400 	.word	0x40014400
 8004b7c:	40014800 	.word	0x40014800

08004b80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	041b      	lsls	r3, r3, #16
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <TIM_OC5_SetConfig+0xb4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_OC5_SetConfig+0x7a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <TIM_OC5_SetConfig+0xb8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_OC5_SetConfig+0x7a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <TIM_OC5_SetConfig+0xbc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_OC5_SetConfig+0x7a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <TIM_OC5_SetConfig+0xc0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_OC5_SetConfig+0x7a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a13      	ldr	r2, [pc, #76]	; (8004c44 <TIM_OC5_SetConfig+0xc4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d109      	bne.n	8004c0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	621a      	str	r2, [r3, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40013400 	.word	0x40013400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40014400 	.word	0x40014400
 8004c44:	40014800 	.word	0x40014800

08004c48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	051b      	lsls	r3, r3, #20
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <TIM_OC6_SetConfig+0xb8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00f      	beq.n	8004cc4 <TIM_OC6_SetConfig+0x7c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a17      	ldr	r2, [pc, #92]	; (8004d04 <TIM_OC6_SetConfig+0xbc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <TIM_OC6_SetConfig+0x7c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <TIM_OC6_SetConfig+0xc0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_OC6_SetConfig+0x7c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <TIM_OC6_SetConfig+0xc4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC6_SetConfig+0x7c>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <TIM_OC6_SetConfig+0xc8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d109      	bne.n	8004cd8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	029b      	lsls	r3, r3, #10
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800

08004d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2201      	movs	r2, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	43db      	mvns	r3, r3
 8004d36:	401a      	ands	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e068      	b.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a2e      	ldr	r2, [pc, #184]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2d      	ldr	r2, [pc, #180]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d108      	bne.n	8004dbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004db2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01d      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dea:	d018      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d10c      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800
 8004e68:	40000c00 	.word	0x40000c00
 8004e6c:	40014000 	.word	0x40014000

08004e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e040      	b.n	8004f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc fcb6 	bl	8001804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	; 0x24
 8004e9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f82c 	bl	8004f0c <UART_SetConfig>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e022      	b.n	8004f04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 faaa 	bl	8005420 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fb31 	bl	8005564 <UART_CheckIdleState>
 8004f02:	4603      	mov	r3, r0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f0c:	b5b0      	push	{r4, r5, r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4bad      	ldr	r3, [pc, #692]	; (80051ec <UART_SetConfig+0x2e0>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	69f9      	ldr	r1, [r7, #28]
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4aa2      	ldr	r2, [pc, #648]	; (80051f0 <UART_SetConfig+0x2e4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a99      	ldr	r2, [pc, #612]	; (80051f4 <UART_SetConfig+0x2e8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d121      	bne.n	8004fd6 <UART_SetConfig+0xca>
 8004f92:	4b99      	ldr	r3, [pc, #612]	; (80051f8 <UART_SetConfig+0x2ec>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d817      	bhi.n	8004fd0 <UART_SetConfig+0xc4>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0x9c>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fb9 	.word	0x08004fb9
 8004fac:	08004fc5 	.word	0x08004fc5
 8004fb0:	08004fbf 	.word	0x08004fbf
 8004fb4:	08004fcb 	.word	0x08004fcb
 8004fb8:	2301      	movs	r3, #1
 8004fba:	76fb      	strb	r3, [r7, #27]
 8004fbc:	e0e7      	b.n	800518e <UART_SetConfig+0x282>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	76fb      	strb	r3, [r7, #27]
 8004fc2:	e0e4      	b.n	800518e <UART_SetConfig+0x282>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	76fb      	strb	r3, [r7, #27]
 8004fc8:	e0e1      	b.n	800518e <UART_SetConfig+0x282>
 8004fca:	2308      	movs	r3, #8
 8004fcc:	76fb      	strb	r3, [r7, #27]
 8004fce:	e0de      	b.n	800518e <UART_SetConfig+0x282>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	76fb      	strb	r3, [r7, #27]
 8004fd4:	e0db      	b.n	800518e <UART_SetConfig+0x282>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a88      	ldr	r2, [pc, #544]	; (80051fc <UART_SetConfig+0x2f0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d132      	bne.n	8005046 <UART_SetConfig+0x13a>
 8004fe0:	4b85      	ldr	r3, [pc, #532]	; (80051f8 <UART_SetConfig+0x2ec>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b0c      	cmp	r3, #12
 8004fec:	d828      	bhi.n	8005040 <UART_SetConfig+0x134>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0xe8>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005029 	.word	0x08005029
 8004ff8:	08005041 	.word	0x08005041
 8004ffc:	08005041 	.word	0x08005041
 8005000:	08005041 	.word	0x08005041
 8005004:	08005035 	.word	0x08005035
 8005008:	08005041 	.word	0x08005041
 800500c:	08005041 	.word	0x08005041
 8005010:	08005041 	.word	0x08005041
 8005014:	0800502f 	.word	0x0800502f
 8005018:	08005041 	.word	0x08005041
 800501c:	08005041 	.word	0x08005041
 8005020:	08005041 	.word	0x08005041
 8005024:	0800503b 	.word	0x0800503b
 8005028:	2300      	movs	r3, #0
 800502a:	76fb      	strb	r3, [r7, #27]
 800502c:	e0af      	b.n	800518e <UART_SetConfig+0x282>
 800502e:	2302      	movs	r3, #2
 8005030:	76fb      	strb	r3, [r7, #27]
 8005032:	e0ac      	b.n	800518e <UART_SetConfig+0x282>
 8005034:	2304      	movs	r3, #4
 8005036:	76fb      	strb	r3, [r7, #27]
 8005038:	e0a9      	b.n	800518e <UART_SetConfig+0x282>
 800503a:	2308      	movs	r3, #8
 800503c:	76fb      	strb	r3, [r7, #27]
 800503e:	e0a6      	b.n	800518e <UART_SetConfig+0x282>
 8005040:	2310      	movs	r3, #16
 8005042:	76fb      	strb	r3, [r7, #27]
 8005044:	e0a3      	b.n	800518e <UART_SetConfig+0x282>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6d      	ldr	r2, [pc, #436]	; (8005200 <UART_SetConfig+0x2f4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d120      	bne.n	8005092 <UART_SetConfig+0x186>
 8005050:	4b69      	ldr	r3, [pc, #420]	; (80051f8 <UART_SetConfig+0x2ec>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800505a:	2b30      	cmp	r3, #48	; 0x30
 800505c:	d013      	beq.n	8005086 <UART_SetConfig+0x17a>
 800505e:	2b30      	cmp	r3, #48	; 0x30
 8005060:	d814      	bhi.n	800508c <UART_SetConfig+0x180>
 8005062:	2b20      	cmp	r3, #32
 8005064:	d009      	beq.n	800507a <UART_SetConfig+0x16e>
 8005066:	2b20      	cmp	r3, #32
 8005068:	d810      	bhi.n	800508c <UART_SetConfig+0x180>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <UART_SetConfig+0x168>
 800506e:	2b10      	cmp	r3, #16
 8005070:	d006      	beq.n	8005080 <UART_SetConfig+0x174>
 8005072:	e00b      	b.n	800508c <UART_SetConfig+0x180>
 8005074:	2300      	movs	r3, #0
 8005076:	76fb      	strb	r3, [r7, #27]
 8005078:	e089      	b.n	800518e <UART_SetConfig+0x282>
 800507a:	2302      	movs	r3, #2
 800507c:	76fb      	strb	r3, [r7, #27]
 800507e:	e086      	b.n	800518e <UART_SetConfig+0x282>
 8005080:	2304      	movs	r3, #4
 8005082:	76fb      	strb	r3, [r7, #27]
 8005084:	e083      	b.n	800518e <UART_SetConfig+0x282>
 8005086:	2308      	movs	r3, #8
 8005088:	76fb      	strb	r3, [r7, #27]
 800508a:	e080      	b.n	800518e <UART_SetConfig+0x282>
 800508c:	2310      	movs	r3, #16
 800508e:	76fb      	strb	r3, [r7, #27]
 8005090:	e07d      	b.n	800518e <UART_SetConfig+0x282>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5b      	ldr	r2, [pc, #364]	; (8005204 <UART_SetConfig+0x2f8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d120      	bne.n	80050de <UART_SetConfig+0x1d2>
 800509c:	4b56      	ldr	r3, [pc, #344]	; (80051f8 <UART_SetConfig+0x2ec>)
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050a6:	2bc0      	cmp	r3, #192	; 0xc0
 80050a8:	d013      	beq.n	80050d2 <UART_SetConfig+0x1c6>
 80050aa:	2bc0      	cmp	r3, #192	; 0xc0
 80050ac:	d814      	bhi.n	80050d8 <UART_SetConfig+0x1cc>
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d009      	beq.n	80050c6 <UART_SetConfig+0x1ba>
 80050b2:	2b80      	cmp	r3, #128	; 0x80
 80050b4:	d810      	bhi.n	80050d8 <UART_SetConfig+0x1cc>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <UART_SetConfig+0x1b4>
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d006      	beq.n	80050cc <UART_SetConfig+0x1c0>
 80050be:	e00b      	b.n	80050d8 <UART_SetConfig+0x1cc>
 80050c0:	2300      	movs	r3, #0
 80050c2:	76fb      	strb	r3, [r7, #27]
 80050c4:	e063      	b.n	800518e <UART_SetConfig+0x282>
 80050c6:	2302      	movs	r3, #2
 80050c8:	76fb      	strb	r3, [r7, #27]
 80050ca:	e060      	b.n	800518e <UART_SetConfig+0x282>
 80050cc:	2304      	movs	r3, #4
 80050ce:	76fb      	strb	r3, [r7, #27]
 80050d0:	e05d      	b.n	800518e <UART_SetConfig+0x282>
 80050d2:	2308      	movs	r3, #8
 80050d4:	76fb      	strb	r3, [r7, #27]
 80050d6:	e05a      	b.n	800518e <UART_SetConfig+0x282>
 80050d8:	2310      	movs	r3, #16
 80050da:	76fb      	strb	r3, [r7, #27]
 80050dc:	e057      	b.n	800518e <UART_SetConfig+0x282>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a49      	ldr	r2, [pc, #292]	; (8005208 <UART_SetConfig+0x2fc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d125      	bne.n	8005134 <UART_SetConfig+0x228>
 80050e8:	4b43      	ldr	r3, [pc, #268]	; (80051f8 <UART_SetConfig+0x2ec>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f6:	d017      	beq.n	8005128 <UART_SetConfig+0x21c>
 80050f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fc:	d817      	bhi.n	800512e <UART_SetConfig+0x222>
 80050fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005102:	d00b      	beq.n	800511c <UART_SetConfig+0x210>
 8005104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005108:	d811      	bhi.n	800512e <UART_SetConfig+0x222>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <UART_SetConfig+0x20a>
 800510e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005112:	d006      	beq.n	8005122 <UART_SetConfig+0x216>
 8005114:	e00b      	b.n	800512e <UART_SetConfig+0x222>
 8005116:	2300      	movs	r3, #0
 8005118:	76fb      	strb	r3, [r7, #27]
 800511a:	e038      	b.n	800518e <UART_SetConfig+0x282>
 800511c:	2302      	movs	r3, #2
 800511e:	76fb      	strb	r3, [r7, #27]
 8005120:	e035      	b.n	800518e <UART_SetConfig+0x282>
 8005122:	2304      	movs	r3, #4
 8005124:	76fb      	strb	r3, [r7, #27]
 8005126:	e032      	b.n	800518e <UART_SetConfig+0x282>
 8005128:	2308      	movs	r3, #8
 800512a:	76fb      	strb	r3, [r7, #27]
 800512c:	e02f      	b.n	800518e <UART_SetConfig+0x282>
 800512e:	2310      	movs	r3, #16
 8005130:	76fb      	strb	r3, [r7, #27]
 8005132:	e02c      	b.n	800518e <UART_SetConfig+0x282>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2d      	ldr	r2, [pc, #180]	; (80051f0 <UART_SetConfig+0x2e4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d125      	bne.n	800518a <UART_SetConfig+0x27e>
 800513e:	4b2e      	ldr	r3, [pc, #184]	; (80051f8 <UART_SetConfig+0x2ec>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800514c:	d017      	beq.n	800517e <UART_SetConfig+0x272>
 800514e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005152:	d817      	bhi.n	8005184 <UART_SetConfig+0x278>
 8005154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005158:	d00b      	beq.n	8005172 <UART_SetConfig+0x266>
 800515a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515e:	d811      	bhi.n	8005184 <UART_SetConfig+0x278>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <UART_SetConfig+0x260>
 8005164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005168:	d006      	beq.n	8005178 <UART_SetConfig+0x26c>
 800516a:	e00b      	b.n	8005184 <UART_SetConfig+0x278>
 800516c:	2300      	movs	r3, #0
 800516e:	76fb      	strb	r3, [r7, #27]
 8005170:	e00d      	b.n	800518e <UART_SetConfig+0x282>
 8005172:	2302      	movs	r3, #2
 8005174:	76fb      	strb	r3, [r7, #27]
 8005176:	e00a      	b.n	800518e <UART_SetConfig+0x282>
 8005178:	2304      	movs	r3, #4
 800517a:	76fb      	strb	r3, [r7, #27]
 800517c:	e007      	b.n	800518e <UART_SetConfig+0x282>
 800517e:	2308      	movs	r3, #8
 8005180:	76fb      	strb	r3, [r7, #27]
 8005182:	e004      	b.n	800518e <UART_SetConfig+0x282>
 8005184:	2310      	movs	r3, #16
 8005186:	76fb      	strb	r3, [r7, #27]
 8005188:	e001      	b.n	800518e <UART_SetConfig+0x282>
 800518a:	2310      	movs	r3, #16
 800518c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <UART_SetConfig+0x2e4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	f040 8087 	bne.w	80052a8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800519a:	7efb      	ldrb	r3, [r7, #27]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d837      	bhi.n	8005210 <UART_SetConfig+0x304>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x29c>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	08005211 	.word	0x08005211
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	08005211 	.word	0x08005211
 80051b8:	080051db 	.word	0x080051db
 80051bc:	08005211 	.word	0x08005211
 80051c0:	08005211 	.word	0x08005211
 80051c4:	08005211 	.word	0x08005211
 80051c8:	080051e3 	.word	0x080051e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fd ff94 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 80051d0:	6178      	str	r0, [r7, #20]
        break;
 80051d2:	e022      	b.n	800521a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d4:	4b0d      	ldr	r3, [pc, #52]	; (800520c <UART_SetConfig+0x300>)
 80051d6:	617b      	str	r3, [r7, #20]
        break;
 80051d8:	e01f      	b.n	800521a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051da:	f7fd fef7 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80051de:	6178      	str	r0, [r7, #20]
        break;
 80051e0:	e01b      	b.n	800521a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e6:	617b      	str	r3, [r7, #20]
        break;
 80051e8:	e017      	b.n	800521a <UART_SetConfig+0x30e>
 80051ea:	bf00      	nop
 80051ec:	efff69f3 	.word	0xefff69f3
 80051f0:	40008000 	.word	0x40008000
 80051f4:	40013800 	.word	0x40013800
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40004400 	.word	0x40004400
 8005200:	40004800 	.word	0x40004800
 8005204:	40004c00 	.word	0x40004c00
 8005208:	40005000 	.word	0x40005000
 800520c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	76bb      	strb	r3, [r7, #26]
        break;
 8005218:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80f1 	beq.w	8005404 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4413      	add	r3, r2
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	429a      	cmp	r2, r3
 8005230:	d305      	bcc.n	800523e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	429a      	cmp	r2, r3
 800523c:	d902      	bls.n	8005244 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	76bb      	strb	r3, [r7, #26]
 8005242:	e0df      	b.n	8005404 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4618      	mov	r0, r3
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	020b      	lsls	r3, r1, #8
 8005256:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800525a:	0202      	lsls	r2, r0, #8
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	6849      	ldr	r1, [r1, #4]
 8005260:	0849      	lsrs	r1, r1, #1
 8005262:	4608      	mov	r0, r1
 8005264:	f04f 0100 	mov.w	r1, #0
 8005268:	1814      	adds	r4, r2, r0
 800526a:	eb43 0501 	adc.w	r5, r3, r1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	461a      	mov	r2, r3
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	4620      	mov	r0, r4
 800527a:	4629      	mov	r1, r5
 800527c:	f7fb fbc2 	bl	8000a04 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4613      	mov	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800528e:	d308      	bcc.n	80052a2 <UART_SetConfig+0x396>
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005296:	d204      	bcs.n	80052a2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	60da      	str	r2, [r3, #12]
 80052a0:	e0b0      	b.n	8005404 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	76bb      	strb	r3, [r7, #26]
 80052a6:	e0ad      	b.n	8005404 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b0:	d15c      	bne.n	800536c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80052b2:	7efb      	ldrb	r3, [r7, #27]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d828      	bhi.n	800530a <UART_SetConfig+0x3fe>
 80052b8:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <UART_SetConfig+0x3b4>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	0800530b 	.word	0x0800530b
 80052d0:	080052fb 	.word	0x080052fb
 80052d4:	0800530b 	.word	0x0800530b
 80052d8:	0800530b 	.word	0x0800530b
 80052dc:	0800530b 	.word	0x0800530b
 80052e0:	08005303 	.word	0x08005303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fd ff08 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 80052e8:	6178      	str	r0, [r7, #20]
        break;
 80052ea:	e013      	b.n	8005314 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ec:	f7fd ff1a 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 80052f0:	6178      	str	r0, [r7, #20]
        break;
 80052f2:	e00f      	b.n	8005314 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f4:	4b49      	ldr	r3, [pc, #292]	; (800541c <UART_SetConfig+0x510>)
 80052f6:	617b      	str	r3, [r7, #20]
        break;
 80052f8:	e00c      	b.n	8005314 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fa:	f7fd fe67 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80052fe:	6178      	str	r0, [r7, #20]
        break;
 8005300:	e008      	b.n	8005314 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005306:	617b      	str	r3, [r7, #20]
        break;
 8005308:	e004      	b.n	8005314 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	76bb      	strb	r3, [r7, #26]
        break;
 8005312:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d074      	beq.n	8005404 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	005a      	lsls	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	441a      	add	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d916      	bls.n	8005366 <UART_SetConfig+0x45a>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533e:	d212      	bcs.n	8005366 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f023 030f 	bic.w	r3, r3, #15
 8005348:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	b29b      	uxth	r3, r3
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	b29a      	uxth	r2, r3
 8005356:	89fb      	ldrh	r3, [r7, #14]
 8005358:	4313      	orrs	r3, r2
 800535a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	89fa      	ldrh	r2, [r7, #14]
 8005362:	60da      	str	r2, [r3, #12]
 8005364:	e04e      	b.n	8005404 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	76bb      	strb	r3, [r7, #26]
 800536a:	e04b      	b.n	8005404 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800536c:	7efb      	ldrb	r3, [r7, #27]
 800536e:	2b08      	cmp	r3, #8
 8005370:	d827      	bhi.n	80053c2 <UART_SetConfig+0x4b6>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x46c>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	080053c3 	.word	0x080053c3
 8005388:	080053b3 	.word	0x080053b3
 800538c:	080053c3 	.word	0x080053c3
 8005390:	080053c3 	.word	0x080053c3
 8005394:	080053c3 	.word	0x080053c3
 8005398:	080053bb 	.word	0x080053bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fd feac 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 80053a0:	6178      	str	r0, [r7, #20]
        break;
 80053a2:	e013      	b.n	80053cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a4:	f7fd febe 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 80053a8:	6178      	str	r0, [r7, #20]
        break;
 80053aa:	e00f      	b.n	80053cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <UART_SetConfig+0x510>)
 80053ae:	617b      	str	r3, [r7, #20]
        break;
 80053b0:	e00c      	b.n	80053cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b2:	f7fd fe0b 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80053b6:	6178      	str	r0, [r7, #20]
        break;
 80053b8:	e008      	b.n	80053cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053be:	617b      	str	r3, [r7, #20]
        break;
 80053c0:	e004      	b.n	80053cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	76bb      	strb	r3, [r7, #26]
        break;
 80053ca:	bf00      	nop
    }

    if (pclk != 0U)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	085a      	lsrs	r2, r3, #1
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b0f      	cmp	r3, #15
 80053ec:	d908      	bls.n	8005400 <UART_SetConfig+0x4f4>
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f4:	d204      	bcs.n	8005400 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	e001      	b.n	8005404 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005410:	7ebb      	ldrb	r3, [r7, #26]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bdb0      	pop	{r4, r5, r7, pc}
 800541a:	bf00      	nop
 800541c:	00f42400 	.word	0x00f42400

08005420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01a      	beq.n	8005536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551e:	d10a      	bne.n	8005536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af02      	add	r7, sp, #8
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005574:	f7fc faa8 	bl	8001ac8 <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b08      	cmp	r3, #8
 8005586:	d10e      	bne.n	80055a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f82d 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e023      	b.n	80055ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d10e      	bne.n	80055d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f817 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e00d      	b.n	80055ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	4613      	mov	r3, r2
 8005604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005606:	e05e      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d05a      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005610:	f7fc fa5a 	bl	8001ac8 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	429a      	cmp	r2, r3
 800561e:	d302      	bcc.n	8005626 <UART_WaitOnFlagUntilTimeout+0x30>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d11b      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005634:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e043      	b.n	80056e6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d02c      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567a:	d124      	bne.n	80056c6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005684:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005694:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e00f      	b.n	80056e6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4013      	ands	r3, r2
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d091      	beq.n	8005608 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <tanf>:
 80056f0:	ee10 3a10 	vmov	r3, s0
 80056f4:	b507      	push	{r0, r1, r2, lr}
 80056f6:	4a10      	ldr	r2, [pc, #64]	; (8005738 <tanf+0x48>)
 80056f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056fc:	4293      	cmp	r3, r2
 80056fe:	dc05      	bgt.n	800570c <tanf+0x1c>
 8005700:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800573c <tanf+0x4c>
 8005704:	2001      	movs	r0, #1
 8005706:	f000 fbe1 	bl	8005ecc <__kernel_tanf>
 800570a:	e004      	b.n	8005716 <tanf+0x26>
 800570c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005710:	db04      	blt.n	800571c <tanf+0x2c>
 8005712:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005716:	b003      	add	sp, #12
 8005718:	f85d fb04 	ldr.w	pc, [sp], #4
 800571c:	4668      	mov	r0, sp
 800571e:	f000 f80f 	bl	8005740 <__ieee754_rem_pio2f>
 8005722:	0040      	lsls	r0, r0, #1
 8005724:	f000 0002 	and.w	r0, r0, #2
 8005728:	eddd 0a01 	vldr	s1, [sp, #4]
 800572c:	ed9d 0a00 	vldr	s0, [sp]
 8005730:	f1c0 0001 	rsb	r0, r0, #1
 8005734:	e7e7      	b.n	8005706 <tanf+0x16>
 8005736:	bf00      	nop
 8005738:	3f490fda 	.word	0x3f490fda
 800573c:	00000000 	.word	0x00000000

08005740 <__ieee754_rem_pio2f>:
 8005740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005742:	ee10 6a10 	vmov	r6, s0
 8005746:	4b8e      	ldr	r3, [pc, #568]	; (8005980 <__ieee754_rem_pio2f+0x240>)
 8005748:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800574c:	429d      	cmp	r5, r3
 800574e:	b087      	sub	sp, #28
 8005750:	eef0 7a40 	vmov.f32	s15, s0
 8005754:	4604      	mov	r4, r0
 8005756:	dc05      	bgt.n	8005764 <__ieee754_rem_pio2f+0x24>
 8005758:	2300      	movs	r3, #0
 800575a:	ed80 0a00 	vstr	s0, [r0]
 800575e:	6043      	str	r3, [r0, #4]
 8005760:	2000      	movs	r0, #0
 8005762:	e01a      	b.n	800579a <__ieee754_rem_pio2f+0x5a>
 8005764:	4b87      	ldr	r3, [pc, #540]	; (8005984 <__ieee754_rem_pio2f+0x244>)
 8005766:	429d      	cmp	r5, r3
 8005768:	dc46      	bgt.n	80057f8 <__ieee754_rem_pio2f+0xb8>
 800576a:	2e00      	cmp	r6, #0
 800576c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8005988 <__ieee754_rem_pio2f+0x248>
 8005770:	4b86      	ldr	r3, [pc, #536]	; (800598c <__ieee754_rem_pio2f+0x24c>)
 8005772:	f025 050f 	bic.w	r5, r5, #15
 8005776:	dd1f      	ble.n	80057b8 <__ieee754_rem_pio2f+0x78>
 8005778:	429d      	cmp	r5, r3
 800577a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800577e:	d00e      	beq.n	800579e <__ieee754_rem_pio2f+0x5e>
 8005780:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8005990 <__ieee754_rem_pio2f+0x250>
 8005784:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8005788:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800578c:	ed80 0a00 	vstr	s0, [r0]
 8005790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005794:	2001      	movs	r0, #1
 8005796:	edc4 7a01 	vstr	s15, [r4, #4]
 800579a:	b007      	add	sp, #28
 800579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8005994 <__ieee754_rem_pio2f+0x254>
 80057a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005998 <__ieee754_rem_pio2f+0x258>
 80057a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80057aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80057ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057b2:	edc0 6a00 	vstr	s13, [r0]
 80057b6:	e7eb      	b.n	8005790 <__ieee754_rem_pio2f+0x50>
 80057b8:	429d      	cmp	r5, r3
 80057ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80057be:	d00e      	beq.n	80057de <__ieee754_rem_pio2f+0x9e>
 80057c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005990 <__ieee754_rem_pio2f+0x250>
 80057c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80057c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80057cc:	ed80 0a00 	vstr	s0, [r0]
 80057d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80057dc:	e7dd      	b.n	800579a <__ieee754_rem_pio2f+0x5a>
 80057de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8005994 <__ieee754_rem_pio2f+0x254>
 80057e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8005998 <__ieee754_rem_pio2f+0x258>
 80057e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80057ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80057ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057f2:	edc0 6a00 	vstr	s13, [r0]
 80057f6:	e7eb      	b.n	80057d0 <__ieee754_rem_pio2f+0x90>
 80057f8:	4b68      	ldr	r3, [pc, #416]	; (800599c <__ieee754_rem_pio2f+0x25c>)
 80057fa:	429d      	cmp	r5, r3
 80057fc:	dc72      	bgt.n	80058e4 <__ieee754_rem_pio2f+0x1a4>
 80057fe:	f000 fc47 	bl	8006090 <fabsf>
 8005802:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80059a0 <__ieee754_rem_pio2f+0x260>
 8005806:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800580a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800580e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005816:	ee17 0a90 	vmov	r0, s15
 800581a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005988 <__ieee754_rem_pio2f+0x248>
 800581e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005822:	281f      	cmp	r0, #31
 8005824:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8005990 <__ieee754_rem_pio2f+0x250>
 8005828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582c:	eeb1 6a47 	vneg.f32	s12, s14
 8005830:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005834:	ee16 2a90 	vmov	r2, s13
 8005838:	dc1c      	bgt.n	8005874 <__ieee754_rem_pio2f+0x134>
 800583a:	495a      	ldr	r1, [pc, #360]	; (80059a4 <__ieee754_rem_pio2f+0x264>)
 800583c:	1e47      	subs	r7, r0, #1
 800583e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8005842:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005846:	428b      	cmp	r3, r1
 8005848:	d014      	beq.n	8005874 <__ieee754_rem_pio2f+0x134>
 800584a:	6022      	str	r2, [r4, #0]
 800584c:	ed94 7a00 	vldr	s14, [r4]
 8005850:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005854:	2e00      	cmp	r6, #0
 8005856:	ee30 0a67 	vsub.f32	s0, s0, s15
 800585a:	ed84 0a01 	vstr	s0, [r4, #4]
 800585e:	da9c      	bge.n	800579a <__ieee754_rem_pio2f+0x5a>
 8005860:	eeb1 7a47 	vneg.f32	s14, s14
 8005864:	eeb1 0a40 	vneg.f32	s0, s0
 8005868:	ed84 7a00 	vstr	s14, [r4]
 800586c:	ed84 0a01 	vstr	s0, [r4, #4]
 8005870:	4240      	negs	r0, r0
 8005872:	e792      	b.n	800579a <__ieee754_rem_pio2f+0x5a>
 8005874:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005878:	15eb      	asrs	r3, r5, #23
 800587a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800587e:	2d08      	cmp	r5, #8
 8005880:	dde3      	ble.n	800584a <__ieee754_rem_pio2f+0x10a>
 8005882:	eddf 7a44 	vldr	s15, [pc, #272]	; 8005994 <__ieee754_rem_pio2f+0x254>
 8005886:	eef0 6a40 	vmov.f32	s13, s0
 800588a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800588e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005892:	eea6 0a27 	vfma.f32	s0, s12, s15
 8005896:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005998 <__ieee754_rem_pio2f+0x258>
 800589a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800589e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80058a2:	eef0 7a40 	vmov.f32	s15, s0
 80058a6:	ee15 2a90 	vmov	r2, s11
 80058aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80058ae:	1a5b      	subs	r3, r3, r1
 80058b0:	2b19      	cmp	r3, #25
 80058b2:	dc04      	bgt.n	80058be <__ieee754_rem_pio2f+0x17e>
 80058b4:	edc4 5a00 	vstr	s11, [r4]
 80058b8:	eeb0 0a66 	vmov.f32	s0, s13
 80058bc:	e7c6      	b.n	800584c <__ieee754_rem_pio2f+0x10c>
 80058be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80059a8 <__ieee754_rem_pio2f+0x268>
 80058c2:	eeb0 0a66 	vmov.f32	s0, s13
 80058c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80058ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80058ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 80059ac <__ieee754_rem_pio2f+0x26c>
 80058d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80058d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80058da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80058de:	ed84 7a00 	vstr	s14, [r4]
 80058e2:	e7b3      	b.n	800584c <__ieee754_rem_pio2f+0x10c>
 80058e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80058e8:	db06      	blt.n	80058f8 <__ieee754_rem_pio2f+0x1b8>
 80058ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 80058ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80058f2:	edc0 7a00 	vstr	s15, [r0]
 80058f6:	e733      	b.n	8005760 <__ieee754_rem_pio2f+0x20>
 80058f8:	15ea      	asrs	r2, r5, #23
 80058fa:	3a86      	subs	r2, #134	; 0x86
 80058fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005900:	ee07 3a90 	vmov	s15, r3
 8005904:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005908:	eddf 6a29 	vldr	s13, [pc, #164]	; 80059b0 <__ieee754_rem_pio2f+0x270>
 800590c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005910:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005914:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005918:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800591c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005928:	ed8d 7a04 	vstr	s14, [sp, #16]
 800592c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005930:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005938:	edcd 7a05 	vstr	s15, [sp, #20]
 800593c:	d11e      	bne.n	800597c <__ieee754_rem_pio2f+0x23c>
 800593e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005946:	bf14      	ite	ne
 8005948:	2302      	movne	r3, #2
 800594a:	2301      	moveq	r3, #1
 800594c:	4919      	ldr	r1, [pc, #100]	; (80059b4 <__ieee754_rem_pio2f+0x274>)
 800594e:	9101      	str	r1, [sp, #4]
 8005950:	2102      	movs	r1, #2
 8005952:	9100      	str	r1, [sp, #0]
 8005954:	a803      	add	r0, sp, #12
 8005956:	4621      	mov	r1, r4
 8005958:	f000 f82e 	bl	80059b8 <__kernel_rem_pio2f>
 800595c:	2e00      	cmp	r6, #0
 800595e:	f6bf af1c 	bge.w	800579a <__ieee754_rem_pio2f+0x5a>
 8005962:	edd4 7a00 	vldr	s15, [r4]
 8005966:	eef1 7a67 	vneg.f32	s15, s15
 800596a:	edc4 7a00 	vstr	s15, [r4]
 800596e:	edd4 7a01 	vldr	s15, [r4, #4]
 8005972:	eef1 7a67 	vneg.f32	s15, s15
 8005976:	edc4 7a01 	vstr	s15, [r4, #4]
 800597a:	e779      	b.n	8005870 <__ieee754_rem_pio2f+0x130>
 800597c:	2303      	movs	r3, #3
 800597e:	e7e5      	b.n	800594c <__ieee754_rem_pio2f+0x20c>
 8005980:	3f490fd8 	.word	0x3f490fd8
 8005984:	4016cbe3 	.word	0x4016cbe3
 8005988:	3fc90f80 	.word	0x3fc90f80
 800598c:	3fc90fd0 	.word	0x3fc90fd0
 8005990:	37354443 	.word	0x37354443
 8005994:	37354400 	.word	0x37354400
 8005998:	2e85a308 	.word	0x2e85a308
 800599c:	43490f80 	.word	0x43490f80
 80059a0:	3f22f984 	.word	0x3f22f984
 80059a4:	080062c0 	.word	0x080062c0
 80059a8:	2e85a300 	.word	0x2e85a300
 80059ac:	248d3132 	.word	0x248d3132
 80059b0:	43800000 	.word	0x43800000
 80059b4:	08006340 	.word	0x08006340

080059b8 <__kernel_rem_pio2f>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	ed2d 8b04 	vpush	{d8-d9}
 80059c0:	b0d7      	sub	sp, #348	; 0x15c
 80059c2:	4616      	mov	r6, r2
 80059c4:	4698      	mov	r8, r3
 80059c6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80059c8:	4bbb      	ldr	r3, [pc, #748]	; (8005cb8 <__kernel_rem_pio2f+0x300>)
 80059ca:	9001      	str	r0, [sp, #4]
 80059cc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80059d0:	1d33      	adds	r3, r6, #4
 80059d2:	460d      	mov	r5, r1
 80059d4:	f108 39ff 	add.w	r9, r8, #4294967295
 80059d8:	db29      	blt.n	8005a2e <__kernel_rem_pio2f+0x76>
 80059da:	1ef1      	subs	r1, r6, #3
 80059dc:	bf48      	it	mi
 80059de:	1d31      	addmi	r1, r6, #4
 80059e0:	10c9      	asrs	r1, r1, #3
 80059e2:	1c4c      	adds	r4, r1, #1
 80059e4:	00e3      	lsls	r3, r4, #3
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80059ea:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8005cc8 <__kernel_rem_pio2f+0x310>
 80059ee:	eba1 0009 	sub.w	r0, r1, r9
 80059f2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80059f6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80059fa:	eb07 0c09 	add.w	ip, r7, r9
 80059fe:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8005a02:	2300      	movs	r3, #0
 8005a04:	4563      	cmp	r3, ip
 8005a06:	dd14      	ble.n	8005a32 <__kernel_rem_pio2f+0x7a>
 8005a08:	ab1a      	add	r3, sp, #104	; 0x68
 8005a0a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8005a0e:	46cc      	mov	ip, r9
 8005a10:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8005a14:	f1c8 0b01 	rsb	fp, r8, #1
 8005a18:	eb0b 020c 	add.w	r2, fp, ip
 8005a1c:	4297      	cmp	r7, r2
 8005a1e:	db27      	blt.n	8005a70 <__kernel_rem_pio2f+0xb8>
 8005a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005a24:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8005cc8 <__kernel_rem_pio2f+0x310>
 8005a28:	4618      	mov	r0, r3
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	e016      	b.n	8005a5c <__kernel_rem_pio2f+0xa4>
 8005a2e:	2100      	movs	r1, #0
 8005a30:	e7d7      	b.n	80059e2 <__kernel_rem_pio2f+0x2a>
 8005a32:	42d8      	cmn	r0, r3
 8005a34:	bf5d      	ittte	pl
 8005a36:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8005a3a:	ee07 2a90 	vmovpl	s15, r2
 8005a3e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005a42:	eef0 7a47 	vmovmi.f32	s15, s14
 8005a46:	ecea 7a01 	vstmia	sl!, {s15}
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	e7da      	b.n	8005a04 <__kernel_rem_pio2f+0x4c>
 8005a4e:	ecfe 6a01 	vldmia	lr!, {s13}
 8005a52:	ed90 7a00 	vldr	s14, [r0]
 8005a56:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005a5a:	3201      	adds	r2, #1
 8005a5c:	454a      	cmp	r2, r9
 8005a5e:	f1a0 0004 	sub.w	r0, r0, #4
 8005a62:	ddf4      	ble.n	8005a4e <__kernel_rem_pio2f+0x96>
 8005a64:	ecea 7a01 	vstmia	sl!, {s15}
 8005a68:	3304      	adds	r3, #4
 8005a6a:	f10c 0c01 	add.w	ip, ip, #1
 8005a6e:	e7d3      	b.n	8005a18 <__kernel_rem_pio2f+0x60>
 8005a70:	ab06      	add	r3, sp, #24
 8005a72:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8005a76:	9304      	str	r3, [sp, #16]
 8005a78:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8005a7a:	eddf 8a92 	vldr	s17, [pc, #584]	; 8005cc4 <__kernel_rem_pio2f+0x30c>
 8005a7e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8005cc0 <__kernel_rem_pio2f+0x308>
 8005a82:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005a86:	9303      	str	r3, [sp, #12]
 8005a88:	46ba      	mov	sl, r7
 8005a8a:	ab56      	add	r3, sp, #344	; 0x158
 8005a8c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005a90:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8005a94:	ab06      	add	r3, sp, #24
 8005a96:	4618      	mov	r0, r3
 8005a98:	4652      	mov	r2, sl
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	dc51      	bgt.n	8005b42 <__kernel_rem_pio2f+0x18a>
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	9305      	str	r3, [sp, #20]
 8005aa2:	f000 fb3f 	bl	8006124 <scalbnf>
 8005aa6:	eeb0 8a40 	vmov.f32	s16, s0
 8005aaa:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005aae:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005ab2:	f000 faf5 	bl	80060a0 <floorf>
 8005ab6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005aba:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005abe:	2c00      	cmp	r4, #0
 8005ac0:	9b05      	ldr	r3, [sp, #20]
 8005ac2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005ac6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005aca:	edcd 7a00 	vstr	s15, [sp]
 8005ace:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005ad2:	dd4b      	ble.n	8005b6c <__kernel_rem_pio2f+0x1b4>
 8005ad4:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005ad8:	aa06      	add	r2, sp, #24
 8005ada:	f1c4 0e08 	rsb	lr, r4, #8
 8005ade:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005ae2:	ee17 1a90 	vmov	r1, s15
 8005ae6:	fa42 f00e 	asr.w	r0, r2, lr
 8005aea:	4401      	add	r1, r0
 8005aec:	9100      	str	r1, [sp, #0]
 8005aee:	fa00 f00e 	lsl.w	r0, r0, lr
 8005af2:	a906      	add	r1, sp, #24
 8005af4:	1a12      	subs	r2, r2, r0
 8005af6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8005afa:	f1c4 0007 	rsb	r0, r4, #7
 8005afe:	fa42 fb00 	asr.w	fp, r2, r0
 8005b02:	f1bb 0f00 	cmp.w	fp, #0
 8005b06:	dd43      	ble.n	8005b90 <__kernel_rem_pio2f+0x1d8>
 8005b08:	9a00      	ldr	r2, [sp, #0]
 8005b0a:	f04f 0e00 	mov.w	lr, #0
 8005b0e:	3201      	adds	r2, #1
 8005b10:	9200      	str	r2, [sp, #0]
 8005b12:	4670      	mov	r0, lr
 8005b14:	45f2      	cmp	sl, lr
 8005b16:	dc6c      	bgt.n	8005bf2 <__kernel_rem_pio2f+0x23a>
 8005b18:	2c00      	cmp	r4, #0
 8005b1a:	dd04      	ble.n	8005b26 <__kernel_rem_pio2f+0x16e>
 8005b1c:	2c01      	cmp	r4, #1
 8005b1e:	d079      	beq.n	8005c14 <__kernel_rem_pio2f+0x25c>
 8005b20:	2c02      	cmp	r4, #2
 8005b22:	f000 8082 	beq.w	8005c2a <__kernel_rem_pio2f+0x272>
 8005b26:	f1bb 0f02 	cmp.w	fp, #2
 8005b2a:	d131      	bne.n	8005b90 <__kernel_rem_pio2f+0x1d8>
 8005b2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005b30:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005b34:	b360      	cbz	r0, 8005b90 <__kernel_rem_pio2f+0x1d8>
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 faf4 	bl	8006124 <scalbnf>
 8005b3c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005b40:	e026      	b.n	8005b90 <__kernel_rem_pio2f+0x1d8>
 8005b42:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005b46:	3a01      	subs	r2, #1
 8005b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b4c:	a942      	add	r1, sp, #264	; 0x108
 8005b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b52:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005b56:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005b5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005b5e:	eca0 0a01 	vstmia	r0!, {s0}
 8005b62:	ed9c 0a00 	vldr	s0, [ip]
 8005b66:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005b6a:	e796      	b.n	8005a9a <__kernel_rem_pio2f+0xe2>
 8005b6c:	d107      	bne.n	8005b7e <__kernel_rem_pio2f+0x1c6>
 8005b6e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005b72:	a906      	add	r1, sp, #24
 8005b74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b78:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8005b7c:	e7c1      	b.n	8005b02 <__kernel_rem_pio2f+0x14a>
 8005b7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005b82:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8a:	da2f      	bge.n	8005bec <__kernel_rem_pio2f+0x234>
 8005b8c:	f04f 0b00 	mov.w	fp, #0
 8005b90:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	f040 8098 	bne.w	8005ccc <__kernel_rem_pio2f+0x314>
 8005b9c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ba0:	469c      	mov	ip, r3
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	45bc      	cmp	ip, r7
 8005ba6:	da48      	bge.n	8005c3a <__kernel_rem_pio2f+0x282>
 8005ba8:	2a00      	cmp	r2, #0
 8005baa:	d05f      	beq.n	8005c6c <__kernel_rem_pio2f+0x2b4>
 8005bac:	aa06      	add	r2, sp, #24
 8005bae:	3c08      	subs	r4, #8
 8005bb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	d07d      	beq.n	8005cb4 <__kernel_rem_pio2f+0x2fc>
 8005bb8:	4620      	mov	r0, r4
 8005bba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	f000 fab0 	bl	8006124 <scalbnf>
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005cc4 <__kernel_rem_pio2f+0x30c>
 8005bca:	4619      	mov	r1, r3
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	f280 80af 	bge.w	8005d30 <__kernel_rem_pio2f+0x378>
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	2400      	movs	r4, #0
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f2c0 80d0 	blt.w	8005d7c <__kernel_rem_pio2f+0x3c4>
 8005bdc:	a942      	add	r1, sp, #264	; 0x108
 8005bde:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8005be2:	4a36      	ldr	r2, [pc, #216]	; (8005cbc <__kernel_rem_pio2f+0x304>)
 8005be4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8005cc8 <__kernel_rem_pio2f+0x310>
 8005be8:	2100      	movs	r1, #0
 8005bea:	e0bb      	b.n	8005d64 <__kernel_rem_pio2f+0x3ac>
 8005bec:	f04f 0b02 	mov.w	fp, #2
 8005bf0:	e78a      	b.n	8005b08 <__kernel_rem_pio2f+0x150>
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	b948      	cbnz	r0, 8005c0a <__kernel_rem_pio2f+0x252>
 8005bf6:	b11a      	cbz	r2, 8005c00 <__kernel_rem_pio2f+0x248>
 8005bf8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f10e 0e01 	add.w	lr, lr, #1
 8005c04:	3304      	adds	r3, #4
 8005c06:	4610      	mov	r0, r2
 8005c08:	e784      	b.n	8005b14 <__kernel_rem_pio2f+0x15c>
 8005c0a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	4602      	mov	r2, r0
 8005c12:	e7f5      	b.n	8005c00 <__kernel_rem_pio2f+0x248>
 8005c14:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005c18:	ab06      	add	r3, sp, #24
 8005c1a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c22:	aa06      	add	r2, sp, #24
 8005c24:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8005c28:	e77d      	b.n	8005b26 <__kernel_rem_pio2f+0x16e>
 8005c2a:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005c2e:	ab06      	add	r3, sp, #24
 8005c30:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c38:	e7f3      	b.n	8005c22 <__kernel_rem_pio2f+0x26a>
 8005c3a:	a906      	add	r1, sp, #24
 8005c3c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8005c40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005c44:	4302      	orrs	r2, r0
 8005c46:	e7ad      	b.n	8005ba4 <__kernel_rem_pio2f+0x1ec>
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005c4e:	2a00      	cmp	r2, #0
 8005c50:	d0fa      	beq.n	8005c48 <__kernel_rem_pio2f+0x290>
 8005c52:	a91a      	add	r1, sp, #104	; 0x68
 8005c54:	eb0a 0208 	add.w	r2, sl, r8
 8005c58:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005c5c:	f10a 0301 	add.w	r3, sl, #1
 8005c60:	eb0a 0100 	add.w	r1, sl, r0
 8005c64:	4299      	cmp	r1, r3
 8005c66:	da04      	bge.n	8005c72 <__kernel_rem_pio2f+0x2ba>
 8005c68:	468a      	mov	sl, r1
 8005c6a:	e70e      	b.n	8005a8a <__kernel_rem_pio2f+0xd2>
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	2001      	movs	r0, #1
 8005c70:	e7eb      	b.n	8005c4a <__kernel_rem_pio2f+0x292>
 8005c72:	9803      	ldr	r0, [sp, #12]
 8005c74:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005c78:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005c7c:	9000      	str	r0, [sp, #0]
 8005c7e:	ee07 0a90 	vmov	s15, r0
 8005c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c86:	2000      	movs	r0, #0
 8005c88:	ece2 7a01 	vstmia	r2!, {s15}
 8005c8c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005cc8 <__kernel_rem_pio2f+0x310>
 8005c90:	4696      	mov	lr, r2
 8005c92:	4548      	cmp	r0, r9
 8005c94:	dd06      	ble.n	8005ca4 <__kernel_rem_pio2f+0x2ec>
 8005c96:	a842      	add	r0, sp, #264	; 0x108
 8005c98:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005c9c:	edc0 7a00 	vstr	s15, [r0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	e7df      	b.n	8005c64 <__kernel_rem_pio2f+0x2ac>
 8005ca4:	ecfc 6a01 	vldmia	ip!, {s13}
 8005ca8:	ed3e 7a01 	vldmdb	lr!, {s14}
 8005cac:	3001      	adds	r0, #1
 8005cae:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005cb2:	e7ee      	b.n	8005c92 <__kernel_rem_pio2f+0x2da>
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	e779      	b.n	8005bac <__kernel_rem_pio2f+0x1f4>
 8005cb8:	08006684 	.word	0x08006684
 8005cbc:	08006658 	.word	0x08006658
 8005cc0:	43800000 	.word	0x43800000
 8005cc4:	3b800000 	.word	0x3b800000
 8005cc8:	00000000 	.word	0x00000000
 8005ccc:	9b02      	ldr	r3, [sp, #8]
 8005cce:	eeb0 0a48 	vmov.f32	s0, s16
 8005cd2:	1b98      	subs	r0, r3, r6
 8005cd4:	f000 fa26 	bl	8006124 <scalbnf>
 8005cd8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8005cc0 <__kernel_rem_pio2f+0x308>
 8005cdc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	db1b      	blt.n	8005d1e <__kernel_rem_pio2f+0x366>
 8005ce6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005cc4 <__kernel_rem_pio2f+0x30c>
 8005cea:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005cee:	aa06      	add	r2, sp, #24
 8005cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cf4:	a906      	add	r1, sp, #24
 8005cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cfa:	3408      	adds	r4, #8
 8005cfc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d08:	ee10 3a10 	vmov	r3, s0
 8005d0c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8005d10:	ee17 2a90 	vmov	r2, s15
 8005d14:	f10a 0301 	add.w	r3, sl, #1
 8005d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005d1c:	e74c      	b.n	8005bb8 <__kernel_rem_pio2f+0x200>
 8005d1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d22:	aa06      	add	r2, sp, #24
 8005d24:	ee10 3a10 	vmov	r3, s0
 8005d28:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8005d2c:	4653      	mov	r3, sl
 8005d2e:	e743      	b.n	8005bb8 <__kernel_rem_pio2f+0x200>
 8005d30:	aa42      	add	r2, sp, #264	; 0x108
 8005d32:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8005d36:	aa06      	add	r2, sp, #24
 8005d38:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005d3c:	9201      	str	r2, [sp, #4]
 8005d3e:	ee07 2a90 	vmov	s15, r2
 8005d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d46:	3901      	subs	r1, #1
 8005d48:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005d4c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005d50:	edc0 7a00 	vstr	s15, [r0]
 8005d54:	e73a      	b.n	8005bcc <__kernel_rem_pio2f+0x214>
 8005d56:	ecf2 6a01 	vldmia	r2!, {s13}
 8005d5a:	ecb6 7a01 	vldmia	r6!, {s14}
 8005d5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005d62:	3101      	adds	r1, #1
 8005d64:	42b9      	cmp	r1, r7
 8005d66:	dc01      	bgt.n	8005d6c <__kernel_rem_pio2f+0x3b4>
 8005d68:	428c      	cmp	r4, r1
 8005d6a:	daf4      	bge.n	8005d56 <__kernel_rem_pio2f+0x39e>
 8005d6c:	aa56      	add	r2, sp, #344	; 0x158
 8005d6e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8005d72:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8005d76:	3801      	subs	r0, #1
 8005d78:	3401      	adds	r4, #1
 8005d7a:	e72c      	b.n	8005bd6 <__kernel_rem_pio2f+0x21e>
 8005d7c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005d7e:	2a02      	cmp	r2, #2
 8005d80:	dc0a      	bgt.n	8005d98 <__kernel_rem_pio2f+0x3e0>
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	dc61      	bgt.n	8005e4a <__kernel_rem_pio2f+0x492>
 8005d86:	d03c      	beq.n	8005e02 <__kernel_rem_pio2f+0x44a>
 8005d88:	9b00      	ldr	r3, [sp, #0]
 8005d8a:	f003 0007 	and.w	r0, r3, #7
 8005d8e:	b057      	add	sp, #348	; 0x15c
 8005d90:	ecbd 8b04 	vpop	{d8-d9}
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005d9a:	2a03      	cmp	r2, #3
 8005d9c:	d1f4      	bne.n	8005d88 <__kernel_rem_pio2f+0x3d0>
 8005d9e:	aa2e      	add	r2, sp, #184	; 0xb8
 8005da0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005da4:	4608      	mov	r0, r1
 8005da6:	461c      	mov	r4, r3
 8005da8:	2c00      	cmp	r4, #0
 8005daa:	f1a0 0004 	sub.w	r0, r0, #4
 8005dae:	dc59      	bgt.n	8005e64 <__kernel_rem_pio2f+0x4ac>
 8005db0:	4618      	mov	r0, r3
 8005db2:	2801      	cmp	r0, #1
 8005db4:	f1a1 0104 	sub.w	r1, r1, #4
 8005db8:	dc64      	bgt.n	8005e84 <__kernel_rem_pio2f+0x4cc>
 8005dba:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8005cc8 <__kernel_rem_pio2f+0x310>
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	dc70      	bgt.n	8005ea4 <__kernel_rem_pio2f+0x4ec>
 8005dc2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005dc6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8005dca:	f1bb 0f00 	cmp.w	fp, #0
 8005dce:	d172      	bne.n	8005eb6 <__kernel_rem_pio2f+0x4fe>
 8005dd0:	edc5 6a00 	vstr	s13, [r5]
 8005dd4:	ed85 7a01 	vstr	s14, [r5, #4]
 8005dd8:	edc5 7a02 	vstr	s15, [r5, #8]
 8005ddc:	e7d4      	b.n	8005d88 <__kernel_rem_pio2f+0x3d0>
 8005dde:	aa2e      	add	r2, sp, #184	; 0xb8
 8005de0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005de4:	ed91 7a00 	vldr	s14, [r1]
 8005de8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dec:	3b01      	subs	r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	daf5      	bge.n	8005dde <__kernel_rem_pio2f+0x426>
 8005df2:	f1bb 0f00 	cmp.w	fp, #0
 8005df6:	d001      	beq.n	8005dfc <__kernel_rem_pio2f+0x444>
 8005df8:	eef1 7a67 	vneg.f32	s15, s15
 8005dfc:	edc5 7a00 	vstr	s15, [r5]
 8005e00:	e7c2      	b.n	8005d88 <__kernel_rem_pio2f+0x3d0>
 8005e02:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8005cc8 <__kernel_rem_pio2f+0x310>
 8005e06:	e7f2      	b.n	8005dee <__kernel_rem_pio2f+0x436>
 8005e08:	aa2e      	add	r2, sp, #184	; 0xb8
 8005e0a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8005e0e:	edd0 7a00 	vldr	s15, [r0]
 8005e12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e16:	3901      	subs	r1, #1
 8005e18:	2900      	cmp	r1, #0
 8005e1a:	daf5      	bge.n	8005e08 <__kernel_rem_pio2f+0x450>
 8005e1c:	f1bb 0f00 	cmp.w	fp, #0
 8005e20:	d017      	beq.n	8005e52 <__kernel_rem_pio2f+0x49a>
 8005e22:	eef1 7a47 	vneg.f32	s15, s14
 8005e26:	edc5 7a00 	vstr	s15, [r5]
 8005e2a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8005e2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e32:	a82f      	add	r0, sp, #188	; 0xbc
 8005e34:	2101      	movs	r1, #1
 8005e36:	428b      	cmp	r3, r1
 8005e38:	da0e      	bge.n	8005e58 <__kernel_rem_pio2f+0x4a0>
 8005e3a:	f1bb 0f00 	cmp.w	fp, #0
 8005e3e:	d001      	beq.n	8005e44 <__kernel_rem_pio2f+0x48c>
 8005e40:	eef1 7a67 	vneg.f32	s15, s15
 8005e44:	edc5 7a01 	vstr	s15, [r5, #4]
 8005e48:	e79e      	b.n	8005d88 <__kernel_rem_pio2f+0x3d0>
 8005e4a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8005cc8 <__kernel_rem_pio2f+0x310>
 8005e4e:	4619      	mov	r1, r3
 8005e50:	e7e2      	b.n	8005e18 <__kernel_rem_pio2f+0x460>
 8005e52:	eef0 7a47 	vmov.f32	s15, s14
 8005e56:	e7e6      	b.n	8005e26 <__kernel_rem_pio2f+0x46e>
 8005e58:	ecb0 7a01 	vldmia	r0!, {s14}
 8005e5c:	3101      	adds	r1, #1
 8005e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e62:	e7e8      	b.n	8005e36 <__kernel_rem_pio2f+0x47e>
 8005e64:	edd0 7a00 	vldr	s15, [r0]
 8005e68:	edd0 6a01 	vldr	s13, [r0, #4]
 8005e6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005e70:	3c01      	subs	r4, #1
 8005e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e76:	ed80 7a00 	vstr	s14, [r0]
 8005e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7e:	edc0 7a01 	vstr	s15, [r0, #4]
 8005e82:	e791      	b.n	8005da8 <__kernel_rem_pio2f+0x3f0>
 8005e84:	edd1 7a00 	vldr	s15, [r1]
 8005e88:	edd1 6a01 	vldr	s13, [r1, #4]
 8005e8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005e90:	3801      	subs	r0, #1
 8005e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e96:	ed81 7a00 	vstr	s14, [r1]
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	edc1 7a01 	vstr	s15, [r1, #4]
 8005ea2:	e786      	b.n	8005db2 <__kernel_rem_pio2f+0x3fa>
 8005ea4:	aa2e      	add	r2, sp, #184	; 0xb8
 8005ea6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005eaa:	ed91 7a00 	vldr	s14, [r1]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eb4:	e783      	b.n	8005dbe <__kernel_rem_pio2f+0x406>
 8005eb6:	eef1 6a66 	vneg.f32	s13, s13
 8005eba:	eeb1 7a47 	vneg.f32	s14, s14
 8005ebe:	edc5 6a00 	vstr	s13, [r5]
 8005ec2:	ed85 7a01 	vstr	s14, [r5, #4]
 8005ec6:	eef1 7a67 	vneg.f32	s15, s15
 8005eca:	e785      	b.n	8005dd8 <__kernel_rem_pio2f+0x420>

08005ecc <__kernel_tanf>:
 8005ecc:	b508      	push	{r3, lr}
 8005ece:	ee10 3a10 	vmov	r3, s0
 8005ed2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ed6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8005eda:	eef0 7a40 	vmov.f32	s15, s0
 8005ede:	da17      	bge.n	8005f10 <__kernel_tanf+0x44>
 8005ee0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005ee4:	ee17 1a10 	vmov	r1, s14
 8005ee8:	bb41      	cbnz	r1, 8005f3c <__kernel_tanf+0x70>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	4313      	orrs	r3, r2
 8005eee:	d108      	bne.n	8005f02 <__kernel_tanf+0x36>
 8005ef0:	f000 f8ce 	bl	8006090 <fabsf>
 8005ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ef8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005efc:	eeb0 0a67 	vmov.f32	s0, s15
 8005f00:	bd08      	pop	{r3, pc}
 8005f02:	2801      	cmp	r0, #1
 8005f04:	d0fa      	beq.n	8005efc <__kernel_tanf+0x30>
 8005f06:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005f0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005f0e:	e7f5      	b.n	8005efc <__kernel_tanf+0x30>
 8005f10:	494d      	ldr	r1, [pc, #308]	; (8006048 <__kernel_tanf+0x17c>)
 8005f12:	428a      	cmp	r2, r1
 8005f14:	db12      	blt.n	8005f3c <__kernel_tanf+0x70>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bfb8      	it	lt
 8005f1a:	eef1 7a40 	vneglt.f32	s15, s0
 8005f1e:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800604c <__kernel_tanf+0x180>
 8005f22:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005f26:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8006050 <__kernel_tanf+0x184>
 8005f2a:	bfb8      	it	lt
 8005f2c:	eef1 0a60 	vneglt.f32	s1, s1
 8005f30:	ee70 0a60 	vsub.f32	s1, s0, s1
 8005f34:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8005f38:	eddf 0a46 	vldr	s1, [pc, #280]	; 8006054 <__kernel_tanf+0x188>
 8005f3c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8006058 <__kernel_tanf+0x18c>
 8005f40:	ed9f 6a46 	vldr	s12, [pc, #280]	; 800605c <__kernel_tanf+0x190>
 8005f44:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8006060 <__kernel_tanf+0x194>
 8005f48:	493f      	ldr	r1, [pc, #252]	; (8006048 <__kernel_tanf+0x17c>)
 8005f4a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005f4e:	428a      	cmp	r2, r1
 8005f50:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005f54:	eea7 6a25 	vfma.f32	s12, s14, s11
 8005f58:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006064 <__kernel_tanf+0x198>
 8005f5c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005f60:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8006068 <__kernel_tanf+0x19c>
 8005f64:	eea5 6a87 	vfma.f32	s12, s11, s14
 8005f68:	eddf 5a40 	vldr	s11, [pc, #256]	; 800606c <__kernel_tanf+0x1a0>
 8005f6c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005f70:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8006070 <__kernel_tanf+0x1a4>
 8005f74:	eea5 6a87 	vfma.f32	s12, s11, s14
 8005f78:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006074 <__kernel_tanf+0x1a8>
 8005f7c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8005f80:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8006078 <__kernel_tanf+0x1ac>
 8005f84:	eea5 5a87 	vfma.f32	s10, s11, s14
 8005f88:	eddf 5a3c 	vldr	s11, [pc, #240]	; 800607c <__kernel_tanf+0x1b0>
 8005f8c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8005f90:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8006080 <__kernel_tanf+0x1b4>
 8005f94:	eea5 5a87 	vfma.f32	s10, s11, s14
 8005f98:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8006084 <__kernel_tanf+0x1b8>
 8005f9c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8005fa0:	eeb0 7a65 	vmov.f32	s14, s11
 8005fa4:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005fa8:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8005fac:	eeb0 7a46 	vmov.f32	s14, s12
 8005fb0:	eeb0 6a60 	vmov.f32	s12, s1
 8005fb4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8005fb8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8006088 <__kernel_tanf+0x1bc>
 8005fbc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8005fc0:	eee5 0a87 	vfma.f32	s1, s11, s14
 8005fc4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8005fc8:	db1d      	blt.n	8006006 <__kernel_tanf+0x13a>
 8005fca:	ee06 0a90 	vmov	s13, r0
 8005fce:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8005fd2:	ee27 6a07 	vmul.f32	s12, s14, s14
 8005fd6:	ee37 7a00 	vadd.f32	s14, s14, s0
 8005fda:	179b      	asrs	r3, r3, #30
 8005fdc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	f1c3 0301 	rsb	r3, r3, #1
 8005fe8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005fec:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8005ff0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005ff4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006000:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006004:	e77a      	b.n	8005efc <__kernel_tanf+0x30>
 8006006:	2801      	cmp	r0, #1
 8006008:	d01b      	beq.n	8006042 <__kernel_tanf+0x176>
 800600a:	4b20      	ldr	r3, [pc, #128]	; (800608c <__kernel_tanf+0x1c0>)
 800600c:	ee17 2a10 	vmov	r2, s14
 8006010:	401a      	ands	r2, r3
 8006012:	ee06 2a10 	vmov	s12, r2
 8006016:	ee76 7a67 	vsub.f32	s15, s12, s15
 800601a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800601e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8006022:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800602a:	ee16 2a90 	vmov	r2, s13
 800602e:	4013      	ands	r3, r2
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006038:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800603c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8006040:	e75c      	b.n	8005efc <__kernel_tanf+0x30>
 8006042:	eef0 7a47 	vmov.f32	s15, s14
 8006046:	e759      	b.n	8005efc <__kernel_tanf+0x30>
 8006048:	3f2ca140 	.word	0x3f2ca140
 800604c:	3f490fda 	.word	0x3f490fda
 8006050:	33222168 	.word	0x33222168
 8006054:	00000000 	.word	0x00000000
 8006058:	b79bae5f 	.word	0xb79bae5f
 800605c:	38a3f445 	.word	0x38a3f445
 8006060:	37d95384 	.word	0x37d95384
 8006064:	3a1a26c8 	.word	0x3a1a26c8
 8006068:	3b6b6916 	.word	0x3b6b6916
 800606c:	3cb327a4 	.word	0x3cb327a4
 8006070:	3e088889 	.word	0x3e088889
 8006074:	3895c07a 	.word	0x3895c07a
 8006078:	398137b9 	.word	0x398137b9
 800607c:	3abede48 	.word	0x3abede48
 8006080:	3c11371f 	.word	0x3c11371f
 8006084:	3d5d0dd1 	.word	0x3d5d0dd1
 8006088:	3eaaaaab 	.word	0x3eaaaaab
 800608c:	fffff000 	.word	0xfffff000

08006090 <fabsf>:
 8006090:	ee10 3a10 	vmov	r3, s0
 8006094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006098:	ee00 3a10 	vmov	s0, r3
 800609c:	4770      	bx	lr
	...

080060a0 <floorf>:
 80060a0:	ee10 3a10 	vmov	r3, s0
 80060a4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80060a8:	3a7f      	subs	r2, #127	; 0x7f
 80060aa:	2a16      	cmp	r2, #22
 80060ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060b0:	dc2a      	bgt.n	8006108 <floorf+0x68>
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	da11      	bge.n	80060da <floorf+0x3a>
 80060b6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006118 <floorf+0x78>
 80060ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80060be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80060c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c6:	dd05      	ble.n	80060d4 <floorf+0x34>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	da23      	bge.n	8006114 <floorf+0x74>
 80060cc:	4a13      	ldr	r2, [pc, #76]	; (800611c <floorf+0x7c>)
 80060ce:	2900      	cmp	r1, #0
 80060d0:	bf18      	it	ne
 80060d2:	4613      	movne	r3, r2
 80060d4:	ee00 3a10 	vmov	s0, r3
 80060d8:	4770      	bx	lr
 80060da:	4911      	ldr	r1, [pc, #68]	; (8006120 <floorf+0x80>)
 80060dc:	4111      	asrs	r1, r2
 80060de:	420b      	tst	r3, r1
 80060e0:	d0fa      	beq.n	80060d8 <floorf+0x38>
 80060e2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006118 <floorf+0x78>
 80060e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80060ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80060ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f2:	ddef      	ble.n	80060d4 <floorf+0x34>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bfbe      	ittt	lt
 80060f8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80060fc:	fa40 f202 	asrlt.w	r2, r0, r2
 8006100:	189b      	addlt	r3, r3, r2
 8006102:	ea23 0301 	bic.w	r3, r3, r1
 8006106:	e7e5      	b.n	80060d4 <floorf+0x34>
 8006108:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800610c:	d3e4      	bcc.n	80060d8 <floorf+0x38>
 800610e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006112:	4770      	bx	lr
 8006114:	2300      	movs	r3, #0
 8006116:	e7dd      	b.n	80060d4 <floorf+0x34>
 8006118:	7149f2ca 	.word	0x7149f2ca
 800611c:	bf800000 	.word	0xbf800000
 8006120:	007fffff 	.word	0x007fffff

08006124 <scalbnf>:
 8006124:	ee10 3a10 	vmov	r3, s0
 8006128:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800612c:	d025      	beq.n	800617a <scalbnf+0x56>
 800612e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006132:	d302      	bcc.n	800613a <scalbnf+0x16>
 8006134:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006138:	4770      	bx	lr
 800613a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800613e:	d122      	bne.n	8006186 <scalbnf+0x62>
 8006140:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <scalbnf+0xc8>)
 8006142:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80061f0 <scalbnf+0xcc>
 8006146:	4298      	cmp	r0, r3
 8006148:	ee20 0a27 	vmul.f32	s0, s0, s15
 800614c:	db16      	blt.n	800617c <scalbnf+0x58>
 800614e:	ee10 3a10 	vmov	r3, s0
 8006152:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006156:	3a19      	subs	r2, #25
 8006158:	4402      	add	r2, r0
 800615a:	2afe      	cmp	r2, #254	; 0xfe
 800615c:	dd15      	ble.n	800618a <scalbnf+0x66>
 800615e:	ee10 3a10 	vmov	r3, s0
 8006162:	eddf 7a24 	vldr	s15, [pc, #144]	; 80061f4 <scalbnf+0xd0>
 8006166:	eddf 6a24 	vldr	s13, [pc, #144]	; 80061f8 <scalbnf+0xd4>
 800616a:	2b00      	cmp	r3, #0
 800616c:	eeb0 7a67 	vmov.f32	s14, s15
 8006170:	bfb8      	it	lt
 8006172:	eef0 7a66 	vmovlt.f32	s15, s13
 8006176:	ee27 0a27 	vmul.f32	s0, s14, s15
 800617a:	4770      	bx	lr
 800617c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80061fc <scalbnf+0xd8>
 8006180:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006184:	4770      	bx	lr
 8006186:	0dd2      	lsrs	r2, r2, #23
 8006188:	e7e6      	b.n	8006158 <scalbnf+0x34>
 800618a:	2a00      	cmp	r2, #0
 800618c:	dd06      	ble.n	800619c <scalbnf+0x78>
 800618e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006192:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006196:	ee00 3a10 	vmov	s0, r3
 800619a:	4770      	bx	lr
 800619c:	f112 0f16 	cmn.w	r2, #22
 80061a0:	da1a      	bge.n	80061d8 <scalbnf+0xb4>
 80061a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80061a6:	4298      	cmp	r0, r3
 80061a8:	ee10 3a10 	vmov	r3, s0
 80061ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	dd0a      	ble.n	80061c8 <scalbnf+0xa4>
 80061b2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80061f4 <scalbnf+0xd0>
 80061b6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80061f8 <scalbnf+0xd4>
 80061ba:	eef0 7a40 	vmov.f32	s15, s0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf18      	it	ne
 80061c2:	eeb0 0a47 	vmovne.f32	s0, s14
 80061c6:	e7db      	b.n	8006180 <scalbnf+0x5c>
 80061c8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80061fc <scalbnf+0xd8>
 80061cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006200 <scalbnf+0xdc>
 80061d0:	eef0 7a40 	vmov.f32	s15, s0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	e7f3      	b.n	80061c0 <scalbnf+0x9c>
 80061d8:	3219      	adds	r2, #25
 80061da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061de:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80061e2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006204 <scalbnf+0xe0>
 80061e6:	ee07 3a10 	vmov	s14, r3
 80061ea:	e7c4      	b.n	8006176 <scalbnf+0x52>
 80061ec:	ffff3cb0 	.word	0xffff3cb0
 80061f0:	4c000000 	.word	0x4c000000
 80061f4:	7149f2ca 	.word	0x7149f2ca
 80061f8:	f149f2ca 	.word	0xf149f2ca
 80061fc:	0da24260 	.word	0x0da24260
 8006200:	8da24260 	.word	0x8da24260
 8006204:	33000000 	.word	0x33000000

08006208 <__libc_init_array>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4d0d      	ldr	r5, [pc, #52]	; (8006240 <__libc_init_array+0x38>)
 800620c:	4c0d      	ldr	r4, [pc, #52]	; (8006244 <__libc_init_array+0x3c>)
 800620e:	1b64      	subs	r4, r4, r5
 8006210:	10a4      	asrs	r4, r4, #2
 8006212:	2600      	movs	r6, #0
 8006214:	42a6      	cmp	r6, r4
 8006216:	d109      	bne.n	800622c <__libc_init_array+0x24>
 8006218:	4d0b      	ldr	r5, [pc, #44]	; (8006248 <__libc_init_array+0x40>)
 800621a:	4c0c      	ldr	r4, [pc, #48]	; (800624c <__libc_init_array+0x44>)
 800621c:	f000 f820 	bl	8006260 <_init>
 8006220:	1b64      	subs	r4, r4, r5
 8006222:	10a4      	asrs	r4, r4, #2
 8006224:	2600      	movs	r6, #0
 8006226:	42a6      	cmp	r6, r4
 8006228:	d105      	bne.n	8006236 <__libc_init_array+0x2e>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006230:	4798      	blx	r3
 8006232:	3601      	adds	r6, #1
 8006234:	e7ee      	b.n	8006214 <__libc_init_array+0xc>
 8006236:	f855 3b04 	ldr.w	r3, [r5], #4
 800623a:	4798      	blx	r3
 800623c:	3601      	adds	r6, #1
 800623e:	e7f2      	b.n	8006226 <__libc_init_array+0x1e>
 8006240:	08006698 	.word	0x08006698
 8006244:	08006698 	.word	0x08006698
 8006248:	08006698 	.word	0x08006698
 800624c:	080066a0 	.word	0x080066a0

08006250 <memset>:
 8006250:	4402      	add	r2, r0
 8006252:	4603      	mov	r3, r0
 8006254:	4293      	cmp	r3, r2
 8006256:	d100      	bne.n	800625a <memset+0xa>
 8006258:	4770      	bx	lr
 800625a:	f803 1b01 	strb.w	r1, [r3], #1
 800625e:	e7f9      	b.n	8006254 <memset+0x4>

08006260 <_init>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	bf00      	nop
 8006264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006266:	bc08      	pop	{r3}
 8006268:	469e      	mov	lr, r3
 800626a:	4770      	bx	lr

0800626c <_fini>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	bf00      	nop
 8006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006272:	bc08      	pop	{r3}
 8006274:	469e      	mov	lr, r3
 8006276:	4770      	bx	lr
