
ultrasonic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800a1b8  0800a1b8  0001a1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a66c  0800a66c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a66c  0800a66c  0001a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a674  0800a674  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a674  0800a674  0001a674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a678  0800a678  0001a678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a67c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a78  200001e0  0800a85c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c58  0800a85c  00021c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e69f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003909  00000000  00000000  0003e8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  000421b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  000438e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f93  00000000  00000000  00044ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b6b  00000000  00000000  00049e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffad2  00000000  00000000  000619be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161490  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e0  00000000  00000000  001614e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1a0 	.word	0x0800a1a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a1a0 	.word	0x0800a1a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <HAL_TIM_IC_CaptureCallback>:



// Callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	// If the interrut source is from channel 1
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a29      	ldr	r2, [pc, #164]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d14b      	bne.n	8000f4a <HAL_TIM_IC_CaptureCallback+0xaa>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7f1b      	ldrb	r3, [r3, #28]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d147      	bne.n	8000f4a <HAL_TIM_IC_CaptureCallback+0xaa>
	{
		if (eUltrasonicState == GET_RISING_EDGE)
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10a      	bne.n	8000eda <HAL_TIM_IC_CaptureCallback+0x3a>
		{
			ulICValRise = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f002 fefa 	bl	8003cc0 <HAL_TIM_ReadCapturedValue>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a23      	ldr	r2, [pc, #140]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000ed0:	6013      	str	r3, [r2, #0]

			eUltrasonicState = GET_FALLING_EDGE;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
			fDistance = (float)ulPulseWidth1ms / 58.30875f;//0.0343f;

			eUltrasonicState = GET_RISING_EDGE;
		}
	}
}
 8000ed8:	e037      	b.n	8000f4a <HAL_TIM_IC_CaptureCallback+0xaa>
		else if (eUltrasonicState == GET_FALLING_EDGE)
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d132      	bne.n	8000f4a <HAL_TIM_IC_CaptureCallback+0xaa>
			ulICValFall = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f002 feea 	bl	8003cc0 <HAL_TIM_ReadCapturedValue>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000ef0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
			if (ulICValFall >= ulICValRise)
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d307      	bcc.n	8000f16 <HAL_TIM_IC_CaptureCallback+0x76>
				ulPulseWidth1ms = ulICValFall - ulICValRise;
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e009      	b.n	8000f2a <HAL_TIM_IC_CaptureCallback+0x8a>
				ulPulseWidth1ms = (0xFFFF - ulICValRise) + ulICValFall;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f24:	33ff      	adds	r3, #255	; 0xff
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000f28:	6013      	str	r3, [r2, #0]
			fDistance = (float)ulPulseWidth1ms / 58.30875f;//0.0343f;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f36:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000f68 <HAL_TIM_IC_CaptureCallback+0xc8>
 8000f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000f40:	edc3 7a00 	vstr	s15, [r3]
			eUltrasonicState = GET_RISING_EDGE;
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40012c00 	.word	0x40012c00
 8000f58:	20000208 	.word	0x20000208
 8000f5c:	200001fc 	.word	0x200001fc
 8000f60:	20000200 	.word	0x20000200
 8000f64:	20000204 	.word	0x20000204
 8000f68:	42693c29 	.word	0x42693c29
 8000f6c:	2000020c 	.word	0x2000020c

08000f70 <HCSR04_Read>:


void HCSR04_Read(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f000 ff29 	bl	8001dd4 <HAL_GPIO_WritePin>
	osDelay(10);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f003 ff7c 	bl	8004e80 <osDelay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f000 ff1f 	bl	8001dd4 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f000 fc4c 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f820 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f000 f91e 	bl	80011e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fac:	f000 f8ec 	bl	8001188 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fb0:	f000 f890 	bl	80010d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Start input capture in interrupt mode
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <main+0x3c>)
 8000fb8:	f002 fb8c 	bl	80036d4 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fbc:	f003 fe84 	bl	8004cc8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ultrasonicSens */
  ultrasonicSensHandle = osThreadNew(StartUltrasonicSensTask, NULL, &ultrasonicSens_attributes);
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <main+0x40>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <main+0x44>)
 8000fc6:	f003 fec9 	bl	8004d5c <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <main+0x48>)
 8000fce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fd0:	f003 fe9e 	bl	8004d10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (;;)
 8000fd4:	e7fe      	b.n	8000fd4 <main+0x38>
 8000fd6:	bf00      	nop
 8000fd8:	20001ae8 	.word	0x20001ae8
 8000fdc:	0800a21c 	.word	0x0800a21c
 8000fe0:	080012e9 	.word	0x080012e9
 8000fe4:	20001ae4 	.word	0x20001ae4

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0b8      	sub	sp, #224	; 0xe0
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ff2:	2244      	movs	r2, #68	; 0x44
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fbf0 	bl	80077dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2288      	movs	r2, #136	; 0x88
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f006 fbe2 	bl	80077dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001022:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001026:	2310      	movs	r3, #16
 8001028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800103e:	230a      	movs	r3, #10
 8001040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001044:	2307      	movs	r3, #7
 8001046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800105a:	4618      	mov	r0, r3
 800105c:	f000 ff36 	bl	8001ecc <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001066:	f000 f98b 	bl	8001380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001070:	2303      	movs	r3, #3
 8001072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001088:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800108c:	2104      	movs	r1, #4
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fb02 	bl	8002698 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800109a:	f000 f971 	bl	8001380 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800109e:	2302      	movs	r3, #2
 80010a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 fd2d 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80010b4:	f000 f964 	bl	8001380 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010bc:	f000 feb0 	bl	8001e20 <HAL_PWREx_ControlVoltageScaling>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80010c6:	f000 f95b 	bl	8001380 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	37e0      	adds	r7, #224	; 0xe0
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <MX_TIM1_Init+0xac>)
 80010f4:	4a23      	ldr	r2, [pc, #140]	; (8001184 <MX_TIM1_Init+0xb0>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_TIM1_Init+0xac>)
 80010fa:	2250      	movs	r2, #80	; 0x50
 80010fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <MX_TIM1_Init+0xac>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_TIM1_Init+0xac>)
 8001106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_TIM1_Init+0xac>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_TIM1_Init+0xac>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_TIM1_Init+0xac>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <MX_TIM1_Init+0xac>)
 8001120:	f002 fa80 	bl	8003624 <HAL_TIM_IC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800112a:	f000 f929 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <MX_TIM1_Init+0xac>)
 8001142:	f003 f803 	bl	800414c <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800114c:	f000 f918 	bl	8001380 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001150:	230a      	movs	r3, #10
 8001152:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001154:	2301      	movs	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_TIM1_Init+0xac>)
 8001168:	f002 fd15 	bl	8003b96 <HAL_TIM_IC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001172:	f000 f905 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20001ae8 	.word	0x20001ae8
 8001184:	40012c00 	.word	0x40012c00

08001188 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <MX_USART2_UART_Init+0x5c>)
 8001190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART2_UART_Init+0x58>)
 80011cc:	f003 f864 	bl	8004298 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011d6:	f000 f8d3 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20001b34 	.word	0x20001b34
 80011e4:	40004400 	.word	0x40004400

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <MX_GPIO_Init+0xd4>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a28      	ldr	r2, [pc, #160]	; (80012bc <MX_GPIO_Init+0xd4>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a22      	ldr	r2, [pc, #136]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_GPIO_Init+0xd4>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <MX_GPIO_Init+0xd4>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2108      	movs	r1, #8
 8001262:	4817      	ldr	r0, [pc, #92]	; (80012c0 <MX_GPIO_Init+0xd8>)
 8001264:	f000 fdb6 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f000 fdaf 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001276:	2308      	movs	r3, #8
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_GPIO_Init+0xd8>)
 800128e:	f000 fbf7 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f000 fbe7 	bl	8001a80 <HAL_GPIO_Init>

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000800 	.word	0x48000800

080012c4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80012cc:	1d39      	adds	r1, r7, #4
 80012ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d2:	2201      	movs	r2, #1
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <__io_putchar+0x20>)
 80012d6:	f003 f82d 	bl	8004334 <HAL_UART_Transmit>
	return ch;
 80012da:	687b      	ldr	r3, [r7, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20001b34 	.word	0x20001b34

080012e8 <StartUltrasonicSensTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUltrasonicSensTask */
void StartUltrasonicSensTask(void *argument)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);

  	HCSR04_Read();
 80012f0:	f7ff fe3e 	bl	8000f70 <HCSR04_Read>
  	osDelay(200);
 80012f4:	20c8      	movs	r0, #200	; 0xc8
 80012f6:	f003 fdc3 	bl	8004e80 <osDelay>


  	printf("Distance: %9.6f\r\n", fDistance);
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <StartUltrasonicSensTask+0x54>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f922 	bl	8000548 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <StartUltrasonicSensTask+0x58>)
 800130a:	f006 fed9 	bl	80080c0 <iprintf>
  	printf("Pulse: %lu\r\n", ulPulseWidth1ms);
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <StartUltrasonicSensTask+0x5c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <StartUltrasonicSensTask+0x60>)
 8001316:	f006 fed3 	bl	80080c0 <iprintf>
  	printf("IC1: %lu\r\n", ulICValRise);
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <StartUltrasonicSensTask+0x64>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <StartUltrasonicSensTask+0x68>)
 8001322:	f006 fecd 	bl	80080c0 <iprintf>
  	printf("IC2: %lu\r\n", ulICValFall);
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <StartUltrasonicSensTask+0x6c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	480a      	ldr	r0, [pc, #40]	; (8001358 <StartUltrasonicSensTask+0x70>)
 800132e:	f006 fec7 	bl	80080c0 <iprintf>

    osDelay(200);
 8001332:	20c8      	movs	r0, #200	; 0xc8
 8001334:	f003 fda4 	bl	8004e80 <osDelay>
  	HCSR04_Read();
 8001338:	e7da      	b.n	80012f0 <StartUltrasonicSensTask+0x8>
 800133a:	bf00      	nop
 800133c:	2000020c 	.word	0x2000020c
 8001340:	0800a1c8 	.word	0x0800a1c8
 8001344:	20000204 	.word	0x20000204
 8001348:	0800a1dc 	.word	0x0800a1dc
 800134c:	200001fc 	.word	0x200001fc
 8001350:	0800a1ec 	.word	0x0800a1ec
 8001354:	20000200 	.word	0x20000200
 8001358:	0800a1f8 	.word	0x0800a1f8

0800135c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800136e:	f000 fa85 	bl	800187c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40001000 	.word	0x40001000

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>
	...

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_MspInit+0x4c>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_MspInit+0x4c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6613      	str	r3, [r2, #96]	; 0x60
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_MspInit+0x4c>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_MspInit+0x4c>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	210f      	movs	r1, #15
 80013c6:	f06f 0001 	mvn.w	r0, #1
 80013ca:	f000 fb2f 	bl	8001a2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1c      	ldr	r2, [pc, #112]	; (800146c <HAL_TIM_IC_MspInit+0x90>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d131      	bne.n	8001462 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_TIM_IC_MspInit+0x94>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_TIM_IC_MspInit+0x94>)
 8001404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001408:	6613      	str	r3, [r2, #96]	; 0x60
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_TIM_IC_MspInit+0x94>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_TIM_IC_MspInit+0x94>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a15      	ldr	r2, [pc, #84]	; (8001470 <HAL_TIM_IC_MspInit+0x94>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_TIM_IC_MspInit+0x94>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001440:	2301      	movs	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f000 fb17 	bl	8001a80 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2105      	movs	r1, #5
 8001456:	201b      	movs	r0, #27
 8001458:	f000 fae8 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800145c:	201b      	movs	r0, #27
 800145e:	f000 fb01 	bl	8001a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40012c00 	.word	0x40012c00
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_UART_MspInit+0x7c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d128      	bne.n	80014e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <HAL_UART_MspInit+0x80>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <HAL_UART_MspInit+0x80>)
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	6593      	str	r3, [r2, #88]	; 0x58
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <HAL_UART_MspInit+0x80>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_UART_MspInit+0x80>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <HAL_UART_MspInit+0x80>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_UART_MspInit+0x80>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014c6:	230c      	movs	r3, #12
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d6:	2307      	movs	r3, #7
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f000 facc 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40004400 	.word	0x40004400
 80014f4:	40021000 	.word	0x40021000

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	2036      	movs	r0, #54	; 0x36
 800150e:	f000 fa8d 	bl	8001a2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001512:	2036      	movs	r0, #54	; 0x36
 8001514:	f000 faa6 	bl	8001a64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_InitTick+0x9c>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_InitTick+0x9c>)
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	6593      	str	r3, [r2, #88]	; 0x58
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_InitTick+0x9c>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001530:	f107 0210 	add.w	r2, r7, #16
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fa52 	bl	80029e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001540:	f001 fa24 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8001544:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_InitTick+0xa0>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3b01      	subs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_InitTick+0xa4>)
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_InitTick+0xa8>)
 8001558:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_InitTick+0xa4>)
 800155c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001560:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_InitTick+0xa4>)
 8001564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001566:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_InitTick+0xa4>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_InitTick+0xa4>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <HAL_InitTick+0xa4>)
 8001576:	f001 ff83 	bl	8003480 <HAL_TIM_Base_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d104      	bne.n	800158a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001580:	4806      	ldr	r0, [pc, #24]	; (800159c <HAL_InitTick+0xa4>)
 8001582:	f001 ffdf 	bl	8003544 <HAL_TIM_Base_Start_IT>
 8001586:	4603      	mov	r3, r0
 8001588:	e000      	b.n	800158c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3730      	adds	r7, #48	; 0x30
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	431bde83 	.word	0x431bde83
 800159c:	20001bb8 	.word	0x20001bb8
 80015a0:	40001000 	.word	0x40001000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM1_CC_IRQHandler+0x10>)
 80015d6:	f002 f9bf 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20001ae8 	.word	0x20001ae8

080015e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM6_DAC_IRQHandler+0x10>)
 80015ea:	f002 f9b5 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20001bb8 	.word	0x20001bb8

080015f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
	return 1;
 80015fc:	2301      	movs	r3, #1
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_kill>:

int _kill(int pid, int sig)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001612:	f006 f8ab 	bl	800776c <__errno>
 8001616:	4603      	mov	r3, r0
 8001618:	2216      	movs	r2, #22
 800161a:	601a      	str	r2, [r3, #0]
	return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_exit>:

void _exit (int status)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffe7 	bl	8001608 <_kill>
	while (1) {}		/* Make sure we hang here */
 800163a:	e7fe      	b.n	800163a <_exit+0x12>

0800163c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e00a      	b.n	8001664 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800164e:	f3af 8000 	nop.w
 8001652:	4601      	mov	r1, r0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	b2ca      	uxtb	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf0      	blt.n	800164e <_read+0x12>
	}

return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e009      	b.n	800169c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe17 	bl	80012c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf1      	blt.n	8001688 <_write+0x12>
	}
	return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_close>:

int _close(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	return -1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d6:	605a      	str	r2, [r3, #4]
	return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_isatty>:

int _isatty(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	return 1;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f006 f810 	bl	800776c <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20018000 	.word	0x20018000
 8001778:	00000400 	.word	0x00000400
 800177c:	20000210 	.word	0x20000210
 8001780:	20001c58 	.word	0x20001c58

08001784 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <SystemInit+0x5c>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <SystemInit+0x5c>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <SystemInit+0x60>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <SystemInit+0x60>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <SystemInit+0x60>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <SystemInit+0x60>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <SystemInit+0x60>)
 80017b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <SystemInit+0x60>)
 80017bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <SystemInit+0x60>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <SystemInit+0x60>)
 80017c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <SystemInit+0x60>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00
 80017e4:	40021000 	.word	0x40021000

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ec:	f7ff ffca 	bl	8001784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017f2:	e003      	b.n	80017fc <LoopCopyDataInit>

080017f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017fa:	3104      	adds	r1, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017fc:	480a      	ldr	r0, [pc, #40]	; (8001828 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001800:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001802:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001804:	d3f6      	bcc.n	80017f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001808:	e002      	b.n	8001810 <LoopFillZerobss>

0800180a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800180a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800180c:	f842 3b04 	str.w	r3, [r2], #4

08001810 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <LoopForever+0x16>)
	cmp	r2, r3
 8001812:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001814:	d3f9      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f005 ffaf 	bl	8007778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7ff fbbf 	bl	8000f9c <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001820:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001824:	0800a67c 	.word	0x0800a67c
	ldr	r0, =_sdata
 8001828:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800182c:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001830:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001834:	20001c58 	.word	0x20001c58

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_Init+0x3c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_Init+0x3c>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001852:	2003      	movs	r0, #3
 8001854:	f000 f8df 	bl	8001a16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fe4d 	bl	80014f8 <HAL_InitTick>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	71fb      	strb	r3, [r7, #7]
 8001868:	e001      	b.n	800186e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800186a:	f7ff fd8f 	bl	800138c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800186e:	79fb      	ldrb	r3, [r7, #7]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40022000 	.word	0x40022000

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008
 80018a0:	20001c04 	.word	0x20001c04

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20001c04 	.word	0x20001c04

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff4c 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3e:	f7ff ff61 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	6978      	ldr	r0, [r7, #20]
 8001a4a:	f7ff ffb1 	bl	80019b0 <NVIC_EncodePriority>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff80 	bl	800195c <__NVIC_SetPriority>
}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff54 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8e:	e17f      	b.n	8001d90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8171 	beq.w	8001d8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d00b      	beq.n	8001ac8 <HAL_GPIO_Init+0x48>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d007      	beq.n	8001ac8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001abc:	2b11      	cmp	r3, #17
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b12      	cmp	r3, #18
 8001ac6:	d130      	bne.n	8001b2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001afe:	2201      	movs	r2, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f003 0201 	and.w	r2, r3, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d118      	bne.n	8001b68 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	f003 0201 	and.w	r2, r3, #1
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x128>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b12      	cmp	r3, #18
 8001ba6:	d123      	bne.n	8001bf0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3208      	adds	r2, #8
 8001bea:	6939      	ldr	r1, [r7, #16]
 8001bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80ac 	beq.w	8001d8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	4b5f      	ldr	r3, [pc, #380]	; (8001db0 <HAL_GPIO_Init+0x330>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	4a5e      	ldr	r2, [pc, #376]	; (8001db0 <HAL_GPIO_Init+0x330>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c3e:	4b5c      	ldr	r3, [pc, #368]	; (8001db0 <HAL_GPIO_Init+0x330>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c4a:	4a5a      	ldr	r2, [pc, #360]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x242>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4f      	ldr	r2, [pc, #316]	; (8001db8 <HAL_GPIO_Init+0x338>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x23e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4e      	ldr	r2, [pc, #312]	; (8001dbc <HAL_GPIO_Init+0x33c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x23a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4d      	ldr	r2, [pc, #308]	; (8001dc0 <HAL_GPIO_Init+0x340>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x236>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4c      	ldr	r2, [pc, #304]	; (8001dc4 <HAL_GPIO_Init+0x344>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x232>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_GPIO_Init+0x348>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x22e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4a      	ldr	r2, [pc, #296]	; (8001dcc <HAL_GPIO_Init+0x34c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x22a>
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	e00c      	b.n	8001cc4 <HAL_GPIO_Init+0x244>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00a      	b.n	8001cc4 <HAL_GPIO_Init+0x244>
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e008      	b.n	8001cc4 <HAL_GPIO_Init+0x244>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x244>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e004      	b.n	8001cc4 <HAL_GPIO_Init+0x244>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_Init+0x244>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x244>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	f002 0203 	and.w	r2, r2, #3
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd4:	4937      	ldr	r1, [pc, #220]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d06:	4a32      	ldr	r2, [pc, #200]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d30:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d36:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f47f ae78 	bne.w	8001a90 <HAL_GPIO_Init+0x10>
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	48001000 	.word	0x48001000
 8001dc8:	48001400 	.word	0x48001400
 8001dcc:	48001800 	.word	0x48001800
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40007000 	.word	0x40007000

08001e20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e2e:	d130      	bne.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e3c:	d038      	beq.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2232      	movs	r2, #50	; 0x32
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0c9b      	lsrs	r3, r3, #18
 8001e60:	3301      	adds	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e64:	e002      	b.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e78:	d102      	bne.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f2      	bne.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8c:	d110      	bne.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e00f      	b.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9e:	d007      	beq.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea8:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	431bde83 	.word	0x431bde83

08001ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e3d4      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ede:	4ba1      	ldr	r3, [pc, #644]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee8:	4b9e      	ldr	r3, [pc, #632]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80e4 	beq.w	80020c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_RCC_OscConfig+0x4a>
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	f040 808b 	bne.w	8002024 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	f040 8087 	bne.w	8002024 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f16:	4b93      	ldr	r3, [pc, #588]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x62>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e3ac      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1a      	ldr	r2, [r3, #32]
 8001f32:	4b8c      	ldr	r3, [pc, #560]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_RCC_OscConfig+0x7c>
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f46:	e005      	b.n	8001f54 <HAL_RCC_OscConfig+0x88>
 8001f48:	4b86      	ldr	r3, [pc, #536]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d223      	bcs.n	8001fa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fd73 	bl	8002a48 <RCC_SetFlashLatencyFromMSIRange>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e38d      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f6c:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a7c      	ldr	r2, [pc, #496]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f72:	f043 0308 	orr.w	r3, r3, #8
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4977      	ldr	r1, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f8a:	4b76      	ldr	r3, [pc, #472]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	4972      	ldr	r1, [pc, #456]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
 8001f9e:	e025      	b.n	8001fec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa0:	4b70      	ldr	r3, [pc, #448]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6f      	ldr	r2, [pc, #444]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	496a      	ldr	r1, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbe:	4b69      	ldr	r3, [pc, #420]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	4965      	ldr	r1, [pc, #404]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fd33 	bl	8002a48 <RCC_SetFlashLatencyFromMSIRange>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e34d      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fec:	f000 fc36 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	495a      	ldr	r1, [pc, #360]	; (8002168 <HAL_RCC_OscConfig+0x29c>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	4a58      	ldr	r2, [pc, #352]	; (800216c <HAL_RCC_OscConfig+0x2a0>)
 800200a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800200c:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_RCC_OscConfig+0x2a4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fa71 	bl	80014f8 <HAL_InitTick>
 8002016:	4603      	mov	r3, r0
 8002018:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d052      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	e331      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d032      	beq.n	8002092 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800202c:	4b4d      	ldr	r3, [pc, #308]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002038:	f7ff fc34 	bl	80018a4 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002040:	f7ff fc30 	bl	80018a4 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e31a      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002052:	4b44      	ldr	r3, [pc, #272]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205e:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a40      	ldr	r2, [pc, #256]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	493b      	ldr	r1, [pc, #236]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800207c:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	4936      	ldr	r1, [pc, #216]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
 8002090:	e01a      	b.n	80020c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002092:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a33      	ldr	r2, [pc, #204]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209e:	f7ff fc01 	bl	80018a4 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a6:	f7ff fbfd 	bl	80018a4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e2e7      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x1da>
 80020c4:	e000      	b.n	80020c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d074      	beq.n	80021be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x21a>
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b0c      	cmp	r3, #12
 80020de:	d10e      	bne.n	80020fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d10b      	bne.n	80020fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d064      	beq.n	80021bc <HAL_RCC_OscConfig+0x2f0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d160      	bne.n	80021bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e2c4      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x24a>
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a15      	ldr	r2, [pc, #84]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e01d      	b.n	8002152 <HAL_RCC_OscConfig+0x286>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211e:	d10c      	bne.n	800213a <HAL_RCC_OscConfig+0x26e>
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	e00b      	b.n	8002152 <HAL_RCC_OscConfig+0x286>
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a06      	ldr	r2, [pc, #24]	; (8002164 <HAL_RCC_OscConfig+0x298>)
 800214c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d01c      	beq.n	8002194 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff fba3 	bl	80018a4 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002160:	e011      	b.n	8002186 <HAL_RCC_OscConfig+0x2ba>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	0800a240 	.word	0x0800a240
 800216c:	20000000 	.word	0x20000000
 8002170:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff fb96 	bl	80018a4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e280      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002186:	4baf      	ldr	r3, [pc, #700]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x2a8>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff fb86 	bl	80018a4 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff fb82 	bl	80018a4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e26c      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ae:	4ba5      	ldr	r3, [pc, #660]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x2d0>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d060      	beq.n	800228c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_OscConfig+0x310>
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d119      	bne.n	800220a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d116      	bne.n	800220a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021dc:	4b99      	ldr	r3, [pc, #612]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x328>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e249      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b93      	ldr	r3, [pc, #588]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	4990      	ldr	r1, [pc, #576]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002208:	e040      	b.n	800228c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d023      	beq.n	800225a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002212:	4b8c      	ldr	r3, [pc, #560]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a8b      	ldr	r2, [pc, #556]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7ff fb41 	bl	80018a4 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002226:	f7ff fb3d 	bl	80018a4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e227      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002238:	4b82      	ldr	r3, [pc, #520]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002244:	4b7f      	ldr	r3, [pc, #508]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	061b      	lsls	r3, r3, #24
 8002252:	497c      	ldr	r1, [pc, #496]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
 8002258:	e018      	b.n	800228c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225a:	4b7a      	ldr	r3, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a79      	ldr	r2, [pc, #484]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7ff fb1d 	bl	80018a4 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7ff fb19 	bl	80018a4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e203      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002280:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d03c      	beq.n	8002312 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01c      	beq.n	80022da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a6:	4a67      	ldr	r2, [pc, #412]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff faf8 	bl	80018a4 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff faf4 	bl	80018a4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1de      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ca:	4b5e      	ldr	r3, [pc, #376]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80022cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ef      	beq.n	80022b8 <HAL_RCC_OscConfig+0x3ec>
 80022d8:	e01b      	b.n	8002312 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022da:	4b5a      	ldr	r3, [pc, #360]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80022dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e0:	4a58      	ldr	r2, [pc, #352]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7ff fadb 	bl	80018a4 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f2:	f7ff fad7 	bl	80018a4 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1c1      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002304:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ef      	bne.n	80022f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80a6 	beq.w	800246c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002324:	4b47      	ldr	r3, [pc, #284]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10d      	bne.n	800234c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	4b44      	ldr	r3, [pc, #272]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	4a43      	ldr	r2, [pc, #268]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233a:	6593      	str	r3, [r2, #88]	; 0x58
 800233c:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002348:	2301      	movs	r3, #1
 800234a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234c:	4b3e      	ldr	r3, [pc, #248]	; (8002448 <HAL_RCC_OscConfig+0x57c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d118      	bne.n	800238a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002358:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_OscConfig+0x57c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <HAL_RCC_OscConfig+0x57c>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002364:	f7ff fa9e 	bl	80018a4 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236c:	f7ff fa9a 	bl	80018a4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e184      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237e:	4b32      	ldr	r3, [pc, #200]	; (8002448 <HAL_RCC_OscConfig+0x57c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d108      	bne.n	80023a4 <HAL_RCC_OscConfig+0x4d8>
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002398:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a2:	e024      	b.n	80023ee <HAL_RCC_OscConfig+0x522>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d110      	bne.n	80023ce <HAL_RCC_OscConfig+0x502>
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	4a24      	ldr	r2, [pc, #144]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	4a20      	ldr	r2, [pc, #128]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023cc:	e00f      	b.n	80023ee <HAL_RCC_OscConfig+0x522>
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	4a17      	ldr	r2, [pc, #92]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 80023e6:	f023 0304 	bic.w	r3, r3, #4
 80023ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d016      	beq.n	8002424 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7ff fa55 	bl	80018a4 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7ff fa51 	bl	80018a4 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	; 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e139      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_OscConfig+0x578>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0ed      	beq.n	80023fe <HAL_RCC_OscConfig+0x532>
 8002422:	e01a      	b.n	800245a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7ff fa3e 	bl	80018a4 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800242a:	e00f      	b.n	800244c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7ff fa3a 	bl	80018a4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d906      	bls.n	800244c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e122      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800244c:	4b90      	ldr	r3, [pc, #576]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e8      	bne.n	800242c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245a:	7ffb      	ldrb	r3, [r7, #31]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d105      	bne.n	800246c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002460:	4b8b      	ldr	r3, [pc, #556]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	4a8a      	ldr	r2, [pc, #552]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8108 	beq.w	8002686 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	2b02      	cmp	r3, #2
 800247c:	f040 80d0 	bne.w	8002620 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002480:	4b83      	ldr	r3, [pc, #524]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f003 0203 	and.w	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	429a      	cmp	r2, r3
 8002492:	d130      	bne.n	80024f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	3b01      	subs	r3, #1
 80024a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d127      	bne.n	80024f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d11f      	bne.n	80024f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024c0:	2a07      	cmp	r2, #7
 80024c2:	bf14      	ite	ne
 80024c4:	2201      	movne	r2, #1
 80024c6:	2200      	moveq	r2, #0
 80024c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d113      	bne.n	80024f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	3b01      	subs	r3, #1
 80024dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	3b01      	subs	r3, #1
 80024f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d06e      	beq.n	80025d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d069      	beq.n	80025d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024fc:	4b64      	ldr	r3, [pc, #400]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002508:	4b61      	ldr	r3, [pc, #388]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b7      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002518:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a5c      	ldr	r2, [pc, #368]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 800251e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002524:	f7ff f9be 	bl	80018a4 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7ff f9ba 	bl	80018a4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0a4      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253e:	4b54      	ldr	r3, [pc, #336]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254a:	4b51      	ldr	r3, [pc, #324]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCC_OscConfig+0x7c8>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800255a:	3a01      	subs	r2, #1
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002564:	0212      	lsls	r2, r2, #8
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800256c:	0852      	lsrs	r2, r2, #1
 800256e:	3a01      	subs	r2, #1
 8002570:	0552      	lsls	r2, r2, #21
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002578:	0852      	lsrs	r2, r2, #1
 800257a:	3a01      	subs	r2, #1
 800257c:	0652      	lsls	r2, r2, #25
 800257e:	4311      	orrs	r1, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002584:	0912      	lsrs	r2, r2, #4
 8002586:	0452      	lsls	r2, r2, #17
 8002588:	430a      	orrs	r2, r1
 800258a:	4941      	ldr	r1, [pc, #260]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002590:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3e      	ldr	r2, [pc, #248]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800259c:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a3b      	ldr	r2, [pc, #236]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a8:	f7ff f97c 	bl	80018a4 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7ff f978 	bl	80018a4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e062      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	4b33      	ldr	r3, [pc, #204]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ce:	e05a      	b.n	8002686 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e059      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d152      	bne.n	8002686 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 80025e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a27      	ldr	r2, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 80025f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025f8:	f7ff f954 	bl	80018a4 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7ff f950 	bl	80018a4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e03a      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x734>
 800261e:	e032      	b.n	8002686 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b0c      	cmp	r3, #12
 8002624:	d02d      	beq.n	8002682 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 800262c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002630:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	4a13      	ldr	r2, [pc, #76]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002644:	f023 0303 	bic.w	r3, r3, #3
 8002648:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a10      	ldr	r2, [pc, #64]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002650:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002658:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7ff f923 	bl	80018a4 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7ff f91f 	bl	80018a4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e009      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x7c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x796>
 8002680:	e001      	b.n	8002686 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	f99d808c 	.word	0xf99d808c

08002698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0c8      	b.n	800283e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ac:	4b66      	ldr	r3, [pc, #408]	; (8002848 <HAL_RCC_ClockConfig+0x1b0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d910      	bls.n	80026dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1b0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 0207 	bic.w	r2, r3, #7
 80026c2:	4961      	ldr	r1, [pc, #388]	; (8002848 <HAL_RCC_ClockConfig+0x1b0>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <HAL_RCC_ClockConfig+0x1b0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0b0      	b.n	800283e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d04c      	beq.n	8002782 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f0:	4b56      	ldr	r3, [pc, #344]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d121      	bne.n	8002740 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e09e      	b.n	800283e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d107      	bne.n	8002718 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d115      	bne.n	8002740 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e092      	b.n	800283e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d107      	bne.n	8002730 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002720:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e086      	b.n	800283e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e07e      	b.n	800283e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f023 0203 	bic.w	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	493f      	ldr	r1, [pc, #252]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002752:	f7ff f8a7 	bl	80018a4 <HAL_GetTick>
 8002756:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002758:	e00a      	b.n	8002770 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275a:	f7ff f8a3 	bl	80018a4 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e066      	b.n	800283e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002770:	4b36      	ldr	r3, [pc, #216]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 020c 	and.w	r2, r3, #12
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	429a      	cmp	r2, r3
 8002780:	d1eb      	bne.n	800275a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	492c      	ldr	r1, [pc, #176]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_RCC_ClockConfig+0x1b0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d210      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_RCC_ClockConfig+0x1b0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	4924      	ldr	r1, [pc, #144]	; (8002848 <HAL_RCC_ClockConfig+0x1b0>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1b0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e036      	b.n	800283e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4918      	ldr	r1, [pc, #96]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4910      	ldr	r1, [pc, #64]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800280e:	f000 f825 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8002812:	4602      	mov	r2, r0
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_RCC_ClockConfig+0x1b4>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	490c      	ldr	r1, [pc, #48]	; (8002850 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	5ccb      	ldrb	r3, [r1, r3]
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fe60 	bl	80014f8 <HAL_InitTick>
 8002838:	4603      	mov	r3, r0
 800283a:	72fb      	strb	r3, [r7, #11]

  return status;
 800283c:	7afb      	ldrb	r3, [r7, #11]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	0800a240 	.word	0x0800a240
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286a:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002874:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x34>
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d121      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d11e      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002890:	4b34      	ldr	r3, [pc, #208]	; (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800289c:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	e005      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028b8:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d102      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_GetSysClockFreq+0x110>)
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	e004      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e0:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_RCC_GetSysClockFreq+0x114>)
 80028e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d134      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0xa6>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d003      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0xac>
 8002900:	e005      	b.n	800290e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <HAL_RCC_GetSysClockFreq+0x110>)
 8002904:	617b      	str	r3, [r7, #20]
      break;
 8002906:	e005      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCC_GetSysClockFreq+0x114>)
 800290a:	617b      	str	r3, [r7, #20]
      break;
 800290c:	e002      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	617b      	str	r3, [r7, #20]
      break;
 8002912:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	3301      	adds	r3, #1
 8002920:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	fb02 f203 	mul.w	r2, r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_RCC_GetSysClockFreq+0x108>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	0e5b      	lsrs	r3, r3, #25
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	3301      	adds	r3, #1
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002954:	69bb      	ldr	r3, [r7, #24]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	0800a258 	.word	0x0800a258
 800296c:	00f42400 	.word	0x00f42400
 8002970:	007a1200 	.word	0x007a1200

08002974 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000000 	.word	0x20000000

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002990:	f7ff fff0 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4904      	ldr	r1, [pc, #16]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	0800a250 	.word	0x0800a250

080029b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029bc:	f7ff ffda 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0adb      	lsrs	r3, r3, #11
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4904      	ldr	r1, [pc, #16]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	0800a250 	.word	0x0800a250

080029e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	220f      	movs	r2, #15
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_RCC_GetClockConfig+0x60>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0207 	and.w	r2, r3, #7
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40022000 	.word	0x40022000

08002a48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a60:	f7ff f9d0 	bl	8001e04 <HAL_PWREx_GetVoltageRange>
 8002a64:	6178      	str	r0, [r7, #20]
 8002a66:	e014      	b.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a80:	f7ff f9c0 	bl	8001e04 <HAL_PWREx_GetVoltageRange>
 8002a84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d10b      	bne.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	d919      	bls.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2ba0      	cmp	r3, #160	; 0xa0
 8002aa4:	d902      	bls.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e013      	b.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aac:	2301      	movs	r3, #1
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	e010      	b.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b80      	cmp	r3, #128	; 0x80
 8002ab6:	d902      	bls.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ab8:	2303      	movs	r3, #3
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e00a      	b.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d102      	bne.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e004      	b.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b70      	cmp	r3, #112	; 0x70
 8002ace:	d101      	bne.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 0207 	bic.w	r2, r3, #7
 8002adc:	4909      	ldr	r1, [pc, #36]	; (8002b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d001      	beq.n	8002af6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40022000 	.word	0x40022000

08002b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b10:	2300      	movs	r3, #0
 8002b12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b14:	2300      	movs	r3, #0
 8002b16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d041      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b2c:	d02a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b32:	d824      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b38:	d008      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b3e:	d81e      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b48:	d010      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b4a:	e018      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b4c:	4b86      	ldr	r3, [pc, #536]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a85      	ldr	r2, [pc, #532]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b58:	e015      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fabb 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b6a:	e00c      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3320      	adds	r3, #32
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fba6 	bl	80032c4 <RCCEx_PLLSAI2_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b7c:	e003      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	74fb      	strb	r3, [r7, #19]
      break;
 8002b82:	e000      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b8c:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b9a:	4973      	ldr	r1, [pc, #460]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ba2:	e001      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d041      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bbc:	d02a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bc2:	d824      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bc8:	d008      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bce:	d81e      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd8:	d010      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bda:	e018      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bdc:	4b62      	ldr	r3, [pc, #392]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a61      	ldr	r2, [pc, #388]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002be8:	e015      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fa73 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bfa:	e00c      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3320      	adds	r3, #32
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fb5e 	bl	80032c4 <RCCEx_PLLSAI2_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c0c:	e003      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	74fb      	strb	r3, [r7, #19]
      break;
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10b      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c1c:	4b52      	ldr	r3, [pc, #328]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c2a:	494f      	ldr	r1, [pc, #316]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c32:	e001      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a0 	beq.w	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6c:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c88:	f7fe fe0c 	bl	80018a4 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c8e:	e009      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c90:	f7fe fe08 	bl	80018a4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d902      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ca2:	e005      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ca4:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ef      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d15c      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01f      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d019      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fe fdc7 	bl	80018a4 <HAL_GetTick>
 8002d16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d18:	e00b      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe fdc3 	bl	80018a4 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d902      	bls.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d30:	e006      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ec      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d56:	4904      	ldr	r1, [pc, #16]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d5e:	e009      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	74bb      	strb	r3, [r7, #18]
 8002d64:	e006      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d74:	7c7b      	ldrb	r3, [r7, #17]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4b9e      	ldr	r3, [pc, #632]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	4a9d      	ldr	r2, [pc, #628]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d92:	4b98      	ldr	r3, [pc, #608]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d98:	f023 0203 	bic.w	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	4994      	ldr	r1, [pc, #592]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002db4:	4b8f      	ldr	r3, [pc, #572]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 020c 	bic.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	498c      	ldr	r1, [pc, #560]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd6:	4b87      	ldr	r3, [pc, #540]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	4983      	ldr	r1, [pc, #524]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002df8:	4b7e      	ldr	r3, [pc, #504]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	497b      	ldr	r1, [pc, #492]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e1a:	4b76      	ldr	r3, [pc, #472]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	4972      	ldr	r1, [pc, #456]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e3c:	4b6d      	ldr	r3, [pc, #436]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	496a      	ldr	r1, [pc, #424]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e5e:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	4961      	ldr	r1, [pc, #388]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e80:	4b5c      	ldr	r3, [pc, #368]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8e:	4959      	ldr	r1, [pc, #356]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea2:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb0:	4950      	ldr	r1, [pc, #320]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ec4:	4b4b      	ldr	r3, [pc, #300]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	4948      	ldr	r1, [pc, #288]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ee6:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	493f      	ldr	r1, [pc, #252]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d028      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f08:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f16:	4937      	ldr	r1, [pc, #220]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f28:	4b32      	ldr	r3, [pc, #200]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a31      	ldr	r2, [pc, #196]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f32:	60d3      	str	r3, [r2, #12]
 8002f34:	e011      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f3e:	d10c      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f8c8 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d028      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	491f      	ldr	r1, [pc, #124]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f84:	d106      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f90:	60d3      	str	r3, [r2, #12]
 8002f92:	e011      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f899 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d02b      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	4908      	ldr	r1, [pc, #32]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fe2:	d109      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a02      	ldr	r2, [pc, #8]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fee:	60d3      	str	r3, [r2, #12]
 8002ff0:	e014      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003000:	d10c      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3304      	adds	r3, #4
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f867 	bl	80030dc <RCCEx_PLLSAI1_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003012:	7cfb      	ldrb	r3, [r7, #19]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d02f      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003036:	4928      	ldr	r1, [pc, #160]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003046:	d10d      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	2102      	movs	r1, #2
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f844 	bl	80030dc <RCCEx_PLLSAI1_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d014      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	74bb      	strb	r3, [r7, #18]
 8003062:	e011      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800306c:	d10c      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3320      	adds	r3, #32
 8003072:	2102      	movs	r1, #2
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f925 	bl	80032c4 <RCCEx_PLLSAI2_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030a2:	490d      	ldr	r1, [pc, #52]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c6:	4904      	ldr	r1, [pc, #16]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000

080030dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ea:	4b75      	ldr	r3, [pc, #468]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d018      	beq.n	8003128 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030f6:	4b72      	ldr	r3, [pc, #456]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d10d      	bne.n	8003122 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
       ||
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800310e:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
       ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d047      	beq.n	80031b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e044      	b.n	80031b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d018      	beq.n	8003162 <RCCEx_PLLSAI1_Config+0x86>
 8003130:	2b03      	cmp	r3, #3
 8003132:	d825      	bhi.n	8003180 <RCCEx_PLLSAI1_Config+0xa4>
 8003134:	2b01      	cmp	r3, #1
 8003136:	d002      	beq.n	800313e <RCCEx_PLLSAI1_Config+0x62>
 8003138:	2b02      	cmp	r3, #2
 800313a:	d009      	beq.n	8003150 <RCCEx_PLLSAI1_Config+0x74>
 800313c:	e020      	b.n	8003180 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800313e:	4b60      	ldr	r3, [pc, #384]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d11d      	bne.n	8003186 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314e:	e01a      	b.n	8003186 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003150:	4b5b      	ldr	r3, [pc, #364]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e013      	b.n	800318a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003162:	4b57      	ldr	r3, [pc, #348]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800316e:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800317e:	e006      	b.n	800318e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e004      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800318e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10d      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003196:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	430b      	orrs	r3, r1
 80031ac:	4944      	ldr	r1, [pc, #272]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d17d      	bne.n	80032b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031b8:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a40      	ldr	r2, [pc, #256]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fe fb6e 	bl	80018a4 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031ca:	e009      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031cc:	f7fe fb6a 	bl	80018a4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	73fb      	strb	r3, [r7, #15]
        break;
 80031de:	e005      	b.n	80031ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031e0:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ef      	bne.n	80031cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d160      	bne.n	80032b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d111      	bne.n	800321c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f8:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	0211      	lsls	r1, r2, #8
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	0912      	lsrs	r2, r2, #4
 8003210:	0452      	lsls	r2, r2, #17
 8003212:	430a      	orrs	r2, r1
 8003214:	492a      	ldr	r1, [pc, #168]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	610b      	str	r3, [r1, #16]
 800321a:	e027      	b.n	800326c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d112      	bne.n	8003248 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800322a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6892      	ldr	r2, [r2, #8]
 8003232:	0211      	lsls	r1, r2, #8
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6912      	ldr	r2, [r2, #16]
 8003238:	0852      	lsrs	r2, r2, #1
 800323a:	3a01      	subs	r2, #1
 800323c:	0552      	lsls	r2, r2, #21
 800323e:	430a      	orrs	r2, r1
 8003240:	491f      	ldr	r1, [pc, #124]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	610b      	str	r3, [r1, #16]
 8003246:	e011      	b.n	800326c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003250:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6892      	ldr	r2, [r2, #8]
 8003258:	0211      	lsls	r1, r2, #8
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6952      	ldr	r2, [r2, #20]
 800325e:	0852      	lsrs	r2, r2, #1
 8003260:	3a01      	subs	r2, #1
 8003262:	0652      	lsls	r2, r2, #25
 8003264:	430a      	orrs	r2, r1
 8003266:	4916      	ldr	r1, [pc, #88]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003276:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe fb14 	bl	80018a4 <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800327e:	e009      	b.n	8003294 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003280:	f7fe fb10 	bl	80018a4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d902      	bls.n	8003294 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	73fb      	strb	r3, [r7, #15]
          break;
 8003292:	e005      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ef      	beq.n	8003280 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000

080032c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032d2:	4b6a      	ldr	r3, [pc, #424]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d018      	beq.n	8003310 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032de:	4b67      	ldr	r3, [pc, #412]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0203 	and.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d10d      	bne.n	800330a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
       ||
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032f6:	4b61      	ldr	r3, [pc, #388]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
       ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d047      	beq.n	800339a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	e044      	b.n	800339a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d018      	beq.n	800334a <RCCEx_PLLSAI2_Config+0x86>
 8003318:	2b03      	cmp	r3, #3
 800331a:	d825      	bhi.n	8003368 <RCCEx_PLLSAI2_Config+0xa4>
 800331c:	2b01      	cmp	r3, #1
 800331e:	d002      	beq.n	8003326 <RCCEx_PLLSAI2_Config+0x62>
 8003320:	2b02      	cmp	r3, #2
 8003322:	d009      	beq.n	8003338 <RCCEx_PLLSAI2_Config+0x74>
 8003324:	e020      	b.n	8003368 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003326:	4b55      	ldr	r3, [pc, #340]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11d      	bne.n	800336e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003336:	e01a      	b.n	800336e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003338:	4b50      	ldr	r3, [pc, #320]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003348:	e013      	b.n	8003372 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003366:	e006      	b.n	8003376 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      break;
 800336c:	e004      	b.n	8003378 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800336e:	bf00      	nop
 8003370:	e002      	b.n	8003378 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003372:	bf00      	nop
 8003374:	e000      	b.n	8003378 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003376:	bf00      	nop
    }

    if(status == HAL_OK)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800337e:	4b3f      	ldr	r3, [pc, #252]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	430b      	orrs	r3, r1
 8003394:	4939      	ldr	r1, [pc, #228]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d167      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033a0:	4b36      	ldr	r3, [pc, #216]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a35      	ldr	r2, [pc, #212]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ac:	f7fe fa7a 	bl	80018a4 <HAL_GetTick>
 80033b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033b2:	e009      	b.n	80033c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033b4:	f7fe fa76 	bl	80018a4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d902      	bls.n	80033c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	73fb      	strb	r3, [r7, #15]
        break;
 80033c6:	e005      	b.n	80033d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ef      	bne.n	80033b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d14a      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6892      	ldr	r2, [r2, #8]
 80033f0:	0211      	lsls	r1, r2, #8
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68d2      	ldr	r2, [r2, #12]
 80033f6:	0912      	lsrs	r2, r2, #4
 80033f8:	0452      	lsls	r2, r2, #17
 80033fa:	430a      	orrs	r2, r1
 80033fc:	491f      	ldr	r1, [pc, #124]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	614b      	str	r3, [r1, #20]
 8003402:	e011      	b.n	8003428 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003404:	4b1d      	ldr	r3, [pc, #116]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800340c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6892      	ldr	r2, [r2, #8]
 8003414:	0211      	lsls	r1, r2, #8
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6912      	ldr	r2, [r2, #16]
 800341a:	0852      	lsrs	r2, r2, #1
 800341c:	3a01      	subs	r2, #1
 800341e:	0652      	lsls	r2, r2, #25
 8003420:	430a      	orrs	r2, r1
 8003422:	4916      	ldr	r1, [pc, #88]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a13      	ldr	r2, [pc, #76]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 800342e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003432:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fe fa36 	bl	80018a4 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800343a:	e009      	b.n	8003450 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800343c:	f7fe fa32 	bl	80018a4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d902      	bls.n	8003450 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	73fb      	strb	r3, [r7, #15]
          break;
 800344e:	e005      	b.n	800345c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ef      	beq.n	800343c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4904      	ldr	r1, [pc, #16]	; (800347c <RCCEx_PLLSAI2_Config+0x1b8>)
 800346c:	4313      	orrs	r3, r2
 800346e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000

08003480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e049      	b.n	8003526 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f841 	bl	800352e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f000 fc60 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e04f      	b.n	80035fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a23      	ldr	r2, [pc, #140]	; (8003608 <HAL_TIM_Base_Start_IT+0xc4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01d      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x76>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d018      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x76>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <HAL_TIM_Base_Start_IT+0xc8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x76>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <HAL_TIM_Base_Start_IT+0xcc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x76>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <HAL_TIM_Base_Start_IT+0xd0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x76>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_TIM_Base_Start_IT+0xd4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x76>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_TIM_Base_Start_IT+0xd8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d115      	bne.n	80035e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	4b17      	ldr	r3, [pc, #92]	; (8003620 <HAL_TIM_Base_Start_IT+0xdc>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d015      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0xb4>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d2:	d011      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e4:	e008      	b.n	80035f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e000      	b.n	80035fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40013400 	.word	0x40013400
 800361c:	40014000 	.word	0x40014000
 8003620:	00010007 	.word	0x00010007

08003624 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e049      	b.n	80036ca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fec6 	bl	80013dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f000 fb8e 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_IC_Start_IT+0x1a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	e023      	b.n	8003736 <HAL_TIM_IC_Start_IT+0x62>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_IC_Start_IT+0x2a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e01b      	b.n	8003736 <HAL_TIM_IC_Start_IT+0x62>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d104      	bne.n	800370e <HAL_TIM_IC_Start_IT+0x3a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800370a:	b2db      	uxtb	r3, r3
 800370c:	e013      	b.n	8003736 <HAL_TIM_IC_Start_IT+0x62>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d104      	bne.n	800371e <HAL_TIM_IC_Start_IT+0x4a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e00b      	b.n	8003736 <HAL_TIM_IC_Start_IT+0x62>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b10      	cmp	r3, #16
 8003722:	d104      	bne.n	800372e <HAL_TIM_IC_Start_IT+0x5a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e003      	b.n	8003736 <HAL_TIM_IC_Start_IT+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003734:	b2db      	uxtb	r3, r3
 8003736:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_TIM_IC_Start_IT+0x74>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e013      	b.n	8003770 <HAL_TIM_IC_Start_IT+0x9c>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b04      	cmp	r3, #4
 800374c:	d104      	bne.n	8003758 <HAL_TIM_IC_Start_IT+0x84>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e00b      	b.n	8003770 <HAL_TIM_IC_Start_IT+0x9c>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b08      	cmp	r3, #8
 800375c:	d104      	bne.n	8003768 <HAL_TIM_IC_Start_IT+0x94>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e003      	b.n	8003770 <HAL_TIM_IC_Start_IT+0x9c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800376e:	b2db      	uxtb	r3, r3
 8003770:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d102      	bne.n	800377e <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d001      	beq.n	8003782 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0d8      	b.n	8003934 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <HAL_TIM_IC_Start_IT+0xbe>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003790:	e023      	b.n	80037da <HAL_TIM_IC_Start_IT+0x106>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d104      	bne.n	80037a2 <HAL_TIM_IC_Start_IT+0xce>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	e01b      	b.n	80037da <HAL_TIM_IC_Start_IT+0x106>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d104      	bne.n	80037b2 <HAL_TIM_IC_Start_IT+0xde>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b0:	e013      	b.n	80037da <HAL_TIM_IC_Start_IT+0x106>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d104      	bne.n	80037c2 <HAL_TIM_IC_Start_IT+0xee>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037c0:	e00b      	b.n	80037da <HAL_TIM_IC_Start_IT+0x106>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_IC_Start_IT+0xfe>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d0:	e003      	b.n	80037da <HAL_TIM_IC_Start_IT+0x106>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <HAL_TIM_IC_Start_IT+0x116>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e8:	e013      	b.n	8003812 <HAL_TIM_IC_Start_IT+0x13e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_IC_Start_IT+0x126>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f8:	e00b      	b.n	8003812 <HAL_TIM_IC_Start_IT+0x13e>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d104      	bne.n	800380a <HAL_TIM_IC_Start_IT+0x136>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003808:	e003      	b.n	8003812 <HAL_TIM_IC_Start_IT+0x13e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b0c      	cmp	r3, #12
 8003816:	d841      	bhi.n	800389c <HAL_TIM_IC_Start_IT+0x1c8>
 8003818:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <HAL_TIM_IC_Start_IT+0x14c>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003855 	.word	0x08003855
 8003824:	0800389d 	.word	0x0800389d
 8003828:	0800389d 	.word	0x0800389d
 800382c:	0800389d 	.word	0x0800389d
 8003830:	08003867 	.word	0x08003867
 8003834:	0800389d 	.word	0x0800389d
 8003838:	0800389d 	.word	0x0800389d
 800383c:	0800389d 	.word	0x0800389d
 8003840:	08003879 	.word	0x08003879
 8003844:	0800389d 	.word	0x0800389d
 8003848:	0800389d 	.word	0x0800389d
 800384c:	0800389d 	.word	0x0800389d
 8003850:	0800388b 	.word	0x0800388b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0202 	orr.w	r2, r2, #2
 8003862:	60da      	str	r2, [r3, #12]
      break;
 8003864:	e01b      	b.n	800389e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0204 	orr.w	r2, r2, #4
 8003874:	60da      	str	r2, [r3, #12]
      break;
 8003876:	e012      	b.n	800389e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0208 	orr.w	r2, r2, #8
 8003886:	60da      	str	r2, [r3, #12]
      break;
 8003888:	e009      	b.n	800389e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0210 	orr.w	r2, r2, #16
 8003898:	60da      	str	r2, [r3, #12]
      break;
 800389a:	e000      	b.n	800389e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800389c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	6839      	ldr	r1, [r7, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fc2a 	bl	8004100 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a22      	ldr	r2, [pc, #136]	; (800393c <HAL_TIM_IC_Start_IT+0x268>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_TIM_IC_Start_IT+0x21e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d018      	beq.n	80038f2 <HAL_TIM_IC_Start_IT+0x21e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <HAL_TIM_IC_Start_IT+0x26c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_TIM_IC_Start_IT+0x21e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_TIM_IC_Start_IT+0x270>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_TIM_IC_Start_IT+0x21e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_TIM_IC_Start_IT+0x274>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_TIM_IC_Start_IT+0x21e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1a      	ldr	r2, [pc, #104]	; (800394c <HAL_TIM_IC_Start_IT+0x278>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_TIM_IC_Start_IT+0x21e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_TIM_IC_Start_IT+0x27c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d115      	bne.n	800391e <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	4b16      	ldr	r3, [pc, #88]	; (8003954 <HAL_TIM_IC_Start_IT+0x280>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b06      	cmp	r3, #6
 8003902:	d015      	beq.n	8003930 <HAL_TIM_IC_Start_IT+0x25c>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390a:	d011      	beq.n	8003930 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391c:	e008      	b.n	8003930 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e000      	b.n	8003932 <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40013400 	.word	0x40013400
 8003950:	40014000 	.word	0x40014000
 8003954:	00010007 	.word	0x00010007

08003958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0202 	mvn.w	r2, #2
 8003984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fa80 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9d0 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f9d7 	bl	8003d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0204 	mvn.w	r2, #4
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fa56 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f9a6 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f9ad 	bl	8003d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0208 	mvn.w	r2, #8
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd fa2c 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f97c 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f983 	bl	8003d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0210 	mvn.w	r2, #16
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2208      	movs	r2, #8
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fa02 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f952 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f959 	bl	8003d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d107      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0201 	mvn.w	r2, #1
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd fc40 	bl	800135c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	d10e      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fbb4 	bl	8004270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b16:	d10e      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d107      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fba7 	bl	8004284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d10e      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d107      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f907 	bl	8003d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d10e      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d107      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f06f 0220 	mvn.w	r2, #32
 8003b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fb67 	bl	800425c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e082      	b.n	8003cb6 <HAL_TIM_IC_ConfigChannel+0x120>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11b      	bne.n	8003bf6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f000 f973 	bl	8003eb8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 020c 	bic.w	r2, r2, #12
 8003be0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6999      	ldr	r1, [r3, #24]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	619a      	str	r2, [r3, #24]
 8003bf4:	e05a      	b.n	8003cac <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d11c      	bne.n	8003c36 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f000 f9c2 	bl	8003f94 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c1e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6999      	ldr	r1, [r3, #24]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	021a      	lsls	r2, r3, #8
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	619a      	str	r2, [r3, #24]
 8003c34:	e03a      	b.n	8003cac <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d11b      	bne.n	8003c74 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f000 f9df 	bl	800400e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 020c 	bic.w	r2, r2, #12
 8003c5e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69d9      	ldr	r1, [r3, #28]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	61da      	str	r2, [r3, #28]
 8003c72:	e01b      	b.n	8003cac <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f000 f9ff 	bl	8004086 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69d9      	ldr	r1, [r3, #28]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d831      	bhi.n	8003d38 <HAL_TIM_ReadCapturedValue+0x78>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d11 	.word	0x08003d11
 8003ce0:	08003d39 	.word	0x08003d39
 8003ce4:	08003d39 	.word	0x08003d39
 8003ce8:	08003d39 	.word	0x08003d39
 8003cec:	08003d1b 	.word	0x08003d1b
 8003cf0:	08003d39 	.word	0x08003d39
 8003cf4:	08003d39 	.word	0x08003d39
 8003cf8:	08003d39 	.word	0x08003d39
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d39 	.word	0x08003d39
 8003d04:	08003d39 	.word	0x08003d39
 8003d08:	08003d39 	.word	0x08003d39
 8003d0c:	08003d2f 	.word	0x08003d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	60fb      	str	r3, [r7, #12]

      break;
 8003d18:	e00f      	b.n	8003d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	60fb      	str	r3, [r7, #12]

      break;
 8003d22:	e00a      	b.n	8003d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	60fb      	str	r3, [r7, #12]

      break;
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	60fb      	str	r3, [r7, #12]

      break;
 8003d36:	e000      	b.n	8003d3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d38:	bf00      	nop
  }

  return tmpreg;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a40      	ldr	r2, [pc, #256]	; (8003e98 <TIM_Base_SetConfig+0x114>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d00f      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3d      	ldr	r2, [pc, #244]	; (8003e9c <TIM_Base_SetConfig+0x118>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00b      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <TIM_Base_SetConfig+0x11c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d007      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a3b      	ldr	r2, [pc, #236]	; (8003ea4 <TIM_Base_SetConfig+0x120>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a3a      	ldr	r2, [pc, #232]	; (8003ea8 <TIM_Base_SetConfig+0x124>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d108      	bne.n	8003dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2f      	ldr	r2, [pc, #188]	; (8003e98 <TIM_Base_SetConfig+0x114>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01f      	beq.n	8003e1e <TIM_Base_SetConfig+0x9a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de4:	d01b      	beq.n	8003e1e <TIM_Base_SetConfig+0x9a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2c      	ldr	r2, [pc, #176]	; (8003e9c <TIM_Base_SetConfig+0x118>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d017      	beq.n	8003e1e <TIM_Base_SetConfig+0x9a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a2b      	ldr	r2, [pc, #172]	; (8003ea0 <TIM_Base_SetConfig+0x11c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <TIM_Base_SetConfig+0x9a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a2a      	ldr	r2, [pc, #168]	; (8003ea4 <TIM_Base_SetConfig+0x120>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00f      	beq.n	8003e1e <TIM_Base_SetConfig+0x9a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <TIM_Base_SetConfig+0x124>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <TIM_Base_SetConfig+0x9a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a28      	ldr	r2, [pc, #160]	; (8003eac <TIM_Base_SetConfig+0x128>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_Base_SetConfig+0x9a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <TIM_Base_SetConfig+0x12c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_Base_SetConfig+0x9a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <TIM_Base_SetConfig+0x130>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d108      	bne.n	8003e30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00f      	beq.n	8003e7c <TIM_Base_SetConfig+0xf8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <TIM_Base_SetConfig+0x124>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00b      	beq.n	8003e7c <TIM_Base_SetConfig+0xf8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a11      	ldr	r2, [pc, #68]	; (8003eac <TIM_Base_SetConfig+0x128>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0xf8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a10      	ldr	r2, [pc, #64]	; (8003eb0 <TIM_Base_SetConfig+0x12c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0xf8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <TIM_Base_SetConfig+0x130>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d103      	bne.n	8003e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	615a      	str	r2, [r3, #20]
}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40000c00 	.word	0x40000c00
 8003ea8:	40013400 	.word	0x40013400
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800

08003eb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 0201 	bic.w	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <TIM_TI1_SetConfig+0xc4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d017      	beq.n	8003f16 <TIM_TI1_SetConfig+0x5e>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d013      	beq.n	8003f16 <TIM_TI1_SetConfig+0x5e>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <TIM_TI1_SetConfig+0xc8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_TI1_SetConfig+0x5e>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <TIM_TI1_SetConfig+0xcc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_TI1_SetConfig+0x5e>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <TIM_TI1_SetConfig+0xd0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_TI1_SetConfig+0x5e>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <TIM_TI1_SetConfig+0xd4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_TI1_SetConfig+0x5e>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <TIM_TI1_SetConfig+0xd8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <TIM_TI1_SetConfig+0x62>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <TIM_TI1_SetConfig+0x64>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e003      	b.n	8003f3a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f023 030a 	bic.w	r3, r3, #10
 8003f54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f003 030a 	and.w	r3, r3, #10
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800
 8003f88:	40000c00 	.word	0x40000c00
 8003f8c:	40013400 	.word	0x40013400
 8003f90:	40014000 	.word	0x40014000

08003f94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0210 	bic.w	r2, r3, #16
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	031b      	lsls	r3, r3, #12
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	b2db      	uxtb	r3, r3
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800405e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004086:	b480      	push	{r7}
 8004088:	b087      	sub	sp, #28
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	031b      	lsls	r3, r3, #12
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80040d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	031b      	lsls	r3, r3, #12
 80040de:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	2201      	movs	r2, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1a      	ldr	r2, [r3, #32]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	43db      	mvns	r3, r3
 8004122:	401a      	ands	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004160:	2302      	movs	r3, #2
 8004162:	e068      	b.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2e      	ldr	r2, [pc, #184]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d108      	bne.n	80041aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800419e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01d      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d018      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1b      	ldr	r2, [pc, #108]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1a      	ldr	r2, [pc, #104]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00e      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10c      	bne.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	4313      	orrs	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40013400 	.word	0x40013400
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40014000 	.word	0x40014000

0800425c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e040      	b.n	800432c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd f8da 	bl	8001474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8c0 	bl	800445c <UART_SetConfig>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e022      	b.n	800432c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fb3e 	bl	8004970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fbc5 	bl	8004ab4 <UART_CheckIdleState>
 800432a:	4603      	mov	r3, r0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004348:	2b20      	cmp	r3, #32
 800434a:	f040 8082 	bne.w	8004452 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_UART_Transmit+0x26>
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07a      	b.n	8004454 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_UART_Transmit+0x38>
 8004368:	2302      	movs	r3, #2
 800436a:	e073      	b.n	8004454 <HAL_UART_Transmit+0x120>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004382:	f7fd fa8f 	bl	80018a4 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a0:	d108      	bne.n	80043b4 <HAL_UART_Transmit+0x80>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e003      	b.n	80043bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80043c4:	e02d      	b.n	8004422 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fbb8 	bl	8004b46 <UART_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e039      	b.n	8004454 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f2:	b292      	uxth	r2, r2
 80043f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3302      	adds	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e008      	b.n	8004410 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b292      	uxth	r2, r2
 8004408:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3301      	adds	r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1cb      	bne.n	80043c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fb84 	bl	8004b46 <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e005      	b.n	8004454 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	b5b0      	push	{r4, r5, r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4313      	orrs	r3, r2
 800447e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4bad      	ldr	r3, [pc, #692]	; (800473c <UART_SetConfig+0x2e0>)
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	69f9      	ldr	r1, [r7, #28]
 8004490:	430b      	orrs	r3, r1
 8004492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4aa2      	ldr	r2, [pc, #648]	; (8004740 <UART_SetConfig+0x2e4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a99      	ldr	r2, [pc, #612]	; (8004744 <UART_SetConfig+0x2e8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d121      	bne.n	8004526 <UART_SetConfig+0xca>
 80044e2:	4b99      	ldr	r3, [pc, #612]	; (8004748 <UART_SetConfig+0x2ec>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d817      	bhi.n	8004520 <UART_SetConfig+0xc4>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0x9c>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	08004509 	.word	0x08004509
 80044fc:	08004515 	.word	0x08004515
 8004500:	0800450f 	.word	0x0800450f
 8004504:	0800451b 	.word	0x0800451b
 8004508:	2301      	movs	r3, #1
 800450a:	76fb      	strb	r3, [r7, #27]
 800450c:	e0e7      	b.n	80046de <UART_SetConfig+0x282>
 800450e:	2302      	movs	r3, #2
 8004510:	76fb      	strb	r3, [r7, #27]
 8004512:	e0e4      	b.n	80046de <UART_SetConfig+0x282>
 8004514:	2304      	movs	r3, #4
 8004516:	76fb      	strb	r3, [r7, #27]
 8004518:	e0e1      	b.n	80046de <UART_SetConfig+0x282>
 800451a:	2308      	movs	r3, #8
 800451c:	76fb      	strb	r3, [r7, #27]
 800451e:	e0de      	b.n	80046de <UART_SetConfig+0x282>
 8004520:	2310      	movs	r3, #16
 8004522:	76fb      	strb	r3, [r7, #27]
 8004524:	e0db      	b.n	80046de <UART_SetConfig+0x282>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a88      	ldr	r2, [pc, #544]	; (800474c <UART_SetConfig+0x2f0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d132      	bne.n	8004596 <UART_SetConfig+0x13a>
 8004530:	4b85      	ldr	r3, [pc, #532]	; (8004748 <UART_SetConfig+0x2ec>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d828      	bhi.n	8004590 <UART_SetConfig+0x134>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0xe8>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004579 	.word	0x08004579
 8004548:	08004591 	.word	0x08004591
 800454c:	08004591 	.word	0x08004591
 8004550:	08004591 	.word	0x08004591
 8004554:	08004585 	.word	0x08004585
 8004558:	08004591 	.word	0x08004591
 800455c:	08004591 	.word	0x08004591
 8004560:	08004591 	.word	0x08004591
 8004564:	0800457f 	.word	0x0800457f
 8004568:	08004591 	.word	0x08004591
 800456c:	08004591 	.word	0x08004591
 8004570:	08004591 	.word	0x08004591
 8004574:	0800458b 	.word	0x0800458b
 8004578:	2300      	movs	r3, #0
 800457a:	76fb      	strb	r3, [r7, #27]
 800457c:	e0af      	b.n	80046de <UART_SetConfig+0x282>
 800457e:	2302      	movs	r3, #2
 8004580:	76fb      	strb	r3, [r7, #27]
 8004582:	e0ac      	b.n	80046de <UART_SetConfig+0x282>
 8004584:	2304      	movs	r3, #4
 8004586:	76fb      	strb	r3, [r7, #27]
 8004588:	e0a9      	b.n	80046de <UART_SetConfig+0x282>
 800458a:	2308      	movs	r3, #8
 800458c:	76fb      	strb	r3, [r7, #27]
 800458e:	e0a6      	b.n	80046de <UART_SetConfig+0x282>
 8004590:	2310      	movs	r3, #16
 8004592:	76fb      	strb	r3, [r7, #27]
 8004594:	e0a3      	b.n	80046de <UART_SetConfig+0x282>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6d      	ldr	r2, [pc, #436]	; (8004750 <UART_SetConfig+0x2f4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d120      	bne.n	80045e2 <UART_SetConfig+0x186>
 80045a0:	4b69      	ldr	r3, [pc, #420]	; (8004748 <UART_SetConfig+0x2ec>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045aa:	2b30      	cmp	r3, #48	; 0x30
 80045ac:	d013      	beq.n	80045d6 <UART_SetConfig+0x17a>
 80045ae:	2b30      	cmp	r3, #48	; 0x30
 80045b0:	d814      	bhi.n	80045dc <UART_SetConfig+0x180>
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d009      	beq.n	80045ca <UART_SetConfig+0x16e>
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d810      	bhi.n	80045dc <UART_SetConfig+0x180>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <UART_SetConfig+0x168>
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d006      	beq.n	80045d0 <UART_SetConfig+0x174>
 80045c2:	e00b      	b.n	80045dc <UART_SetConfig+0x180>
 80045c4:	2300      	movs	r3, #0
 80045c6:	76fb      	strb	r3, [r7, #27]
 80045c8:	e089      	b.n	80046de <UART_SetConfig+0x282>
 80045ca:	2302      	movs	r3, #2
 80045cc:	76fb      	strb	r3, [r7, #27]
 80045ce:	e086      	b.n	80046de <UART_SetConfig+0x282>
 80045d0:	2304      	movs	r3, #4
 80045d2:	76fb      	strb	r3, [r7, #27]
 80045d4:	e083      	b.n	80046de <UART_SetConfig+0x282>
 80045d6:	2308      	movs	r3, #8
 80045d8:	76fb      	strb	r3, [r7, #27]
 80045da:	e080      	b.n	80046de <UART_SetConfig+0x282>
 80045dc:	2310      	movs	r3, #16
 80045de:	76fb      	strb	r3, [r7, #27]
 80045e0:	e07d      	b.n	80046de <UART_SetConfig+0x282>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5b      	ldr	r2, [pc, #364]	; (8004754 <UART_SetConfig+0x2f8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d120      	bne.n	800462e <UART_SetConfig+0x1d2>
 80045ec:	4b56      	ldr	r3, [pc, #344]	; (8004748 <UART_SetConfig+0x2ec>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045f6:	2bc0      	cmp	r3, #192	; 0xc0
 80045f8:	d013      	beq.n	8004622 <UART_SetConfig+0x1c6>
 80045fa:	2bc0      	cmp	r3, #192	; 0xc0
 80045fc:	d814      	bhi.n	8004628 <UART_SetConfig+0x1cc>
 80045fe:	2b80      	cmp	r3, #128	; 0x80
 8004600:	d009      	beq.n	8004616 <UART_SetConfig+0x1ba>
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d810      	bhi.n	8004628 <UART_SetConfig+0x1cc>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <UART_SetConfig+0x1b4>
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d006      	beq.n	800461c <UART_SetConfig+0x1c0>
 800460e:	e00b      	b.n	8004628 <UART_SetConfig+0x1cc>
 8004610:	2300      	movs	r3, #0
 8004612:	76fb      	strb	r3, [r7, #27]
 8004614:	e063      	b.n	80046de <UART_SetConfig+0x282>
 8004616:	2302      	movs	r3, #2
 8004618:	76fb      	strb	r3, [r7, #27]
 800461a:	e060      	b.n	80046de <UART_SetConfig+0x282>
 800461c:	2304      	movs	r3, #4
 800461e:	76fb      	strb	r3, [r7, #27]
 8004620:	e05d      	b.n	80046de <UART_SetConfig+0x282>
 8004622:	2308      	movs	r3, #8
 8004624:	76fb      	strb	r3, [r7, #27]
 8004626:	e05a      	b.n	80046de <UART_SetConfig+0x282>
 8004628:	2310      	movs	r3, #16
 800462a:	76fb      	strb	r3, [r7, #27]
 800462c:	e057      	b.n	80046de <UART_SetConfig+0x282>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a49      	ldr	r2, [pc, #292]	; (8004758 <UART_SetConfig+0x2fc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d125      	bne.n	8004684 <UART_SetConfig+0x228>
 8004638:	4b43      	ldr	r3, [pc, #268]	; (8004748 <UART_SetConfig+0x2ec>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004646:	d017      	beq.n	8004678 <UART_SetConfig+0x21c>
 8004648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800464c:	d817      	bhi.n	800467e <UART_SetConfig+0x222>
 800464e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004652:	d00b      	beq.n	800466c <UART_SetConfig+0x210>
 8004654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004658:	d811      	bhi.n	800467e <UART_SetConfig+0x222>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <UART_SetConfig+0x20a>
 800465e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004662:	d006      	beq.n	8004672 <UART_SetConfig+0x216>
 8004664:	e00b      	b.n	800467e <UART_SetConfig+0x222>
 8004666:	2300      	movs	r3, #0
 8004668:	76fb      	strb	r3, [r7, #27]
 800466a:	e038      	b.n	80046de <UART_SetConfig+0x282>
 800466c:	2302      	movs	r3, #2
 800466e:	76fb      	strb	r3, [r7, #27]
 8004670:	e035      	b.n	80046de <UART_SetConfig+0x282>
 8004672:	2304      	movs	r3, #4
 8004674:	76fb      	strb	r3, [r7, #27]
 8004676:	e032      	b.n	80046de <UART_SetConfig+0x282>
 8004678:	2308      	movs	r3, #8
 800467a:	76fb      	strb	r3, [r7, #27]
 800467c:	e02f      	b.n	80046de <UART_SetConfig+0x282>
 800467e:	2310      	movs	r3, #16
 8004680:	76fb      	strb	r3, [r7, #27]
 8004682:	e02c      	b.n	80046de <UART_SetConfig+0x282>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2d      	ldr	r2, [pc, #180]	; (8004740 <UART_SetConfig+0x2e4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d125      	bne.n	80046da <UART_SetConfig+0x27e>
 800468e:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <UART_SetConfig+0x2ec>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800469c:	d017      	beq.n	80046ce <UART_SetConfig+0x272>
 800469e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a2:	d817      	bhi.n	80046d4 <UART_SetConfig+0x278>
 80046a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a8:	d00b      	beq.n	80046c2 <UART_SetConfig+0x266>
 80046aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ae:	d811      	bhi.n	80046d4 <UART_SetConfig+0x278>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <UART_SetConfig+0x260>
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b8:	d006      	beq.n	80046c8 <UART_SetConfig+0x26c>
 80046ba:	e00b      	b.n	80046d4 <UART_SetConfig+0x278>
 80046bc:	2300      	movs	r3, #0
 80046be:	76fb      	strb	r3, [r7, #27]
 80046c0:	e00d      	b.n	80046de <UART_SetConfig+0x282>
 80046c2:	2302      	movs	r3, #2
 80046c4:	76fb      	strb	r3, [r7, #27]
 80046c6:	e00a      	b.n	80046de <UART_SetConfig+0x282>
 80046c8:	2304      	movs	r3, #4
 80046ca:	76fb      	strb	r3, [r7, #27]
 80046cc:	e007      	b.n	80046de <UART_SetConfig+0x282>
 80046ce:	2308      	movs	r3, #8
 80046d0:	76fb      	strb	r3, [r7, #27]
 80046d2:	e004      	b.n	80046de <UART_SetConfig+0x282>
 80046d4:	2310      	movs	r3, #16
 80046d6:	76fb      	strb	r3, [r7, #27]
 80046d8:	e001      	b.n	80046de <UART_SetConfig+0x282>
 80046da:	2310      	movs	r3, #16
 80046dc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a17      	ldr	r2, [pc, #92]	; (8004740 <UART_SetConfig+0x2e4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	f040 8087 	bne.w	80047f8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ea:	7efb      	ldrb	r3, [r7, #27]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d837      	bhi.n	8004760 <UART_SetConfig+0x304>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0x29c>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	08004761 	.word	0x08004761
 8004700:	08004725 	.word	0x08004725
 8004704:	08004761 	.word	0x08004761
 8004708:	0800472b 	.word	0x0800472b
 800470c:	08004761 	.word	0x08004761
 8004710:	08004761 	.word	0x08004761
 8004714:	08004761 	.word	0x08004761
 8004718:	08004733 	.word	0x08004733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7fe f936 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8004720:	6178      	str	r0, [r7, #20]
        break;
 8004722:	e022      	b.n	800476a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <UART_SetConfig+0x300>)
 8004726:	617b      	str	r3, [r7, #20]
        break;
 8004728:	e01f      	b.n	800476a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472a:	f7fe f897 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800472e:	6178      	str	r0, [r7, #20]
        break;
 8004730:	e01b      	b.n	800476a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004736:	617b      	str	r3, [r7, #20]
        break;
 8004738:	e017      	b.n	800476a <UART_SetConfig+0x30e>
 800473a:	bf00      	nop
 800473c:	efff69f3 	.word	0xefff69f3
 8004740:	40008000 	.word	0x40008000
 8004744:	40013800 	.word	0x40013800
 8004748:	40021000 	.word	0x40021000
 800474c:	40004400 	.word	0x40004400
 8004750:	40004800 	.word	0x40004800
 8004754:	40004c00 	.word	0x40004c00
 8004758:	40005000 	.word	0x40005000
 800475c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	76bb      	strb	r3, [r7, #26]
        break;
 8004768:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80f1 	beq.w	8004954 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4413      	add	r3, r2
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	429a      	cmp	r2, r3
 8004780:	d305      	bcc.n	800478e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	429a      	cmp	r2, r3
 800478c:	d902      	bls.n	8004794 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	76bb      	strb	r3, [r7, #26]
 8004792:	e0df      	b.n	8004954 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4618      	mov	r0, r3
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	020b      	lsls	r3, r1, #8
 80047a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047aa:	0202      	lsls	r2, r0, #8
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	6849      	ldr	r1, [r1, #4]
 80047b0:	0849      	lsrs	r1, r1, #1
 80047b2:	4608      	mov	r0, r1
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	1814      	adds	r4, r2, r0
 80047ba:	eb43 0501 	adc.w	r5, r3, r1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	4620      	mov	r0, r4
 80047ca:	4629      	mov	r1, r5
 80047cc:	f7fc f9ec 	bl	8000ba8 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047de:	d308      	bcc.n	80047f2 <UART_SetConfig+0x396>
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e6:	d204      	bcs.n	80047f2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e0b0      	b.n	8004954 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	76bb      	strb	r3, [r7, #26]
 80047f6:	e0ad      	b.n	8004954 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	d15c      	bne.n	80048bc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004802:	7efb      	ldrb	r3, [r7, #27]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d828      	bhi.n	800485a <UART_SetConfig+0x3fe>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <UART_SetConfig+0x3b4>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004835 	.word	0x08004835
 8004814:	0800483d 	.word	0x0800483d
 8004818:	08004845 	.word	0x08004845
 800481c:	0800485b 	.word	0x0800485b
 8004820:	0800484b 	.word	0x0800484b
 8004824:	0800485b 	.word	0x0800485b
 8004828:	0800485b 	.word	0x0800485b
 800482c:	0800485b 	.word	0x0800485b
 8004830:	08004853 	.word	0x08004853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004834:	f7fe f8aa 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8004838:	6178      	str	r0, [r7, #20]
        break;
 800483a:	e013      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800483c:	f7fe f8bc 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 8004840:	6178      	str	r0, [r7, #20]
        break;
 8004842:	e00f      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004844:	4b49      	ldr	r3, [pc, #292]	; (800496c <UART_SetConfig+0x510>)
 8004846:	617b      	str	r3, [r7, #20]
        break;
 8004848:	e00c      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800484a:	f7fe f807 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800484e:	6178      	str	r0, [r7, #20]
        break;
 8004850:	e008      	b.n	8004864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004856:	617b      	str	r3, [r7, #20]
        break;
 8004858:	e004      	b.n	8004864 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	76bb      	strb	r3, [r7, #26]
        break;
 8004862:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d074      	beq.n	8004954 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	005a      	lsls	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	441a      	add	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	b29b      	uxth	r3, r3
 8004880:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b0f      	cmp	r3, #15
 8004886:	d916      	bls.n	80048b6 <UART_SetConfig+0x45a>
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488e:	d212      	bcs.n	80048b6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f023 030f 	bic.w	r3, r3, #15
 8004898:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	89fb      	ldrh	r3, [r7, #14]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	89fa      	ldrh	r2, [r7, #14]
 80048b2:	60da      	str	r2, [r3, #12]
 80048b4:	e04e      	b.n	8004954 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	76bb      	strb	r3, [r7, #26]
 80048ba:	e04b      	b.n	8004954 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048bc:	7efb      	ldrb	r3, [r7, #27]
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d827      	bhi.n	8004912 <UART_SetConfig+0x4b6>
 80048c2:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <UART_SetConfig+0x46c>)
 80048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c8:	080048ed 	.word	0x080048ed
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	08004913 	.word	0x08004913
 80048d8:	08004903 	.word	0x08004903
 80048dc:	08004913 	.word	0x08004913
 80048e0:	08004913 	.word	0x08004913
 80048e4:	08004913 	.word	0x08004913
 80048e8:	0800490b 	.word	0x0800490b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7fe f84e 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80048f0:	6178      	str	r0, [r7, #20]
        break;
 80048f2:	e013      	b.n	800491c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f4:	f7fe f860 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 80048f8:	6178      	str	r0, [r7, #20]
        break;
 80048fa:	e00f      	b.n	800491c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048fc:	4b1b      	ldr	r3, [pc, #108]	; (800496c <UART_SetConfig+0x510>)
 80048fe:	617b      	str	r3, [r7, #20]
        break;
 8004900:	e00c      	b.n	800491c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004902:	f7fd ffab 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8004906:	6178      	str	r0, [r7, #20]
        break;
 8004908:	e008      	b.n	800491c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490e:	617b      	str	r3, [r7, #20]
        break;
 8004910:	e004      	b.n	800491c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	76bb      	strb	r3, [r7, #26]
        break;
 800491a:	bf00      	nop
    }

    if (pclk != 0U)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d018      	beq.n	8004954 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	085a      	lsrs	r2, r3, #1
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	441a      	add	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	b29b      	uxth	r3, r3
 8004936:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b0f      	cmp	r3, #15
 800493c:	d908      	bls.n	8004950 <UART_SetConfig+0x4f4>
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004944:	d204      	bcs.n	8004950 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	60da      	str	r2, [r3, #12]
 800494e:	e001      	b.n	8004954 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004960:	7ebb      	ldrb	r3, [r7, #26]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bdb0      	pop	{r4, r5, r7, pc}
 800496a:	bf00      	nop
 800496c:	00f42400 	.word	0x00f42400

08004970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a6e:	d10a      	bne.n	8004a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ac4:	f7fc feee 	bl	80018a4 <HAL_GetTick>
 8004ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d10e      	bne.n	8004af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f82d 	bl	8004b46 <UART_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e023      	b.n	8004b3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d10e      	bne.n	8004b22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f817 	bl	8004b46 <UART_WaitOnFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e00d      	b.n	8004b3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4613      	mov	r3, r2
 8004b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b56:	e05e      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b5e:	d05a      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b60:	f7fc fea0 	bl	80018a4 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d11b      	bne.n	8004bae <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e043      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d02c      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bca:	d124      	bne.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004be4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e00f      	b.n	8004c36 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	bf0c      	ite	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	2300      	movne	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d091      	beq.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <__NVIC_SetPriority>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	6039      	str	r1, [r7, #0]
 8004c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	db0a      	blt.n	8004c6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	490c      	ldr	r1, [pc, #48]	; (8004c8c <__NVIC_SetPriority+0x4c>)
 8004c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5e:	0112      	lsls	r2, r2, #4
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	440b      	add	r3, r1
 8004c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c68:	e00a      	b.n	8004c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	4908      	ldr	r1, [pc, #32]	; (8004c90 <__NVIC_SetPriority+0x50>)
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	3b04      	subs	r3, #4
 8004c78:	0112      	lsls	r2, r2, #4
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	761a      	strb	r2, [r3, #24]
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000e100 	.word	0xe000e100
 8004c90:	e000ed00 	.word	0xe000ed00

08004c94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <SysTick_Handler+0x1c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c9c:	f001 fcfe 	bl	800669c <xTaskGetSchedulerState>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d001      	beq.n	8004caa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ca6:	f002 fae7 	bl	8007278 <xPortSysTickHandler>
  }
}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	e000e010 	.word	0xe000e010

08004cb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004cb8:	2100      	movs	r1, #0
 8004cba:	f06f 0004 	mvn.w	r0, #4
 8004cbe:	f7ff ffbf 	bl	8004c40 <__NVIC_SetPriority>
#endif
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cce:	f3ef 8305 	mrs	r3, IPSR
 8004cd2:	603b      	str	r3, [r7, #0]
  return(result);
 8004cd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cda:	f06f 0305 	mvn.w	r3, #5
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	e00c      	b.n	8004cfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <osKernelInitialize+0x44>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <osKernelInitialize+0x44>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	e002      	b.n	8004cfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cfc:	687b      	ldr	r3, [r7, #4]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000214 	.word	0x20000214

08004d10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d16:	f3ef 8305 	mrs	r3, IPSR
 8004d1a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d22:	f06f 0305 	mvn.w	r3, #5
 8004d26:	607b      	str	r3, [r7, #4]
 8004d28:	e010      	b.n	8004d4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <osKernelStart+0x48>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d109      	bne.n	8004d46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d32:	f7ff ffbf 	bl	8004cb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <osKernelStart+0x48>)
 8004d38:	2202      	movs	r2, #2
 8004d3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d3c:	f001 f866 	bl	8005e0c <vTaskStartScheduler>
      stat = osOK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	e002      	b.n	8004d4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d4c:	687b      	ldr	r3, [r7, #4]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000214 	.word	0x20000214

08004d5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08e      	sub	sp, #56	; 0x38
 8004d60:	af04      	add	r7, sp, #16
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d6c:	f3ef 8305 	mrs	r3, IPSR
 8004d70:	617b      	str	r3, [r7, #20]
  return(result);
 8004d72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d17e      	bne.n	8004e76 <osThreadNew+0x11a>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d07b      	beq.n	8004e76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d82:	2318      	movs	r3, #24
 8004d84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d045      	beq.n	8004e22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <osThreadNew+0x48>
        name = attr->name;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <osThreadNew+0x6e>
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	2b38      	cmp	r3, #56	; 0x38
 8004dbc:	d805      	bhi.n	8004dca <osThreadNew+0x6e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <osThreadNew+0x72>
        return (NULL);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e054      	b.n	8004e78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00e      	beq.n	8004e04 <osThreadNew+0xa8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b5b      	cmp	r3, #91	; 0x5b
 8004dec:	d90a      	bls.n	8004e04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d006      	beq.n	8004e04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <osThreadNew+0xa8>
        mem = 1;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	e010      	b.n	8004e26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10c      	bne.n	8004e26 <osThreadNew+0xca>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d108      	bne.n	8004e26 <osThreadNew+0xca>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <osThreadNew+0xca>
          mem = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e001      	b.n	8004e26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d110      	bne.n	8004e4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e34:	9202      	str	r2, [sp, #8]
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6a3a      	ldr	r2, [r7, #32]
 8004e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fe0c 	bl	8005a60 <xTaskCreateStatic>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	e013      	b.n	8004e76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d110      	bne.n	8004e76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	f107 0310 	add.w	r3, r7, #16
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fe57 	bl	8005b1a <xTaskCreate>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d001      	beq.n	8004e76 <osThreadNew+0x11a>
            hTask = NULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e76:	693b      	ldr	r3, [r7, #16]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3728      	adds	r7, #40	; 0x28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e88:	f3ef 8305 	mrs	r3, IPSR
 8004e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <osDelay+0x1c>
    stat = osErrorISR;
 8004e94:	f06f 0305 	mvn.w	r3, #5
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e007      	b.n	8004eac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 ff7c 	bl	8005da4 <vTaskDelay>
    }
  }

  return (stat);
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a07      	ldr	r2, [pc, #28]	; (8004ee4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ec8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4a06      	ldr	r2, [pc, #24]	; (8004ee8 <vApplicationGetIdleTaskMemory+0x30>)
 8004ece:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2280      	movs	r2, #128	; 0x80
 8004ed4:	601a      	str	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000218 	.word	0x20000218
 8004ee8:	20000274 	.word	0x20000274

08004eec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4a07      	ldr	r2, [pc, #28]	; (8004f18 <vApplicationGetTimerTaskMemory+0x2c>)
 8004efc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4a06      	ldr	r2, [pc, #24]	; (8004f1c <vApplicationGetTimerTaskMemory+0x30>)
 8004f02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f0a:	601a      	str	r2, [r3, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	20000474 	.word	0x20000474
 8004f1c:	200004d0 	.word	0x200004d0

08004f20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f103 0208 	add.w	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f103 0208 	add.w	r2, r3, #8
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f103 0208 	add.w	r2, r3, #8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd8:	d103      	bne.n	8004fe2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e00c      	b.n	8004ffc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e002      	b.n	8004ff0 <vListInsert+0x2e>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d2f6      	bcs.n	8004fea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6892      	ldr	r2, [r2, #8]
 800504a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6852      	ldr	r2, [r2, #4]
 8005054:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d103      	bne.n	8005068 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	1e5a      	subs	r2, r3, #1
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050b2:	f002 f84f 	bl	8007154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	441a      	add	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	3b01      	subs	r3, #1
 80050e4:	68f9      	ldr	r1, [r7, #12]
 80050e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	441a      	add	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	22ff      	movs	r2, #255	; 0xff
 80050f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	22ff      	movs	r2, #255	; 0xff
 80050fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d114      	bne.n	8005132 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01a      	beq.n	8005146 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3310      	adds	r3, #16
 8005114:	4618      	mov	r0, r3
 8005116:	f001 f903 	bl	8006320 <xTaskRemoveFromEventList>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <xQueueGenericReset+0xcc>)
 8005122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	e009      	b.n	8005146 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3310      	adds	r3, #16
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fef2 	bl	8004f20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3324      	adds	r3, #36	; 0x24
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff feed 	bl	8004f20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005146:	f002 f835 	bl	80071b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800514a:	2301      	movs	r3, #1
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	e000ed04 	.word	0xe000ed04

08005158 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08e      	sub	sp, #56	; 0x38
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
}
 800519a:	bf00      	nop
 800519c:	e7fe      	b.n	800519c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <xQueueGenericCreateStatic+0x52>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <xQueueGenericCreateStatic+0x56>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <xQueueGenericCreateStatic+0x58>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	623b      	str	r3, [r7, #32]
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <xQueueGenericCreateStatic+0x7e>
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <xQueueGenericCreateStatic+0x82>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueGenericCreateStatic+0x84>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61fb      	str	r3, [r7, #28]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051f6:	2350      	movs	r3, #80	; 0x50
 80051f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b50      	cmp	r3, #80	; 0x50
 80051fe:	d00a      	beq.n	8005216 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	61bb      	str	r3, [r7, #24]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005216:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00d      	beq.n	800523e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800522a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f805 	bl	8005248 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005240:	4618      	mov	r0, r3
 8005242:	3730      	adds	r7, #48	; 0x30
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e002      	b.n	800526a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005276:	2101      	movs	r1, #1
 8005278:	69b8      	ldr	r0, [r7, #24]
 800527a:	f7ff ff05 	bl	8005088 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	78fa      	ldrb	r2, [r7, #3]
 8005282:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08e      	sub	sp, #56	; 0x38
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800529e:	2300      	movs	r3, #0
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <xQueueGenericSend+0x32>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d103      	bne.n	80052d0 <xQueueGenericSend+0x40>
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <xQueueGenericSend+0x44>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <xQueueGenericSend+0x46>
 80052d4:	2300      	movs	r3, #0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <xQueueGenericSend+0x60>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052ec:	bf00      	nop
 80052ee:	e7fe      	b.n	80052ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d103      	bne.n	80052fe <xQueueGenericSend+0x6e>
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <xQueueGenericSend+0x72>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <xQueueGenericSend+0x74>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <xQueueGenericSend+0x8e>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	623b      	str	r3, [r7, #32]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800531e:	f001 f9bd 	bl	800669c <xTaskGetSchedulerState>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d102      	bne.n	800532e <xQueueGenericSend+0x9e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <xQueueGenericSend+0xa2>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <xQueueGenericSend+0xa4>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <xQueueGenericSend+0xbe>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	61fb      	str	r3, [r7, #28]
}
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800534e:	f001 ff01 	bl	8007154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <xQueueGenericSend+0xd4>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d129      	bne.n	80053b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800536a:	f000 fa0b 	bl	8005784 <prvCopyDataToQueue>
 800536e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	2b00      	cmp	r3, #0
 8005376:	d010      	beq.n	800539a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	3324      	adds	r3, #36	; 0x24
 800537c:	4618      	mov	r0, r3
 800537e:	f000 ffcf 	bl	8006320 <xTaskRemoveFromEventList>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d013      	beq.n	80053b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005388:	4b3f      	ldr	r3, [pc, #252]	; (8005488 <xQueueGenericSend+0x1f8>)
 800538a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	e00a      	b.n	80053b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053a0:	4b39      	ldr	r3, [pc, #228]	; (8005488 <xQueueGenericSend+0x1f8>)
 80053a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053b0:	f001 ff00 	bl	80071b4 <vPortExitCritical>
				return pdPASS;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e063      	b.n	8005480 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053be:	f001 fef9 	bl	80071b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e05c      	b.n	8005480 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053cc:	f107 0314 	add.w	r3, r7, #20
 80053d0:	4618      	mov	r0, r3
 80053d2:	f001 f809 	bl	80063e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053d6:	2301      	movs	r3, #1
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053da:	f001 feeb 	bl	80071b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053de:	f000 fd7b 	bl	8005ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053e2:	f001 feb7 	bl	8007154 <vPortEnterCritical>
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ec:	b25b      	sxtb	r3, r3
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f2:	d103      	bne.n	80053fc <xQueueGenericSend+0x16c>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005402:	b25b      	sxtb	r3, r3
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005408:	d103      	bne.n	8005412 <xQueueGenericSend+0x182>
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005412:	f001 fecf 	bl	80071b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005416:	1d3a      	adds	r2, r7, #4
 8005418:	f107 0314 	add.w	r3, r7, #20
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fff8 	bl	8006414 <xTaskCheckForTimeOut>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d124      	bne.n	8005474 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800542a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800542c:	f000 faa2 	bl	8005974 <prvIsQueueFull>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d018      	beq.n	8005468 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	3310      	adds	r3, #16
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	4611      	mov	r1, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f000 ff1e 	bl	8006280 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005446:	f000 fa2d 	bl	80058a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800544a:	f000 fd53 	bl	8005ef4 <xTaskResumeAll>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	f47f af7c 	bne.w	800534e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <xQueueGenericSend+0x1f8>)
 8005458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	e772      	b.n	800534e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800546a:	f000 fa1b 	bl	80058a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800546e:	f000 fd41 	bl	8005ef4 <xTaskResumeAll>
 8005472:	e76c      	b.n	800534e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005476:	f000 fa15 	bl	80058a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800547a:	f000 fd3b 	bl	8005ef4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800547e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005480:	4618      	mov	r0, r3
 8005482:	3738      	adds	r7, #56	; 0x38
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b090      	sub	sp, #64	; 0x40
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d103      	bne.n	80054c8 <xQueueGenericSendFromISR+0x3c>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <xQueueGenericSendFromISR+0x40>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <xQueueGenericSendFromISR+0x42>
 80054cc:	2300      	movs	r3, #0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d103      	bne.n	80054f6 <xQueueGenericSendFromISR+0x6a>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <xQueueGenericSendFromISR+0x6e>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <xQueueGenericSendFromISR+0x70>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	623b      	str	r3, [r7, #32]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005516:	f001 feff 	bl	8007318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800551a:	f3ef 8211 	mrs	r2, BASEPRI
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	61fa      	str	r2, [r7, #28]
 8005530:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005532:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <xQueueGenericSendFromISR+0xbc>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d12f      	bne.n	80055a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800554e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800555e:	f000 f911 	bl	8005784 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005562:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800556a:	d112      	bne.n	8005592 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d016      	beq.n	80055a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	3324      	adds	r3, #36	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fed1 	bl	8006320 <xTaskRemoveFromEventList>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00e      	beq.n	80055a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e007      	b.n	80055a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005596:	3301      	adds	r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	b25a      	sxtb	r2, r3
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055a2:	2301      	movs	r3, #1
 80055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80055a6:	e001      	b.n	80055ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3740      	adds	r7, #64	; 0x40
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08c      	sub	sp, #48	; 0x30
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <xQueueReceive+0x30>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	623b      	str	r3, [r7, #32]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <xQueueReceive+0x3e>
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <xQueueReceive+0x42>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <xQueueReceive+0x44>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <xQueueReceive+0x5e>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	61fb      	str	r3, [r7, #28]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005622:	f001 f83b 	bl	800669c <xTaskGetSchedulerState>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <xQueueReceive+0x6e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <xQueueReceive+0x72>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <xQueueReceive+0x74>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <xQueueReceive+0x8e>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	61bb      	str	r3, [r7, #24]
}
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005652:	f001 fd7f 	bl	8007154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d01f      	beq.n	80056a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005666:	f000 f8f7 	bl	8005858 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	1e5a      	subs	r2, r3, #1
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00f      	beq.n	800569a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	3310      	adds	r3, #16
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fe4e 	bl	8006320 <xTaskRemoveFromEventList>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800568a:	4b3d      	ldr	r3, [pc, #244]	; (8005780 <xQueueReceive+0x1bc>)
 800568c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800569a:	f001 fd8b 	bl	80071b4 <vPortExitCritical>
				return pdPASS;
 800569e:	2301      	movs	r3, #1
 80056a0:	e069      	b.n	8005776 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056a8:	f001 fd84 	bl	80071b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e062      	b.n	8005776 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056b6:	f107 0310 	add.w	r3, r7, #16
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fe94 	bl	80063e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056c0:	2301      	movs	r3, #1
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056c4:	f001 fd76 	bl	80071b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056c8:	f000 fc06 	bl	8005ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056cc:	f001 fd42 	bl	8007154 <vPortEnterCritical>
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056d6:	b25b      	sxtb	r3, r3
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056dc:	d103      	bne.n	80056e6 <xQueueReceive+0x122>
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ec:	b25b      	sxtb	r3, r3
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f2:	d103      	bne.n	80056fc <xQueueReceive+0x138>
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056fc:	f001 fd5a 	bl	80071b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005700:	1d3a      	adds	r2, r7, #4
 8005702:	f107 0310 	add.w	r3, r7, #16
 8005706:	4611      	mov	r1, r2
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fe83 	bl	8006414 <xTaskCheckForTimeOut>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d123      	bne.n	800575c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005716:	f000 f917 	bl	8005948 <prvIsQueueEmpty>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d017      	beq.n	8005750 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	3324      	adds	r3, #36	; 0x24
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	4611      	mov	r1, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fda9 	bl	8006280 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800572e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005730:	f000 f8b8 	bl	80058a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005734:	f000 fbde 	bl	8005ef4 <xTaskResumeAll>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d189      	bne.n	8005652 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800573e:	4b10      	ldr	r3, [pc, #64]	; (8005780 <xQueueReceive+0x1bc>)
 8005740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	e780      	b.n	8005652 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005752:	f000 f8a7 	bl	80058a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005756:	f000 fbcd 	bl	8005ef4 <xTaskResumeAll>
 800575a:	e77a      	b.n	8005652 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800575c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575e:	f000 f8a1 	bl	80058a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005762:	f000 fbc7 	bl	8005ef4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005768:	f000 f8ee 	bl	8005948 <prvIsQueueEmpty>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	f43f af6f 	beq.w	8005652 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005774:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005776:	4618      	mov	r0, r3
 8005778:	3730      	adds	r7, #48	; 0x30
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10d      	bne.n	80057be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d14d      	bne.n	8005846 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 ff92 	bl	80066d8 <xTaskPriorityDisinherit>
 80057b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	609a      	str	r2, [r3, #8]
 80057bc:	e043      	b.n	8005846 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d119      	bne.n	80057f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6858      	ldr	r0, [r3, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	461a      	mov	r2, r3
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	f001 fff6 	bl	80077c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	441a      	add	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d32b      	bcc.n	8005846 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	e026      	b.n	8005846 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68d8      	ldr	r0, [r3, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	461a      	mov	r2, r3
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	f001 ffdc 	bl	80077c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	425b      	negs	r3, r3
 8005812:	441a      	add	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d207      	bcs.n	8005834 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	425b      	negs	r3, r3
 800582e:	441a      	add	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d105      	bne.n	8005846 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	3b01      	subs	r3, #1
 8005844:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800584e:	697b      	ldr	r3, [r7, #20]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d018      	beq.n	800589c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	441a      	add	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	d303      	bcc.n	800588c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68d9      	ldr	r1, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	461a      	mov	r2, r3
 8005896:	6838      	ldr	r0, [r7, #0]
 8005898:	f001 ff92 	bl	80077c0 <memcpy>
	}
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058ac:	f001 fc52 	bl	8007154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058b8:	e011      	b.n	80058de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d012      	beq.n	80058e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3324      	adds	r3, #36	; 0x24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fd2a 	bl	8006320 <xTaskRemoveFromEventList>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058d2:	f000 fe01 	bl	80064d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	3b01      	subs	r3, #1
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dce9      	bgt.n	80058ba <prvUnlockQueue+0x16>
 80058e6:	e000      	b.n	80058ea <prvUnlockQueue+0x46>
					break;
 80058e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	22ff      	movs	r2, #255	; 0xff
 80058ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058f2:	f001 fc5f 	bl	80071b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058f6:	f001 fc2d 	bl	8007154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005900:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005902:	e011      	b.n	8005928 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d012      	beq.n	8005932 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3310      	adds	r3, #16
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fd05 	bl	8006320 <xTaskRemoveFromEventList>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800591c:	f000 fddc 	bl	80064d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	3b01      	subs	r3, #1
 8005924:	b2db      	uxtb	r3, r3
 8005926:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800592c:	2b00      	cmp	r3, #0
 800592e:	dce9      	bgt.n	8005904 <prvUnlockQueue+0x60>
 8005930:	e000      	b.n	8005934 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005932:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	22ff      	movs	r2, #255	; 0xff
 8005938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800593c:	f001 fc3a 	bl	80071b4 <vPortExitCritical>
}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005950:	f001 fc00 	bl	8007154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800595c:	2301      	movs	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e001      	b.n	8005966 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005966:	f001 fc25 	bl	80071b4 <vPortExitCritical>

	return xReturn;
 800596a:	68fb      	ldr	r3, [r7, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800597c:	f001 fbea 	bl	8007154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005988:	429a      	cmp	r2, r3
 800598a:	d102      	bne.n	8005992 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e001      	b.n	8005996 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005996:	f001 fc0d 	bl	80071b4 <vPortExitCritical>

	return xReturn;
 800599a:	68fb      	ldr	r3, [r7, #12]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	e014      	b.n	80059de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059b4:	4a0f      	ldr	r2, [pc, #60]	; (80059f4 <vQueueAddToRegistry+0x50>)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059c0:	490c      	ldr	r1, [pc, #48]	; (80059f4 <vQueueAddToRegistry+0x50>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059ca:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <vQueueAddToRegistry+0x50>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4413      	add	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059d6:	e006      	b.n	80059e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b07      	cmp	r3, #7
 80059e2:	d9e7      	bls.n	80059b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20001c08 	.word	0x20001c08

080059f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a08:	f001 fba4 	bl	8007154 <vPortEnterCritical>
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a12:	b25b      	sxtb	r3, r3
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a18:	d103      	bne.n	8005a22 <vQueueWaitForMessageRestricted+0x2a>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a28:	b25b      	sxtb	r3, r3
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a2e:	d103      	bne.n	8005a38 <vQueueWaitForMessageRestricted+0x40>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a38:	f001 fbbc 	bl	80071b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	3324      	adds	r3, #36	; 0x24
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 fc3b 	bl	80062c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a52:	6978      	ldr	r0, [r7, #20]
 8005a54:	f7ff ff26 	bl	80058a4 <prvUnlockQueue>
	}
 8005a58:	bf00      	nop
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08e      	sub	sp, #56	; 0x38
 8005a64:	af04      	add	r7, sp, #16
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	623b      	str	r3, [r7, #32]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	61fb      	str	r3, [r7, #28]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005aa6:	235c      	movs	r3, #92	; 0x5c
 8005aa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b5c      	cmp	r3, #92	; 0x5c
 8005aae:	d00a      	beq.n	8005ac6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	61bb      	str	r3, [r7, #24]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ac6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01e      	beq.n	8005b0c <xTaskCreateStatic+0xac>
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01b      	beq.n	8005b0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	9303      	str	r3, [sp, #12]
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	f107 0314 	add.w	r3, r7, #20
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f850 	bl	8005ba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b06:	f000 f8dd 	bl	8005cc4 <prvAddNewTaskToReadyList>
 8005b0a:	e001      	b.n	8005b10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b10:	697b      	ldr	r3, [r7, #20]
	}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b08c      	sub	sp, #48	; 0x30
 8005b1e:	af04      	add	r7, sp, #16
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fc32 	bl	8007398 <pvPortMalloc>
 8005b34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00e      	beq.n	8005b5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b3c:	205c      	movs	r0, #92	; 0x5c
 8005b3e:	f001 fc2b 	bl	8007398 <pvPortMalloc>
 8005b42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8005b50:	e005      	b.n	8005b5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b52:	6978      	ldr	r0, [r7, #20]
 8005b54:	f001 fcec 	bl	8007530 <vPortFree>
 8005b58:	e001      	b.n	8005b5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d017      	beq.n	8005b94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9303      	str	r3, [sp, #12]
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	9302      	str	r3, [sp, #8]
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f80e 	bl	8005ba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b88:	69f8      	ldr	r0, [r7, #28]
 8005b8a:	f000 f89b 	bl	8005cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	e002      	b.n	8005b9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
	}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	461a      	mov	r2, r3
 8005bbc:	21a5      	movs	r1, #165	; 0xa5
 8005bbe:	f001 fe0d 	bl	80077dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f023 0307 	bic.w	r3, r3, #7
 8005bda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <prvInitialiseNewTask+0x58>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	617b      	str	r3, [r7, #20]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01f      	beq.n	8005c42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	e012      	b.n	8005c2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	7819      	ldrb	r1, [r3, #0]
 8005c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	3334      	adds	r3, #52	; 0x34
 8005c18:	460a      	mov	r2, r1
 8005c1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d006      	beq.n	8005c36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	2b0f      	cmp	r3, #15
 8005c32:	d9e9      	bls.n	8005c08 <prvInitialiseNewTask+0x64>
 8005c34:	e000      	b.n	8005c38 <prvInitialiseNewTask+0x94>
			{
				break;
 8005c36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c40:	e003      	b.n	8005c4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	2b37      	cmp	r3, #55	; 0x37
 8005c4e:	d901      	bls.n	8005c54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c50:	2337      	movs	r3, #55	; 0x37
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	2200      	movs	r2, #0
 8005c64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff f978 	bl	8004f60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	3318      	adds	r3, #24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff f973 	bl	8004f60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	2200      	movs	r2, #0
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	68f9      	ldr	r1, [r7, #12]
 8005ca2:	69b8      	ldr	r0, [r7, #24]
 8005ca4:	f001 f928 	bl	8006ef8 <pxPortInitialiseStack>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cba:	bf00      	nop
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ccc:	f001 fa42 	bl	8007154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cd0:	4b2d      	ldr	r3, [pc, #180]	; (8005d88 <prvAddNewTaskToReadyList+0xc4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	4a2c      	ldr	r2, [pc, #176]	; (8005d88 <prvAddNewTaskToReadyList+0xc4>)
 8005cd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cda:	4b2c      	ldr	r3, [pc, #176]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ce2:	4a2a      	ldr	r2, [pc, #168]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ce8:	4b27      	ldr	r3, [pc, #156]	; (8005d88 <prvAddNewTaskToReadyList+0xc4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d110      	bne.n	8005d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cf0:	f000 fc16 	bl	8006520 <prvInitialiseTaskLists>
 8005cf4:	e00d      	b.n	8005d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cf6:	4b26      	ldr	r3, [pc, #152]	; (8005d90 <prvAddNewTaskToReadyList+0xcc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d802      	bhi.n	8005d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d0c:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d12:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <prvAddNewTaskToReadyList+0xd0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3301      	adds	r3, #1
 8005d18:	4a1e      	ldr	r2, [pc, #120]	; (8005d94 <prvAddNewTaskToReadyList+0xd0>)
 8005d1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d1c:	4b1d      	ldr	r3, [pc, #116]	; (8005d94 <prvAddNewTaskToReadyList+0xd0>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <prvAddNewTaskToReadyList+0xd4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d903      	bls.n	8005d38 <prvAddNewTaskToReadyList+0x74>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <prvAddNewTaskToReadyList+0xd4>)
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <prvAddNewTaskToReadyList+0xd8>)
 8005d46:	441a      	add	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7ff f913 	bl	8004f7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d54:	f001 fa2e 	bl	80071b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <prvAddNewTaskToReadyList+0xcc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00e      	beq.n	8005d7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d60:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d207      	bcs.n	8005d7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <prvAddNewTaskToReadyList+0xdc>)
 8005d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000da4 	.word	0x20000da4
 8005d8c:	200008d0 	.word	0x200008d0
 8005d90:	20000db0 	.word	0x20000db0
 8005d94:	20000dc0 	.word	0x20000dc0
 8005d98:	20000dac 	.word	0x20000dac
 8005d9c:	200008d4 	.word	0x200008d4
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d017      	beq.n	8005de6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <vTaskDelay+0x60>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <vTaskDelay+0x30>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	60bb      	str	r3, [r7, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005dd4:	f000 f880 	bl	8005ed8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dd8:	2100      	movs	r1, #0
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fcea 	bl	80067b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005de0:	f000 f888 	bl	8005ef4 <xTaskResumeAll>
 8005de4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d107      	bne.n	8005dfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <vTaskDelay+0x64>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000dcc 	.word	0x20000dcc
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e1a:	463a      	mov	r2, r7
 8005e1c:	1d39      	adds	r1, r7, #4
 8005e1e:	f107 0308 	add.w	r3, r7, #8
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f848 	bl	8004eb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	9202      	str	r2, [sp, #8]
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	2300      	movs	r3, #0
 8005e38:	460a      	mov	r2, r1
 8005e3a:	4921      	ldr	r1, [pc, #132]	; (8005ec0 <vTaskStartScheduler+0xb4>)
 8005e3c:	4821      	ldr	r0, [pc, #132]	; (8005ec4 <vTaskStartScheduler+0xb8>)
 8005e3e:	f7ff fe0f 	bl	8005a60 <xTaskCreateStatic>
 8005e42:	4603      	mov	r3, r0
 8005e44:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <vTaskStartScheduler+0xbc>)
 8005e46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e48:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <vTaskStartScheduler+0xbc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e50:	2301      	movs	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e001      	b.n	8005e5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e60:	f000 fcfc 	bl	800685c <xTimerCreateTimerTask>
 8005e64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d116      	bne.n	8005e9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	613b      	str	r3, [r7, #16]
}
 8005e7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <vTaskStartScheduler+0xc0>)
 8005e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e88:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <vTaskStartScheduler+0xc4>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <vTaskStartScheduler+0xc8>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e94:	f001 f8bc 	bl	8007010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e98:	e00e      	b.n	8005eb8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea0:	d10a      	bne.n	8005eb8 <vTaskStartScheduler+0xac>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60fb      	str	r3, [r7, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <vTaskStartScheduler+0xaa>
}
 8005eb8:	bf00      	nop
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	0800a204 	.word	0x0800a204
 8005ec4:	080064f1 	.word	0x080064f1
 8005ec8:	20000dc8 	.word	0x20000dc8
 8005ecc:	20000dc4 	.word	0x20000dc4
 8005ed0:	20000db0 	.word	0x20000db0
 8005ed4:	20000da8 	.word	0x20000da8

08005ed8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005edc:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <vTaskSuspendAll+0x18>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4a03      	ldr	r2, [pc, #12]	; (8005ef0 <vTaskSuspendAll+0x18>)
 8005ee4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	20000dcc 	.word	0x20000dcc

08005ef4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f02:	4b42      	ldr	r3, [pc, #264]	; (800600c <xTaskResumeAll+0x118>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	603b      	str	r3, [r7, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	e7fe      	b.n	8005f1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f20:	f001 f918 	bl	8007154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f24:	4b39      	ldr	r3, [pc, #228]	; (800600c <xTaskResumeAll+0x118>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	4a38      	ldr	r2, [pc, #224]	; (800600c <xTaskResumeAll+0x118>)
 8005f2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f2e:	4b37      	ldr	r3, [pc, #220]	; (800600c <xTaskResumeAll+0x118>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d162      	bne.n	8005ffc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f36:	4b36      	ldr	r3, [pc, #216]	; (8006010 <xTaskResumeAll+0x11c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d05e      	beq.n	8005ffc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f3e:	e02f      	b.n	8005fa0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f40:	4b34      	ldr	r3, [pc, #208]	; (8006014 <xTaskResumeAll+0x120>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3318      	adds	r3, #24
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff f871 	bl	8005034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff f86c 	bl	8005034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f60:	4b2d      	ldr	r3, [pc, #180]	; (8006018 <xTaskResumeAll+0x124>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d903      	bls.n	8005f70 <xTaskResumeAll+0x7c>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <xTaskResumeAll+0x124>)
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <xTaskResumeAll+0x128>)
 8005f7e:	441a      	add	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f7fe fff7 	bl	8004f7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	4b23      	ldr	r3, [pc, #140]	; (8006020 <xTaskResumeAll+0x12c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f9a:	4b22      	ldr	r3, [pc, #136]	; (8006024 <xTaskResumeAll+0x130>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fa0:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <xTaskResumeAll+0x120>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1cb      	bne.n	8005f40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fae:	f000 fb55 	bl	800665c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fb2:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <xTaskResumeAll+0x134>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d010      	beq.n	8005fe0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fbe:	f000 f847 	bl	8006050 <xTaskIncrementTick>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fc8:	4b16      	ldr	r3, [pc, #88]	; (8006024 <xTaskResumeAll+0x130>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f1      	bne.n	8005fbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fda:	4b13      	ldr	r3, [pc, #76]	; (8006028 <xTaskResumeAll+0x134>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fe0:	4b10      	ldr	r3, [pc, #64]	; (8006024 <xTaskResumeAll+0x130>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d009      	beq.n	8005ffc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fec:	4b0f      	ldr	r3, [pc, #60]	; (800602c <xTaskResumeAll+0x138>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ffc:	f001 f8da 	bl	80071b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006000:	68bb      	ldr	r3, [r7, #8]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000dcc 	.word	0x20000dcc
 8006010:	20000da4 	.word	0x20000da4
 8006014:	20000d64 	.word	0x20000d64
 8006018:	20000dac 	.word	0x20000dac
 800601c:	200008d4 	.word	0x200008d4
 8006020:	200008d0 	.word	0x200008d0
 8006024:	20000db8 	.word	0x20000db8
 8006028:	20000db4 	.word	0x20000db4
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <xTaskGetTickCount+0x1c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800603c:	687b      	ldr	r3, [r7, #4]
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000da8 	.word	0x20000da8

08006050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800605a:	4b4f      	ldr	r3, [pc, #316]	; (8006198 <xTaskIncrementTick+0x148>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 808f 	bne.w	8006182 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006064:	4b4d      	ldr	r3, [pc, #308]	; (800619c <xTaskIncrementTick+0x14c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800606c:	4a4b      	ldr	r2, [pc, #300]	; (800619c <xTaskIncrementTick+0x14c>)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d120      	bne.n	80060ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006078:	4b49      	ldr	r3, [pc, #292]	; (80061a0 <xTaskIncrementTick+0x150>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <xTaskIncrementTick+0x48>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	603b      	str	r3, [r7, #0]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xTaskIncrementTick+0x46>
 8006098:	4b41      	ldr	r3, [pc, #260]	; (80061a0 <xTaskIncrementTick+0x150>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	4b41      	ldr	r3, [pc, #260]	; (80061a4 <xTaskIncrementTick+0x154>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a3f      	ldr	r2, [pc, #252]	; (80061a0 <xTaskIncrementTick+0x150>)
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	4a3f      	ldr	r2, [pc, #252]	; (80061a4 <xTaskIncrementTick+0x154>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	4b3e      	ldr	r3, [pc, #248]	; (80061a8 <xTaskIncrementTick+0x158>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	4a3d      	ldr	r2, [pc, #244]	; (80061a8 <xTaskIncrementTick+0x158>)
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	f000 fad1 	bl	800665c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ba:	4b3c      	ldr	r3, [pc, #240]	; (80061ac <xTaskIncrementTick+0x15c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d349      	bcc.n	8006158 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060c4:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <xTaskIncrementTick+0x150>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d104      	bne.n	80060d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ce:	4b37      	ldr	r3, [pc, #220]	; (80061ac <xTaskIncrementTick+0x15c>)
 80060d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060d4:	601a      	str	r2, [r3, #0]
					break;
 80060d6:	e03f      	b.n	8006158 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d8:	4b31      	ldr	r3, [pc, #196]	; (80061a0 <xTaskIncrementTick+0x150>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d203      	bcs.n	80060f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060f0:	4a2e      	ldr	r2, [pc, #184]	; (80061ac <xTaskIncrementTick+0x15c>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060f6:	e02f      	b.n	8006158 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe ff99 	bl	8005034 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d004      	beq.n	8006114 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	3318      	adds	r3, #24
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe ff90 	bl	8005034 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <xTaskIncrementTick+0x160>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d903      	bls.n	8006128 <xTaskIncrementTick+0xd8>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	4a22      	ldr	r2, [pc, #136]	; (80061b0 <xTaskIncrementTick+0x160>)
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4a1f      	ldr	r2, [pc, #124]	; (80061b4 <xTaskIncrementTick+0x164>)
 8006136:	441a      	add	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7fe ff1b 	bl	8004f7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <xTaskIncrementTick+0x168>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	429a      	cmp	r2, r3
 8006150:	d3b8      	bcc.n	80060c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006152:	2301      	movs	r3, #1
 8006154:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006156:	e7b5      	b.n	80060c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006158:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <xTaskIncrementTick+0x168>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615e:	4915      	ldr	r1, [pc, #84]	; (80061b4 <xTaskIncrementTick+0x164>)
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	440b      	add	r3, r1
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d901      	bls.n	8006174 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006174:	4b11      	ldr	r3, [pc, #68]	; (80061bc <xTaskIncrementTick+0x16c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e004      	b.n	800618c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006182:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <xTaskIncrementTick+0x170>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3301      	adds	r3, #1
 8006188:	4a0d      	ldr	r2, [pc, #52]	; (80061c0 <xTaskIncrementTick+0x170>)
 800618a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800618c:	697b      	ldr	r3, [r7, #20]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000dcc 	.word	0x20000dcc
 800619c:	20000da8 	.word	0x20000da8
 80061a0:	20000d5c 	.word	0x20000d5c
 80061a4:	20000d60 	.word	0x20000d60
 80061a8:	20000dbc 	.word	0x20000dbc
 80061ac:	20000dc4 	.word	0x20000dc4
 80061b0:	20000dac 	.word	0x20000dac
 80061b4:	200008d4 	.word	0x200008d4
 80061b8:	200008d0 	.word	0x200008d0
 80061bc:	20000db8 	.word	0x20000db8
 80061c0:	20000db4 	.word	0x20000db4

080061c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061ca:	4b28      	ldr	r3, [pc, #160]	; (800626c <vTaskSwitchContext+0xa8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061d2:	4b27      	ldr	r3, [pc, #156]	; (8006270 <vTaskSwitchContext+0xac>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061d8:	e041      	b.n	800625e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80061da:	4b25      	ldr	r3, [pc, #148]	; (8006270 <vTaskSwitchContext+0xac>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e0:	4b24      	ldr	r3, [pc, #144]	; (8006274 <vTaskSwitchContext+0xb0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e010      	b.n	800620a <vTaskSwitchContext+0x46>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <vTaskSwitchContext+0x40>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	607b      	str	r3, [r7, #4]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <vTaskSwitchContext+0x3e>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3b01      	subs	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	491b      	ldr	r1, [pc, #108]	; (8006278 <vTaskSwitchContext+0xb4>)
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0e4      	beq.n	80061e8 <vTaskSwitchContext+0x24>
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4a13      	ldr	r2, [pc, #76]	; (8006278 <vTaskSwitchContext+0xb4>)
 800622a:	4413      	add	r3, r2
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	605a      	str	r2, [r3, #4]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	3308      	adds	r3, #8
 8006240:	429a      	cmp	r2, r3
 8006242:	d104      	bne.n	800624e <vTaskSwitchContext+0x8a>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4a09      	ldr	r2, [pc, #36]	; (800627c <vTaskSwitchContext+0xb8>)
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4a06      	ldr	r2, [pc, #24]	; (8006274 <vTaskSwitchContext+0xb0>)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6013      	str	r3, [r2, #0]
}
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000dcc 	.word	0x20000dcc
 8006270:	20000db8 	.word	0x20000db8
 8006274:	20000dac 	.word	0x20000dac
 8006278:	200008d4 	.word	0x200008d4
 800627c:	200008d0 	.word	0x200008d0

08006280 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	60fb      	str	r3, [r7, #12]
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062a6:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <vTaskPlaceOnEventList+0x44>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3318      	adds	r3, #24
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fe fe87 	bl	8004fc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062b4:	2101      	movs	r1, #1
 80062b6:	6838      	ldr	r0, [r7, #0]
 80062b8:	f000 fa7c 	bl	80067b4 <prvAddCurrentTaskToDelayedList>
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	200008d0 	.word	0x200008d0

080062c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	617b      	str	r3, [r7, #20]
}
 80062ec:	bf00      	nop
 80062ee:	e7fe      	b.n	80062ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062f0:	4b0a      	ldr	r3, [pc, #40]	; (800631c <vTaskPlaceOnEventListRestricted+0x54>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3318      	adds	r3, #24
 80062f6:	4619      	mov	r1, r3
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7fe fe3e 	bl	8004f7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006308:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	68b8      	ldr	r0, [r7, #8]
 800630e:	f000 fa51 	bl	80067b4 <prvAddCurrentTaskToDelayedList>
	}
 8006312:	bf00      	nop
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	200008d0 	.word	0x200008d0

08006320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60fb      	str	r3, [r7, #12]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	3318      	adds	r3, #24
 8006350:	4618      	mov	r0, r3
 8006352:	f7fe fe6f 	bl	8005034 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006356:	4b1e      	ldr	r3, [pc, #120]	; (80063d0 <xTaskRemoveFromEventList+0xb0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d11d      	bne.n	800639a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	3304      	adds	r3, #4
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fe66 	bl	8005034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636c:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <xTaskRemoveFromEventList+0xb4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d903      	bls.n	800637c <xTaskRemoveFromEventList+0x5c>
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <xTaskRemoveFromEventList+0xb4>)
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <xTaskRemoveFromEventList+0xb8>)
 800638a:	441a      	add	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	3304      	adds	r3, #4
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f7fe fdf1 	bl	8004f7a <vListInsertEnd>
 8006398:	e005      	b.n	80063a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	3318      	adds	r3, #24
 800639e:	4619      	mov	r1, r3
 80063a0:	480e      	ldr	r0, [pc, #56]	; (80063dc <xTaskRemoveFromEventList+0xbc>)
 80063a2:	f7fe fdea 	bl	8004f7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063aa:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <xTaskRemoveFromEventList+0xc0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d905      	bls.n	80063c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <xTaskRemoveFromEventList+0xc4>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e001      	b.n	80063c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063c4:	697b      	ldr	r3, [r7, #20]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000dcc 	.word	0x20000dcc
 80063d4:	20000dac 	.word	0x20000dac
 80063d8:	200008d4 	.word	0x200008d4
 80063dc:	20000d64 	.word	0x20000d64
 80063e0:	200008d0 	.word	0x200008d0
 80063e4:	20000db8 	.word	0x20000db8

080063e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063f0:	4b06      	ldr	r3, [pc, #24]	; (800640c <vTaskInternalSetTimeOutState+0x24>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <vTaskInternalSetTimeOutState+0x28>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	605a      	str	r2, [r3, #4]
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	20000dbc 	.word	0x20000dbc
 8006410:	20000da8 	.word	0x20000da8

08006414 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	613b      	str	r3, [r7, #16]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60fb      	str	r3, [r7, #12]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006456:	f000 fe7d 	bl	8007154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800645a:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <xTaskCheckForTimeOut+0xbc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006472:	d102      	bne.n	800647a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	e023      	b.n	80064c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4b15      	ldr	r3, [pc, #84]	; (80064d4 <xTaskCheckForTimeOut+0xc0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d007      	beq.n	8006496 <xTaskCheckForTimeOut+0x82>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	429a      	cmp	r2, r3
 800648e:	d302      	bcc.n	8006496 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006490:	2301      	movs	r3, #1
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	e015      	b.n	80064c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	429a      	cmp	r2, r3
 800649e:	d20b      	bcs.n	80064b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1ad2      	subs	r2, r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff ff9b 	bl	80063e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	e004      	b.n	80064c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064be:	2301      	movs	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064c2:	f000 fe77 	bl	80071b4 <vPortExitCritical>

	return xReturn;
 80064c6:	69fb      	ldr	r3, [r7, #28]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3720      	adds	r7, #32
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20000da8 	.word	0x20000da8
 80064d4:	20000dbc 	.word	0x20000dbc

080064d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064dc:	4b03      	ldr	r3, [pc, #12]	; (80064ec <vTaskMissedYield+0x14>)
 80064de:	2201      	movs	r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
}
 80064e2:	bf00      	nop
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	20000db8 	.word	0x20000db8

080064f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064f8:	f000 f852 	bl	80065a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <prvIdleTask+0x28>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d9f9      	bls.n	80064f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006504:	4b05      	ldr	r3, [pc, #20]	; (800651c <prvIdleTask+0x2c>)
 8006506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006514:	e7f0      	b.n	80064f8 <prvIdleTask+0x8>
 8006516:	bf00      	nop
 8006518:	200008d4 	.word	0x200008d4
 800651c:	e000ed04 	.word	0xe000ed04

08006520 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006526:	2300      	movs	r3, #0
 8006528:	607b      	str	r3, [r7, #4]
 800652a:	e00c      	b.n	8006546 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4a12      	ldr	r2, [pc, #72]	; (8006580 <prvInitialiseTaskLists+0x60>)
 8006538:	4413      	add	r3, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe fcf0 	bl	8004f20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3301      	adds	r3, #1
 8006544:	607b      	str	r3, [r7, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b37      	cmp	r3, #55	; 0x37
 800654a:	d9ef      	bls.n	800652c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800654c:	480d      	ldr	r0, [pc, #52]	; (8006584 <prvInitialiseTaskLists+0x64>)
 800654e:	f7fe fce7 	bl	8004f20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006552:	480d      	ldr	r0, [pc, #52]	; (8006588 <prvInitialiseTaskLists+0x68>)
 8006554:	f7fe fce4 	bl	8004f20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006558:	480c      	ldr	r0, [pc, #48]	; (800658c <prvInitialiseTaskLists+0x6c>)
 800655a:	f7fe fce1 	bl	8004f20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800655e:	480c      	ldr	r0, [pc, #48]	; (8006590 <prvInitialiseTaskLists+0x70>)
 8006560:	f7fe fcde 	bl	8004f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006564:	480b      	ldr	r0, [pc, #44]	; (8006594 <prvInitialiseTaskLists+0x74>)
 8006566:	f7fe fcdb 	bl	8004f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <prvInitialiseTaskLists+0x78>)
 800656c:	4a05      	ldr	r2, [pc, #20]	; (8006584 <prvInitialiseTaskLists+0x64>)
 800656e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <prvInitialiseTaskLists+0x7c>)
 8006572:	4a05      	ldr	r2, [pc, #20]	; (8006588 <prvInitialiseTaskLists+0x68>)
 8006574:	601a      	str	r2, [r3, #0]
}
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200008d4 	.word	0x200008d4
 8006584:	20000d34 	.word	0x20000d34
 8006588:	20000d48 	.word	0x20000d48
 800658c:	20000d64 	.word	0x20000d64
 8006590:	20000d78 	.word	0x20000d78
 8006594:	20000d90 	.word	0x20000d90
 8006598:	20000d5c 	.word	0x20000d5c
 800659c:	20000d60 	.word	0x20000d60

080065a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065a6:	e019      	b.n	80065dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065a8:	f000 fdd4 	bl	8007154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <prvCheckTasksWaitingTermination+0x50>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe fd3b 	bl	8005034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065be:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <prvCheckTasksWaitingTermination+0x54>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	4a0b      	ldr	r2, [pc, #44]	; (80065f4 <prvCheckTasksWaitingTermination+0x54>)
 80065c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <prvCheckTasksWaitingTermination+0x58>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	4a0a      	ldr	r2, [pc, #40]	; (80065f8 <prvCheckTasksWaitingTermination+0x58>)
 80065d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065d2:	f000 fdef 	bl	80071b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f810 	bl	80065fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <prvCheckTasksWaitingTermination+0x58>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e1      	bne.n	80065a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000d78 	.word	0x20000d78
 80065f4:	20000da4 	.word	0x20000da4
 80065f8:	20000d8c 	.word	0x20000d8c

080065fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800660a:	2b00      	cmp	r3, #0
 800660c:	d108      	bne.n	8006620 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	4618      	mov	r0, r3
 8006614:	f000 ff8c 	bl	8007530 <vPortFree>
				vPortFree( pxTCB );
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 ff89 	bl	8007530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800661e:	e018      	b.n	8006652 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006626:	2b01      	cmp	r3, #1
 8006628:	d103      	bne.n	8006632 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 ff80 	bl	8007530 <vPortFree>
	}
 8006630:	e00f      	b.n	8006652 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006638:	2b02      	cmp	r3, #2
 800663a:	d00a      	beq.n	8006652 <prvDeleteTCB+0x56>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60fb      	str	r3, [r7, #12]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <prvDeleteTCB+0x54>
	}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006662:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <prvResetNextTaskUnblockTime+0x38>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800666c:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <prvResetNextTaskUnblockTime+0x3c>)
 800666e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006672:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006674:	e008      	b.n	8006688 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006676:	4b07      	ldr	r3, [pc, #28]	; (8006694 <prvResetNextTaskUnblockTime+0x38>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	4a04      	ldr	r2, [pc, #16]	; (8006698 <prvResetNextTaskUnblockTime+0x3c>)
 8006686:	6013      	str	r3, [r2, #0]
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	20000d5c 	.word	0x20000d5c
 8006698:	20000dc4 	.word	0x20000dc4

0800669c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066a2:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <xTaskGetSchedulerState+0x34>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066aa:	2301      	movs	r3, #1
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	e008      	b.n	80066c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b0:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <xTaskGetSchedulerState+0x38>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d102      	bne.n	80066be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066b8:	2302      	movs	r3, #2
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	e001      	b.n	80066c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066be:	2300      	movs	r3, #0
 80066c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066c2:	687b      	ldr	r3, [r7, #4]
	}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20000db0 	.word	0x20000db0
 80066d4:	20000dcc 	.word	0x20000dcc

080066d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d056      	beq.n	800679c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066ee:	4b2e      	ldr	r3, [pc, #184]	; (80067a8 <xTaskPriorityDisinherit+0xd0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d00a      	beq.n	800670e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	60fb      	str	r3, [r7, #12]
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	60bb      	str	r3, [r7, #8]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006730:	1e5a      	subs	r2, r3, #1
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673e:	429a      	cmp	r2, r3
 8006740:	d02c      	beq.n	800679c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	2b00      	cmp	r3, #0
 8006748:	d128      	bne.n	800679c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3304      	adds	r3, #4
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fc70 	bl	8005034 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <xTaskPriorityDisinherit+0xd4>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <xTaskPriorityDisinherit+0xa4>
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	4a0c      	ldr	r2, [pc, #48]	; (80067ac <xTaskPriorityDisinherit+0xd4>)
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <xTaskPriorityDisinherit+0xd8>)
 800678a:	441a      	add	r2, r3
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	3304      	adds	r3, #4
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f7fe fbf1 	bl	8004f7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006798:	2301      	movs	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800679c:	697b      	ldr	r3, [r7, #20]
	}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200008d0 	.word	0x200008d0
 80067ac:	20000dac 	.word	0x20000dac
 80067b0:	200008d4 	.word	0x200008d4

080067b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067be:	4b21      	ldr	r3, [pc, #132]	; (8006844 <prvAddCurrentTaskToDelayedList+0x90>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067c4:	4b20      	ldr	r3, [pc, #128]	; (8006848 <prvAddCurrentTaskToDelayedList+0x94>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe fc32 	bl	8005034 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d6:	d10a      	bne.n	80067ee <prvAddCurrentTaskToDelayedList+0x3a>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d007      	beq.n	80067ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067de:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <prvAddCurrentTaskToDelayedList+0x94>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4819      	ldr	r0, [pc, #100]	; (800684c <prvAddCurrentTaskToDelayedList+0x98>)
 80067e8:	f7fe fbc7 	bl	8004f7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067ec:	e026      	b.n	800683c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067f6:	4b14      	ldr	r3, [pc, #80]	; (8006848 <prvAddCurrentTaskToDelayedList+0x94>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	429a      	cmp	r2, r3
 8006804:	d209      	bcs.n	800681a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006806:	4b12      	ldr	r3, [pc, #72]	; (8006850 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <prvAddCurrentTaskToDelayedList+0x94>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f7fe fbd5 	bl	8004fc2 <vListInsert>
}
 8006818:	e010      	b.n	800683c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800681a:	4b0e      	ldr	r3, [pc, #56]	; (8006854 <prvAddCurrentTaskToDelayedList+0xa0>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <prvAddCurrentTaskToDelayedList+0x94>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f7fe fbcb 	bl	8004fc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800682c:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <prvAddCurrentTaskToDelayedList+0xa4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	429a      	cmp	r2, r3
 8006834:	d202      	bcs.n	800683c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006836:	4a08      	ldr	r2, [pc, #32]	; (8006858 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6013      	str	r3, [r2, #0]
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000da8 	.word	0x20000da8
 8006848:	200008d0 	.word	0x200008d0
 800684c:	20000d90 	.word	0x20000d90
 8006850:	20000d60 	.word	0x20000d60
 8006854:	20000d5c 	.word	0x20000d5c
 8006858:	20000dc4 	.word	0x20000dc4

0800685c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006866:	f000 fb07 	bl	8006e78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800686a:	4b1c      	ldr	r3, [pc, #112]	; (80068dc <xTimerCreateTimerTask+0x80>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d021      	beq.n	80068b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800687a:	1d3a      	adds	r2, r7, #4
 800687c:	f107 0108 	add.w	r1, r7, #8
 8006880:	f107 030c 	add.w	r3, r7, #12
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fb31 	bl	8004eec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	9202      	str	r2, [sp, #8]
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	2302      	movs	r3, #2
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2300      	movs	r3, #0
 800689a:	460a      	mov	r2, r1
 800689c:	4910      	ldr	r1, [pc, #64]	; (80068e0 <xTimerCreateTimerTask+0x84>)
 800689e:	4811      	ldr	r0, [pc, #68]	; (80068e4 <xTimerCreateTimerTask+0x88>)
 80068a0:	f7ff f8de 	bl	8005a60 <xTaskCreateStatic>
 80068a4:	4603      	mov	r3, r0
 80068a6:	4a10      	ldr	r2, [pc, #64]	; (80068e8 <xTimerCreateTimerTask+0x8c>)
 80068a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068aa:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <xTimerCreateTimerTask+0x8c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068b2:	2301      	movs	r3, #1
 80068b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	613b      	str	r3, [r7, #16]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068d2:	697b      	ldr	r3, [r7, #20]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000e00 	.word	0x20000e00
 80068e0:	0800a20c 	.word	0x0800a20c
 80068e4:	08006a21 	.word	0x08006a21
 80068e8:	20000e04 	.word	0x20000e04

080068ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08a      	sub	sp, #40	; 0x28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	623b      	str	r3, [r7, #32]
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800691a:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <xTimerGenericCommand+0x98>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d02a      	beq.n	8006978 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b05      	cmp	r3, #5
 8006932:	dc18      	bgt.n	8006966 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006934:	f7ff feb2 	bl	800669c <xTaskGetSchedulerState>
 8006938:	4603      	mov	r3, r0
 800693a:	2b02      	cmp	r3, #2
 800693c:	d109      	bne.n	8006952 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800693e:	4b11      	ldr	r3, [pc, #68]	; (8006984 <xTimerGenericCommand+0x98>)
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	f107 0110 	add.w	r1, r7, #16
 8006946:	2300      	movs	r3, #0
 8006948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694a:	f7fe fca1 	bl	8005290 <xQueueGenericSend>
 800694e:	6278      	str	r0, [r7, #36]	; 0x24
 8006950:	e012      	b.n	8006978 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006952:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <xTimerGenericCommand+0x98>)
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f107 0110 	add.w	r1, r7, #16
 800695a:	2300      	movs	r3, #0
 800695c:	2200      	movs	r2, #0
 800695e:	f7fe fc97 	bl	8005290 <xQueueGenericSend>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24
 8006964:	e008      	b.n	8006978 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <xTimerGenericCommand+0x98>)
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	f107 0110 	add.w	r1, r7, #16
 800696e:	2300      	movs	r3, #0
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	f7fe fd8b 	bl	800548c <xQueueGenericSendFromISR>
 8006976:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800697a:	4618      	mov	r0, r3
 800697c:	3728      	adds	r7, #40	; 0x28
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000e00 	.word	0x20000e00

08006988 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af02      	add	r7, sp, #8
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006992:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <prvProcessExpiredTimer+0x94>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	3304      	adds	r3, #4
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fb47 	bl	8005034 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d022      	beq.n	80069fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	699a      	ldr	r2, [r3, #24]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	18d1      	adds	r1, r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	6978      	ldr	r0, [r7, #20]
 80069c2:	f000 f8d1 	bl	8006b68 <prvInsertTimerInActiveList>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01f      	beq.n	8006a0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069cc:	2300      	movs	r3, #0
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	2300      	movs	r3, #0
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	2100      	movs	r1, #0
 80069d6:	6978      	ldr	r0, [r7, #20]
 80069d8:	f7ff ff88 	bl	80068ec <xTimerGenericCommand>
 80069dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d113      	bne.n	8006a0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60fb      	str	r3, [r7, #12]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	6978      	ldr	r0, [r7, #20]
 8006a12:	4798      	blx	r3
}
 8006a14:	bf00      	nop
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20000df8 	.word	0x20000df8

08006a20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a28:	f107 0308 	add.w	r3, r7, #8
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 f857 	bl	8006ae0 <prvGetNextExpireTime>
 8006a32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4619      	mov	r1, r3
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 f803 	bl	8006a44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a3e:	f000 f8d5 	bl	8006bec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a42:	e7f1      	b.n	8006a28 <prvTimerTask+0x8>

08006a44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a4e:	f7ff fa43 	bl	8005ed8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a52:	f107 0308 	add.w	r3, r7, #8
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f866 	bl	8006b28 <prvSampleTimeNow>
 8006a5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d130      	bne.n	8006ac6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <prvProcessTimerOrBlockTask+0x3c>
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d806      	bhi.n	8006a80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a72:	f7ff fa3f 	bl	8005ef4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a76:	68f9      	ldr	r1, [r7, #12]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ff85 	bl	8006988 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a7e:	e024      	b.n	8006aca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a86:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <prvProcessTimerOrBlockTask+0x90>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <prvProcessTimerOrBlockTask+0x50>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e000      	b.n	8006a96 <prvProcessTimerOrBlockTask+0x52>
 8006a94:	2300      	movs	r3, #0
 8006a96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a98:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <prvProcessTimerOrBlockTask+0x94>)
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f7fe ffa7 	bl	80059f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006aaa:	f7ff fa23 	bl	8005ef4 <xTaskResumeAll>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <prvProcessTimerOrBlockTask+0x98>)
 8006ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	f3bf 8f6f 	isb	sy
}
 8006ac4:	e001      	b.n	8006aca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ac6:	f7ff fa15 	bl	8005ef4 <xTaskResumeAll>
}
 8006aca:	bf00      	nop
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000dfc 	.word	0x20000dfc
 8006ad8:	20000e00 	.word	0x20000e00
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ae8:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <prvGetNextExpireTime+0x44>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <prvGetNextExpireTime+0x16>
 8006af2:	2201      	movs	r2, #1
 8006af4:	e000      	b.n	8006af8 <prvGetNextExpireTime+0x18>
 8006af6:	2200      	movs	r2, #0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b04:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <prvGetNextExpireTime+0x44>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	e001      	b.n	8006b14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b14:	68fb      	ldr	r3, [r7, #12]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000df8 	.word	0x20000df8

08006b28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b30:	f7ff fa7e 	bl	8006030 <xTaskGetTickCount>
 8006b34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b36:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <prvSampleTimeNow+0x3c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d205      	bcs.n	8006b4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b40:	f000 f936 	bl	8006db0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e002      	b.n	8006b52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b52:	4a04      	ldr	r2, [pc, #16]	; (8006b64 <prvSampleTimeNow+0x3c>)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b58:	68fb      	ldr	r3, [r7, #12]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20000e08 	.word	0x20000e08

08006b68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d812      	bhi.n	8006bb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d302      	bcc.n	8006ba2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	e01b      	b.n	8006bda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ba2:	4b10      	ldr	r3, [pc, #64]	; (8006be4 <prvInsertTimerInActiveList+0x7c>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7fe fa08 	bl	8004fc2 <vListInsert>
 8006bb2:	e012      	b.n	8006bda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d206      	bcs.n	8006bca <prvInsertTimerInActiveList+0x62>
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d302      	bcc.n	8006bca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	e007      	b.n	8006bda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bca:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <prvInsertTimerInActiveList+0x80>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7fe f9f4 	bl	8004fc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bda:	697b      	ldr	r3, [r7, #20]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	20000dfc 	.word	0x20000dfc
 8006be8:	20000df8 	.word	0x20000df8

08006bec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08e      	sub	sp, #56	; 0x38
 8006bf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bf2:	e0ca      	b.n	8006d8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da18      	bge.n	8006c2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bfa:	1d3b      	adds	r3, r7, #4
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	61fb      	str	r3, [r7, #28]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c22:	6850      	ldr	r0, [r2, #4]
 8006c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c26:	6892      	ldr	r2, [r2, #8]
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f2c0 80aa 	blt.w	8006d88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	3304      	adds	r3, #4
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe f9f5 	bl	8005034 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ff6b 	bl	8006b28 <prvSampleTimeNow>
 8006c52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b09      	cmp	r3, #9
 8006c58:	f200 8097 	bhi.w	8006d8a <prvProcessReceivedCommands+0x19e>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <prvProcessReceivedCommands+0x78>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c8d 	.word	0x08006c8d
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006c8d 	.word	0x08006c8d
 8006c70:	08006d01 	.word	0x08006d01
 8006c74:	08006d15 	.word	0x08006d15
 8006c78:	08006d5f 	.word	0x08006d5f
 8006c7c:	08006c8d 	.word	0x08006c8d
 8006c80:	08006c8d 	.word	0x08006c8d
 8006c84:	08006d01 	.word	0x08006d01
 8006c88:	08006d15 	.word	0x08006d15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	18d1      	adds	r1, r2, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cac:	f7ff ff5c 	bl	8006b68 <prvInsertTimerInActiveList>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d069      	beq.n	8006d8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d05e      	beq.n	8006d8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	441a      	add	r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cde:	f7ff fe05 	bl	80068ec <xTimerGenericCommand>
 8006ce2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d14f      	bne.n	8006d8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	61bb      	str	r3, [r7, #24]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d06:	f023 0301 	bic.w	r3, r3, #1
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d12:	e03a      	b.n	8006d8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	617b      	str	r3, [r7, #20]
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	699a      	ldr	r2, [r3, #24]
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	18d1      	adds	r1, r2, r3
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d58:	f7ff ff06 	bl	8006b68 <prvInsertTimerInActiveList>
					break;
 8006d5c:	e015      	b.n	8006d8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6e:	f000 fbdf 	bl	8007530 <vPortFree>
 8006d72:	e00a      	b.n	8006d8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d86:	e000      	b.n	8006d8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d8a:	4b08      	ldr	r3, [pc, #32]	; (8006dac <prvProcessReceivedCommands+0x1c0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	1d39      	adds	r1, r7, #4
 8006d90:	2200      	movs	r2, #0
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fe fc16 	bl	80055c4 <xQueueReceive>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f47f af2a 	bne.w	8006bf4 <prvProcessReceivedCommands+0x8>
	}
}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	3730      	adds	r7, #48	; 0x30
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000e00 	.word	0x20000e00

08006db0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006db6:	e048      	b.n	8006e4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db8:	4b2d      	ldr	r3, [pc, #180]	; (8006e70 <prvSwitchTimerLists+0xc0>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc2:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <prvSwitchTimerLists+0xc0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fe f92f 	bl	8005034 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02e      	beq.n	8006e4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d90e      	bls.n	8006e1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e0a:	4b19      	ldr	r3, [pc, #100]	; (8006e70 <prvSwitchTimerLists+0xc0>)
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f7fe f8d4 	bl	8004fc2 <vListInsert>
 8006e1a:	e016      	b.n	8006e4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	2300      	movs	r3, #0
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	2100      	movs	r1, #0
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff fd60 	bl	80068ec <xTimerGenericCommand>
 8006e2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	603b      	str	r3, [r7, #0]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e4a:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <prvSwitchTimerLists+0xc0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1b1      	bne.n	8006db8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <prvSwitchTimerLists+0xc0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e5a:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <prvSwitchTimerLists+0xc4>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a04      	ldr	r2, [pc, #16]	; (8006e70 <prvSwitchTimerLists+0xc0>)
 8006e60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e62:	4a04      	ldr	r2, [pc, #16]	; (8006e74 <prvSwitchTimerLists+0xc4>)
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	6013      	str	r3, [r2, #0]
}
 8006e68:	bf00      	nop
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000df8 	.word	0x20000df8
 8006e74:	20000dfc 	.word	0x20000dfc

08006e78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e7e:	f000 f969 	bl	8007154 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e82:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <prvCheckForValidListAndQueue+0x60>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d120      	bne.n	8006ecc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e8a:	4814      	ldr	r0, [pc, #80]	; (8006edc <prvCheckForValidListAndQueue+0x64>)
 8006e8c:	f7fe f848 	bl	8004f20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e90:	4813      	ldr	r0, [pc, #76]	; (8006ee0 <prvCheckForValidListAndQueue+0x68>)
 8006e92:	f7fe f845 	bl	8004f20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e96:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <prvCheckForValidListAndQueue+0x6c>)
 8006e98:	4a10      	ldr	r2, [pc, #64]	; (8006edc <prvCheckForValidListAndQueue+0x64>)
 8006e9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e9c:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <prvCheckForValidListAndQueue+0x70>)
 8006e9e:	4a10      	ldr	r2, [pc, #64]	; (8006ee0 <prvCheckForValidListAndQueue+0x68>)
 8006ea0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <prvCheckForValidListAndQueue+0x74>)
 8006ea8:	4a11      	ldr	r2, [pc, #68]	; (8006ef0 <prvCheckForValidListAndQueue+0x78>)
 8006eaa:	2110      	movs	r1, #16
 8006eac:	200a      	movs	r0, #10
 8006eae:	f7fe f953 	bl	8005158 <xQueueGenericCreateStatic>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4a08      	ldr	r2, [pc, #32]	; (8006ed8 <prvCheckForValidListAndQueue+0x60>)
 8006eb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006eb8:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <prvCheckForValidListAndQueue+0x60>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <prvCheckForValidListAndQueue+0x60>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	490b      	ldr	r1, [pc, #44]	; (8006ef4 <prvCheckForValidListAndQueue+0x7c>)
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fd6c 	bl	80059a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ecc:	f000 f972 	bl	80071b4 <vPortExitCritical>
}
 8006ed0:	bf00      	nop
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000e00 	.word	0x20000e00
 8006edc:	20000dd0 	.word	0x20000dd0
 8006ee0:	20000de4 	.word	0x20000de4
 8006ee4:	20000df8 	.word	0x20000df8
 8006ee8:	20000dfc 	.word	0x20000dfc
 8006eec:	20000eac 	.word	0x20000eac
 8006ef0:	20000e0c 	.word	0x20000e0c
 8006ef4:	0800a214 	.word	0x0800a214

08006ef8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3b04      	subs	r3, #4
 8006f08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3b04      	subs	r3, #4
 8006f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f023 0201 	bic.w	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3b04      	subs	r3, #4
 8006f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f28:	4a0c      	ldr	r2, [pc, #48]	; (8006f5c <pxPortInitialiseStack+0x64>)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3b14      	subs	r3, #20
 8006f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3b04      	subs	r3, #4
 8006f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f06f 0202 	mvn.w	r2, #2
 8006f46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3b20      	subs	r3, #32
 8006f4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	08006f61 	.word	0x08006f61

08006f60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f6a:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <prvTaskExitError+0x54>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f72:	d00a      	beq.n	8006f8a <prvTaskExitError+0x2a>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	60fb      	str	r3, [r7, #12]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <prvTaskExitError+0x28>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	60bb      	str	r3, [r7, #8]
}
 8006f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f9e:	bf00      	nop
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0fc      	beq.n	8006fa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	2000000c 	.word	0x2000000c
	...

08006fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <pxCurrentTCBConst2>)
 8006fc2:	6819      	ldr	r1, [r3, #0]
 8006fc4:	6808      	ldr	r0, [r1, #0]
 8006fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	f380 8809 	msr	PSP, r0
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f380 8811 	msr	BASEPRI, r0
 8006fda:	4770      	bx	lr
 8006fdc:	f3af 8000 	nop.w

08006fe0 <pxCurrentTCBConst2>:
 8006fe0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop

08006fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fe8:	4808      	ldr	r0, [pc, #32]	; (800700c <prvPortStartFirstTask+0x24>)
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	6800      	ldr	r0, [r0, #0]
 8006fee:	f380 8808 	msr	MSP, r0
 8006ff2:	f04f 0000 	mov.w	r0, #0
 8006ff6:	f380 8814 	msr	CONTROL, r0
 8006ffa:	b662      	cpsie	i
 8006ffc:	b661      	cpsie	f
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	df00      	svc	0
 8007008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800700a:	bf00      	nop
 800700c:	e000ed08 	.word	0xe000ed08

08007010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007016:	4b46      	ldr	r3, [pc, #280]	; (8007130 <xPortStartScheduler+0x120>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a46      	ldr	r2, [pc, #280]	; (8007134 <xPortStartScheduler+0x124>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10a      	bne.n	8007036 <xPortStartScheduler+0x26>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	613b      	str	r3, [r7, #16]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007036:	4b3e      	ldr	r3, [pc, #248]	; (8007130 <xPortStartScheduler+0x120>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a3f      	ldr	r2, [pc, #252]	; (8007138 <xPortStartScheduler+0x128>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10a      	bne.n	8007056 <xPortStartScheduler+0x46>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60fb      	str	r3, [r7, #12]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007056:	4b39      	ldr	r3, [pc, #228]	; (800713c <xPortStartScheduler+0x12c>)
 8007058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	22ff      	movs	r2, #255	; 0xff
 8007066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007078:	b2da      	uxtb	r2, r3
 800707a:	4b31      	ldr	r3, [pc, #196]	; (8007140 <xPortStartScheduler+0x130>)
 800707c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <xPortStartScheduler+0x134>)
 8007080:	2207      	movs	r2, #7
 8007082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007084:	e009      	b.n	800709a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007086:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <xPortStartScheduler+0x134>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3b01      	subs	r3, #1
 800708c:	4a2d      	ldr	r2, [pc, #180]	; (8007144 <xPortStartScheduler+0x134>)
 800708e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a2:	2b80      	cmp	r3, #128	; 0x80
 80070a4:	d0ef      	beq.n	8007086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070a6:	4b27      	ldr	r3, [pc, #156]	; (8007144 <xPortStartScheduler+0x134>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1c3 0307 	rsb	r3, r3, #7
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d00a      	beq.n	80070c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	60bb      	str	r3, [r7, #8]
}
 80070c4:	bf00      	nop
 80070c6:	e7fe      	b.n	80070c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070c8:	4b1e      	ldr	r3, [pc, #120]	; (8007144 <xPortStartScheduler+0x134>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <xPortStartScheduler+0x134>)
 80070d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070d2:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <xPortStartScheduler+0x134>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070da:	4a1a      	ldr	r2, [pc, #104]	; (8007144 <xPortStartScheduler+0x134>)
 80070dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070e6:	4b18      	ldr	r3, [pc, #96]	; (8007148 <xPortStartScheduler+0x138>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a17      	ldr	r2, [pc, #92]	; (8007148 <xPortStartScheduler+0x138>)
 80070ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070f2:	4b15      	ldr	r3, [pc, #84]	; (8007148 <xPortStartScheduler+0x138>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a14      	ldr	r2, [pc, #80]	; (8007148 <xPortStartScheduler+0x138>)
 80070f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070fe:	f000 f8dd 	bl	80072bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007102:	4b12      	ldr	r3, [pc, #72]	; (800714c <xPortStartScheduler+0x13c>)
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007108:	f000 f8fc 	bl	8007304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800710c:	4b10      	ldr	r3, [pc, #64]	; (8007150 <xPortStartScheduler+0x140>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0f      	ldr	r2, [pc, #60]	; (8007150 <xPortStartScheduler+0x140>)
 8007112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007118:	f7ff ff66 	bl	8006fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800711c:	f7ff f852 	bl	80061c4 <vTaskSwitchContext>
	prvTaskExitError();
 8007120:	f7ff ff1e 	bl	8006f60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	e000ed00 	.word	0xe000ed00
 8007134:	410fc271 	.word	0x410fc271
 8007138:	410fc270 	.word	0x410fc270
 800713c:	e000e400 	.word	0xe000e400
 8007140:	20000efc 	.word	0x20000efc
 8007144:	20000f00 	.word	0x20000f00
 8007148:	e000ed20 	.word	0xe000ed20
 800714c:	2000000c 	.word	0x2000000c
 8007150:	e000ef34 	.word	0xe000ef34

08007154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	607b      	str	r3, [r7, #4]
}
 800716c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800716e:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <vPortEnterCritical+0x58>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	4a0d      	ldr	r2, [pc, #52]	; (80071ac <vPortEnterCritical+0x58>)
 8007176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <vPortEnterCritical+0x58>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d10f      	bne.n	80071a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <vPortEnterCritical+0x5c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	603b      	str	r3, [r7, #0]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <vPortEnterCritical+0x4a>
	}
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	2000000c 	.word	0x2000000c
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ba:	4b12      	ldr	r3, [pc, #72]	; (8007204 <vPortExitCritical+0x50>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <vPortExitCritical+0x24>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	607b      	str	r3, [r7, #4]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071d8:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <vPortExitCritical+0x50>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3b01      	subs	r3, #1
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <vPortExitCritical+0x50>)
 80071e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <vPortExitCritical+0x50>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d105      	bne.n	80071f6 <vPortExitCritical+0x42>
 80071ea:	2300      	movs	r3, #0
 80071ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	f383 8811 	msr	BASEPRI, r3
}
 80071f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	2000000c 	.word	0x2000000c
	...

08007210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007210:	f3ef 8009 	mrs	r0, PSP
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <pxCurrentTCBConst>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	f01e 0f10 	tst.w	lr, #16
 8007220:	bf08      	it	eq
 8007222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007234:	f380 8811 	msr	BASEPRI, r0
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f7fe ffc0 	bl	80061c4 <vTaskSwitchContext>
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	f380 8811 	msr	BASEPRI, r0
 800724c:	bc09      	pop	{r0, r3}
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	6808      	ldr	r0, [r1, #0]
 8007252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007256:	f01e 0f10 	tst.w	lr, #16
 800725a:	bf08      	it	eq
 800725c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007260:	f380 8809 	msr	PSP, r0
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w

08007270 <pxCurrentTCBConst>:
 8007270:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
}
 8007290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007292:	f7fe fedd 	bl	8006050 <xTaskIncrementTick>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <xPortSysTickHandler+0x40>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	2300      	movs	r3, #0
 80072a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f383 8811 	msr	BASEPRI, r3
}
 80072ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <vPortSetupTimerInterrupt+0x34>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072c6:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <vPortSetupTimerInterrupt+0x38>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <vPortSetupTimerInterrupt+0x3c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <vPortSetupTimerInterrupt+0x40>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	099b      	lsrs	r3, r3, #6
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <vPortSetupTimerInterrupt+0x44>)
 80072da:	3b01      	subs	r3, #1
 80072dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072de:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <vPortSetupTimerInterrupt+0x34>)
 80072e0:	2207      	movs	r2, #7
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	e000e010 	.word	0xe000e010
 80072f4:	e000e018 	.word	0xe000e018
 80072f8:	20000000 	.word	0x20000000
 80072fc:	10624dd3 	.word	0x10624dd3
 8007300:	e000e014 	.word	0xe000e014

08007304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007314 <vPortEnableVFP+0x10>
 8007308:	6801      	ldr	r1, [r0, #0]
 800730a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800730e:	6001      	str	r1, [r0, #0]
 8007310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007312:	bf00      	nop
 8007314:	e000ed88 	.word	0xe000ed88

08007318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800731e:	f3ef 8305 	mrs	r3, IPSR
 8007322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b0f      	cmp	r3, #15
 8007328:	d914      	bls.n	8007354 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800732a:	4a17      	ldr	r2, [pc, #92]	; (8007388 <vPortValidateInterruptPriority+0x70>)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007334:	4b15      	ldr	r3, [pc, #84]	; (800738c <vPortValidateInterruptPriority+0x74>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	7afa      	ldrb	r2, [r7, #11]
 800733a:	429a      	cmp	r2, r3
 800733c:	d20a      	bcs.n	8007354 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	607b      	str	r3, [r7, #4]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007354:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <vPortValidateInterruptPriority+0x78>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800735c:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <vPortValidateInterruptPriority+0x7c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d90a      	bls.n	800737a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	603b      	str	r3, [r7, #0]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <vPortValidateInterruptPriority+0x60>
	}
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	e000e3f0 	.word	0xe000e3f0
 800738c:	20000efc 	.word	0x20000efc
 8007390:	e000ed0c 	.word	0xe000ed0c
 8007394:	20000f00 	.word	0x20000f00

08007398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073a4:	f7fe fd98 	bl	8005ed8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073a8:	4b5b      	ldr	r3, [pc, #364]	; (8007518 <pvPortMalloc+0x180>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073b0:	f000 f920 	bl	80075f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073b4:	4b59      	ldr	r3, [pc, #356]	; (800751c <pvPortMalloc+0x184>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 8093 	bne.w	80074e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01d      	beq.n	8007404 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073c8:	2208      	movs	r2, #8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4413      	add	r3, r2
 80073ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d014      	beq.n	8007404 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f023 0307 	bic.w	r3, r3, #7
 80073e0:	3308      	adds	r3, #8
 80073e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <pvPortMalloc+0x6c>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	617b      	str	r3, [r7, #20]
}
 8007400:	bf00      	nop
 8007402:	e7fe      	b.n	8007402 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d06e      	beq.n	80074e8 <pvPortMalloc+0x150>
 800740a:	4b45      	ldr	r3, [pc, #276]	; (8007520 <pvPortMalloc+0x188>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d869      	bhi.n	80074e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007414:	4b43      	ldr	r3, [pc, #268]	; (8007524 <pvPortMalloc+0x18c>)
 8007416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007418:	4b42      	ldr	r3, [pc, #264]	; (8007524 <pvPortMalloc+0x18c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800741e:	e004      	b.n	800742a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d903      	bls.n	800743c <pvPortMalloc+0xa4>
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f1      	bne.n	8007420 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800743c:	4b36      	ldr	r3, [pc, #216]	; (8007518 <pvPortMalloc+0x180>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007442:	429a      	cmp	r2, r3
 8007444:	d050      	beq.n	80074e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2208      	movs	r2, #8
 800744c:	4413      	add	r3, r2
 800744e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	2308      	movs	r3, #8
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	429a      	cmp	r2, r3
 8007466:	d91f      	bls.n	80074a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <pvPortMalloc+0xf8>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	613b      	str	r3, [r7, #16]
}
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074a2:	69b8      	ldr	r0, [r7, #24]
 80074a4:	f000 f908 	bl	80076b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074a8:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <pvPortMalloc+0x188>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	4a1b      	ldr	r2, [pc, #108]	; (8007520 <pvPortMalloc+0x188>)
 80074b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074b6:	4b1a      	ldr	r3, [pc, #104]	; (8007520 <pvPortMalloc+0x188>)
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <pvPortMalloc+0x190>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d203      	bcs.n	80074ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074c2:	4b17      	ldr	r3, [pc, #92]	; (8007520 <pvPortMalloc+0x188>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a18      	ldr	r2, [pc, #96]	; (8007528 <pvPortMalloc+0x190>)
 80074c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	4b13      	ldr	r3, [pc, #76]	; (800751c <pvPortMalloc+0x184>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074de:	4b13      	ldr	r3, [pc, #76]	; (800752c <pvPortMalloc+0x194>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	4a11      	ldr	r2, [pc, #68]	; (800752c <pvPortMalloc+0x194>)
 80074e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074e8:	f7fe fd04 	bl	8005ef4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <pvPortMalloc+0x174>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	60fb      	str	r3, [r7, #12]
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <pvPortMalloc+0x172>
	return pvReturn;
 800750c:	69fb      	ldr	r3, [r7, #28]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3728      	adds	r7, #40	; 0x28
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20001ac4 	.word	0x20001ac4
 800751c:	20001ad8 	.word	0x20001ad8
 8007520:	20001ac8 	.word	0x20001ac8
 8007524:	20001abc 	.word	0x20001abc
 8007528:	20001acc 	.word	0x20001acc
 800752c:	20001ad0 	.word	0x20001ad0

08007530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d04d      	beq.n	80075de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007542:	2308      	movs	r3, #8
 8007544:	425b      	negs	r3, r3
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4413      	add	r3, r2
 800754a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <vPortFree+0xb8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4013      	ands	r3, r2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <vPortFree+0x44>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	60fb      	str	r3, [r7, #12]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <vPortFree+0x62>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	60bb      	str	r3, [r7, #8]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <vPortFree+0xb8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01e      	beq.n	80075de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d11a      	bne.n	80075de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <vPortFree+0xb8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	43db      	mvns	r3, r3
 80075b2:	401a      	ands	r2, r3
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075b8:	f7fe fc8e 	bl	8005ed8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <vPortFree+0xbc>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4413      	add	r3, r2
 80075c6:	4a09      	ldr	r2, [pc, #36]	; (80075ec <vPortFree+0xbc>)
 80075c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ca:	6938      	ldr	r0, [r7, #16]
 80075cc:	f000 f874 	bl	80076b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <vPortFree+0xc0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3301      	adds	r3, #1
 80075d6:	4a06      	ldr	r2, [pc, #24]	; (80075f0 <vPortFree+0xc0>)
 80075d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075da:	f7fe fc8b 	bl	8005ef4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075de:	bf00      	nop
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20001ad8 	.word	0x20001ad8
 80075ec:	20001ac8 	.word	0x20001ac8
 80075f0:	20001ad4 	.word	0x20001ad4

080075f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80075fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007600:	4b27      	ldr	r3, [pc, #156]	; (80076a0 <prvHeapInit+0xac>)
 8007602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00c      	beq.n	8007628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3307      	adds	r3, #7
 8007612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	4a1f      	ldr	r2, [pc, #124]	; (80076a0 <prvHeapInit+0xac>)
 8007624:	4413      	add	r3, r2
 8007626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800762c:	4a1d      	ldr	r2, [pc, #116]	; (80076a4 <prvHeapInit+0xb0>)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007632:	4b1c      	ldr	r3, [pc, #112]	; (80076a4 <prvHeapInit+0xb0>)
 8007634:	2200      	movs	r2, #0
 8007636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	4413      	add	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007640:	2208      	movs	r2, #8
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0307 	bic.w	r3, r3, #7
 800764e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a15      	ldr	r2, [pc, #84]	; (80076a8 <prvHeapInit+0xb4>)
 8007654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007656:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <prvHeapInit+0xb4>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800765e:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <prvHeapInit+0xb4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007674:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <prvHeapInit+0xb4>)
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	4a0a      	ldr	r2, [pc, #40]	; (80076ac <prvHeapInit+0xb8>)
 8007682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	4a09      	ldr	r2, [pc, #36]	; (80076b0 <prvHeapInit+0xbc>)
 800768a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <prvHeapInit+0xc0>)
 800768e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007692:	601a      	str	r2, [r3, #0]
}
 8007694:	bf00      	nop
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	20000f04 	.word	0x20000f04
 80076a4:	20001abc 	.word	0x20001abc
 80076a8:	20001ac4 	.word	0x20001ac4
 80076ac:	20001acc 	.word	0x20001acc
 80076b0:	20001ac8 	.word	0x20001ac8
 80076b4:	20001ad8 	.word	0x20001ad8

080076b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076c0:	4b28      	ldr	r3, [pc, #160]	; (8007764 <prvInsertBlockIntoFreeList+0xac>)
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	e002      	b.n	80076cc <prvInsertBlockIntoFreeList+0x14>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d8f7      	bhi.n	80076c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	4413      	add	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d108      	bne.n	80076fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	441a      	add	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	441a      	add	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	429a      	cmp	r2, r3
 800770c:	d118      	bne.n	8007740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	4b15      	ldr	r3, [pc, #84]	; (8007768 <prvInsertBlockIntoFreeList+0xb0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d00d      	beq.n	8007736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	441a      	add	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	e008      	b.n	8007748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007736:	4b0c      	ldr	r3, [pc, #48]	; (8007768 <prvInsertBlockIntoFreeList+0xb0>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	e003      	b.n	8007748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	429a      	cmp	r2, r3
 800774e:	d002      	beq.n	8007756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007756:	bf00      	nop
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	20001abc 	.word	0x20001abc
 8007768:	20001ac4 	.word	0x20001ac4

0800776c <__errno>:
 800776c:	4b01      	ldr	r3, [pc, #4]	; (8007774 <__errno+0x8>)
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20000010 	.word	0x20000010

08007778 <__libc_init_array>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	4d0d      	ldr	r5, [pc, #52]	; (80077b0 <__libc_init_array+0x38>)
 800777c:	4c0d      	ldr	r4, [pc, #52]	; (80077b4 <__libc_init_array+0x3c>)
 800777e:	1b64      	subs	r4, r4, r5
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	2600      	movs	r6, #0
 8007784:	42a6      	cmp	r6, r4
 8007786:	d109      	bne.n	800779c <__libc_init_array+0x24>
 8007788:	4d0b      	ldr	r5, [pc, #44]	; (80077b8 <__libc_init_array+0x40>)
 800778a:	4c0c      	ldr	r4, [pc, #48]	; (80077bc <__libc_init_array+0x44>)
 800778c:	f002 fd08 	bl	800a1a0 <_init>
 8007790:	1b64      	subs	r4, r4, r5
 8007792:	10a4      	asrs	r4, r4, #2
 8007794:	2600      	movs	r6, #0
 8007796:	42a6      	cmp	r6, r4
 8007798:	d105      	bne.n	80077a6 <__libc_init_array+0x2e>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a0:	4798      	blx	r3
 80077a2:	3601      	adds	r6, #1
 80077a4:	e7ee      	b.n	8007784 <__libc_init_array+0xc>
 80077a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077aa:	4798      	blx	r3
 80077ac:	3601      	adds	r6, #1
 80077ae:	e7f2      	b.n	8007796 <__libc_init_array+0x1e>
 80077b0:	0800a674 	.word	0x0800a674
 80077b4:	0800a674 	.word	0x0800a674
 80077b8:	0800a674 	.word	0x0800a674
 80077bc:	0800a678 	.word	0x0800a678

080077c0 <memcpy>:
 80077c0:	440a      	add	r2, r1
 80077c2:	4291      	cmp	r1, r2
 80077c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80077c8:	d100      	bne.n	80077cc <memcpy+0xc>
 80077ca:	4770      	bx	lr
 80077cc:	b510      	push	{r4, lr}
 80077ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d6:	4291      	cmp	r1, r2
 80077d8:	d1f9      	bne.n	80077ce <memcpy+0xe>
 80077da:	bd10      	pop	{r4, pc}

080077dc <memset>:
 80077dc:	4402      	add	r2, r0
 80077de:	4603      	mov	r3, r0
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d100      	bne.n	80077e6 <memset+0xa>
 80077e4:	4770      	bx	lr
 80077e6:	f803 1b01 	strb.w	r1, [r3], #1
 80077ea:	e7f9      	b.n	80077e0 <memset+0x4>

080077ec <__cvt>:
 80077ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	ec55 4b10 	vmov	r4, r5, d0
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	460e      	mov	r6, r1
 80077f8:	4619      	mov	r1, r3
 80077fa:	462b      	mov	r3, r5
 80077fc:	bfbb      	ittet	lt
 80077fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007802:	461d      	movlt	r5, r3
 8007804:	2300      	movge	r3, #0
 8007806:	232d      	movlt	r3, #45	; 0x2d
 8007808:	700b      	strb	r3, [r1, #0]
 800780a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800780c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007810:	4691      	mov	r9, r2
 8007812:	f023 0820 	bic.w	r8, r3, #32
 8007816:	bfbc      	itt	lt
 8007818:	4622      	movlt	r2, r4
 800781a:	4614      	movlt	r4, r2
 800781c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007820:	d005      	beq.n	800782e <__cvt+0x42>
 8007822:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007826:	d100      	bne.n	800782a <__cvt+0x3e>
 8007828:	3601      	adds	r6, #1
 800782a:	2102      	movs	r1, #2
 800782c:	e000      	b.n	8007830 <__cvt+0x44>
 800782e:	2103      	movs	r1, #3
 8007830:	ab03      	add	r3, sp, #12
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	ab02      	add	r3, sp, #8
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	ec45 4b10 	vmov	d0, r4, r5
 800783c:	4653      	mov	r3, sl
 800783e:	4632      	mov	r2, r6
 8007840:	f000 fce2 	bl	8008208 <_dtoa_r>
 8007844:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007848:	4607      	mov	r7, r0
 800784a:	d102      	bne.n	8007852 <__cvt+0x66>
 800784c:	f019 0f01 	tst.w	r9, #1
 8007850:	d022      	beq.n	8007898 <__cvt+0xac>
 8007852:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007856:	eb07 0906 	add.w	r9, r7, r6
 800785a:	d110      	bne.n	800787e <__cvt+0x92>
 800785c:	783b      	ldrb	r3, [r7, #0]
 800785e:	2b30      	cmp	r3, #48	; 0x30
 8007860:	d10a      	bne.n	8007878 <__cvt+0x8c>
 8007862:	2200      	movs	r2, #0
 8007864:	2300      	movs	r3, #0
 8007866:	4620      	mov	r0, r4
 8007868:	4629      	mov	r1, r5
 800786a:	f7f9 f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800786e:	b918      	cbnz	r0, 8007878 <__cvt+0x8c>
 8007870:	f1c6 0601 	rsb	r6, r6, #1
 8007874:	f8ca 6000 	str.w	r6, [sl]
 8007878:	f8da 3000 	ldr.w	r3, [sl]
 800787c:	4499      	add	r9, r3
 800787e:	2200      	movs	r2, #0
 8007880:	2300      	movs	r3, #0
 8007882:	4620      	mov	r0, r4
 8007884:	4629      	mov	r1, r5
 8007886:	f7f9 f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800788a:	b108      	cbz	r0, 8007890 <__cvt+0xa4>
 800788c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007890:	2230      	movs	r2, #48	; 0x30
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	454b      	cmp	r3, r9
 8007896:	d307      	bcc.n	80078a8 <__cvt+0xbc>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800789c:	1bdb      	subs	r3, r3, r7
 800789e:	4638      	mov	r0, r7
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	b004      	add	sp, #16
 80078a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a8:	1c59      	adds	r1, r3, #1
 80078aa:	9103      	str	r1, [sp, #12]
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e7f0      	b.n	8007892 <__cvt+0xa6>

080078b0 <__exponent>:
 80078b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078b2:	4603      	mov	r3, r0
 80078b4:	2900      	cmp	r1, #0
 80078b6:	bfb8      	it	lt
 80078b8:	4249      	neglt	r1, r1
 80078ba:	f803 2b02 	strb.w	r2, [r3], #2
 80078be:	bfb4      	ite	lt
 80078c0:	222d      	movlt	r2, #45	; 0x2d
 80078c2:	222b      	movge	r2, #43	; 0x2b
 80078c4:	2909      	cmp	r1, #9
 80078c6:	7042      	strb	r2, [r0, #1]
 80078c8:	dd2a      	ble.n	8007920 <__exponent+0x70>
 80078ca:	f10d 0407 	add.w	r4, sp, #7
 80078ce:	46a4      	mov	ip, r4
 80078d0:	270a      	movs	r7, #10
 80078d2:	46a6      	mov	lr, r4
 80078d4:	460a      	mov	r2, r1
 80078d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80078da:	fb07 1516 	mls	r5, r7, r6, r1
 80078de:	3530      	adds	r5, #48	; 0x30
 80078e0:	2a63      	cmp	r2, #99	; 0x63
 80078e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80078e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078ea:	4631      	mov	r1, r6
 80078ec:	dcf1      	bgt.n	80078d2 <__exponent+0x22>
 80078ee:	3130      	adds	r1, #48	; 0x30
 80078f0:	f1ae 0502 	sub.w	r5, lr, #2
 80078f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078f8:	1c44      	adds	r4, r0, #1
 80078fa:	4629      	mov	r1, r5
 80078fc:	4561      	cmp	r1, ip
 80078fe:	d30a      	bcc.n	8007916 <__exponent+0x66>
 8007900:	f10d 0209 	add.w	r2, sp, #9
 8007904:	eba2 020e 	sub.w	r2, r2, lr
 8007908:	4565      	cmp	r5, ip
 800790a:	bf88      	it	hi
 800790c:	2200      	movhi	r2, #0
 800790e:	4413      	add	r3, r2
 8007910:	1a18      	subs	r0, r3, r0
 8007912:	b003      	add	sp, #12
 8007914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800791a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800791e:	e7ed      	b.n	80078fc <__exponent+0x4c>
 8007920:	2330      	movs	r3, #48	; 0x30
 8007922:	3130      	adds	r1, #48	; 0x30
 8007924:	7083      	strb	r3, [r0, #2]
 8007926:	70c1      	strb	r1, [r0, #3]
 8007928:	1d03      	adds	r3, r0, #4
 800792a:	e7f1      	b.n	8007910 <__exponent+0x60>

0800792c <_printf_float>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	ed2d 8b02 	vpush	{d8}
 8007934:	b08d      	sub	sp, #52	; 0x34
 8007936:	460c      	mov	r4, r1
 8007938:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800793c:	4616      	mov	r6, r2
 800793e:	461f      	mov	r7, r3
 8007940:	4605      	mov	r5, r0
 8007942:	f001 fb43 	bl	8008fcc <_localeconv_r>
 8007946:	f8d0 a000 	ldr.w	sl, [r0]
 800794a:	4650      	mov	r0, sl
 800794c:	f7f8 fc40 	bl	80001d0 <strlen>
 8007950:	2300      	movs	r3, #0
 8007952:	930a      	str	r3, [sp, #40]	; 0x28
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	f8d8 3000 	ldr.w	r3, [r8]
 800795c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007960:	3307      	adds	r3, #7
 8007962:	f023 0307 	bic.w	r3, r3, #7
 8007966:	f103 0208 	add.w	r2, r3, #8
 800796a:	f8c8 2000 	str.w	r2, [r8]
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007976:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800797a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800797e:	9307      	str	r3, [sp, #28]
 8007980:	f8cd 8018 	str.w	r8, [sp, #24]
 8007984:	ee08 0a10 	vmov	s16, r0
 8007988:	4b9f      	ldr	r3, [pc, #636]	; (8007c08 <_printf_float+0x2dc>)
 800798a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800798e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007992:	f7f9 f8cb 	bl	8000b2c <__aeabi_dcmpun>
 8007996:	bb88      	cbnz	r0, 80079fc <_printf_float+0xd0>
 8007998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800799c:	4b9a      	ldr	r3, [pc, #616]	; (8007c08 <_printf_float+0x2dc>)
 800799e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079a2:	f7f9 f8a5 	bl	8000af0 <__aeabi_dcmple>
 80079a6:	bb48      	cbnz	r0, 80079fc <_printf_float+0xd0>
 80079a8:	2200      	movs	r2, #0
 80079aa:	2300      	movs	r3, #0
 80079ac:	4640      	mov	r0, r8
 80079ae:	4649      	mov	r1, r9
 80079b0:	f7f9 f894 	bl	8000adc <__aeabi_dcmplt>
 80079b4:	b110      	cbz	r0, 80079bc <_printf_float+0x90>
 80079b6:	232d      	movs	r3, #45	; 0x2d
 80079b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079bc:	4b93      	ldr	r3, [pc, #588]	; (8007c0c <_printf_float+0x2e0>)
 80079be:	4894      	ldr	r0, [pc, #592]	; (8007c10 <_printf_float+0x2e4>)
 80079c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079c4:	bf94      	ite	ls
 80079c6:	4698      	movls	r8, r3
 80079c8:	4680      	movhi	r8, r0
 80079ca:	2303      	movs	r3, #3
 80079cc:	6123      	str	r3, [r4, #16]
 80079ce:	9b05      	ldr	r3, [sp, #20]
 80079d0:	f023 0204 	bic.w	r2, r3, #4
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	f04f 0900 	mov.w	r9, #0
 80079da:	9700      	str	r7, [sp, #0]
 80079dc:	4633      	mov	r3, r6
 80079de:	aa0b      	add	r2, sp, #44	; 0x2c
 80079e0:	4621      	mov	r1, r4
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 f9d8 	bl	8007d98 <_printf_common>
 80079e8:	3001      	adds	r0, #1
 80079ea:	f040 8090 	bne.w	8007b0e <_printf_float+0x1e2>
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079f2:	b00d      	add	sp, #52	; 0x34
 80079f4:	ecbd 8b02 	vpop	{d8}
 80079f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fc:	4642      	mov	r2, r8
 80079fe:	464b      	mov	r3, r9
 8007a00:	4640      	mov	r0, r8
 8007a02:	4649      	mov	r1, r9
 8007a04:	f7f9 f892 	bl	8000b2c <__aeabi_dcmpun>
 8007a08:	b140      	cbz	r0, 8007a1c <_printf_float+0xf0>
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bfbc      	itt	lt
 8007a10:	232d      	movlt	r3, #45	; 0x2d
 8007a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a16:	487f      	ldr	r0, [pc, #508]	; (8007c14 <_printf_float+0x2e8>)
 8007a18:	4b7f      	ldr	r3, [pc, #508]	; (8007c18 <_printf_float+0x2ec>)
 8007a1a:	e7d1      	b.n	80079c0 <_printf_float+0x94>
 8007a1c:	6863      	ldr	r3, [r4, #4]
 8007a1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a22:	9206      	str	r2, [sp, #24]
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	d13f      	bne.n	8007aa8 <_printf_float+0x17c>
 8007a28:	2306      	movs	r3, #6
 8007a2a:	6063      	str	r3, [r4, #4]
 8007a2c:	9b05      	ldr	r3, [sp, #20]
 8007a2e:	6861      	ldr	r1, [r4, #4]
 8007a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a34:	2300      	movs	r3, #0
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	ab0a      	add	r3, sp, #40	; 0x28
 8007a3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a3e:	ab09      	add	r3, sp, #36	; 0x24
 8007a40:	ec49 8b10 	vmov	d0, r8, r9
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	6022      	str	r2, [r4, #0]
 8007a48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f7ff fecd 	bl	80077ec <__cvt>
 8007a52:	9b06      	ldr	r3, [sp, #24]
 8007a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a56:	2b47      	cmp	r3, #71	; 0x47
 8007a58:	4680      	mov	r8, r0
 8007a5a:	d108      	bne.n	8007a6e <_printf_float+0x142>
 8007a5c:	1cc8      	adds	r0, r1, #3
 8007a5e:	db02      	blt.n	8007a66 <_printf_float+0x13a>
 8007a60:	6863      	ldr	r3, [r4, #4]
 8007a62:	4299      	cmp	r1, r3
 8007a64:	dd41      	ble.n	8007aea <_printf_float+0x1be>
 8007a66:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a6a:	fa5f fb8b 	uxtb.w	fp, fp
 8007a6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a72:	d820      	bhi.n	8007ab6 <_printf_float+0x18a>
 8007a74:	3901      	subs	r1, #1
 8007a76:	465a      	mov	r2, fp
 8007a78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a7c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a7e:	f7ff ff17 	bl	80078b0 <__exponent>
 8007a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a84:	1813      	adds	r3, r2, r0
 8007a86:	2a01      	cmp	r2, #1
 8007a88:	4681      	mov	r9, r0
 8007a8a:	6123      	str	r3, [r4, #16]
 8007a8c:	dc02      	bgt.n	8007a94 <_printf_float+0x168>
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	07d2      	lsls	r2, r2, #31
 8007a92:	d501      	bpl.n	8007a98 <_printf_float+0x16c>
 8007a94:	3301      	adds	r3, #1
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d09c      	beq.n	80079da <_printf_float+0xae>
 8007aa0:	232d      	movs	r3, #45	; 0x2d
 8007aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa6:	e798      	b.n	80079da <_printf_float+0xae>
 8007aa8:	9a06      	ldr	r2, [sp, #24]
 8007aaa:	2a47      	cmp	r2, #71	; 0x47
 8007aac:	d1be      	bne.n	8007a2c <_printf_float+0x100>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1bc      	bne.n	8007a2c <_printf_float+0x100>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e7b9      	b.n	8007a2a <_printf_float+0xfe>
 8007ab6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007aba:	d118      	bne.n	8007aee <_printf_float+0x1c2>
 8007abc:	2900      	cmp	r1, #0
 8007abe:	6863      	ldr	r3, [r4, #4]
 8007ac0:	dd0b      	ble.n	8007ada <_printf_float+0x1ae>
 8007ac2:	6121      	str	r1, [r4, #16]
 8007ac4:	b913      	cbnz	r3, 8007acc <_printf_float+0x1a0>
 8007ac6:	6822      	ldr	r2, [r4, #0]
 8007ac8:	07d0      	lsls	r0, r2, #31
 8007aca:	d502      	bpl.n	8007ad2 <_printf_float+0x1a6>
 8007acc:	3301      	adds	r3, #1
 8007ace:	440b      	add	r3, r1
 8007ad0:	6123      	str	r3, [r4, #16]
 8007ad2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ad4:	f04f 0900 	mov.w	r9, #0
 8007ad8:	e7de      	b.n	8007a98 <_printf_float+0x16c>
 8007ada:	b913      	cbnz	r3, 8007ae2 <_printf_float+0x1b6>
 8007adc:	6822      	ldr	r2, [r4, #0]
 8007ade:	07d2      	lsls	r2, r2, #31
 8007ae0:	d501      	bpl.n	8007ae6 <_printf_float+0x1ba>
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	e7f4      	b.n	8007ad0 <_printf_float+0x1a4>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e7f2      	b.n	8007ad0 <_printf_float+0x1a4>
 8007aea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af0:	4299      	cmp	r1, r3
 8007af2:	db05      	blt.n	8007b00 <_printf_float+0x1d4>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	6121      	str	r1, [r4, #16]
 8007af8:	07d8      	lsls	r0, r3, #31
 8007afa:	d5ea      	bpl.n	8007ad2 <_printf_float+0x1a6>
 8007afc:	1c4b      	adds	r3, r1, #1
 8007afe:	e7e7      	b.n	8007ad0 <_printf_float+0x1a4>
 8007b00:	2900      	cmp	r1, #0
 8007b02:	bfd4      	ite	le
 8007b04:	f1c1 0202 	rsble	r2, r1, #2
 8007b08:	2201      	movgt	r2, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	e7e0      	b.n	8007ad0 <_printf_float+0x1a4>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	055a      	lsls	r2, r3, #21
 8007b12:	d407      	bmi.n	8007b24 <_printf_float+0x1f8>
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	4642      	mov	r2, r8
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	47b8      	blx	r7
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d12c      	bne.n	8007b7c <_printf_float+0x250>
 8007b22:	e764      	b.n	80079ee <_printf_float+0xc2>
 8007b24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b28:	f240 80e0 	bls.w	8007cec <_printf_float+0x3c0>
 8007b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b30:	2200      	movs	r2, #0
 8007b32:	2300      	movs	r3, #0
 8007b34:	f7f8 ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d034      	beq.n	8007ba6 <_printf_float+0x27a>
 8007b3c:	4a37      	ldr	r2, [pc, #220]	; (8007c1c <_printf_float+0x2f0>)
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f af51 	beq.w	80079ee <_printf_float+0xc2>
 8007b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b50:	429a      	cmp	r2, r3
 8007b52:	db02      	blt.n	8007b5a <_printf_float+0x22e>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	07d8      	lsls	r0, r3, #31
 8007b58:	d510      	bpl.n	8007b7c <_printf_float+0x250>
 8007b5a:	ee18 3a10 	vmov	r3, s16
 8007b5e:	4652      	mov	r2, sl
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f af41 	beq.w	80079ee <_printf_float+0xc2>
 8007b6c:	f04f 0800 	mov.w	r8, #0
 8007b70:	f104 091a 	add.w	r9, r4, #26
 8007b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b76:	3b01      	subs	r3, #1
 8007b78:	4543      	cmp	r3, r8
 8007b7a:	dc09      	bgt.n	8007b90 <_printf_float+0x264>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	079b      	lsls	r3, r3, #30
 8007b80:	f100 8105 	bmi.w	8007d8e <_printf_float+0x462>
 8007b84:	68e0      	ldr	r0, [r4, #12]
 8007b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b88:	4298      	cmp	r0, r3
 8007b8a:	bfb8      	it	lt
 8007b8c:	4618      	movlt	r0, r3
 8007b8e:	e730      	b.n	80079f2 <_printf_float+0xc6>
 8007b90:	2301      	movs	r3, #1
 8007b92:	464a      	mov	r2, r9
 8007b94:	4631      	mov	r1, r6
 8007b96:	4628      	mov	r0, r5
 8007b98:	47b8      	blx	r7
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f43f af27 	beq.w	80079ee <_printf_float+0xc2>
 8007ba0:	f108 0801 	add.w	r8, r8, #1
 8007ba4:	e7e6      	b.n	8007b74 <_printf_float+0x248>
 8007ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dc39      	bgt.n	8007c20 <_printf_float+0x2f4>
 8007bac:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <_printf_float+0x2f0>)
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	f43f af19 	beq.w	80079ee <_printf_float+0xc2>
 8007bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	d102      	bne.n	8007bca <_printf_float+0x29e>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	07d9      	lsls	r1, r3, #31
 8007bc8:	d5d8      	bpl.n	8007b7c <_printf_float+0x250>
 8007bca:	ee18 3a10 	vmov	r3, s16
 8007bce:	4652      	mov	r2, sl
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f43f af09 	beq.w	80079ee <_printf_float+0xc2>
 8007bdc:	f04f 0900 	mov.w	r9, #0
 8007be0:	f104 0a1a 	add.w	sl, r4, #26
 8007be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be6:	425b      	negs	r3, r3
 8007be8:	454b      	cmp	r3, r9
 8007bea:	dc01      	bgt.n	8007bf0 <_printf_float+0x2c4>
 8007bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bee:	e792      	b.n	8007b16 <_printf_float+0x1ea>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	4652      	mov	r2, sl
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b8      	blx	r7
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	f43f aef7 	beq.w	80079ee <_printf_float+0xc2>
 8007c00:	f109 0901 	add.w	r9, r9, #1
 8007c04:	e7ee      	b.n	8007be4 <_printf_float+0x2b8>
 8007c06:	bf00      	nop
 8007c08:	7fefffff 	.word	0x7fefffff
 8007c0c:	0800a28c 	.word	0x0800a28c
 8007c10:	0800a290 	.word	0x0800a290
 8007c14:	0800a298 	.word	0x0800a298
 8007c18:	0800a294 	.word	0x0800a294
 8007c1c:	0800a29c 	.word	0x0800a29c
 8007c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c24:	429a      	cmp	r2, r3
 8007c26:	bfa8      	it	ge
 8007c28:	461a      	movge	r2, r3
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	4691      	mov	r9, r2
 8007c2e:	dc37      	bgt.n	8007ca0 <_printf_float+0x374>
 8007c30:	f04f 0b00 	mov.w	fp, #0
 8007c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c38:	f104 021a 	add.w	r2, r4, #26
 8007c3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c3e:	9305      	str	r3, [sp, #20]
 8007c40:	eba3 0309 	sub.w	r3, r3, r9
 8007c44:	455b      	cmp	r3, fp
 8007c46:	dc33      	bgt.n	8007cb0 <_printf_float+0x384>
 8007c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	db3b      	blt.n	8007cc8 <_printf_float+0x39c>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	07da      	lsls	r2, r3, #31
 8007c54:	d438      	bmi.n	8007cc8 <_printf_float+0x39c>
 8007c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c58:	9b05      	ldr	r3, [sp, #20]
 8007c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	eba2 0901 	sub.w	r9, r2, r1
 8007c62:	4599      	cmp	r9, r3
 8007c64:	bfa8      	it	ge
 8007c66:	4699      	movge	r9, r3
 8007c68:	f1b9 0f00 	cmp.w	r9, #0
 8007c6c:	dc35      	bgt.n	8007cda <_printf_float+0x3ae>
 8007c6e:	f04f 0800 	mov.w	r8, #0
 8007c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c76:	f104 0a1a 	add.w	sl, r4, #26
 8007c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c7e:	1a9b      	subs	r3, r3, r2
 8007c80:	eba3 0309 	sub.w	r3, r3, r9
 8007c84:	4543      	cmp	r3, r8
 8007c86:	f77f af79 	ble.w	8007b7c <_printf_float+0x250>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	f43f aeaa 	beq.w	80079ee <_printf_float+0xc2>
 8007c9a:	f108 0801 	add.w	r8, r8, #1
 8007c9e:	e7ec      	b.n	8007c7a <_printf_float+0x34e>
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	d1c0      	bne.n	8007c30 <_printf_float+0x304>
 8007cae:	e69e      	b.n	80079ee <_printf_float+0xc2>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	9205      	str	r2, [sp, #20]
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	f43f ae97 	beq.w	80079ee <_printf_float+0xc2>
 8007cc0:	9a05      	ldr	r2, [sp, #20]
 8007cc2:	f10b 0b01 	add.w	fp, fp, #1
 8007cc6:	e7b9      	b.n	8007c3c <_printf_float+0x310>
 8007cc8:	ee18 3a10 	vmov	r3, s16
 8007ccc:	4652      	mov	r2, sl
 8007cce:	4631      	mov	r1, r6
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b8      	blx	r7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d1be      	bne.n	8007c56 <_printf_float+0x32a>
 8007cd8:	e689      	b.n	80079ee <_printf_float+0xc2>
 8007cda:	9a05      	ldr	r2, [sp, #20]
 8007cdc:	464b      	mov	r3, r9
 8007cde:	4442      	add	r2, r8
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d1c1      	bne.n	8007c6e <_printf_float+0x342>
 8007cea:	e680      	b.n	80079ee <_printf_float+0xc2>
 8007cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cee:	2a01      	cmp	r2, #1
 8007cf0:	dc01      	bgt.n	8007cf6 <_printf_float+0x3ca>
 8007cf2:	07db      	lsls	r3, r3, #31
 8007cf4:	d538      	bpl.n	8007d68 <_printf_float+0x43c>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	f43f ae74 	beq.w	80079ee <_printf_float+0xc2>
 8007d06:	ee18 3a10 	vmov	r3, s16
 8007d0a:	4652      	mov	r2, sl
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4628      	mov	r0, r5
 8007d10:	47b8      	blx	r7
 8007d12:	3001      	adds	r0, #1
 8007d14:	f43f ae6b 	beq.w	80079ee <_printf_float+0xc2>
 8007d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f7f8 fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d24:	b9d8      	cbnz	r0, 8007d5e <_printf_float+0x432>
 8007d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d28:	f108 0201 	add.w	r2, r8, #1
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4628      	mov	r0, r5
 8007d32:	47b8      	blx	r7
 8007d34:	3001      	adds	r0, #1
 8007d36:	d10e      	bne.n	8007d56 <_printf_float+0x42a>
 8007d38:	e659      	b.n	80079ee <_printf_float+0xc2>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	f43f ae52 	beq.w	80079ee <_printf_float+0xc2>
 8007d4a:	f108 0801 	add.w	r8, r8, #1
 8007d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d50:	3b01      	subs	r3, #1
 8007d52:	4543      	cmp	r3, r8
 8007d54:	dcf1      	bgt.n	8007d3a <_printf_float+0x40e>
 8007d56:	464b      	mov	r3, r9
 8007d58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d5c:	e6dc      	b.n	8007b18 <_printf_float+0x1ec>
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	f104 0a1a 	add.w	sl, r4, #26
 8007d66:	e7f2      	b.n	8007d4e <_printf_float+0x422>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	e7df      	b.n	8007d2e <_printf_float+0x402>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	464a      	mov	r2, r9
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f ae38 	beq.w	80079ee <_printf_float+0xc2>
 8007d7e:	f108 0801 	add.w	r8, r8, #1
 8007d82:	68e3      	ldr	r3, [r4, #12]
 8007d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d86:	1a5b      	subs	r3, r3, r1
 8007d88:	4543      	cmp	r3, r8
 8007d8a:	dcf0      	bgt.n	8007d6e <_printf_float+0x442>
 8007d8c:	e6fa      	b.n	8007b84 <_printf_float+0x258>
 8007d8e:	f04f 0800 	mov.w	r8, #0
 8007d92:	f104 0919 	add.w	r9, r4, #25
 8007d96:	e7f4      	b.n	8007d82 <_printf_float+0x456>

08007d98 <_printf_common>:
 8007d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	4699      	mov	r9, r3
 8007da0:	688a      	ldr	r2, [r1, #8]
 8007da2:	690b      	ldr	r3, [r1, #16]
 8007da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007da8:	4293      	cmp	r3, r2
 8007daa:	bfb8      	it	lt
 8007dac:	4613      	movlt	r3, r2
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007db4:	4607      	mov	r7, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	b10a      	cbz	r2, 8007dbe <_printf_common+0x26>
 8007dba:	3301      	adds	r3, #1
 8007dbc:	6033      	str	r3, [r6, #0]
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	0699      	lsls	r1, r3, #26
 8007dc2:	bf42      	ittt	mi
 8007dc4:	6833      	ldrmi	r3, [r6, #0]
 8007dc6:	3302      	addmi	r3, #2
 8007dc8:	6033      	strmi	r3, [r6, #0]
 8007dca:	6825      	ldr	r5, [r4, #0]
 8007dcc:	f015 0506 	ands.w	r5, r5, #6
 8007dd0:	d106      	bne.n	8007de0 <_printf_common+0x48>
 8007dd2:	f104 0a19 	add.w	sl, r4, #25
 8007dd6:	68e3      	ldr	r3, [r4, #12]
 8007dd8:	6832      	ldr	r2, [r6, #0]
 8007dda:	1a9b      	subs	r3, r3, r2
 8007ddc:	42ab      	cmp	r3, r5
 8007dde:	dc26      	bgt.n	8007e2e <_printf_common+0x96>
 8007de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007de4:	1e13      	subs	r3, r2, #0
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	bf18      	it	ne
 8007dea:	2301      	movne	r3, #1
 8007dec:	0692      	lsls	r2, r2, #26
 8007dee:	d42b      	bmi.n	8007e48 <_printf_common+0xb0>
 8007df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007df4:	4649      	mov	r1, r9
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c0      	blx	r8
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d01e      	beq.n	8007e3c <_printf_common+0xa4>
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	68e5      	ldr	r5, [r4, #12]
 8007e02:	6832      	ldr	r2, [r6, #0]
 8007e04:	f003 0306 	and.w	r3, r3, #6
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	bf08      	it	eq
 8007e0c:	1aad      	subeq	r5, r5, r2
 8007e0e:	68a3      	ldr	r3, [r4, #8]
 8007e10:	6922      	ldr	r2, [r4, #16]
 8007e12:	bf0c      	ite	eq
 8007e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e18:	2500      	movne	r5, #0
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bfc4      	itt	gt
 8007e1e:	1a9b      	subgt	r3, r3, r2
 8007e20:	18ed      	addgt	r5, r5, r3
 8007e22:	2600      	movs	r6, #0
 8007e24:	341a      	adds	r4, #26
 8007e26:	42b5      	cmp	r5, r6
 8007e28:	d11a      	bne.n	8007e60 <_printf_common+0xc8>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e008      	b.n	8007e40 <_printf_common+0xa8>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4652      	mov	r2, sl
 8007e32:	4649      	mov	r1, r9
 8007e34:	4638      	mov	r0, r7
 8007e36:	47c0      	blx	r8
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d103      	bne.n	8007e44 <_printf_common+0xac>
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e44:	3501      	adds	r5, #1
 8007e46:	e7c6      	b.n	8007dd6 <_printf_common+0x3e>
 8007e48:	18e1      	adds	r1, r4, r3
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	2030      	movs	r0, #48	; 0x30
 8007e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e52:	4422      	add	r2, r4
 8007e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	e7c7      	b.n	8007df0 <_printf_common+0x58>
 8007e60:	2301      	movs	r3, #1
 8007e62:	4622      	mov	r2, r4
 8007e64:	4649      	mov	r1, r9
 8007e66:	4638      	mov	r0, r7
 8007e68:	47c0      	blx	r8
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d0e6      	beq.n	8007e3c <_printf_common+0xa4>
 8007e6e:	3601      	adds	r6, #1
 8007e70:	e7d9      	b.n	8007e26 <_printf_common+0x8e>
	...

08007e74 <_printf_i>:
 8007e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	460c      	mov	r4, r1
 8007e7a:	4691      	mov	r9, r2
 8007e7c:	7e27      	ldrb	r7, [r4, #24]
 8007e7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e80:	2f78      	cmp	r7, #120	; 0x78
 8007e82:	4680      	mov	r8, r0
 8007e84:	469a      	mov	sl, r3
 8007e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e8a:	d807      	bhi.n	8007e9c <_printf_i+0x28>
 8007e8c:	2f62      	cmp	r7, #98	; 0x62
 8007e8e:	d80a      	bhi.n	8007ea6 <_printf_i+0x32>
 8007e90:	2f00      	cmp	r7, #0
 8007e92:	f000 80d8 	beq.w	8008046 <_printf_i+0x1d2>
 8007e96:	2f58      	cmp	r7, #88	; 0x58
 8007e98:	f000 80a3 	beq.w	8007fe2 <_printf_i+0x16e>
 8007e9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ea4:	e03a      	b.n	8007f1c <_printf_i+0xa8>
 8007ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007eaa:	2b15      	cmp	r3, #21
 8007eac:	d8f6      	bhi.n	8007e9c <_printf_i+0x28>
 8007eae:	a001      	add	r0, pc, #4	; (adr r0, 8007eb4 <_printf_i+0x40>)
 8007eb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007eb4:	08007f0d 	.word	0x08007f0d
 8007eb8:	08007f21 	.word	0x08007f21
 8007ebc:	08007e9d 	.word	0x08007e9d
 8007ec0:	08007e9d 	.word	0x08007e9d
 8007ec4:	08007e9d 	.word	0x08007e9d
 8007ec8:	08007e9d 	.word	0x08007e9d
 8007ecc:	08007f21 	.word	0x08007f21
 8007ed0:	08007e9d 	.word	0x08007e9d
 8007ed4:	08007e9d 	.word	0x08007e9d
 8007ed8:	08007e9d 	.word	0x08007e9d
 8007edc:	08007e9d 	.word	0x08007e9d
 8007ee0:	0800802d 	.word	0x0800802d
 8007ee4:	08007f51 	.word	0x08007f51
 8007ee8:	0800800f 	.word	0x0800800f
 8007eec:	08007e9d 	.word	0x08007e9d
 8007ef0:	08007e9d 	.word	0x08007e9d
 8007ef4:	0800804f 	.word	0x0800804f
 8007ef8:	08007e9d 	.word	0x08007e9d
 8007efc:	08007f51 	.word	0x08007f51
 8007f00:	08007e9d 	.word	0x08007e9d
 8007f04:	08007e9d 	.word	0x08007e9d
 8007f08:	08008017 	.word	0x08008017
 8007f0c:	680b      	ldr	r3, [r1, #0]
 8007f0e:	1d1a      	adds	r2, r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	600a      	str	r2, [r1, #0]
 8007f14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e0a3      	b.n	8008068 <_printf_i+0x1f4>
 8007f20:	6825      	ldr	r5, [r4, #0]
 8007f22:	6808      	ldr	r0, [r1, #0]
 8007f24:	062e      	lsls	r6, r5, #24
 8007f26:	f100 0304 	add.w	r3, r0, #4
 8007f2a:	d50a      	bpl.n	8007f42 <_printf_i+0xce>
 8007f2c:	6805      	ldr	r5, [r0, #0]
 8007f2e:	600b      	str	r3, [r1, #0]
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	da03      	bge.n	8007f3c <_printf_i+0xc8>
 8007f34:	232d      	movs	r3, #45	; 0x2d
 8007f36:	426d      	negs	r5, r5
 8007f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3c:	485e      	ldr	r0, [pc, #376]	; (80080b8 <_printf_i+0x244>)
 8007f3e:	230a      	movs	r3, #10
 8007f40:	e019      	b.n	8007f76 <_printf_i+0x102>
 8007f42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f46:	6805      	ldr	r5, [r0, #0]
 8007f48:	600b      	str	r3, [r1, #0]
 8007f4a:	bf18      	it	ne
 8007f4c:	b22d      	sxthne	r5, r5
 8007f4e:	e7ef      	b.n	8007f30 <_printf_i+0xbc>
 8007f50:	680b      	ldr	r3, [r1, #0]
 8007f52:	6825      	ldr	r5, [r4, #0]
 8007f54:	1d18      	adds	r0, r3, #4
 8007f56:	6008      	str	r0, [r1, #0]
 8007f58:	0628      	lsls	r0, r5, #24
 8007f5a:	d501      	bpl.n	8007f60 <_printf_i+0xec>
 8007f5c:	681d      	ldr	r5, [r3, #0]
 8007f5e:	e002      	b.n	8007f66 <_printf_i+0xf2>
 8007f60:	0669      	lsls	r1, r5, #25
 8007f62:	d5fb      	bpl.n	8007f5c <_printf_i+0xe8>
 8007f64:	881d      	ldrh	r5, [r3, #0]
 8007f66:	4854      	ldr	r0, [pc, #336]	; (80080b8 <_printf_i+0x244>)
 8007f68:	2f6f      	cmp	r7, #111	; 0x6f
 8007f6a:	bf0c      	ite	eq
 8007f6c:	2308      	moveq	r3, #8
 8007f6e:	230a      	movne	r3, #10
 8007f70:	2100      	movs	r1, #0
 8007f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f76:	6866      	ldr	r6, [r4, #4]
 8007f78:	60a6      	str	r6, [r4, #8]
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	bfa2      	ittt	ge
 8007f7e:	6821      	ldrge	r1, [r4, #0]
 8007f80:	f021 0104 	bicge.w	r1, r1, #4
 8007f84:	6021      	strge	r1, [r4, #0]
 8007f86:	b90d      	cbnz	r5, 8007f8c <_printf_i+0x118>
 8007f88:	2e00      	cmp	r6, #0
 8007f8a:	d04d      	beq.n	8008028 <_printf_i+0x1b4>
 8007f8c:	4616      	mov	r6, r2
 8007f8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f92:	fb03 5711 	mls	r7, r3, r1, r5
 8007f96:	5dc7      	ldrb	r7, [r0, r7]
 8007f98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f9c:	462f      	mov	r7, r5
 8007f9e:	42bb      	cmp	r3, r7
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	d9f4      	bls.n	8007f8e <_printf_i+0x11a>
 8007fa4:	2b08      	cmp	r3, #8
 8007fa6:	d10b      	bne.n	8007fc0 <_printf_i+0x14c>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	07df      	lsls	r7, r3, #31
 8007fac:	d508      	bpl.n	8007fc0 <_printf_i+0x14c>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	6861      	ldr	r1, [r4, #4]
 8007fb2:	4299      	cmp	r1, r3
 8007fb4:	bfde      	ittt	le
 8007fb6:	2330      	movle	r3, #48	; 0x30
 8007fb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fbc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007fc0:	1b92      	subs	r2, r2, r6
 8007fc2:	6122      	str	r2, [r4, #16]
 8007fc4:	f8cd a000 	str.w	sl, [sp]
 8007fc8:	464b      	mov	r3, r9
 8007fca:	aa03      	add	r2, sp, #12
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4640      	mov	r0, r8
 8007fd0:	f7ff fee2 	bl	8007d98 <_printf_common>
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d14c      	bne.n	8008072 <_printf_i+0x1fe>
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fdc:	b004      	add	sp, #16
 8007fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe2:	4835      	ldr	r0, [pc, #212]	; (80080b8 <_printf_i+0x244>)
 8007fe4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	680e      	ldr	r6, [r1, #0]
 8007fec:	061f      	lsls	r7, r3, #24
 8007fee:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ff2:	600e      	str	r6, [r1, #0]
 8007ff4:	d514      	bpl.n	8008020 <_printf_i+0x1ac>
 8007ff6:	07d9      	lsls	r1, r3, #31
 8007ff8:	bf44      	itt	mi
 8007ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8007ffe:	6023      	strmi	r3, [r4, #0]
 8008000:	b91d      	cbnz	r5, 800800a <_printf_i+0x196>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	f023 0320 	bic.w	r3, r3, #32
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	2310      	movs	r3, #16
 800800c:	e7b0      	b.n	8007f70 <_printf_i+0xfc>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	f043 0320 	orr.w	r3, r3, #32
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	2378      	movs	r3, #120	; 0x78
 8008018:	4828      	ldr	r0, [pc, #160]	; (80080bc <_printf_i+0x248>)
 800801a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800801e:	e7e3      	b.n	8007fe8 <_printf_i+0x174>
 8008020:	065e      	lsls	r6, r3, #25
 8008022:	bf48      	it	mi
 8008024:	b2ad      	uxthmi	r5, r5
 8008026:	e7e6      	b.n	8007ff6 <_printf_i+0x182>
 8008028:	4616      	mov	r6, r2
 800802a:	e7bb      	b.n	8007fa4 <_printf_i+0x130>
 800802c:	680b      	ldr	r3, [r1, #0]
 800802e:	6826      	ldr	r6, [r4, #0]
 8008030:	6960      	ldr	r0, [r4, #20]
 8008032:	1d1d      	adds	r5, r3, #4
 8008034:	600d      	str	r5, [r1, #0]
 8008036:	0635      	lsls	r5, r6, #24
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	d501      	bpl.n	8008040 <_printf_i+0x1cc>
 800803c:	6018      	str	r0, [r3, #0]
 800803e:	e002      	b.n	8008046 <_printf_i+0x1d2>
 8008040:	0671      	lsls	r1, r6, #25
 8008042:	d5fb      	bpl.n	800803c <_printf_i+0x1c8>
 8008044:	8018      	strh	r0, [r3, #0]
 8008046:	2300      	movs	r3, #0
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	4616      	mov	r6, r2
 800804c:	e7ba      	b.n	8007fc4 <_printf_i+0x150>
 800804e:	680b      	ldr	r3, [r1, #0]
 8008050:	1d1a      	adds	r2, r3, #4
 8008052:	600a      	str	r2, [r1, #0]
 8008054:	681e      	ldr	r6, [r3, #0]
 8008056:	6862      	ldr	r2, [r4, #4]
 8008058:	2100      	movs	r1, #0
 800805a:	4630      	mov	r0, r6
 800805c:	f7f8 f8c0 	bl	80001e0 <memchr>
 8008060:	b108      	cbz	r0, 8008066 <_printf_i+0x1f2>
 8008062:	1b80      	subs	r0, r0, r6
 8008064:	6060      	str	r0, [r4, #4]
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	6123      	str	r3, [r4, #16]
 800806a:	2300      	movs	r3, #0
 800806c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008070:	e7a8      	b.n	8007fc4 <_printf_i+0x150>
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	4632      	mov	r2, r6
 8008076:	4649      	mov	r1, r9
 8008078:	4640      	mov	r0, r8
 800807a:	47d0      	blx	sl
 800807c:	3001      	adds	r0, #1
 800807e:	d0ab      	beq.n	8007fd8 <_printf_i+0x164>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	079b      	lsls	r3, r3, #30
 8008084:	d413      	bmi.n	80080ae <_printf_i+0x23a>
 8008086:	68e0      	ldr	r0, [r4, #12]
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	4298      	cmp	r0, r3
 800808c:	bfb8      	it	lt
 800808e:	4618      	movlt	r0, r3
 8008090:	e7a4      	b.n	8007fdc <_printf_i+0x168>
 8008092:	2301      	movs	r3, #1
 8008094:	4632      	mov	r2, r6
 8008096:	4649      	mov	r1, r9
 8008098:	4640      	mov	r0, r8
 800809a:	47d0      	blx	sl
 800809c:	3001      	adds	r0, #1
 800809e:	d09b      	beq.n	8007fd8 <_printf_i+0x164>
 80080a0:	3501      	adds	r5, #1
 80080a2:	68e3      	ldr	r3, [r4, #12]
 80080a4:	9903      	ldr	r1, [sp, #12]
 80080a6:	1a5b      	subs	r3, r3, r1
 80080a8:	42ab      	cmp	r3, r5
 80080aa:	dcf2      	bgt.n	8008092 <_printf_i+0x21e>
 80080ac:	e7eb      	b.n	8008086 <_printf_i+0x212>
 80080ae:	2500      	movs	r5, #0
 80080b0:	f104 0619 	add.w	r6, r4, #25
 80080b4:	e7f5      	b.n	80080a2 <_printf_i+0x22e>
 80080b6:	bf00      	nop
 80080b8:	0800a29e 	.word	0x0800a29e
 80080bc:	0800a2af 	.word	0x0800a2af

080080c0 <iprintf>:
 80080c0:	b40f      	push	{r0, r1, r2, r3}
 80080c2:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <iprintf+0x2c>)
 80080c4:	b513      	push	{r0, r1, r4, lr}
 80080c6:	681c      	ldr	r4, [r3, #0]
 80080c8:	b124      	cbz	r4, 80080d4 <iprintf+0x14>
 80080ca:	69a3      	ldr	r3, [r4, #24]
 80080cc:	b913      	cbnz	r3, 80080d4 <iprintf+0x14>
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 fede 	bl	8008e90 <__sinit>
 80080d4:	ab05      	add	r3, sp, #20
 80080d6:	9a04      	ldr	r2, [sp, #16]
 80080d8:	68a1      	ldr	r1, [r4, #8]
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	4620      	mov	r0, r4
 80080de:	f001 fbe7 	bl	80098b0 <_vfiprintf_r>
 80080e2:	b002      	add	sp, #8
 80080e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e8:	b004      	add	sp, #16
 80080ea:	4770      	bx	lr
 80080ec:	20000010 	.word	0x20000010

080080f0 <quorem>:
 80080f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	6903      	ldr	r3, [r0, #16]
 80080f6:	690c      	ldr	r4, [r1, #16]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	4607      	mov	r7, r0
 80080fc:	f2c0 8081 	blt.w	8008202 <quorem+0x112>
 8008100:	3c01      	subs	r4, #1
 8008102:	f101 0814 	add.w	r8, r1, #20
 8008106:	f100 0514 	add.w	r5, r0, #20
 800810a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008118:	3301      	adds	r3, #1
 800811a:	429a      	cmp	r2, r3
 800811c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008120:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008124:	fbb2 f6f3 	udiv	r6, r2, r3
 8008128:	d331      	bcc.n	800818e <quorem+0x9e>
 800812a:	f04f 0e00 	mov.w	lr, #0
 800812e:	4640      	mov	r0, r8
 8008130:	46ac      	mov	ip, r5
 8008132:	46f2      	mov	sl, lr
 8008134:	f850 2b04 	ldr.w	r2, [r0], #4
 8008138:	b293      	uxth	r3, r2
 800813a:	fb06 e303 	mla	r3, r6, r3, lr
 800813e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008142:	b29b      	uxth	r3, r3
 8008144:	ebaa 0303 	sub.w	r3, sl, r3
 8008148:	0c12      	lsrs	r2, r2, #16
 800814a:	f8dc a000 	ldr.w	sl, [ip]
 800814e:	fb06 e202 	mla	r2, r6, r2, lr
 8008152:	fa13 f38a 	uxtah	r3, r3, sl
 8008156:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800815a:	fa1f fa82 	uxth.w	sl, r2
 800815e:	f8dc 2000 	ldr.w	r2, [ip]
 8008162:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008166:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800816a:	b29b      	uxth	r3, r3
 800816c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008170:	4581      	cmp	r9, r0
 8008172:	f84c 3b04 	str.w	r3, [ip], #4
 8008176:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800817a:	d2db      	bcs.n	8008134 <quorem+0x44>
 800817c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008180:	b92b      	cbnz	r3, 800818e <quorem+0x9e>
 8008182:	9b01      	ldr	r3, [sp, #4]
 8008184:	3b04      	subs	r3, #4
 8008186:	429d      	cmp	r5, r3
 8008188:	461a      	mov	r2, r3
 800818a:	d32e      	bcc.n	80081ea <quorem+0xfa>
 800818c:	613c      	str	r4, [r7, #16]
 800818e:	4638      	mov	r0, r7
 8008190:	f001 f9aa 	bl	80094e8 <__mcmp>
 8008194:	2800      	cmp	r0, #0
 8008196:	db24      	blt.n	80081e2 <quorem+0xf2>
 8008198:	3601      	adds	r6, #1
 800819a:	4628      	mov	r0, r5
 800819c:	f04f 0c00 	mov.w	ip, #0
 80081a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80081a4:	f8d0 e000 	ldr.w	lr, [r0]
 80081a8:	b293      	uxth	r3, r2
 80081aa:	ebac 0303 	sub.w	r3, ip, r3
 80081ae:	0c12      	lsrs	r2, r2, #16
 80081b0:	fa13 f38e 	uxtah	r3, r3, lr
 80081b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081bc:	b29b      	uxth	r3, r3
 80081be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081c2:	45c1      	cmp	r9, r8
 80081c4:	f840 3b04 	str.w	r3, [r0], #4
 80081c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081cc:	d2e8      	bcs.n	80081a0 <quorem+0xb0>
 80081ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081d6:	b922      	cbnz	r2, 80081e2 <quorem+0xf2>
 80081d8:	3b04      	subs	r3, #4
 80081da:	429d      	cmp	r5, r3
 80081dc:	461a      	mov	r2, r3
 80081de:	d30a      	bcc.n	80081f6 <quorem+0x106>
 80081e0:	613c      	str	r4, [r7, #16]
 80081e2:	4630      	mov	r0, r6
 80081e4:	b003      	add	sp, #12
 80081e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	3b04      	subs	r3, #4
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	d1cc      	bne.n	800818c <quorem+0x9c>
 80081f2:	3c01      	subs	r4, #1
 80081f4:	e7c7      	b.n	8008186 <quorem+0x96>
 80081f6:	6812      	ldr	r2, [r2, #0]
 80081f8:	3b04      	subs	r3, #4
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	d1f0      	bne.n	80081e0 <quorem+0xf0>
 80081fe:	3c01      	subs	r4, #1
 8008200:	e7eb      	b.n	80081da <quorem+0xea>
 8008202:	2000      	movs	r0, #0
 8008204:	e7ee      	b.n	80081e4 <quorem+0xf4>
	...

08008208 <_dtoa_r>:
 8008208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	ed2d 8b02 	vpush	{d8}
 8008210:	ec57 6b10 	vmov	r6, r7, d0
 8008214:	b095      	sub	sp, #84	; 0x54
 8008216:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008218:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800821c:	9105      	str	r1, [sp, #20]
 800821e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008222:	4604      	mov	r4, r0
 8008224:	9209      	str	r2, [sp, #36]	; 0x24
 8008226:	930f      	str	r3, [sp, #60]	; 0x3c
 8008228:	b975      	cbnz	r5, 8008248 <_dtoa_r+0x40>
 800822a:	2010      	movs	r0, #16
 800822c:	f000 fed6 	bl	8008fdc <malloc>
 8008230:	4602      	mov	r2, r0
 8008232:	6260      	str	r0, [r4, #36]	; 0x24
 8008234:	b920      	cbnz	r0, 8008240 <_dtoa_r+0x38>
 8008236:	4bb2      	ldr	r3, [pc, #712]	; (8008500 <_dtoa_r+0x2f8>)
 8008238:	21ea      	movs	r1, #234	; 0xea
 800823a:	48b2      	ldr	r0, [pc, #712]	; (8008504 <_dtoa_r+0x2fc>)
 800823c:	f001 fd8e 	bl	8009d5c <__assert_func>
 8008240:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008244:	6005      	str	r5, [r0, #0]
 8008246:	60c5      	str	r5, [r0, #12]
 8008248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800824a:	6819      	ldr	r1, [r3, #0]
 800824c:	b151      	cbz	r1, 8008264 <_dtoa_r+0x5c>
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	604a      	str	r2, [r1, #4]
 8008252:	2301      	movs	r3, #1
 8008254:	4093      	lsls	r3, r2
 8008256:	608b      	str	r3, [r1, #8]
 8008258:	4620      	mov	r0, r4
 800825a:	f000 ff07 	bl	800906c <_Bfree>
 800825e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	1e3b      	subs	r3, r7, #0
 8008266:	bfb9      	ittee	lt
 8008268:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800826c:	9303      	strlt	r3, [sp, #12]
 800826e:	2300      	movge	r3, #0
 8008270:	f8c8 3000 	strge.w	r3, [r8]
 8008274:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008278:	4ba3      	ldr	r3, [pc, #652]	; (8008508 <_dtoa_r+0x300>)
 800827a:	bfbc      	itt	lt
 800827c:	2201      	movlt	r2, #1
 800827e:	f8c8 2000 	strlt.w	r2, [r8]
 8008282:	ea33 0309 	bics.w	r3, r3, r9
 8008286:	d11b      	bne.n	80082c0 <_dtoa_r+0xb8>
 8008288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800828a:	f242 730f 	movw	r3, #9999	; 0x270f
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008294:	4333      	orrs	r3, r6
 8008296:	f000 857a 	beq.w	8008d8e <_dtoa_r+0xb86>
 800829a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800829c:	b963      	cbnz	r3, 80082b8 <_dtoa_r+0xb0>
 800829e:	4b9b      	ldr	r3, [pc, #620]	; (800850c <_dtoa_r+0x304>)
 80082a0:	e024      	b.n	80082ec <_dtoa_r+0xe4>
 80082a2:	4b9b      	ldr	r3, [pc, #620]	; (8008510 <_dtoa_r+0x308>)
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	3308      	adds	r3, #8
 80082a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	9800      	ldr	r0, [sp, #0]
 80082ae:	b015      	add	sp, #84	; 0x54
 80082b0:	ecbd 8b02 	vpop	{d8}
 80082b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b8:	4b94      	ldr	r3, [pc, #592]	; (800850c <_dtoa_r+0x304>)
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	3303      	adds	r3, #3
 80082be:	e7f3      	b.n	80082a8 <_dtoa_r+0xa0>
 80082c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	ec51 0b17 	vmov	r0, r1, d7
 80082ca:	2300      	movs	r3, #0
 80082cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80082d0:	f7f8 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d4:	4680      	mov	r8, r0
 80082d6:	b158      	cbz	r0, 80082f0 <_dtoa_r+0xe8>
 80082d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082da:	2301      	movs	r3, #1
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8551 	beq.w	8008d88 <_dtoa_r+0xb80>
 80082e6:	488b      	ldr	r0, [pc, #556]	; (8008514 <_dtoa_r+0x30c>)
 80082e8:	6018      	str	r0, [r3, #0]
 80082ea:	1e43      	subs	r3, r0, #1
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	e7dd      	b.n	80082ac <_dtoa_r+0xa4>
 80082f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082f4:	aa12      	add	r2, sp, #72	; 0x48
 80082f6:	a913      	add	r1, sp, #76	; 0x4c
 80082f8:	4620      	mov	r0, r4
 80082fa:	f001 f999 	bl	8009630 <__d2b>
 80082fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008302:	4683      	mov	fp, r0
 8008304:	2d00      	cmp	r5, #0
 8008306:	d07c      	beq.n	8008402 <_dtoa_r+0x1fa>
 8008308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800830e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008312:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008316:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800831a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800831e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008322:	4b7d      	ldr	r3, [pc, #500]	; (8008518 <_dtoa_r+0x310>)
 8008324:	2200      	movs	r2, #0
 8008326:	4630      	mov	r0, r6
 8008328:	4639      	mov	r1, r7
 800832a:	f7f7 ffad 	bl	8000288 <__aeabi_dsub>
 800832e:	a36e      	add	r3, pc, #440	; (adr r3, 80084e8 <_dtoa_r+0x2e0>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f7f8 f960 	bl	80005f8 <__aeabi_dmul>
 8008338:	a36d      	add	r3, pc, #436	; (adr r3, 80084f0 <_dtoa_r+0x2e8>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f7 ffa5 	bl	800028c <__adddf3>
 8008342:	4606      	mov	r6, r0
 8008344:	4628      	mov	r0, r5
 8008346:	460f      	mov	r7, r1
 8008348:	f7f8 f8ec 	bl	8000524 <__aeabi_i2d>
 800834c:	a36a      	add	r3, pc, #424	; (adr r3, 80084f8 <_dtoa_r+0x2f0>)
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f7f8 f951 	bl	80005f8 <__aeabi_dmul>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f7 ff95 	bl	800028c <__adddf3>
 8008362:	4606      	mov	r6, r0
 8008364:	460f      	mov	r7, r1
 8008366:	f7f8 fbf7 	bl	8000b58 <__aeabi_d2iz>
 800836a:	2200      	movs	r2, #0
 800836c:	4682      	mov	sl, r0
 800836e:	2300      	movs	r3, #0
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f8 fbb2 	bl	8000adc <__aeabi_dcmplt>
 8008378:	b148      	cbz	r0, 800838e <_dtoa_r+0x186>
 800837a:	4650      	mov	r0, sl
 800837c:	f7f8 f8d2 	bl	8000524 <__aeabi_i2d>
 8008380:	4632      	mov	r2, r6
 8008382:	463b      	mov	r3, r7
 8008384:	f7f8 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008388:	b908      	cbnz	r0, 800838e <_dtoa_r+0x186>
 800838a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800838e:	f1ba 0f16 	cmp.w	sl, #22
 8008392:	d854      	bhi.n	800843e <_dtoa_r+0x236>
 8008394:	4b61      	ldr	r3, [pc, #388]	; (800851c <_dtoa_r+0x314>)
 8008396:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083a2:	f7f8 fb9b 	bl	8000adc <__aeabi_dcmplt>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d04b      	beq.n	8008442 <_dtoa_r+0x23a>
 80083aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80083ae:	2300      	movs	r3, #0
 80083b0:	930e      	str	r3, [sp, #56]	; 0x38
 80083b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083b4:	1b5d      	subs	r5, r3, r5
 80083b6:	1e6b      	subs	r3, r5, #1
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	bf43      	ittte	mi
 80083bc:	2300      	movmi	r3, #0
 80083be:	f1c5 0801 	rsbmi	r8, r5, #1
 80083c2:	9304      	strmi	r3, [sp, #16]
 80083c4:	f04f 0800 	movpl.w	r8, #0
 80083c8:	f1ba 0f00 	cmp.w	sl, #0
 80083cc:	db3b      	blt.n	8008446 <_dtoa_r+0x23e>
 80083ce:	9b04      	ldr	r3, [sp, #16]
 80083d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80083d4:	4453      	add	r3, sl
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	2300      	movs	r3, #0
 80083da:	9306      	str	r3, [sp, #24]
 80083dc:	9b05      	ldr	r3, [sp, #20]
 80083de:	2b09      	cmp	r3, #9
 80083e0:	d869      	bhi.n	80084b6 <_dtoa_r+0x2ae>
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	bfc4      	itt	gt
 80083e6:	3b04      	subgt	r3, #4
 80083e8:	9305      	strgt	r3, [sp, #20]
 80083ea:	9b05      	ldr	r3, [sp, #20]
 80083ec:	f1a3 0302 	sub.w	r3, r3, #2
 80083f0:	bfcc      	ite	gt
 80083f2:	2500      	movgt	r5, #0
 80083f4:	2501      	movle	r5, #1
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d869      	bhi.n	80084ce <_dtoa_r+0x2c6>
 80083fa:	e8df f003 	tbb	[pc, r3]
 80083fe:	4e2c      	.short	0x4e2c
 8008400:	5a4c      	.short	0x5a4c
 8008402:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008406:	441d      	add	r5, r3
 8008408:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800840c:	2b20      	cmp	r3, #32
 800840e:	bfc1      	itttt	gt
 8008410:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008414:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008418:	fa09 f303 	lslgt.w	r3, r9, r3
 800841c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008420:	bfda      	itte	le
 8008422:	f1c3 0320 	rsble	r3, r3, #32
 8008426:	fa06 f003 	lslle.w	r0, r6, r3
 800842a:	4318      	orrgt	r0, r3
 800842c:	f7f8 f86a 	bl	8000504 <__aeabi_ui2d>
 8008430:	2301      	movs	r3, #1
 8008432:	4606      	mov	r6, r0
 8008434:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008438:	3d01      	subs	r5, #1
 800843a:	9310      	str	r3, [sp, #64]	; 0x40
 800843c:	e771      	b.n	8008322 <_dtoa_r+0x11a>
 800843e:	2301      	movs	r3, #1
 8008440:	e7b6      	b.n	80083b0 <_dtoa_r+0x1a8>
 8008442:	900e      	str	r0, [sp, #56]	; 0x38
 8008444:	e7b5      	b.n	80083b2 <_dtoa_r+0x1aa>
 8008446:	f1ca 0300 	rsb	r3, sl, #0
 800844a:	9306      	str	r3, [sp, #24]
 800844c:	2300      	movs	r3, #0
 800844e:	eba8 080a 	sub.w	r8, r8, sl
 8008452:	930d      	str	r3, [sp, #52]	; 0x34
 8008454:	e7c2      	b.n	80083dc <_dtoa_r+0x1d4>
 8008456:	2300      	movs	r3, #0
 8008458:	9308      	str	r3, [sp, #32]
 800845a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845c:	2b00      	cmp	r3, #0
 800845e:	dc39      	bgt.n	80084d4 <_dtoa_r+0x2cc>
 8008460:	f04f 0901 	mov.w	r9, #1
 8008464:	f8cd 9004 	str.w	r9, [sp, #4]
 8008468:	464b      	mov	r3, r9
 800846a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800846e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008470:	2200      	movs	r2, #0
 8008472:	6042      	str	r2, [r0, #4]
 8008474:	2204      	movs	r2, #4
 8008476:	f102 0614 	add.w	r6, r2, #20
 800847a:	429e      	cmp	r6, r3
 800847c:	6841      	ldr	r1, [r0, #4]
 800847e:	d92f      	bls.n	80084e0 <_dtoa_r+0x2d8>
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fdb3 	bl	8008fec <_Balloc>
 8008486:	9000      	str	r0, [sp, #0]
 8008488:	2800      	cmp	r0, #0
 800848a:	d14b      	bne.n	8008524 <_dtoa_r+0x31c>
 800848c:	4b24      	ldr	r3, [pc, #144]	; (8008520 <_dtoa_r+0x318>)
 800848e:	4602      	mov	r2, r0
 8008490:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008494:	e6d1      	b.n	800823a <_dtoa_r+0x32>
 8008496:	2301      	movs	r3, #1
 8008498:	e7de      	b.n	8008458 <_dtoa_r+0x250>
 800849a:	2300      	movs	r3, #0
 800849c:	9308      	str	r3, [sp, #32]
 800849e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a0:	eb0a 0903 	add.w	r9, sl, r3
 80084a4:	f109 0301 	add.w	r3, r9, #1
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	bfb8      	it	lt
 80084ae:	2301      	movlt	r3, #1
 80084b0:	e7dd      	b.n	800846e <_dtoa_r+0x266>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e7f2      	b.n	800849c <_dtoa_r+0x294>
 80084b6:	2501      	movs	r5, #1
 80084b8:	2300      	movs	r3, #0
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	9508      	str	r5, [sp, #32]
 80084be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80084c8:	2312      	movs	r3, #18
 80084ca:	9209      	str	r2, [sp, #36]	; 0x24
 80084cc:	e7cf      	b.n	800846e <_dtoa_r+0x266>
 80084ce:	2301      	movs	r3, #1
 80084d0:	9308      	str	r3, [sp, #32]
 80084d2:	e7f4      	b.n	80084be <_dtoa_r+0x2b6>
 80084d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80084d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80084dc:	464b      	mov	r3, r9
 80084de:	e7c6      	b.n	800846e <_dtoa_r+0x266>
 80084e0:	3101      	adds	r1, #1
 80084e2:	6041      	str	r1, [r0, #4]
 80084e4:	0052      	lsls	r2, r2, #1
 80084e6:	e7c6      	b.n	8008476 <_dtoa_r+0x26e>
 80084e8:	636f4361 	.word	0x636f4361
 80084ec:	3fd287a7 	.word	0x3fd287a7
 80084f0:	8b60c8b3 	.word	0x8b60c8b3
 80084f4:	3fc68a28 	.word	0x3fc68a28
 80084f8:	509f79fb 	.word	0x509f79fb
 80084fc:	3fd34413 	.word	0x3fd34413
 8008500:	0800a2cd 	.word	0x0800a2cd
 8008504:	0800a2e4 	.word	0x0800a2e4
 8008508:	7ff00000 	.word	0x7ff00000
 800850c:	0800a2c9 	.word	0x0800a2c9
 8008510:	0800a2c0 	.word	0x0800a2c0
 8008514:	0800a29d 	.word	0x0800a29d
 8008518:	3ff80000 	.word	0x3ff80000
 800851c:	0800a440 	.word	0x0800a440
 8008520:	0800a343 	.word	0x0800a343
 8008524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008526:	9a00      	ldr	r2, [sp, #0]
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	9b01      	ldr	r3, [sp, #4]
 800852c:	2b0e      	cmp	r3, #14
 800852e:	f200 80ad 	bhi.w	800868c <_dtoa_r+0x484>
 8008532:	2d00      	cmp	r5, #0
 8008534:	f000 80aa 	beq.w	800868c <_dtoa_r+0x484>
 8008538:	f1ba 0f00 	cmp.w	sl, #0
 800853c:	dd36      	ble.n	80085ac <_dtoa_r+0x3a4>
 800853e:	4ac3      	ldr	r2, [pc, #780]	; (800884c <_dtoa_r+0x644>)
 8008540:	f00a 030f 	and.w	r3, sl, #15
 8008544:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008548:	ed93 7b00 	vldr	d7, [r3]
 800854c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008550:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008554:	eeb0 8a47 	vmov.f32	s16, s14
 8008558:	eef0 8a67 	vmov.f32	s17, s15
 800855c:	d016      	beq.n	800858c <_dtoa_r+0x384>
 800855e:	4bbc      	ldr	r3, [pc, #752]	; (8008850 <_dtoa_r+0x648>)
 8008560:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008568:	f7f8 f970 	bl	800084c <__aeabi_ddiv>
 800856c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008570:	f007 070f 	and.w	r7, r7, #15
 8008574:	2503      	movs	r5, #3
 8008576:	4eb6      	ldr	r6, [pc, #728]	; (8008850 <_dtoa_r+0x648>)
 8008578:	b957      	cbnz	r7, 8008590 <_dtoa_r+0x388>
 800857a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800857e:	ec53 2b18 	vmov	r2, r3, d8
 8008582:	f7f8 f963 	bl	800084c <__aeabi_ddiv>
 8008586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858a:	e029      	b.n	80085e0 <_dtoa_r+0x3d8>
 800858c:	2502      	movs	r5, #2
 800858e:	e7f2      	b.n	8008576 <_dtoa_r+0x36e>
 8008590:	07f9      	lsls	r1, r7, #31
 8008592:	d508      	bpl.n	80085a6 <_dtoa_r+0x39e>
 8008594:	ec51 0b18 	vmov	r0, r1, d8
 8008598:	e9d6 2300 	ldrd	r2, r3, [r6]
 800859c:	f7f8 f82c 	bl	80005f8 <__aeabi_dmul>
 80085a0:	ec41 0b18 	vmov	d8, r0, r1
 80085a4:	3501      	adds	r5, #1
 80085a6:	107f      	asrs	r7, r7, #1
 80085a8:	3608      	adds	r6, #8
 80085aa:	e7e5      	b.n	8008578 <_dtoa_r+0x370>
 80085ac:	f000 80a6 	beq.w	80086fc <_dtoa_r+0x4f4>
 80085b0:	f1ca 0600 	rsb	r6, sl, #0
 80085b4:	4ba5      	ldr	r3, [pc, #660]	; (800884c <_dtoa_r+0x644>)
 80085b6:	4fa6      	ldr	r7, [pc, #664]	; (8008850 <_dtoa_r+0x648>)
 80085b8:	f006 020f 	and.w	r2, r6, #15
 80085bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085c8:	f7f8 f816 	bl	80005f8 <__aeabi_dmul>
 80085cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d0:	1136      	asrs	r6, r6, #4
 80085d2:	2300      	movs	r3, #0
 80085d4:	2502      	movs	r5, #2
 80085d6:	2e00      	cmp	r6, #0
 80085d8:	f040 8085 	bne.w	80086e6 <_dtoa_r+0x4de>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1d2      	bne.n	8008586 <_dtoa_r+0x37e>
 80085e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 808c 	beq.w	8008700 <_dtoa_r+0x4f8>
 80085e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085ec:	4b99      	ldr	r3, [pc, #612]	; (8008854 <_dtoa_r+0x64c>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f7f8 fa72 	bl	8000adc <__aeabi_dcmplt>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	f000 8081 	beq.w	8008700 <_dtoa_r+0x4f8>
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d07d      	beq.n	8008700 <_dtoa_r+0x4f8>
 8008604:	f1b9 0f00 	cmp.w	r9, #0
 8008608:	dd3c      	ble.n	8008684 <_dtoa_r+0x47c>
 800860a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800860e:	9307      	str	r3, [sp, #28]
 8008610:	2200      	movs	r2, #0
 8008612:	4b91      	ldr	r3, [pc, #580]	; (8008858 <_dtoa_r+0x650>)
 8008614:	4630      	mov	r0, r6
 8008616:	4639      	mov	r1, r7
 8008618:	f7f7 ffee 	bl	80005f8 <__aeabi_dmul>
 800861c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008620:	3501      	adds	r5, #1
 8008622:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008626:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800862a:	4628      	mov	r0, r5
 800862c:	f7f7 ff7a 	bl	8000524 <__aeabi_i2d>
 8008630:	4632      	mov	r2, r6
 8008632:	463b      	mov	r3, r7
 8008634:	f7f7 ffe0 	bl	80005f8 <__aeabi_dmul>
 8008638:	4b88      	ldr	r3, [pc, #544]	; (800885c <_dtoa_r+0x654>)
 800863a:	2200      	movs	r2, #0
 800863c:	f7f7 fe26 	bl	800028c <__adddf3>
 8008640:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008648:	9303      	str	r3, [sp, #12]
 800864a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800864c:	2b00      	cmp	r3, #0
 800864e:	d15c      	bne.n	800870a <_dtoa_r+0x502>
 8008650:	4b83      	ldr	r3, [pc, #524]	; (8008860 <_dtoa_r+0x658>)
 8008652:	2200      	movs	r2, #0
 8008654:	4630      	mov	r0, r6
 8008656:	4639      	mov	r1, r7
 8008658:	f7f7 fe16 	bl	8000288 <__aeabi_dsub>
 800865c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008660:	4606      	mov	r6, r0
 8008662:	460f      	mov	r7, r1
 8008664:	f7f8 fa58 	bl	8000b18 <__aeabi_dcmpgt>
 8008668:	2800      	cmp	r0, #0
 800866a:	f040 8296 	bne.w	8008b9a <_dtoa_r+0x992>
 800866e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008672:	4630      	mov	r0, r6
 8008674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008678:	4639      	mov	r1, r7
 800867a:	f7f8 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800867e:	2800      	cmp	r0, #0
 8008680:	f040 8288 	bne.w	8008b94 <_dtoa_r+0x98c>
 8008684:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008688:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800868c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800868e:	2b00      	cmp	r3, #0
 8008690:	f2c0 8158 	blt.w	8008944 <_dtoa_r+0x73c>
 8008694:	f1ba 0f0e 	cmp.w	sl, #14
 8008698:	f300 8154 	bgt.w	8008944 <_dtoa_r+0x73c>
 800869c:	4b6b      	ldr	r3, [pc, #428]	; (800884c <_dtoa_r+0x644>)
 800869e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f280 80e3 	bge.w	8008874 <_dtoa_r+0x66c>
 80086ae:	9b01      	ldr	r3, [sp, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f300 80df 	bgt.w	8008874 <_dtoa_r+0x66c>
 80086b6:	f040 826d 	bne.w	8008b94 <_dtoa_r+0x98c>
 80086ba:	4b69      	ldr	r3, [pc, #420]	; (8008860 <_dtoa_r+0x658>)
 80086bc:	2200      	movs	r2, #0
 80086be:	4640      	mov	r0, r8
 80086c0:	4649      	mov	r1, r9
 80086c2:	f7f7 ff99 	bl	80005f8 <__aeabi_dmul>
 80086c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ca:	f7f8 fa1b 	bl	8000b04 <__aeabi_dcmpge>
 80086ce:	9e01      	ldr	r6, [sp, #4]
 80086d0:	4637      	mov	r7, r6
 80086d2:	2800      	cmp	r0, #0
 80086d4:	f040 8243 	bne.w	8008b5e <_dtoa_r+0x956>
 80086d8:	9d00      	ldr	r5, [sp, #0]
 80086da:	2331      	movs	r3, #49	; 0x31
 80086dc:	f805 3b01 	strb.w	r3, [r5], #1
 80086e0:	f10a 0a01 	add.w	sl, sl, #1
 80086e4:	e23f      	b.n	8008b66 <_dtoa_r+0x95e>
 80086e6:	07f2      	lsls	r2, r6, #31
 80086e8:	d505      	bpl.n	80086f6 <_dtoa_r+0x4ee>
 80086ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ee:	f7f7 ff83 	bl	80005f8 <__aeabi_dmul>
 80086f2:	3501      	adds	r5, #1
 80086f4:	2301      	movs	r3, #1
 80086f6:	1076      	asrs	r6, r6, #1
 80086f8:	3708      	adds	r7, #8
 80086fa:	e76c      	b.n	80085d6 <_dtoa_r+0x3ce>
 80086fc:	2502      	movs	r5, #2
 80086fe:	e76f      	b.n	80085e0 <_dtoa_r+0x3d8>
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	f8cd a01c 	str.w	sl, [sp, #28]
 8008706:	930c      	str	r3, [sp, #48]	; 0x30
 8008708:	e78d      	b.n	8008626 <_dtoa_r+0x41e>
 800870a:	9900      	ldr	r1, [sp, #0]
 800870c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800870e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008710:	4b4e      	ldr	r3, [pc, #312]	; (800884c <_dtoa_r+0x644>)
 8008712:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008716:	4401      	add	r1, r0
 8008718:	9102      	str	r1, [sp, #8]
 800871a:	9908      	ldr	r1, [sp, #32]
 800871c:	eeb0 8a47 	vmov.f32	s16, s14
 8008720:	eef0 8a67 	vmov.f32	s17, s15
 8008724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008728:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800872c:	2900      	cmp	r1, #0
 800872e:	d045      	beq.n	80087bc <_dtoa_r+0x5b4>
 8008730:	494c      	ldr	r1, [pc, #304]	; (8008864 <_dtoa_r+0x65c>)
 8008732:	2000      	movs	r0, #0
 8008734:	f7f8 f88a 	bl	800084c <__aeabi_ddiv>
 8008738:	ec53 2b18 	vmov	r2, r3, d8
 800873c:	f7f7 fda4 	bl	8000288 <__aeabi_dsub>
 8008740:	9d00      	ldr	r5, [sp, #0]
 8008742:	ec41 0b18 	vmov	d8, r0, r1
 8008746:	4639      	mov	r1, r7
 8008748:	4630      	mov	r0, r6
 800874a:	f7f8 fa05 	bl	8000b58 <__aeabi_d2iz>
 800874e:	900c      	str	r0, [sp, #48]	; 0x30
 8008750:	f7f7 fee8 	bl	8000524 <__aeabi_i2d>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	f7f7 fd94 	bl	8000288 <__aeabi_dsub>
 8008760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008762:	3330      	adds	r3, #48	; 0x30
 8008764:	f805 3b01 	strb.w	r3, [r5], #1
 8008768:	ec53 2b18 	vmov	r2, r3, d8
 800876c:	4606      	mov	r6, r0
 800876e:	460f      	mov	r7, r1
 8008770:	f7f8 f9b4 	bl	8000adc <__aeabi_dcmplt>
 8008774:	2800      	cmp	r0, #0
 8008776:	d165      	bne.n	8008844 <_dtoa_r+0x63c>
 8008778:	4632      	mov	r2, r6
 800877a:	463b      	mov	r3, r7
 800877c:	4935      	ldr	r1, [pc, #212]	; (8008854 <_dtoa_r+0x64c>)
 800877e:	2000      	movs	r0, #0
 8008780:	f7f7 fd82 	bl	8000288 <__aeabi_dsub>
 8008784:	ec53 2b18 	vmov	r2, r3, d8
 8008788:	f7f8 f9a8 	bl	8000adc <__aeabi_dcmplt>
 800878c:	2800      	cmp	r0, #0
 800878e:	f040 80b9 	bne.w	8008904 <_dtoa_r+0x6fc>
 8008792:	9b02      	ldr	r3, [sp, #8]
 8008794:	429d      	cmp	r5, r3
 8008796:	f43f af75 	beq.w	8008684 <_dtoa_r+0x47c>
 800879a:	4b2f      	ldr	r3, [pc, #188]	; (8008858 <_dtoa_r+0x650>)
 800879c:	ec51 0b18 	vmov	r0, r1, d8
 80087a0:	2200      	movs	r2, #0
 80087a2:	f7f7 ff29 	bl	80005f8 <__aeabi_dmul>
 80087a6:	4b2c      	ldr	r3, [pc, #176]	; (8008858 <_dtoa_r+0x650>)
 80087a8:	ec41 0b18 	vmov	d8, r0, r1
 80087ac:	2200      	movs	r2, #0
 80087ae:	4630      	mov	r0, r6
 80087b0:	4639      	mov	r1, r7
 80087b2:	f7f7 ff21 	bl	80005f8 <__aeabi_dmul>
 80087b6:	4606      	mov	r6, r0
 80087b8:	460f      	mov	r7, r1
 80087ba:	e7c4      	b.n	8008746 <_dtoa_r+0x53e>
 80087bc:	ec51 0b17 	vmov	r0, r1, d7
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	9b02      	ldr	r3, [sp, #8]
 80087c6:	9d00      	ldr	r5, [sp, #0]
 80087c8:	930c      	str	r3, [sp, #48]	; 0x30
 80087ca:	ec41 0b18 	vmov	d8, r0, r1
 80087ce:	4639      	mov	r1, r7
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7f8 f9c1 	bl	8000b58 <__aeabi_d2iz>
 80087d6:	9011      	str	r0, [sp, #68]	; 0x44
 80087d8:	f7f7 fea4 	bl	8000524 <__aeabi_i2d>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4630      	mov	r0, r6
 80087e2:	4639      	mov	r1, r7
 80087e4:	f7f7 fd50 	bl	8000288 <__aeabi_dsub>
 80087e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ea:	3330      	adds	r3, #48	; 0x30
 80087ec:	f805 3b01 	strb.w	r3, [r5], #1
 80087f0:	9b02      	ldr	r3, [sp, #8]
 80087f2:	429d      	cmp	r5, r3
 80087f4:	4606      	mov	r6, r0
 80087f6:	460f      	mov	r7, r1
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	d134      	bne.n	8008868 <_dtoa_r+0x660>
 80087fe:	4b19      	ldr	r3, [pc, #100]	; (8008864 <_dtoa_r+0x65c>)
 8008800:	ec51 0b18 	vmov	r0, r1, d8
 8008804:	f7f7 fd42 	bl	800028c <__adddf3>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4630      	mov	r0, r6
 800880e:	4639      	mov	r1, r7
 8008810:	f7f8 f982 	bl	8000b18 <__aeabi_dcmpgt>
 8008814:	2800      	cmp	r0, #0
 8008816:	d175      	bne.n	8008904 <_dtoa_r+0x6fc>
 8008818:	ec53 2b18 	vmov	r2, r3, d8
 800881c:	4911      	ldr	r1, [pc, #68]	; (8008864 <_dtoa_r+0x65c>)
 800881e:	2000      	movs	r0, #0
 8008820:	f7f7 fd32 	bl	8000288 <__aeabi_dsub>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4630      	mov	r0, r6
 800882a:	4639      	mov	r1, r7
 800882c:	f7f8 f956 	bl	8000adc <__aeabi_dcmplt>
 8008830:	2800      	cmp	r0, #0
 8008832:	f43f af27 	beq.w	8008684 <_dtoa_r+0x47c>
 8008836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008838:	1e6b      	subs	r3, r5, #1
 800883a:	930c      	str	r3, [sp, #48]	; 0x30
 800883c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008840:	2b30      	cmp	r3, #48	; 0x30
 8008842:	d0f8      	beq.n	8008836 <_dtoa_r+0x62e>
 8008844:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008848:	e04a      	b.n	80088e0 <_dtoa_r+0x6d8>
 800884a:	bf00      	nop
 800884c:	0800a440 	.word	0x0800a440
 8008850:	0800a418 	.word	0x0800a418
 8008854:	3ff00000 	.word	0x3ff00000
 8008858:	40240000 	.word	0x40240000
 800885c:	401c0000 	.word	0x401c0000
 8008860:	40140000 	.word	0x40140000
 8008864:	3fe00000 	.word	0x3fe00000
 8008868:	4baf      	ldr	r3, [pc, #700]	; (8008b28 <_dtoa_r+0x920>)
 800886a:	f7f7 fec5 	bl	80005f8 <__aeabi_dmul>
 800886e:	4606      	mov	r6, r0
 8008870:	460f      	mov	r7, r1
 8008872:	e7ac      	b.n	80087ce <_dtoa_r+0x5c6>
 8008874:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008878:	9d00      	ldr	r5, [sp, #0]
 800887a:	4642      	mov	r2, r8
 800887c:	464b      	mov	r3, r9
 800887e:	4630      	mov	r0, r6
 8008880:	4639      	mov	r1, r7
 8008882:	f7f7 ffe3 	bl	800084c <__aeabi_ddiv>
 8008886:	f7f8 f967 	bl	8000b58 <__aeabi_d2iz>
 800888a:	9002      	str	r0, [sp, #8]
 800888c:	f7f7 fe4a 	bl	8000524 <__aeabi_i2d>
 8008890:	4642      	mov	r2, r8
 8008892:	464b      	mov	r3, r9
 8008894:	f7f7 feb0 	bl	80005f8 <__aeabi_dmul>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4630      	mov	r0, r6
 800889e:	4639      	mov	r1, r7
 80088a0:	f7f7 fcf2 	bl	8000288 <__aeabi_dsub>
 80088a4:	9e02      	ldr	r6, [sp, #8]
 80088a6:	9f01      	ldr	r7, [sp, #4]
 80088a8:	3630      	adds	r6, #48	; 0x30
 80088aa:	f805 6b01 	strb.w	r6, [r5], #1
 80088ae:	9e00      	ldr	r6, [sp, #0]
 80088b0:	1bae      	subs	r6, r5, r6
 80088b2:	42b7      	cmp	r7, r6
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	d137      	bne.n	800892a <_dtoa_r+0x722>
 80088ba:	f7f7 fce7 	bl	800028c <__adddf3>
 80088be:	4642      	mov	r2, r8
 80088c0:	464b      	mov	r3, r9
 80088c2:	4606      	mov	r6, r0
 80088c4:	460f      	mov	r7, r1
 80088c6:	f7f8 f927 	bl	8000b18 <__aeabi_dcmpgt>
 80088ca:	b9c8      	cbnz	r0, 8008900 <_dtoa_r+0x6f8>
 80088cc:	4642      	mov	r2, r8
 80088ce:	464b      	mov	r3, r9
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f8 f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d8:	b110      	cbz	r0, 80088e0 <_dtoa_r+0x6d8>
 80088da:	9b02      	ldr	r3, [sp, #8]
 80088dc:	07d9      	lsls	r1, r3, #31
 80088de:	d40f      	bmi.n	8008900 <_dtoa_r+0x6f8>
 80088e0:	4620      	mov	r0, r4
 80088e2:	4659      	mov	r1, fp
 80088e4:	f000 fbc2 	bl	800906c <_Bfree>
 80088e8:	2300      	movs	r3, #0
 80088ea:	702b      	strb	r3, [r5, #0]
 80088ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088ee:	f10a 0001 	add.w	r0, sl, #1
 80088f2:	6018      	str	r0, [r3, #0]
 80088f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f43f acd8 	beq.w	80082ac <_dtoa_r+0xa4>
 80088fc:	601d      	str	r5, [r3, #0]
 80088fe:	e4d5      	b.n	80082ac <_dtoa_r+0xa4>
 8008900:	f8cd a01c 	str.w	sl, [sp, #28]
 8008904:	462b      	mov	r3, r5
 8008906:	461d      	mov	r5, r3
 8008908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800890c:	2a39      	cmp	r2, #57	; 0x39
 800890e:	d108      	bne.n	8008922 <_dtoa_r+0x71a>
 8008910:	9a00      	ldr	r2, [sp, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d1f7      	bne.n	8008906 <_dtoa_r+0x6fe>
 8008916:	9a07      	ldr	r2, [sp, #28]
 8008918:	9900      	ldr	r1, [sp, #0]
 800891a:	3201      	adds	r2, #1
 800891c:	9207      	str	r2, [sp, #28]
 800891e:	2230      	movs	r2, #48	; 0x30
 8008920:	700a      	strb	r2, [r1, #0]
 8008922:	781a      	ldrb	r2, [r3, #0]
 8008924:	3201      	adds	r2, #1
 8008926:	701a      	strb	r2, [r3, #0]
 8008928:	e78c      	b.n	8008844 <_dtoa_r+0x63c>
 800892a:	4b7f      	ldr	r3, [pc, #508]	; (8008b28 <_dtoa_r+0x920>)
 800892c:	2200      	movs	r2, #0
 800892e:	f7f7 fe63 	bl	80005f8 <__aeabi_dmul>
 8008932:	2200      	movs	r2, #0
 8008934:	2300      	movs	r3, #0
 8008936:	4606      	mov	r6, r0
 8008938:	460f      	mov	r7, r1
 800893a:	f7f8 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800893e:	2800      	cmp	r0, #0
 8008940:	d09b      	beq.n	800887a <_dtoa_r+0x672>
 8008942:	e7cd      	b.n	80088e0 <_dtoa_r+0x6d8>
 8008944:	9a08      	ldr	r2, [sp, #32]
 8008946:	2a00      	cmp	r2, #0
 8008948:	f000 80c4 	beq.w	8008ad4 <_dtoa_r+0x8cc>
 800894c:	9a05      	ldr	r2, [sp, #20]
 800894e:	2a01      	cmp	r2, #1
 8008950:	f300 80a8 	bgt.w	8008aa4 <_dtoa_r+0x89c>
 8008954:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008956:	2a00      	cmp	r2, #0
 8008958:	f000 80a0 	beq.w	8008a9c <_dtoa_r+0x894>
 800895c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008960:	9e06      	ldr	r6, [sp, #24]
 8008962:	4645      	mov	r5, r8
 8008964:	9a04      	ldr	r2, [sp, #16]
 8008966:	2101      	movs	r1, #1
 8008968:	441a      	add	r2, r3
 800896a:	4620      	mov	r0, r4
 800896c:	4498      	add	r8, r3
 800896e:	9204      	str	r2, [sp, #16]
 8008970:	f000 fc38 	bl	80091e4 <__i2b>
 8008974:	4607      	mov	r7, r0
 8008976:	2d00      	cmp	r5, #0
 8008978:	dd0b      	ble.n	8008992 <_dtoa_r+0x78a>
 800897a:	9b04      	ldr	r3, [sp, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	dd08      	ble.n	8008992 <_dtoa_r+0x78a>
 8008980:	42ab      	cmp	r3, r5
 8008982:	9a04      	ldr	r2, [sp, #16]
 8008984:	bfa8      	it	ge
 8008986:	462b      	movge	r3, r5
 8008988:	eba8 0803 	sub.w	r8, r8, r3
 800898c:	1aed      	subs	r5, r5, r3
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	9b06      	ldr	r3, [sp, #24]
 8008994:	b1fb      	cbz	r3, 80089d6 <_dtoa_r+0x7ce>
 8008996:	9b08      	ldr	r3, [sp, #32]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 809f 	beq.w	8008adc <_dtoa_r+0x8d4>
 800899e:	2e00      	cmp	r6, #0
 80089a0:	dd11      	ble.n	80089c6 <_dtoa_r+0x7be>
 80089a2:	4639      	mov	r1, r7
 80089a4:	4632      	mov	r2, r6
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 fcd8 	bl	800935c <__pow5mult>
 80089ac:	465a      	mov	r2, fp
 80089ae:	4601      	mov	r1, r0
 80089b0:	4607      	mov	r7, r0
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 fc2c 	bl	8009210 <__multiply>
 80089b8:	4659      	mov	r1, fp
 80089ba:	9007      	str	r0, [sp, #28]
 80089bc:	4620      	mov	r0, r4
 80089be:	f000 fb55 	bl	800906c <_Bfree>
 80089c2:	9b07      	ldr	r3, [sp, #28]
 80089c4:	469b      	mov	fp, r3
 80089c6:	9b06      	ldr	r3, [sp, #24]
 80089c8:	1b9a      	subs	r2, r3, r6
 80089ca:	d004      	beq.n	80089d6 <_dtoa_r+0x7ce>
 80089cc:	4659      	mov	r1, fp
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 fcc4 	bl	800935c <__pow5mult>
 80089d4:	4683      	mov	fp, r0
 80089d6:	2101      	movs	r1, #1
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fc03 	bl	80091e4 <__i2b>
 80089de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	4606      	mov	r6, r0
 80089e4:	dd7c      	ble.n	8008ae0 <_dtoa_r+0x8d8>
 80089e6:	461a      	mov	r2, r3
 80089e8:	4601      	mov	r1, r0
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 fcb6 	bl	800935c <__pow5mult>
 80089f0:	9b05      	ldr	r3, [sp, #20]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	4606      	mov	r6, r0
 80089f6:	dd76      	ble.n	8008ae6 <_dtoa_r+0x8de>
 80089f8:	2300      	movs	r3, #0
 80089fa:	9306      	str	r3, [sp, #24]
 80089fc:	6933      	ldr	r3, [r6, #16]
 80089fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a02:	6918      	ldr	r0, [r3, #16]
 8008a04:	f000 fb9e 	bl	8009144 <__hi0bits>
 8008a08:	f1c0 0020 	rsb	r0, r0, #32
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	4418      	add	r0, r3
 8008a10:	f010 001f 	ands.w	r0, r0, #31
 8008a14:	f000 8086 	beq.w	8008b24 <_dtoa_r+0x91c>
 8008a18:	f1c0 0320 	rsb	r3, r0, #32
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	dd7f      	ble.n	8008b20 <_dtoa_r+0x918>
 8008a20:	f1c0 001c 	rsb	r0, r0, #28
 8008a24:	9b04      	ldr	r3, [sp, #16]
 8008a26:	4403      	add	r3, r0
 8008a28:	4480      	add	r8, r0
 8008a2a:	4405      	add	r5, r0
 8008a2c:	9304      	str	r3, [sp, #16]
 8008a2e:	f1b8 0f00 	cmp.w	r8, #0
 8008a32:	dd05      	ble.n	8008a40 <_dtoa_r+0x838>
 8008a34:	4659      	mov	r1, fp
 8008a36:	4642      	mov	r2, r8
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fce9 	bl	8009410 <__lshift>
 8008a3e:	4683      	mov	fp, r0
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dd05      	ble.n	8008a52 <_dtoa_r+0x84a>
 8008a46:	4631      	mov	r1, r6
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fce0 	bl	8009410 <__lshift>
 8008a50:	4606      	mov	r6, r0
 8008a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d069      	beq.n	8008b2c <_dtoa_r+0x924>
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4658      	mov	r0, fp
 8008a5c:	f000 fd44 	bl	80094e8 <__mcmp>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	da63      	bge.n	8008b2c <_dtoa_r+0x924>
 8008a64:	2300      	movs	r3, #0
 8008a66:	4659      	mov	r1, fp
 8008a68:	220a      	movs	r2, #10
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fb20 	bl	80090b0 <__multadd>
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a76:	4683      	mov	fp, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 818f 	beq.w	8008d9c <_dtoa_r+0xb94>
 8008a7e:	4639      	mov	r1, r7
 8008a80:	2300      	movs	r3, #0
 8008a82:	220a      	movs	r2, #10
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 fb13 	bl	80090b0 <__multadd>
 8008a8a:	f1b9 0f00 	cmp.w	r9, #0
 8008a8e:	4607      	mov	r7, r0
 8008a90:	f300 808e 	bgt.w	8008bb0 <_dtoa_r+0x9a8>
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	dc50      	bgt.n	8008b3c <_dtoa_r+0x934>
 8008a9a:	e089      	b.n	8008bb0 <_dtoa_r+0x9a8>
 8008a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008aa2:	e75d      	b.n	8008960 <_dtoa_r+0x758>
 8008aa4:	9b01      	ldr	r3, [sp, #4]
 8008aa6:	1e5e      	subs	r6, r3, #1
 8008aa8:	9b06      	ldr	r3, [sp, #24]
 8008aaa:	42b3      	cmp	r3, r6
 8008aac:	bfbf      	itttt	lt
 8008aae:	9b06      	ldrlt	r3, [sp, #24]
 8008ab0:	9606      	strlt	r6, [sp, #24]
 8008ab2:	1af2      	sublt	r2, r6, r3
 8008ab4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008ab6:	bfb6      	itet	lt
 8008ab8:	189b      	addlt	r3, r3, r2
 8008aba:	1b9e      	subge	r6, r3, r6
 8008abc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008abe:	9b01      	ldr	r3, [sp, #4]
 8008ac0:	bfb8      	it	lt
 8008ac2:	2600      	movlt	r6, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfb5      	itete	lt
 8008ac8:	eba8 0503 	sublt.w	r5, r8, r3
 8008acc:	9b01      	ldrge	r3, [sp, #4]
 8008ace:	2300      	movlt	r3, #0
 8008ad0:	4645      	movge	r5, r8
 8008ad2:	e747      	b.n	8008964 <_dtoa_r+0x75c>
 8008ad4:	9e06      	ldr	r6, [sp, #24]
 8008ad6:	9f08      	ldr	r7, [sp, #32]
 8008ad8:	4645      	mov	r5, r8
 8008ada:	e74c      	b.n	8008976 <_dtoa_r+0x76e>
 8008adc:	9a06      	ldr	r2, [sp, #24]
 8008ade:	e775      	b.n	80089cc <_dtoa_r+0x7c4>
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	dc18      	bgt.n	8008b18 <_dtoa_r+0x910>
 8008ae6:	9b02      	ldr	r3, [sp, #8]
 8008ae8:	b9b3      	cbnz	r3, 8008b18 <_dtoa_r+0x910>
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008af0:	b9a3      	cbnz	r3, 8008b1c <_dtoa_r+0x914>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008af8:	0d1b      	lsrs	r3, r3, #20
 8008afa:	051b      	lsls	r3, r3, #20
 8008afc:	b12b      	cbz	r3, 8008b0a <_dtoa_r+0x902>
 8008afe:	9b04      	ldr	r3, [sp, #16]
 8008b00:	3301      	adds	r3, #1
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	f108 0801 	add.w	r8, r8, #1
 8008b08:	2301      	movs	r3, #1
 8008b0a:	9306      	str	r3, [sp, #24]
 8008b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f47f af74 	bne.w	80089fc <_dtoa_r+0x7f4>
 8008b14:	2001      	movs	r0, #1
 8008b16:	e779      	b.n	8008a0c <_dtoa_r+0x804>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	e7f6      	b.n	8008b0a <_dtoa_r+0x902>
 8008b1c:	9b02      	ldr	r3, [sp, #8]
 8008b1e:	e7f4      	b.n	8008b0a <_dtoa_r+0x902>
 8008b20:	d085      	beq.n	8008a2e <_dtoa_r+0x826>
 8008b22:	4618      	mov	r0, r3
 8008b24:	301c      	adds	r0, #28
 8008b26:	e77d      	b.n	8008a24 <_dtoa_r+0x81c>
 8008b28:	40240000 	.word	0x40240000
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dc38      	bgt.n	8008ba4 <_dtoa_r+0x99c>
 8008b32:	9b05      	ldr	r3, [sp, #20]
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	dd35      	ble.n	8008ba4 <_dtoa_r+0x99c>
 8008b38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b3c:	f1b9 0f00 	cmp.w	r9, #0
 8008b40:	d10d      	bne.n	8008b5e <_dtoa_r+0x956>
 8008b42:	4631      	mov	r1, r6
 8008b44:	464b      	mov	r3, r9
 8008b46:	2205      	movs	r2, #5
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 fab1 	bl	80090b0 <__multadd>
 8008b4e:	4601      	mov	r1, r0
 8008b50:	4606      	mov	r6, r0
 8008b52:	4658      	mov	r0, fp
 8008b54:	f000 fcc8 	bl	80094e8 <__mcmp>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f73f adbd 	bgt.w	80086d8 <_dtoa_r+0x4d0>
 8008b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b60:	9d00      	ldr	r5, [sp, #0]
 8008b62:	ea6f 0a03 	mvn.w	sl, r3
 8008b66:	f04f 0800 	mov.w	r8, #0
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 fa7d 	bl	800906c <_Bfree>
 8008b72:	2f00      	cmp	r7, #0
 8008b74:	f43f aeb4 	beq.w	80088e0 <_dtoa_r+0x6d8>
 8008b78:	f1b8 0f00 	cmp.w	r8, #0
 8008b7c:	d005      	beq.n	8008b8a <_dtoa_r+0x982>
 8008b7e:	45b8      	cmp	r8, r7
 8008b80:	d003      	beq.n	8008b8a <_dtoa_r+0x982>
 8008b82:	4641      	mov	r1, r8
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 fa71 	bl	800906c <_Bfree>
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 fa6d 	bl	800906c <_Bfree>
 8008b92:	e6a5      	b.n	80088e0 <_dtoa_r+0x6d8>
 8008b94:	2600      	movs	r6, #0
 8008b96:	4637      	mov	r7, r6
 8008b98:	e7e1      	b.n	8008b5e <_dtoa_r+0x956>
 8008b9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008b9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ba0:	4637      	mov	r7, r6
 8008ba2:	e599      	b.n	80086d8 <_dtoa_r+0x4d0>
 8008ba4:	9b08      	ldr	r3, [sp, #32]
 8008ba6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 80fd 	beq.w	8008daa <_dtoa_r+0xba2>
 8008bb0:	2d00      	cmp	r5, #0
 8008bb2:	dd05      	ble.n	8008bc0 <_dtoa_r+0x9b8>
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 fc29 	bl	8009410 <__lshift>
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	9b06      	ldr	r3, [sp, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d05c      	beq.n	8008c80 <_dtoa_r+0xa78>
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fa0f 	bl	8008fec <_Balloc>
 8008bce:	4605      	mov	r5, r0
 8008bd0:	b928      	cbnz	r0, 8008bde <_dtoa_r+0x9d6>
 8008bd2:	4b80      	ldr	r3, [pc, #512]	; (8008dd4 <_dtoa_r+0xbcc>)
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bda:	f7ff bb2e 	b.w	800823a <_dtoa_r+0x32>
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	3202      	adds	r2, #2
 8008be2:	0092      	lsls	r2, r2, #2
 8008be4:	f107 010c 	add.w	r1, r7, #12
 8008be8:	300c      	adds	r0, #12
 8008bea:	f7fe fde9 	bl	80077c0 <memcpy>
 8008bee:	2201      	movs	r2, #1
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 fc0c 	bl	8009410 <__lshift>
 8008bf8:	9b00      	ldr	r3, [sp, #0]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	9b00      	ldr	r3, [sp, #0]
 8008c00:	444b      	add	r3, r9
 8008c02:	9307      	str	r3, [sp, #28]
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	46b8      	mov	r8, r7
 8008c0c:	9306      	str	r3, [sp, #24]
 8008c0e:	4607      	mov	r7, r0
 8008c10:	9b01      	ldr	r3, [sp, #4]
 8008c12:	4631      	mov	r1, r6
 8008c14:	3b01      	subs	r3, #1
 8008c16:	4658      	mov	r0, fp
 8008c18:	9302      	str	r3, [sp, #8]
 8008c1a:	f7ff fa69 	bl	80080f0 <quorem>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	3330      	adds	r3, #48	; 0x30
 8008c22:	9004      	str	r0, [sp, #16]
 8008c24:	4641      	mov	r1, r8
 8008c26:	4658      	mov	r0, fp
 8008c28:	9308      	str	r3, [sp, #32]
 8008c2a:	f000 fc5d 	bl	80094e8 <__mcmp>
 8008c2e:	463a      	mov	r2, r7
 8008c30:	4681      	mov	r9, r0
 8008c32:	4631      	mov	r1, r6
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 fc73 	bl	8009520 <__mdiff>
 8008c3a:	68c2      	ldr	r2, [r0, #12]
 8008c3c:	9b08      	ldr	r3, [sp, #32]
 8008c3e:	4605      	mov	r5, r0
 8008c40:	bb02      	cbnz	r2, 8008c84 <_dtoa_r+0xa7c>
 8008c42:	4601      	mov	r1, r0
 8008c44:	4658      	mov	r0, fp
 8008c46:	f000 fc4f 	bl	80094e8 <__mcmp>
 8008c4a:	9b08      	ldr	r3, [sp, #32]
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	4629      	mov	r1, r5
 8008c50:	4620      	mov	r0, r4
 8008c52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008c56:	f000 fa09 	bl	800906c <_Bfree>
 8008c5a:	9b05      	ldr	r3, [sp, #20]
 8008c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c5e:	9d01      	ldr	r5, [sp, #4]
 8008c60:	ea43 0102 	orr.w	r1, r3, r2
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	430b      	orrs	r3, r1
 8008c68:	9b08      	ldr	r3, [sp, #32]
 8008c6a:	d10d      	bne.n	8008c88 <_dtoa_r+0xa80>
 8008c6c:	2b39      	cmp	r3, #57	; 0x39
 8008c6e:	d029      	beq.n	8008cc4 <_dtoa_r+0xabc>
 8008c70:	f1b9 0f00 	cmp.w	r9, #0
 8008c74:	dd01      	ble.n	8008c7a <_dtoa_r+0xa72>
 8008c76:	9b04      	ldr	r3, [sp, #16]
 8008c78:	3331      	adds	r3, #49	; 0x31
 8008c7a:	9a02      	ldr	r2, [sp, #8]
 8008c7c:	7013      	strb	r3, [r2, #0]
 8008c7e:	e774      	b.n	8008b6a <_dtoa_r+0x962>
 8008c80:	4638      	mov	r0, r7
 8008c82:	e7b9      	b.n	8008bf8 <_dtoa_r+0x9f0>
 8008c84:	2201      	movs	r2, #1
 8008c86:	e7e2      	b.n	8008c4e <_dtoa_r+0xa46>
 8008c88:	f1b9 0f00 	cmp.w	r9, #0
 8008c8c:	db06      	blt.n	8008c9c <_dtoa_r+0xa94>
 8008c8e:	9905      	ldr	r1, [sp, #20]
 8008c90:	ea41 0909 	orr.w	r9, r1, r9
 8008c94:	9906      	ldr	r1, [sp, #24]
 8008c96:	ea59 0101 	orrs.w	r1, r9, r1
 8008c9a:	d120      	bne.n	8008cde <_dtoa_r+0xad6>
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	ddec      	ble.n	8008c7a <_dtoa_r+0xa72>
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	f000 fbb2 	bl	8009410 <__lshift>
 8008cac:	4631      	mov	r1, r6
 8008cae:	4683      	mov	fp, r0
 8008cb0:	f000 fc1a 	bl	80094e8 <__mcmp>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	dc02      	bgt.n	8008cc0 <_dtoa_r+0xab8>
 8008cba:	d1de      	bne.n	8008c7a <_dtoa_r+0xa72>
 8008cbc:	07da      	lsls	r2, r3, #31
 8008cbe:	d5dc      	bpl.n	8008c7a <_dtoa_r+0xa72>
 8008cc0:	2b39      	cmp	r3, #57	; 0x39
 8008cc2:	d1d8      	bne.n	8008c76 <_dtoa_r+0xa6e>
 8008cc4:	9a02      	ldr	r2, [sp, #8]
 8008cc6:	2339      	movs	r3, #57	; 0x39
 8008cc8:	7013      	strb	r3, [r2, #0]
 8008cca:	462b      	mov	r3, r5
 8008ccc:	461d      	mov	r5, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cd4:	2a39      	cmp	r2, #57	; 0x39
 8008cd6:	d050      	beq.n	8008d7a <_dtoa_r+0xb72>
 8008cd8:	3201      	adds	r2, #1
 8008cda:	701a      	strb	r2, [r3, #0]
 8008cdc:	e745      	b.n	8008b6a <_dtoa_r+0x962>
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	dd03      	ble.n	8008cea <_dtoa_r+0xae2>
 8008ce2:	2b39      	cmp	r3, #57	; 0x39
 8008ce4:	d0ee      	beq.n	8008cc4 <_dtoa_r+0xabc>
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	e7c7      	b.n	8008c7a <_dtoa_r+0xa72>
 8008cea:	9a01      	ldr	r2, [sp, #4]
 8008cec:	9907      	ldr	r1, [sp, #28]
 8008cee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cf2:	428a      	cmp	r2, r1
 8008cf4:	d02a      	beq.n	8008d4c <_dtoa_r+0xb44>
 8008cf6:	4659      	mov	r1, fp
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	220a      	movs	r2, #10
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 f9d7 	bl	80090b0 <__multadd>
 8008d02:	45b8      	cmp	r8, r7
 8008d04:	4683      	mov	fp, r0
 8008d06:	f04f 0300 	mov.w	r3, #0
 8008d0a:	f04f 020a 	mov.w	r2, #10
 8008d0e:	4641      	mov	r1, r8
 8008d10:	4620      	mov	r0, r4
 8008d12:	d107      	bne.n	8008d24 <_dtoa_r+0xb1c>
 8008d14:	f000 f9cc 	bl	80090b0 <__multadd>
 8008d18:	4680      	mov	r8, r0
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	9b01      	ldr	r3, [sp, #4]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	e775      	b.n	8008c10 <_dtoa_r+0xa08>
 8008d24:	f000 f9c4 	bl	80090b0 <__multadd>
 8008d28:	4639      	mov	r1, r7
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	220a      	movs	r2, #10
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 f9bd 	bl	80090b0 <__multadd>
 8008d36:	4607      	mov	r7, r0
 8008d38:	e7f0      	b.n	8008d1c <_dtoa_r+0xb14>
 8008d3a:	f1b9 0f00 	cmp.w	r9, #0
 8008d3e:	9a00      	ldr	r2, [sp, #0]
 8008d40:	bfcc      	ite	gt
 8008d42:	464d      	movgt	r5, r9
 8008d44:	2501      	movle	r5, #1
 8008d46:	4415      	add	r5, r2
 8008d48:	f04f 0800 	mov.w	r8, #0
 8008d4c:	4659      	mov	r1, fp
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4620      	mov	r0, r4
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	f000 fb5c 	bl	8009410 <__lshift>
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4683      	mov	fp, r0
 8008d5c:	f000 fbc4 	bl	80094e8 <__mcmp>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dcb2      	bgt.n	8008cca <_dtoa_r+0xac2>
 8008d64:	d102      	bne.n	8008d6c <_dtoa_r+0xb64>
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	07db      	lsls	r3, r3, #31
 8008d6a:	d4ae      	bmi.n	8008cca <_dtoa_r+0xac2>
 8008d6c:	462b      	mov	r3, r5
 8008d6e:	461d      	mov	r5, r3
 8008d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d74:	2a30      	cmp	r2, #48	; 0x30
 8008d76:	d0fa      	beq.n	8008d6e <_dtoa_r+0xb66>
 8008d78:	e6f7      	b.n	8008b6a <_dtoa_r+0x962>
 8008d7a:	9a00      	ldr	r2, [sp, #0]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d1a5      	bne.n	8008ccc <_dtoa_r+0xac4>
 8008d80:	f10a 0a01 	add.w	sl, sl, #1
 8008d84:	2331      	movs	r3, #49	; 0x31
 8008d86:	e779      	b.n	8008c7c <_dtoa_r+0xa74>
 8008d88:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <_dtoa_r+0xbd0>)
 8008d8a:	f7ff baaf 	b.w	80082ec <_dtoa_r+0xe4>
 8008d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f47f aa86 	bne.w	80082a2 <_dtoa_r+0x9a>
 8008d96:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <_dtoa_r+0xbd4>)
 8008d98:	f7ff baa8 	b.w	80082ec <_dtoa_r+0xe4>
 8008d9c:	f1b9 0f00 	cmp.w	r9, #0
 8008da0:	dc03      	bgt.n	8008daa <_dtoa_r+0xba2>
 8008da2:	9b05      	ldr	r3, [sp, #20]
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	f73f aec9 	bgt.w	8008b3c <_dtoa_r+0x934>
 8008daa:	9d00      	ldr	r5, [sp, #0]
 8008dac:	4631      	mov	r1, r6
 8008dae:	4658      	mov	r0, fp
 8008db0:	f7ff f99e 	bl	80080f0 <quorem>
 8008db4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008db8:	f805 3b01 	strb.w	r3, [r5], #1
 8008dbc:	9a00      	ldr	r2, [sp, #0]
 8008dbe:	1aaa      	subs	r2, r5, r2
 8008dc0:	4591      	cmp	r9, r2
 8008dc2:	ddba      	ble.n	8008d3a <_dtoa_r+0xb32>
 8008dc4:	4659      	mov	r1, fp
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	220a      	movs	r2, #10
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 f970 	bl	80090b0 <__multadd>
 8008dd0:	4683      	mov	fp, r0
 8008dd2:	e7eb      	b.n	8008dac <_dtoa_r+0xba4>
 8008dd4:	0800a343 	.word	0x0800a343
 8008dd8:	0800a29c 	.word	0x0800a29c
 8008ddc:	0800a2c0 	.word	0x0800a2c0

08008de0 <std>:
 8008de0:	2300      	movs	r3, #0
 8008de2:	b510      	push	{r4, lr}
 8008de4:	4604      	mov	r4, r0
 8008de6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dee:	6083      	str	r3, [r0, #8]
 8008df0:	8181      	strh	r1, [r0, #12]
 8008df2:	6643      	str	r3, [r0, #100]	; 0x64
 8008df4:	81c2      	strh	r2, [r0, #14]
 8008df6:	6183      	str	r3, [r0, #24]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	2208      	movs	r2, #8
 8008dfc:	305c      	adds	r0, #92	; 0x5c
 8008dfe:	f7fe fced 	bl	80077dc <memset>
 8008e02:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <std+0x38>)
 8008e04:	6263      	str	r3, [r4, #36]	; 0x24
 8008e06:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <std+0x3c>)
 8008e08:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e0a:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <std+0x40>)
 8008e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <std+0x44>)
 8008e10:	6224      	str	r4, [r4, #32]
 8008e12:	6323      	str	r3, [r4, #48]	; 0x30
 8008e14:	bd10      	pop	{r4, pc}
 8008e16:	bf00      	nop
 8008e18:	08009b31 	.word	0x08009b31
 8008e1c:	08009b53 	.word	0x08009b53
 8008e20:	08009b8b 	.word	0x08009b8b
 8008e24:	08009baf 	.word	0x08009baf

08008e28 <_cleanup_r>:
 8008e28:	4901      	ldr	r1, [pc, #4]	; (8008e30 <_cleanup_r+0x8>)
 8008e2a:	f000 b8af 	b.w	8008f8c <_fwalk_reent>
 8008e2e:	bf00      	nop
 8008e30:	08009ec5 	.word	0x08009ec5

08008e34 <__sfmoreglue>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	1e4a      	subs	r2, r1, #1
 8008e38:	2568      	movs	r5, #104	; 0x68
 8008e3a:	4355      	muls	r5, r2
 8008e3c:	460e      	mov	r6, r1
 8008e3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e42:	f000 fcb1 	bl	80097a8 <_malloc_r>
 8008e46:	4604      	mov	r4, r0
 8008e48:	b140      	cbz	r0, 8008e5c <__sfmoreglue+0x28>
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e50:	300c      	adds	r0, #12
 8008e52:	60a0      	str	r0, [r4, #8]
 8008e54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e58:	f7fe fcc0 	bl	80077dc <memset>
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}

08008e60 <__sfp_lock_acquire>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__sfp_lock_acquire+0x8>)
 8008e62:	f000 b8b8 	b.w	8008fd6 <__retarget_lock_acquire_recursive>
 8008e66:	bf00      	nop
 8008e68:	20001c50 	.word	0x20001c50

08008e6c <__sfp_lock_release>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__sfp_lock_release+0x8>)
 8008e6e:	f000 b8b3 	b.w	8008fd8 <__retarget_lock_release_recursive>
 8008e72:	bf00      	nop
 8008e74:	20001c50 	.word	0x20001c50

08008e78 <__sinit_lock_acquire>:
 8008e78:	4801      	ldr	r0, [pc, #4]	; (8008e80 <__sinit_lock_acquire+0x8>)
 8008e7a:	f000 b8ac 	b.w	8008fd6 <__retarget_lock_acquire_recursive>
 8008e7e:	bf00      	nop
 8008e80:	20001c4b 	.word	0x20001c4b

08008e84 <__sinit_lock_release>:
 8008e84:	4801      	ldr	r0, [pc, #4]	; (8008e8c <__sinit_lock_release+0x8>)
 8008e86:	f000 b8a7 	b.w	8008fd8 <__retarget_lock_release_recursive>
 8008e8a:	bf00      	nop
 8008e8c:	20001c4b 	.word	0x20001c4b

08008e90 <__sinit>:
 8008e90:	b510      	push	{r4, lr}
 8008e92:	4604      	mov	r4, r0
 8008e94:	f7ff fff0 	bl	8008e78 <__sinit_lock_acquire>
 8008e98:	69a3      	ldr	r3, [r4, #24]
 8008e9a:	b11b      	cbz	r3, 8008ea4 <__sinit+0x14>
 8008e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea0:	f7ff bff0 	b.w	8008e84 <__sinit_lock_release>
 8008ea4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ea8:	6523      	str	r3, [r4, #80]	; 0x50
 8008eaa:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <__sinit+0x68>)
 8008eac:	4a13      	ldr	r2, [pc, #76]	; (8008efc <__sinit+0x6c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008eb2:	42a3      	cmp	r3, r4
 8008eb4:	bf04      	itt	eq
 8008eb6:	2301      	moveq	r3, #1
 8008eb8:	61a3      	streq	r3, [r4, #24]
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 f820 	bl	8008f00 <__sfp>
 8008ec0:	6060      	str	r0, [r4, #4]
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f000 f81c 	bl	8008f00 <__sfp>
 8008ec8:	60a0      	str	r0, [r4, #8]
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 f818 	bl	8008f00 <__sfp>
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	60e0      	str	r0, [r4, #12]
 8008ed4:	2104      	movs	r1, #4
 8008ed6:	6860      	ldr	r0, [r4, #4]
 8008ed8:	f7ff ff82 	bl	8008de0 <std>
 8008edc:	68a0      	ldr	r0, [r4, #8]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	2109      	movs	r1, #9
 8008ee2:	f7ff ff7d 	bl	8008de0 <std>
 8008ee6:	68e0      	ldr	r0, [r4, #12]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	2112      	movs	r1, #18
 8008eec:	f7ff ff78 	bl	8008de0 <std>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	61a3      	str	r3, [r4, #24]
 8008ef4:	e7d2      	b.n	8008e9c <__sinit+0xc>
 8008ef6:	bf00      	nop
 8008ef8:	0800a288 	.word	0x0800a288
 8008efc:	08008e29 	.word	0x08008e29

08008f00 <__sfp>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	4607      	mov	r7, r0
 8008f04:	f7ff ffac 	bl	8008e60 <__sfp_lock_acquire>
 8008f08:	4b1e      	ldr	r3, [pc, #120]	; (8008f84 <__sfp+0x84>)
 8008f0a:	681e      	ldr	r6, [r3, #0]
 8008f0c:	69b3      	ldr	r3, [r6, #24]
 8008f0e:	b913      	cbnz	r3, 8008f16 <__sfp+0x16>
 8008f10:	4630      	mov	r0, r6
 8008f12:	f7ff ffbd 	bl	8008e90 <__sinit>
 8008f16:	3648      	adds	r6, #72	; 0x48
 8008f18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	d503      	bpl.n	8008f28 <__sfp+0x28>
 8008f20:	6833      	ldr	r3, [r6, #0]
 8008f22:	b30b      	cbz	r3, 8008f68 <__sfp+0x68>
 8008f24:	6836      	ldr	r6, [r6, #0]
 8008f26:	e7f7      	b.n	8008f18 <__sfp+0x18>
 8008f28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f2c:	b9d5      	cbnz	r5, 8008f64 <__sfp+0x64>
 8008f2e:	4b16      	ldr	r3, [pc, #88]	; (8008f88 <__sfp+0x88>)
 8008f30:	60e3      	str	r3, [r4, #12]
 8008f32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f36:	6665      	str	r5, [r4, #100]	; 0x64
 8008f38:	f000 f84c 	bl	8008fd4 <__retarget_lock_init_recursive>
 8008f3c:	f7ff ff96 	bl	8008e6c <__sfp_lock_release>
 8008f40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f48:	6025      	str	r5, [r4, #0]
 8008f4a:	61a5      	str	r5, [r4, #24]
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	4629      	mov	r1, r5
 8008f50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f54:	f7fe fc42 	bl	80077dc <memset>
 8008f58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f60:	4620      	mov	r0, r4
 8008f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f64:	3468      	adds	r4, #104	; 0x68
 8008f66:	e7d9      	b.n	8008f1c <__sfp+0x1c>
 8008f68:	2104      	movs	r1, #4
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	f7ff ff62 	bl	8008e34 <__sfmoreglue>
 8008f70:	4604      	mov	r4, r0
 8008f72:	6030      	str	r0, [r6, #0]
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d1d5      	bne.n	8008f24 <__sfp+0x24>
 8008f78:	f7ff ff78 	bl	8008e6c <__sfp_lock_release>
 8008f7c:	230c      	movs	r3, #12
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	e7ee      	b.n	8008f60 <__sfp+0x60>
 8008f82:	bf00      	nop
 8008f84:	0800a288 	.word	0x0800a288
 8008f88:	ffff0001 	.word	0xffff0001

08008f8c <_fwalk_reent>:
 8008f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f90:	4606      	mov	r6, r0
 8008f92:	4688      	mov	r8, r1
 8008f94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f98:	2700      	movs	r7, #0
 8008f9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f9e:	f1b9 0901 	subs.w	r9, r9, #1
 8008fa2:	d505      	bpl.n	8008fb0 <_fwalk_reent+0x24>
 8008fa4:	6824      	ldr	r4, [r4, #0]
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	d1f7      	bne.n	8008f9a <_fwalk_reent+0xe>
 8008faa:	4638      	mov	r0, r7
 8008fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fb0:	89ab      	ldrh	r3, [r5, #12]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d907      	bls.n	8008fc6 <_fwalk_reent+0x3a>
 8008fb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	d003      	beq.n	8008fc6 <_fwalk_reent+0x3a>
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	47c0      	blx	r8
 8008fc4:	4307      	orrs	r7, r0
 8008fc6:	3568      	adds	r5, #104	; 0x68
 8008fc8:	e7e9      	b.n	8008f9e <_fwalk_reent+0x12>
	...

08008fcc <_localeconv_r>:
 8008fcc:	4800      	ldr	r0, [pc, #0]	; (8008fd0 <_localeconv_r+0x4>)
 8008fce:	4770      	bx	lr
 8008fd0:	20000164 	.word	0x20000164

08008fd4 <__retarget_lock_init_recursive>:
 8008fd4:	4770      	bx	lr

08008fd6 <__retarget_lock_acquire_recursive>:
 8008fd6:	4770      	bx	lr

08008fd8 <__retarget_lock_release_recursive>:
 8008fd8:	4770      	bx	lr
	...

08008fdc <malloc>:
 8008fdc:	4b02      	ldr	r3, [pc, #8]	; (8008fe8 <malloc+0xc>)
 8008fde:	4601      	mov	r1, r0
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	f000 bbe1 	b.w	80097a8 <_malloc_r>
 8008fe6:	bf00      	nop
 8008fe8:	20000010 	.word	0x20000010

08008fec <_Balloc>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	b976      	cbnz	r6, 8009014 <_Balloc+0x28>
 8008ff6:	2010      	movs	r0, #16
 8008ff8:	f7ff fff0 	bl	8008fdc <malloc>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	6260      	str	r0, [r4, #36]	; 0x24
 8009000:	b920      	cbnz	r0, 800900c <_Balloc+0x20>
 8009002:	4b18      	ldr	r3, [pc, #96]	; (8009064 <_Balloc+0x78>)
 8009004:	4818      	ldr	r0, [pc, #96]	; (8009068 <_Balloc+0x7c>)
 8009006:	2166      	movs	r1, #102	; 0x66
 8009008:	f000 fea8 	bl	8009d5c <__assert_func>
 800900c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009010:	6006      	str	r6, [r0, #0]
 8009012:	60c6      	str	r6, [r0, #12]
 8009014:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009016:	68f3      	ldr	r3, [r6, #12]
 8009018:	b183      	cbz	r3, 800903c <_Balloc+0x50>
 800901a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009022:	b9b8      	cbnz	r0, 8009054 <_Balloc+0x68>
 8009024:	2101      	movs	r1, #1
 8009026:	fa01 f605 	lsl.w	r6, r1, r5
 800902a:	1d72      	adds	r2, r6, #5
 800902c:	0092      	lsls	r2, r2, #2
 800902e:	4620      	mov	r0, r4
 8009030:	f000 fb5a 	bl	80096e8 <_calloc_r>
 8009034:	b160      	cbz	r0, 8009050 <_Balloc+0x64>
 8009036:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800903a:	e00e      	b.n	800905a <_Balloc+0x6e>
 800903c:	2221      	movs	r2, #33	; 0x21
 800903e:	2104      	movs	r1, #4
 8009040:	4620      	mov	r0, r4
 8009042:	f000 fb51 	bl	80096e8 <_calloc_r>
 8009046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009048:	60f0      	str	r0, [r6, #12]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e4      	bne.n	800901a <_Balloc+0x2e>
 8009050:	2000      	movs	r0, #0
 8009052:	bd70      	pop	{r4, r5, r6, pc}
 8009054:	6802      	ldr	r2, [r0, #0]
 8009056:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800905a:	2300      	movs	r3, #0
 800905c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009060:	e7f7      	b.n	8009052 <_Balloc+0x66>
 8009062:	bf00      	nop
 8009064:	0800a2cd 	.word	0x0800a2cd
 8009068:	0800a3b4 	.word	0x0800a3b4

0800906c <_Bfree>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009070:	4605      	mov	r5, r0
 8009072:	460c      	mov	r4, r1
 8009074:	b976      	cbnz	r6, 8009094 <_Bfree+0x28>
 8009076:	2010      	movs	r0, #16
 8009078:	f7ff ffb0 	bl	8008fdc <malloc>
 800907c:	4602      	mov	r2, r0
 800907e:	6268      	str	r0, [r5, #36]	; 0x24
 8009080:	b920      	cbnz	r0, 800908c <_Bfree+0x20>
 8009082:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <_Bfree+0x3c>)
 8009084:	4809      	ldr	r0, [pc, #36]	; (80090ac <_Bfree+0x40>)
 8009086:	218a      	movs	r1, #138	; 0x8a
 8009088:	f000 fe68 	bl	8009d5c <__assert_func>
 800908c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009090:	6006      	str	r6, [r0, #0]
 8009092:	60c6      	str	r6, [r0, #12]
 8009094:	b13c      	cbz	r4, 80090a6 <_Bfree+0x3a>
 8009096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009098:	6862      	ldr	r2, [r4, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090a0:	6021      	str	r1, [r4, #0]
 80090a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
 80090a8:	0800a2cd 	.word	0x0800a2cd
 80090ac:	0800a3b4 	.word	0x0800a3b4

080090b0 <__multadd>:
 80090b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b4:	690e      	ldr	r6, [r1, #16]
 80090b6:	4607      	mov	r7, r0
 80090b8:	4698      	mov	r8, r3
 80090ba:	460c      	mov	r4, r1
 80090bc:	f101 0014 	add.w	r0, r1, #20
 80090c0:	2300      	movs	r3, #0
 80090c2:	6805      	ldr	r5, [r0, #0]
 80090c4:	b2a9      	uxth	r1, r5
 80090c6:	fb02 8101 	mla	r1, r2, r1, r8
 80090ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80090ce:	0c2d      	lsrs	r5, r5, #16
 80090d0:	fb02 c505 	mla	r5, r2, r5, ip
 80090d4:	b289      	uxth	r1, r1
 80090d6:	3301      	adds	r3, #1
 80090d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80090dc:	429e      	cmp	r6, r3
 80090de:	f840 1b04 	str.w	r1, [r0], #4
 80090e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80090e6:	dcec      	bgt.n	80090c2 <__multadd+0x12>
 80090e8:	f1b8 0f00 	cmp.w	r8, #0
 80090ec:	d022      	beq.n	8009134 <__multadd+0x84>
 80090ee:	68a3      	ldr	r3, [r4, #8]
 80090f0:	42b3      	cmp	r3, r6
 80090f2:	dc19      	bgt.n	8009128 <__multadd+0x78>
 80090f4:	6861      	ldr	r1, [r4, #4]
 80090f6:	4638      	mov	r0, r7
 80090f8:	3101      	adds	r1, #1
 80090fa:	f7ff ff77 	bl	8008fec <_Balloc>
 80090fe:	4605      	mov	r5, r0
 8009100:	b928      	cbnz	r0, 800910e <__multadd+0x5e>
 8009102:	4602      	mov	r2, r0
 8009104:	4b0d      	ldr	r3, [pc, #52]	; (800913c <__multadd+0x8c>)
 8009106:	480e      	ldr	r0, [pc, #56]	; (8009140 <__multadd+0x90>)
 8009108:	21b5      	movs	r1, #181	; 0xb5
 800910a:	f000 fe27 	bl	8009d5c <__assert_func>
 800910e:	6922      	ldr	r2, [r4, #16]
 8009110:	3202      	adds	r2, #2
 8009112:	f104 010c 	add.w	r1, r4, #12
 8009116:	0092      	lsls	r2, r2, #2
 8009118:	300c      	adds	r0, #12
 800911a:	f7fe fb51 	bl	80077c0 <memcpy>
 800911e:	4621      	mov	r1, r4
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff ffa3 	bl	800906c <_Bfree>
 8009126:	462c      	mov	r4, r5
 8009128:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800912c:	3601      	adds	r6, #1
 800912e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009132:	6126      	str	r6, [r4, #16]
 8009134:	4620      	mov	r0, r4
 8009136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800913a:	bf00      	nop
 800913c:	0800a343 	.word	0x0800a343
 8009140:	0800a3b4 	.word	0x0800a3b4

08009144 <__hi0bits>:
 8009144:	0c03      	lsrs	r3, r0, #16
 8009146:	041b      	lsls	r3, r3, #16
 8009148:	b9d3      	cbnz	r3, 8009180 <__hi0bits+0x3c>
 800914a:	0400      	lsls	r0, r0, #16
 800914c:	2310      	movs	r3, #16
 800914e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009152:	bf04      	itt	eq
 8009154:	0200      	lsleq	r0, r0, #8
 8009156:	3308      	addeq	r3, #8
 8009158:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800915c:	bf04      	itt	eq
 800915e:	0100      	lsleq	r0, r0, #4
 8009160:	3304      	addeq	r3, #4
 8009162:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009166:	bf04      	itt	eq
 8009168:	0080      	lsleq	r0, r0, #2
 800916a:	3302      	addeq	r3, #2
 800916c:	2800      	cmp	r0, #0
 800916e:	db05      	blt.n	800917c <__hi0bits+0x38>
 8009170:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009174:	f103 0301 	add.w	r3, r3, #1
 8009178:	bf08      	it	eq
 800917a:	2320      	moveq	r3, #32
 800917c:	4618      	mov	r0, r3
 800917e:	4770      	bx	lr
 8009180:	2300      	movs	r3, #0
 8009182:	e7e4      	b.n	800914e <__hi0bits+0xa>

08009184 <__lo0bits>:
 8009184:	6803      	ldr	r3, [r0, #0]
 8009186:	f013 0207 	ands.w	r2, r3, #7
 800918a:	4601      	mov	r1, r0
 800918c:	d00b      	beq.n	80091a6 <__lo0bits+0x22>
 800918e:	07da      	lsls	r2, r3, #31
 8009190:	d424      	bmi.n	80091dc <__lo0bits+0x58>
 8009192:	0798      	lsls	r0, r3, #30
 8009194:	bf49      	itett	mi
 8009196:	085b      	lsrmi	r3, r3, #1
 8009198:	089b      	lsrpl	r3, r3, #2
 800919a:	2001      	movmi	r0, #1
 800919c:	600b      	strmi	r3, [r1, #0]
 800919e:	bf5c      	itt	pl
 80091a0:	600b      	strpl	r3, [r1, #0]
 80091a2:	2002      	movpl	r0, #2
 80091a4:	4770      	bx	lr
 80091a6:	b298      	uxth	r0, r3
 80091a8:	b9b0      	cbnz	r0, 80091d8 <__lo0bits+0x54>
 80091aa:	0c1b      	lsrs	r3, r3, #16
 80091ac:	2010      	movs	r0, #16
 80091ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091b2:	bf04      	itt	eq
 80091b4:	0a1b      	lsreq	r3, r3, #8
 80091b6:	3008      	addeq	r0, #8
 80091b8:	071a      	lsls	r2, r3, #28
 80091ba:	bf04      	itt	eq
 80091bc:	091b      	lsreq	r3, r3, #4
 80091be:	3004      	addeq	r0, #4
 80091c0:	079a      	lsls	r2, r3, #30
 80091c2:	bf04      	itt	eq
 80091c4:	089b      	lsreq	r3, r3, #2
 80091c6:	3002      	addeq	r0, #2
 80091c8:	07da      	lsls	r2, r3, #31
 80091ca:	d403      	bmi.n	80091d4 <__lo0bits+0x50>
 80091cc:	085b      	lsrs	r3, r3, #1
 80091ce:	f100 0001 	add.w	r0, r0, #1
 80091d2:	d005      	beq.n	80091e0 <__lo0bits+0x5c>
 80091d4:	600b      	str	r3, [r1, #0]
 80091d6:	4770      	bx	lr
 80091d8:	4610      	mov	r0, r2
 80091da:	e7e8      	b.n	80091ae <__lo0bits+0x2a>
 80091dc:	2000      	movs	r0, #0
 80091de:	4770      	bx	lr
 80091e0:	2020      	movs	r0, #32
 80091e2:	4770      	bx	lr

080091e4 <__i2b>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	460c      	mov	r4, r1
 80091e8:	2101      	movs	r1, #1
 80091ea:	f7ff feff 	bl	8008fec <_Balloc>
 80091ee:	4602      	mov	r2, r0
 80091f0:	b928      	cbnz	r0, 80091fe <__i2b+0x1a>
 80091f2:	4b05      	ldr	r3, [pc, #20]	; (8009208 <__i2b+0x24>)
 80091f4:	4805      	ldr	r0, [pc, #20]	; (800920c <__i2b+0x28>)
 80091f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091fa:	f000 fdaf 	bl	8009d5c <__assert_func>
 80091fe:	2301      	movs	r3, #1
 8009200:	6144      	str	r4, [r0, #20]
 8009202:	6103      	str	r3, [r0, #16]
 8009204:	bd10      	pop	{r4, pc}
 8009206:	bf00      	nop
 8009208:	0800a343 	.word	0x0800a343
 800920c:	0800a3b4 	.word	0x0800a3b4

08009210 <__multiply>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	4614      	mov	r4, r2
 8009216:	690a      	ldr	r2, [r1, #16]
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	429a      	cmp	r2, r3
 800921c:	bfb8      	it	lt
 800921e:	460b      	movlt	r3, r1
 8009220:	460d      	mov	r5, r1
 8009222:	bfbc      	itt	lt
 8009224:	4625      	movlt	r5, r4
 8009226:	461c      	movlt	r4, r3
 8009228:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800922c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009230:	68ab      	ldr	r3, [r5, #8]
 8009232:	6869      	ldr	r1, [r5, #4]
 8009234:	eb0a 0709 	add.w	r7, sl, r9
 8009238:	42bb      	cmp	r3, r7
 800923a:	b085      	sub	sp, #20
 800923c:	bfb8      	it	lt
 800923e:	3101      	addlt	r1, #1
 8009240:	f7ff fed4 	bl	8008fec <_Balloc>
 8009244:	b930      	cbnz	r0, 8009254 <__multiply+0x44>
 8009246:	4602      	mov	r2, r0
 8009248:	4b42      	ldr	r3, [pc, #264]	; (8009354 <__multiply+0x144>)
 800924a:	4843      	ldr	r0, [pc, #268]	; (8009358 <__multiply+0x148>)
 800924c:	f240 115d 	movw	r1, #349	; 0x15d
 8009250:	f000 fd84 	bl	8009d5c <__assert_func>
 8009254:	f100 0614 	add.w	r6, r0, #20
 8009258:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800925c:	4633      	mov	r3, r6
 800925e:	2200      	movs	r2, #0
 8009260:	4543      	cmp	r3, r8
 8009262:	d31e      	bcc.n	80092a2 <__multiply+0x92>
 8009264:	f105 0c14 	add.w	ip, r5, #20
 8009268:	f104 0314 	add.w	r3, r4, #20
 800926c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009270:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009274:	9202      	str	r2, [sp, #8]
 8009276:	ebac 0205 	sub.w	r2, ip, r5
 800927a:	3a15      	subs	r2, #21
 800927c:	f022 0203 	bic.w	r2, r2, #3
 8009280:	3204      	adds	r2, #4
 8009282:	f105 0115 	add.w	r1, r5, #21
 8009286:	458c      	cmp	ip, r1
 8009288:	bf38      	it	cc
 800928a:	2204      	movcc	r2, #4
 800928c:	9201      	str	r2, [sp, #4]
 800928e:	9a02      	ldr	r2, [sp, #8]
 8009290:	9303      	str	r3, [sp, #12]
 8009292:	429a      	cmp	r2, r3
 8009294:	d808      	bhi.n	80092a8 <__multiply+0x98>
 8009296:	2f00      	cmp	r7, #0
 8009298:	dc55      	bgt.n	8009346 <__multiply+0x136>
 800929a:	6107      	str	r7, [r0, #16]
 800929c:	b005      	add	sp, #20
 800929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a2:	f843 2b04 	str.w	r2, [r3], #4
 80092a6:	e7db      	b.n	8009260 <__multiply+0x50>
 80092a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80092ac:	f1ba 0f00 	cmp.w	sl, #0
 80092b0:	d020      	beq.n	80092f4 <__multiply+0xe4>
 80092b2:	f105 0e14 	add.w	lr, r5, #20
 80092b6:	46b1      	mov	r9, r6
 80092b8:	2200      	movs	r2, #0
 80092ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 80092be:	f8d9 b000 	ldr.w	fp, [r9]
 80092c2:	b2a1      	uxth	r1, r4
 80092c4:	fa1f fb8b 	uxth.w	fp, fp
 80092c8:	fb0a b101 	mla	r1, sl, r1, fp
 80092cc:	4411      	add	r1, r2
 80092ce:	f8d9 2000 	ldr.w	r2, [r9]
 80092d2:	0c24      	lsrs	r4, r4, #16
 80092d4:	0c12      	lsrs	r2, r2, #16
 80092d6:	fb0a 2404 	mla	r4, sl, r4, r2
 80092da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80092de:	b289      	uxth	r1, r1
 80092e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80092e4:	45f4      	cmp	ip, lr
 80092e6:	f849 1b04 	str.w	r1, [r9], #4
 80092ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80092ee:	d8e4      	bhi.n	80092ba <__multiply+0xaa>
 80092f0:	9901      	ldr	r1, [sp, #4]
 80092f2:	5072      	str	r2, [r6, r1]
 80092f4:	9a03      	ldr	r2, [sp, #12]
 80092f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092fa:	3304      	adds	r3, #4
 80092fc:	f1b9 0f00 	cmp.w	r9, #0
 8009300:	d01f      	beq.n	8009342 <__multiply+0x132>
 8009302:	6834      	ldr	r4, [r6, #0]
 8009304:	f105 0114 	add.w	r1, r5, #20
 8009308:	46b6      	mov	lr, r6
 800930a:	f04f 0a00 	mov.w	sl, #0
 800930e:	880a      	ldrh	r2, [r1, #0]
 8009310:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009314:	fb09 b202 	mla	r2, r9, r2, fp
 8009318:	4492      	add	sl, r2
 800931a:	b2a4      	uxth	r4, r4
 800931c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009320:	f84e 4b04 	str.w	r4, [lr], #4
 8009324:	f851 4b04 	ldr.w	r4, [r1], #4
 8009328:	f8be 2000 	ldrh.w	r2, [lr]
 800932c:	0c24      	lsrs	r4, r4, #16
 800932e:	fb09 2404 	mla	r4, r9, r4, r2
 8009332:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009336:	458c      	cmp	ip, r1
 8009338:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800933c:	d8e7      	bhi.n	800930e <__multiply+0xfe>
 800933e:	9a01      	ldr	r2, [sp, #4]
 8009340:	50b4      	str	r4, [r6, r2]
 8009342:	3604      	adds	r6, #4
 8009344:	e7a3      	b.n	800928e <__multiply+0x7e>
 8009346:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1a5      	bne.n	800929a <__multiply+0x8a>
 800934e:	3f01      	subs	r7, #1
 8009350:	e7a1      	b.n	8009296 <__multiply+0x86>
 8009352:	bf00      	nop
 8009354:	0800a343 	.word	0x0800a343
 8009358:	0800a3b4 	.word	0x0800a3b4

0800935c <__pow5mult>:
 800935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009360:	4615      	mov	r5, r2
 8009362:	f012 0203 	ands.w	r2, r2, #3
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	d007      	beq.n	800937c <__pow5mult+0x20>
 800936c:	4c25      	ldr	r4, [pc, #148]	; (8009404 <__pow5mult+0xa8>)
 800936e:	3a01      	subs	r2, #1
 8009370:	2300      	movs	r3, #0
 8009372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009376:	f7ff fe9b 	bl	80090b0 <__multadd>
 800937a:	4607      	mov	r7, r0
 800937c:	10ad      	asrs	r5, r5, #2
 800937e:	d03d      	beq.n	80093fc <__pow5mult+0xa0>
 8009380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009382:	b97c      	cbnz	r4, 80093a4 <__pow5mult+0x48>
 8009384:	2010      	movs	r0, #16
 8009386:	f7ff fe29 	bl	8008fdc <malloc>
 800938a:	4602      	mov	r2, r0
 800938c:	6270      	str	r0, [r6, #36]	; 0x24
 800938e:	b928      	cbnz	r0, 800939c <__pow5mult+0x40>
 8009390:	4b1d      	ldr	r3, [pc, #116]	; (8009408 <__pow5mult+0xac>)
 8009392:	481e      	ldr	r0, [pc, #120]	; (800940c <__pow5mult+0xb0>)
 8009394:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009398:	f000 fce0 	bl	8009d5c <__assert_func>
 800939c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093a0:	6004      	str	r4, [r0, #0]
 80093a2:	60c4      	str	r4, [r0, #12]
 80093a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093ac:	b94c      	cbnz	r4, 80093c2 <__pow5mult+0x66>
 80093ae:	f240 2171 	movw	r1, #625	; 0x271
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7ff ff16 	bl	80091e4 <__i2b>
 80093b8:	2300      	movs	r3, #0
 80093ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80093be:	4604      	mov	r4, r0
 80093c0:	6003      	str	r3, [r0, #0]
 80093c2:	f04f 0900 	mov.w	r9, #0
 80093c6:	07eb      	lsls	r3, r5, #31
 80093c8:	d50a      	bpl.n	80093e0 <__pow5mult+0x84>
 80093ca:	4639      	mov	r1, r7
 80093cc:	4622      	mov	r2, r4
 80093ce:	4630      	mov	r0, r6
 80093d0:	f7ff ff1e 	bl	8009210 <__multiply>
 80093d4:	4639      	mov	r1, r7
 80093d6:	4680      	mov	r8, r0
 80093d8:	4630      	mov	r0, r6
 80093da:	f7ff fe47 	bl	800906c <_Bfree>
 80093de:	4647      	mov	r7, r8
 80093e0:	106d      	asrs	r5, r5, #1
 80093e2:	d00b      	beq.n	80093fc <__pow5mult+0xa0>
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	b938      	cbnz	r0, 80093f8 <__pow5mult+0x9c>
 80093e8:	4622      	mov	r2, r4
 80093ea:	4621      	mov	r1, r4
 80093ec:	4630      	mov	r0, r6
 80093ee:	f7ff ff0f 	bl	8009210 <__multiply>
 80093f2:	6020      	str	r0, [r4, #0]
 80093f4:	f8c0 9000 	str.w	r9, [r0]
 80093f8:	4604      	mov	r4, r0
 80093fa:	e7e4      	b.n	80093c6 <__pow5mult+0x6a>
 80093fc:	4638      	mov	r0, r7
 80093fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009402:	bf00      	nop
 8009404:	0800a508 	.word	0x0800a508
 8009408:	0800a2cd 	.word	0x0800a2cd
 800940c:	0800a3b4 	.word	0x0800a3b4

08009410 <__lshift>:
 8009410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009414:	460c      	mov	r4, r1
 8009416:	6849      	ldr	r1, [r1, #4]
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	4607      	mov	r7, r0
 8009422:	4691      	mov	r9, r2
 8009424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009428:	f108 0601 	add.w	r6, r8, #1
 800942c:	42b3      	cmp	r3, r6
 800942e:	db0b      	blt.n	8009448 <__lshift+0x38>
 8009430:	4638      	mov	r0, r7
 8009432:	f7ff fddb 	bl	8008fec <_Balloc>
 8009436:	4605      	mov	r5, r0
 8009438:	b948      	cbnz	r0, 800944e <__lshift+0x3e>
 800943a:	4602      	mov	r2, r0
 800943c:	4b28      	ldr	r3, [pc, #160]	; (80094e0 <__lshift+0xd0>)
 800943e:	4829      	ldr	r0, [pc, #164]	; (80094e4 <__lshift+0xd4>)
 8009440:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009444:	f000 fc8a 	bl	8009d5c <__assert_func>
 8009448:	3101      	adds	r1, #1
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	e7ee      	b.n	800942c <__lshift+0x1c>
 800944e:	2300      	movs	r3, #0
 8009450:	f100 0114 	add.w	r1, r0, #20
 8009454:	f100 0210 	add.w	r2, r0, #16
 8009458:	4618      	mov	r0, r3
 800945a:	4553      	cmp	r3, sl
 800945c:	db33      	blt.n	80094c6 <__lshift+0xb6>
 800945e:	6920      	ldr	r0, [r4, #16]
 8009460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009464:	f104 0314 	add.w	r3, r4, #20
 8009468:	f019 091f 	ands.w	r9, r9, #31
 800946c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009470:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009474:	d02b      	beq.n	80094ce <__lshift+0xbe>
 8009476:	f1c9 0e20 	rsb	lr, r9, #32
 800947a:	468a      	mov	sl, r1
 800947c:	2200      	movs	r2, #0
 800947e:	6818      	ldr	r0, [r3, #0]
 8009480:	fa00 f009 	lsl.w	r0, r0, r9
 8009484:	4302      	orrs	r2, r0
 8009486:	f84a 2b04 	str.w	r2, [sl], #4
 800948a:	f853 2b04 	ldr.w	r2, [r3], #4
 800948e:	459c      	cmp	ip, r3
 8009490:	fa22 f20e 	lsr.w	r2, r2, lr
 8009494:	d8f3      	bhi.n	800947e <__lshift+0x6e>
 8009496:	ebac 0304 	sub.w	r3, ip, r4
 800949a:	3b15      	subs	r3, #21
 800949c:	f023 0303 	bic.w	r3, r3, #3
 80094a0:	3304      	adds	r3, #4
 80094a2:	f104 0015 	add.w	r0, r4, #21
 80094a6:	4584      	cmp	ip, r0
 80094a8:	bf38      	it	cc
 80094aa:	2304      	movcc	r3, #4
 80094ac:	50ca      	str	r2, [r1, r3]
 80094ae:	b10a      	cbz	r2, 80094b4 <__lshift+0xa4>
 80094b0:	f108 0602 	add.w	r6, r8, #2
 80094b4:	3e01      	subs	r6, #1
 80094b6:	4638      	mov	r0, r7
 80094b8:	612e      	str	r6, [r5, #16]
 80094ba:	4621      	mov	r1, r4
 80094bc:	f7ff fdd6 	bl	800906c <_Bfree>
 80094c0:	4628      	mov	r0, r5
 80094c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80094ca:	3301      	adds	r3, #1
 80094cc:	e7c5      	b.n	800945a <__lshift+0x4a>
 80094ce:	3904      	subs	r1, #4
 80094d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80094d8:	459c      	cmp	ip, r3
 80094da:	d8f9      	bhi.n	80094d0 <__lshift+0xc0>
 80094dc:	e7ea      	b.n	80094b4 <__lshift+0xa4>
 80094de:	bf00      	nop
 80094e0:	0800a343 	.word	0x0800a343
 80094e4:	0800a3b4 	.word	0x0800a3b4

080094e8 <__mcmp>:
 80094e8:	b530      	push	{r4, r5, lr}
 80094ea:	6902      	ldr	r2, [r0, #16]
 80094ec:	690c      	ldr	r4, [r1, #16]
 80094ee:	1b12      	subs	r2, r2, r4
 80094f0:	d10e      	bne.n	8009510 <__mcmp+0x28>
 80094f2:	f100 0314 	add.w	r3, r0, #20
 80094f6:	3114      	adds	r1, #20
 80094f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009500:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009504:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009508:	42a5      	cmp	r5, r4
 800950a:	d003      	beq.n	8009514 <__mcmp+0x2c>
 800950c:	d305      	bcc.n	800951a <__mcmp+0x32>
 800950e:	2201      	movs	r2, #1
 8009510:	4610      	mov	r0, r2
 8009512:	bd30      	pop	{r4, r5, pc}
 8009514:	4283      	cmp	r3, r0
 8009516:	d3f3      	bcc.n	8009500 <__mcmp+0x18>
 8009518:	e7fa      	b.n	8009510 <__mcmp+0x28>
 800951a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800951e:	e7f7      	b.n	8009510 <__mcmp+0x28>

08009520 <__mdiff>:
 8009520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	460c      	mov	r4, r1
 8009526:	4606      	mov	r6, r0
 8009528:	4611      	mov	r1, r2
 800952a:	4620      	mov	r0, r4
 800952c:	4617      	mov	r7, r2
 800952e:	f7ff ffdb 	bl	80094e8 <__mcmp>
 8009532:	1e05      	subs	r5, r0, #0
 8009534:	d110      	bne.n	8009558 <__mdiff+0x38>
 8009536:	4629      	mov	r1, r5
 8009538:	4630      	mov	r0, r6
 800953a:	f7ff fd57 	bl	8008fec <_Balloc>
 800953e:	b930      	cbnz	r0, 800954e <__mdiff+0x2e>
 8009540:	4b39      	ldr	r3, [pc, #228]	; (8009628 <__mdiff+0x108>)
 8009542:	4602      	mov	r2, r0
 8009544:	f240 2132 	movw	r1, #562	; 0x232
 8009548:	4838      	ldr	r0, [pc, #224]	; (800962c <__mdiff+0x10c>)
 800954a:	f000 fc07 	bl	8009d5c <__assert_func>
 800954e:	2301      	movs	r3, #1
 8009550:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009558:	bfa4      	itt	ge
 800955a:	463b      	movge	r3, r7
 800955c:	4627      	movge	r7, r4
 800955e:	4630      	mov	r0, r6
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	bfa6      	itte	ge
 8009564:	461c      	movge	r4, r3
 8009566:	2500      	movge	r5, #0
 8009568:	2501      	movlt	r5, #1
 800956a:	f7ff fd3f 	bl	8008fec <_Balloc>
 800956e:	b920      	cbnz	r0, 800957a <__mdiff+0x5a>
 8009570:	4b2d      	ldr	r3, [pc, #180]	; (8009628 <__mdiff+0x108>)
 8009572:	4602      	mov	r2, r0
 8009574:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009578:	e7e6      	b.n	8009548 <__mdiff+0x28>
 800957a:	693e      	ldr	r6, [r7, #16]
 800957c:	60c5      	str	r5, [r0, #12]
 800957e:	6925      	ldr	r5, [r4, #16]
 8009580:	f107 0114 	add.w	r1, r7, #20
 8009584:	f104 0914 	add.w	r9, r4, #20
 8009588:	f100 0e14 	add.w	lr, r0, #20
 800958c:	f107 0210 	add.w	r2, r7, #16
 8009590:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009594:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009598:	46f2      	mov	sl, lr
 800959a:	2700      	movs	r7, #0
 800959c:	f859 3b04 	ldr.w	r3, [r9], #4
 80095a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095a4:	fa1f f883 	uxth.w	r8, r3
 80095a8:	fa17 f78b 	uxtah	r7, r7, fp
 80095ac:	0c1b      	lsrs	r3, r3, #16
 80095ae:	eba7 0808 	sub.w	r8, r7, r8
 80095b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095ba:	fa1f f888 	uxth.w	r8, r8
 80095be:	141f      	asrs	r7, r3, #16
 80095c0:	454d      	cmp	r5, r9
 80095c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80095c6:	f84a 3b04 	str.w	r3, [sl], #4
 80095ca:	d8e7      	bhi.n	800959c <__mdiff+0x7c>
 80095cc:	1b2b      	subs	r3, r5, r4
 80095ce:	3b15      	subs	r3, #21
 80095d0:	f023 0303 	bic.w	r3, r3, #3
 80095d4:	3304      	adds	r3, #4
 80095d6:	3415      	adds	r4, #21
 80095d8:	42a5      	cmp	r5, r4
 80095da:	bf38      	it	cc
 80095dc:	2304      	movcc	r3, #4
 80095de:	4419      	add	r1, r3
 80095e0:	4473      	add	r3, lr
 80095e2:	469e      	mov	lr, r3
 80095e4:	460d      	mov	r5, r1
 80095e6:	4565      	cmp	r5, ip
 80095e8:	d30e      	bcc.n	8009608 <__mdiff+0xe8>
 80095ea:	f10c 0203 	add.w	r2, ip, #3
 80095ee:	1a52      	subs	r2, r2, r1
 80095f0:	f022 0203 	bic.w	r2, r2, #3
 80095f4:	3903      	subs	r1, #3
 80095f6:	458c      	cmp	ip, r1
 80095f8:	bf38      	it	cc
 80095fa:	2200      	movcc	r2, #0
 80095fc:	441a      	add	r2, r3
 80095fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009602:	b17b      	cbz	r3, 8009624 <__mdiff+0x104>
 8009604:	6106      	str	r6, [r0, #16]
 8009606:	e7a5      	b.n	8009554 <__mdiff+0x34>
 8009608:	f855 8b04 	ldr.w	r8, [r5], #4
 800960c:	fa17 f488 	uxtah	r4, r7, r8
 8009610:	1422      	asrs	r2, r4, #16
 8009612:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009616:	b2a4      	uxth	r4, r4
 8009618:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800961c:	f84e 4b04 	str.w	r4, [lr], #4
 8009620:	1417      	asrs	r7, r2, #16
 8009622:	e7e0      	b.n	80095e6 <__mdiff+0xc6>
 8009624:	3e01      	subs	r6, #1
 8009626:	e7ea      	b.n	80095fe <__mdiff+0xde>
 8009628:	0800a343 	.word	0x0800a343
 800962c:	0800a3b4 	.word	0x0800a3b4

08009630 <__d2b>:
 8009630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009634:	4689      	mov	r9, r1
 8009636:	2101      	movs	r1, #1
 8009638:	ec57 6b10 	vmov	r6, r7, d0
 800963c:	4690      	mov	r8, r2
 800963e:	f7ff fcd5 	bl	8008fec <_Balloc>
 8009642:	4604      	mov	r4, r0
 8009644:	b930      	cbnz	r0, 8009654 <__d2b+0x24>
 8009646:	4602      	mov	r2, r0
 8009648:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <__d2b+0xb0>)
 800964a:	4826      	ldr	r0, [pc, #152]	; (80096e4 <__d2b+0xb4>)
 800964c:	f240 310a 	movw	r1, #778	; 0x30a
 8009650:	f000 fb84 	bl	8009d5c <__assert_func>
 8009654:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009658:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800965c:	bb35      	cbnz	r5, 80096ac <__d2b+0x7c>
 800965e:	2e00      	cmp	r6, #0
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	d028      	beq.n	80096b6 <__d2b+0x86>
 8009664:	4668      	mov	r0, sp
 8009666:	9600      	str	r6, [sp, #0]
 8009668:	f7ff fd8c 	bl	8009184 <__lo0bits>
 800966c:	9900      	ldr	r1, [sp, #0]
 800966e:	b300      	cbz	r0, 80096b2 <__d2b+0x82>
 8009670:	9a01      	ldr	r2, [sp, #4]
 8009672:	f1c0 0320 	rsb	r3, r0, #32
 8009676:	fa02 f303 	lsl.w	r3, r2, r3
 800967a:	430b      	orrs	r3, r1
 800967c:	40c2      	lsrs	r2, r0
 800967e:	6163      	str	r3, [r4, #20]
 8009680:	9201      	str	r2, [sp, #4]
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	61a3      	str	r3, [r4, #24]
 8009686:	2b00      	cmp	r3, #0
 8009688:	bf14      	ite	ne
 800968a:	2202      	movne	r2, #2
 800968c:	2201      	moveq	r2, #1
 800968e:	6122      	str	r2, [r4, #16]
 8009690:	b1d5      	cbz	r5, 80096c8 <__d2b+0x98>
 8009692:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009696:	4405      	add	r5, r0
 8009698:	f8c9 5000 	str.w	r5, [r9]
 800969c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096a0:	f8c8 0000 	str.w	r0, [r8]
 80096a4:	4620      	mov	r0, r4
 80096a6:	b003      	add	sp, #12
 80096a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096b0:	e7d5      	b.n	800965e <__d2b+0x2e>
 80096b2:	6161      	str	r1, [r4, #20]
 80096b4:	e7e5      	b.n	8009682 <__d2b+0x52>
 80096b6:	a801      	add	r0, sp, #4
 80096b8:	f7ff fd64 	bl	8009184 <__lo0bits>
 80096bc:	9b01      	ldr	r3, [sp, #4]
 80096be:	6163      	str	r3, [r4, #20]
 80096c0:	2201      	movs	r2, #1
 80096c2:	6122      	str	r2, [r4, #16]
 80096c4:	3020      	adds	r0, #32
 80096c6:	e7e3      	b.n	8009690 <__d2b+0x60>
 80096c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096d0:	f8c9 0000 	str.w	r0, [r9]
 80096d4:	6918      	ldr	r0, [r3, #16]
 80096d6:	f7ff fd35 	bl	8009144 <__hi0bits>
 80096da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096de:	e7df      	b.n	80096a0 <__d2b+0x70>
 80096e0:	0800a343 	.word	0x0800a343
 80096e4:	0800a3b4 	.word	0x0800a3b4

080096e8 <_calloc_r>:
 80096e8:	b513      	push	{r0, r1, r4, lr}
 80096ea:	434a      	muls	r2, r1
 80096ec:	4611      	mov	r1, r2
 80096ee:	9201      	str	r2, [sp, #4]
 80096f0:	f000 f85a 	bl	80097a8 <_malloc_r>
 80096f4:	4604      	mov	r4, r0
 80096f6:	b118      	cbz	r0, 8009700 <_calloc_r+0x18>
 80096f8:	9a01      	ldr	r2, [sp, #4]
 80096fa:	2100      	movs	r1, #0
 80096fc:	f7fe f86e 	bl	80077dc <memset>
 8009700:	4620      	mov	r0, r4
 8009702:	b002      	add	sp, #8
 8009704:	bd10      	pop	{r4, pc}
	...

08009708 <_free_r>:
 8009708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800970a:	2900      	cmp	r1, #0
 800970c:	d048      	beq.n	80097a0 <_free_r+0x98>
 800970e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009712:	9001      	str	r0, [sp, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	f1a1 0404 	sub.w	r4, r1, #4
 800971a:	bfb8      	it	lt
 800971c:	18e4      	addlt	r4, r4, r3
 800971e:	f000 fca7 	bl	800a070 <__malloc_lock>
 8009722:	4a20      	ldr	r2, [pc, #128]	; (80097a4 <_free_r+0x9c>)
 8009724:	9801      	ldr	r0, [sp, #4]
 8009726:	6813      	ldr	r3, [r2, #0]
 8009728:	4615      	mov	r5, r2
 800972a:	b933      	cbnz	r3, 800973a <_free_r+0x32>
 800972c:	6063      	str	r3, [r4, #4]
 800972e:	6014      	str	r4, [r2, #0]
 8009730:	b003      	add	sp, #12
 8009732:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009736:	f000 bca1 	b.w	800a07c <__malloc_unlock>
 800973a:	42a3      	cmp	r3, r4
 800973c:	d90b      	bls.n	8009756 <_free_r+0x4e>
 800973e:	6821      	ldr	r1, [r4, #0]
 8009740:	1862      	adds	r2, r4, r1
 8009742:	4293      	cmp	r3, r2
 8009744:	bf04      	itt	eq
 8009746:	681a      	ldreq	r2, [r3, #0]
 8009748:	685b      	ldreq	r3, [r3, #4]
 800974a:	6063      	str	r3, [r4, #4]
 800974c:	bf04      	itt	eq
 800974e:	1852      	addeq	r2, r2, r1
 8009750:	6022      	streq	r2, [r4, #0]
 8009752:	602c      	str	r4, [r5, #0]
 8009754:	e7ec      	b.n	8009730 <_free_r+0x28>
 8009756:	461a      	mov	r2, r3
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	b10b      	cbz	r3, 8009760 <_free_r+0x58>
 800975c:	42a3      	cmp	r3, r4
 800975e:	d9fa      	bls.n	8009756 <_free_r+0x4e>
 8009760:	6811      	ldr	r1, [r2, #0]
 8009762:	1855      	adds	r5, r2, r1
 8009764:	42a5      	cmp	r5, r4
 8009766:	d10b      	bne.n	8009780 <_free_r+0x78>
 8009768:	6824      	ldr	r4, [r4, #0]
 800976a:	4421      	add	r1, r4
 800976c:	1854      	adds	r4, r2, r1
 800976e:	42a3      	cmp	r3, r4
 8009770:	6011      	str	r1, [r2, #0]
 8009772:	d1dd      	bne.n	8009730 <_free_r+0x28>
 8009774:	681c      	ldr	r4, [r3, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	6053      	str	r3, [r2, #4]
 800977a:	4421      	add	r1, r4
 800977c:	6011      	str	r1, [r2, #0]
 800977e:	e7d7      	b.n	8009730 <_free_r+0x28>
 8009780:	d902      	bls.n	8009788 <_free_r+0x80>
 8009782:	230c      	movs	r3, #12
 8009784:	6003      	str	r3, [r0, #0]
 8009786:	e7d3      	b.n	8009730 <_free_r+0x28>
 8009788:	6825      	ldr	r5, [r4, #0]
 800978a:	1961      	adds	r1, r4, r5
 800978c:	428b      	cmp	r3, r1
 800978e:	bf04      	itt	eq
 8009790:	6819      	ldreq	r1, [r3, #0]
 8009792:	685b      	ldreq	r3, [r3, #4]
 8009794:	6063      	str	r3, [r4, #4]
 8009796:	bf04      	itt	eq
 8009798:	1949      	addeq	r1, r1, r5
 800979a:	6021      	streq	r1, [r4, #0]
 800979c:	6054      	str	r4, [r2, #4]
 800979e:	e7c7      	b.n	8009730 <_free_r+0x28>
 80097a0:	b003      	add	sp, #12
 80097a2:	bd30      	pop	{r4, r5, pc}
 80097a4:	20001adc 	.word	0x20001adc

080097a8 <_malloc_r>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	1ccd      	adds	r5, r1, #3
 80097ac:	f025 0503 	bic.w	r5, r5, #3
 80097b0:	3508      	adds	r5, #8
 80097b2:	2d0c      	cmp	r5, #12
 80097b4:	bf38      	it	cc
 80097b6:	250c      	movcc	r5, #12
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	4606      	mov	r6, r0
 80097bc:	db01      	blt.n	80097c2 <_malloc_r+0x1a>
 80097be:	42a9      	cmp	r1, r5
 80097c0:	d903      	bls.n	80097ca <_malloc_r+0x22>
 80097c2:	230c      	movs	r3, #12
 80097c4:	6033      	str	r3, [r6, #0]
 80097c6:	2000      	movs	r0, #0
 80097c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ca:	f000 fc51 	bl	800a070 <__malloc_lock>
 80097ce:	4921      	ldr	r1, [pc, #132]	; (8009854 <_malloc_r+0xac>)
 80097d0:	680a      	ldr	r2, [r1, #0]
 80097d2:	4614      	mov	r4, r2
 80097d4:	b99c      	cbnz	r4, 80097fe <_malloc_r+0x56>
 80097d6:	4f20      	ldr	r7, [pc, #128]	; (8009858 <_malloc_r+0xb0>)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	b923      	cbnz	r3, 80097e6 <_malloc_r+0x3e>
 80097dc:	4621      	mov	r1, r4
 80097de:	4630      	mov	r0, r6
 80097e0:	f000 f996 	bl	8009b10 <_sbrk_r>
 80097e4:	6038      	str	r0, [r7, #0]
 80097e6:	4629      	mov	r1, r5
 80097e8:	4630      	mov	r0, r6
 80097ea:	f000 f991 	bl	8009b10 <_sbrk_r>
 80097ee:	1c43      	adds	r3, r0, #1
 80097f0:	d123      	bne.n	800983a <_malloc_r+0x92>
 80097f2:	230c      	movs	r3, #12
 80097f4:	6033      	str	r3, [r6, #0]
 80097f6:	4630      	mov	r0, r6
 80097f8:	f000 fc40 	bl	800a07c <__malloc_unlock>
 80097fc:	e7e3      	b.n	80097c6 <_malloc_r+0x1e>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	1b5b      	subs	r3, r3, r5
 8009802:	d417      	bmi.n	8009834 <_malloc_r+0x8c>
 8009804:	2b0b      	cmp	r3, #11
 8009806:	d903      	bls.n	8009810 <_malloc_r+0x68>
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	441c      	add	r4, r3
 800980c:	6025      	str	r5, [r4, #0]
 800980e:	e004      	b.n	800981a <_malloc_r+0x72>
 8009810:	6863      	ldr	r3, [r4, #4]
 8009812:	42a2      	cmp	r2, r4
 8009814:	bf0c      	ite	eq
 8009816:	600b      	streq	r3, [r1, #0]
 8009818:	6053      	strne	r3, [r2, #4]
 800981a:	4630      	mov	r0, r6
 800981c:	f000 fc2e 	bl	800a07c <__malloc_unlock>
 8009820:	f104 000b 	add.w	r0, r4, #11
 8009824:	1d23      	adds	r3, r4, #4
 8009826:	f020 0007 	bic.w	r0, r0, #7
 800982a:	1ac2      	subs	r2, r0, r3
 800982c:	d0cc      	beq.n	80097c8 <_malloc_r+0x20>
 800982e:	1a1b      	subs	r3, r3, r0
 8009830:	50a3      	str	r3, [r4, r2]
 8009832:	e7c9      	b.n	80097c8 <_malloc_r+0x20>
 8009834:	4622      	mov	r2, r4
 8009836:	6864      	ldr	r4, [r4, #4]
 8009838:	e7cc      	b.n	80097d4 <_malloc_r+0x2c>
 800983a:	1cc4      	adds	r4, r0, #3
 800983c:	f024 0403 	bic.w	r4, r4, #3
 8009840:	42a0      	cmp	r0, r4
 8009842:	d0e3      	beq.n	800980c <_malloc_r+0x64>
 8009844:	1a21      	subs	r1, r4, r0
 8009846:	4630      	mov	r0, r6
 8009848:	f000 f962 	bl	8009b10 <_sbrk_r>
 800984c:	3001      	adds	r0, #1
 800984e:	d1dd      	bne.n	800980c <_malloc_r+0x64>
 8009850:	e7cf      	b.n	80097f2 <_malloc_r+0x4a>
 8009852:	bf00      	nop
 8009854:	20001adc 	.word	0x20001adc
 8009858:	20001ae0 	.word	0x20001ae0

0800985c <__sfputc_r>:
 800985c:	6893      	ldr	r3, [r2, #8]
 800985e:	3b01      	subs	r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	b410      	push	{r4}
 8009864:	6093      	str	r3, [r2, #8]
 8009866:	da08      	bge.n	800987a <__sfputc_r+0x1e>
 8009868:	6994      	ldr	r4, [r2, #24]
 800986a:	42a3      	cmp	r3, r4
 800986c:	db01      	blt.n	8009872 <__sfputc_r+0x16>
 800986e:	290a      	cmp	r1, #10
 8009870:	d103      	bne.n	800987a <__sfputc_r+0x1e>
 8009872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009876:	f000 b99f 	b.w	8009bb8 <__swbuf_r>
 800987a:	6813      	ldr	r3, [r2, #0]
 800987c:	1c58      	adds	r0, r3, #1
 800987e:	6010      	str	r0, [r2, #0]
 8009880:	7019      	strb	r1, [r3, #0]
 8009882:	4608      	mov	r0, r1
 8009884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009888:	4770      	bx	lr

0800988a <__sfputs_r>:
 800988a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988c:	4606      	mov	r6, r0
 800988e:	460f      	mov	r7, r1
 8009890:	4614      	mov	r4, r2
 8009892:	18d5      	adds	r5, r2, r3
 8009894:	42ac      	cmp	r4, r5
 8009896:	d101      	bne.n	800989c <__sfputs_r+0x12>
 8009898:	2000      	movs	r0, #0
 800989a:	e007      	b.n	80098ac <__sfputs_r+0x22>
 800989c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a0:	463a      	mov	r2, r7
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7ff ffda 	bl	800985c <__sfputc_r>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d1f3      	bne.n	8009894 <__sfputs_r+0xa>
 80098ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098b0 <_vfiprintf_r>:
 80098b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b4:	460d      	mov	r5, r1
 80098b6:	b09d      	sub	sp, #116	; 0x74
 80098b8:	4614      	mov	r4, r2
 80098ba:	4698      	mov	r8, r3
 80098bc:	4606      	mov	r6, r0
 80098be:	b118      	cbz	r0, 80098c8 <_vfiprintf_r+0x18>
 80098c0:	6983      	ldr	r3, [r0, #24]
 80098c2:	b90b      	cbnz	r3, 80098c8 <_vfiprintf_r+0x18>
 80098c4:	f7ff fae4 	bl	8008e90 <__sinit>
 80098c8:	4b89      	ldr	r3, [pc, #548]	; (8009af0 <_vfiprintf_r+0x240>)
 80098ca:	429d      	cmp	r5, r3
 80098cc:	d11b      	bne.n	8009906 <_vfiprintf_r+0x56>
 80098ce:	6875      	ldr	r5, [r6, #4]
 80098d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098d2:	07d9      	lsls	r1, r3, #31
 80098d4:	d405      	bmi.n	80098e2 <_vfiprintf_r+0x32>
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	059a      	lsls	r2, r3, #22
 80098da:	d402      	bmi.n	80098e2 <_vfiprintf_r+0x32>
 80098dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098de:	f7ff fb7a 	bl	8008fd6 <__retarget_lock_acquire_recursive>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	071b      	lsls	r3, r3, #28
 80098e6:	d501      	bpl.n	80098ec <_vfiprintf_r+0x3c>
 80098e8:	692b      	ldr	r3, [r5, #16]
 80098ea:	b9eb      	cbnz	r3, 8009928 <_vfiprintf_r+0x78>
 80098ec:	4629      	mov	r1, r5
 80098ee:	4630      	mov	r0, r6
 80098f0:	f000 f9c6 	bl	8009c80 <__swsetup_r>
 80098f4:	b1c0      	cbz	r0, 8009928 <_vfiprintf_r+0x78>
 80098f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098f8:	07dc      	lsls	r4, r3, #31
 80098fa:	d50e      	bpl.n	800991a <_vfiprintf_r+0x6a>
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009900:	b01d      	add	sp, #116	; 0x74
 8009902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009906:	4b7b      	ldr	r3, [pc, #492]	; (8009af4 <_vfiprintf_r+0x244>)
 8009908:	429d      	cmp	r5, r3
 800990a:	d101      	bne.n	8009910 <_vfiprintf_r+0x60>
 800990c:	68b5      	ldr	r5, [r6, #8]
 800990e:	e7df      	b.n	80098d0 <_vfiprintf_r+0x20>
 8009910:	4b79      	ldr	r3, [pc, #484]	; (8009af8 <_vfiprintf_r+0x248>)
 8009912:	429d      	cmp	r5, r3
 8009914:	bf08      	it	eq
 8009916:	68f5      	ldreq	r5, [r6, #12]
 8009918:	e7da      	b.n	80098d0 <_vfiprintf_r+0x20>
 800991a:	89ab      	ldrh	r3, [r5, #12]
 800991c:	0598      	lsls	r0, r3, #22
 800991e:	d4ed      	bmi.n	80098fc <_vfiprintf_r+0x4c>
 8009920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009922:	f7ff fb59 	bl	8008fd8 <__retarget_lock_release_recursive>
 8009926:	e7e9      	b.n	80098fc <_vfiprintf_r+0x4c>
 8009928:	2300      	movs	r3, #0
 800992a:	9309      	str	r3, [sp, #36]	; 0x24
 800992c:	2320      	movs	r3, #32
 800992e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009932:	f8cd 800c 	str.w	r8, [sp, #12]
 8009936:	2330      	movs	r3, #48	; 0x30
 8009938:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009afc <_vfiprintf_r+0x24c>
 800993c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009940:	f04f 0901 	mov.w	r9, #1
 8009944:	4623      	mov	r3, r4
 8009946:	469a      	mov	sl, r3
 8009948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800994c:	b10a      	cbz	r2, 8009952 <_vfiprintf_r+0xa2>
 800994e:	2a25      	cmp	r2, #37	; 0x25
 8009950:	d1f9      	bne.n	8009946 <_vfiprintf_r+0x96>
 8009952:	ebba 0b04 	subs.w	fp, sl, r4
 8009956:	d00b      	beq.n	8009970 <_vfiprintf_r+0xc0>
 8009958:	465b      	mov	r3, fp
 800995a:	4622      	mov	r2, r4
 800995c:	4629      	mov	r1, r5
 800995e:	4630      	mov	r0, r6
 8009960:	f7ff ff93 	bl	800988a <__sfputs_r>
 8009964:	3001      	adds	r0, #1
 8009966:	f000 80aa 	beq.w	8009abe <_vfiprintf_r+0x20e>
 800996a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996c:	445a      	add	r2, fp
 800996e:	9209      	str	r2, [sp, #36]	; 0x24
 8009970:	f89a 3000 	ldrb.w	r3, [sl]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 80a2 	beq.w	8009abe <_vfiprintf_r+0x20e>
 800997a:	2300      	movs	r3, #0
 800997c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009984:	f10a 0a01 	add.w	sl, sl, #1
 8009988:	9304      	str	r3, [sp, #16]
 800998a:	9307      	str	r3, [sp, #28]
 800998c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009990:	931a      	str	r3, [sp, #104]	; 0x68
 8009992:	4654      	mov	r4, sl
 8009994:	2205      	movs	r2, #5
 8009996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999a:	4858      	ldr	r0, [pc, #352]	; (8009afc <_vfiprintf_r+0x24c>)
 800999c:	f7f6 fc20 	bl	80001e0 <memchr>
 80099a0:	9a04      	ldr	r2, [sp, #16]
 80099a2:	b9d8      	cbnz	r0, 80099dc <_vfiprintf_r+0x12c>
 80099a4:	06d1      	lsls	r1, r2, #27
 80099a6:	bf44      	itt	mi
 80099a8:	2320      	movmi	r3, #32
 80099aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ae:	0713      	lsls	r3, r2, #28
 80099b0:	bf44      	itt	mi
 80099b2:	232b      	movmi	r3, #43	; 0x2b
 80099b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b8:	f89a 3000 	ldrb.w	r3, [sl]
 80099bc:	2b2a      	cmp	r3, #42	; 0x2a
 80099be:	d015      	beq.n	80099ec <_vfiprintf_r+0x13c>
 80099c0:	9a07      	ldr	r2, [sp, #28]
 80099c2:	4654      	mov	r4, sl
 80099c4:	2000      	movs	r0, #0
 80099c6:	f04f 0c0a 	mov.w	ip, #10
 80099ca:	4621      	mov	r1, r4
 80099cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099d0:	3b30      	subs	r3, #48	; 0x30
 80099d2:	2b09      	cmp	r3, #9
 80099d4:	d94e      	bls.n	8009a74 <_vfiprintf_r+0x1c4>
 80099d6:	b1b0      	cbz	r0, 8009a06 <_vfiprintf_r+0x156>
 80099d8:	9207      	str	r2, [sp, #28]
 80099da:	e014      	b.n	8009a06 <_vfiprintf_r+0x156>
 80099dc:	eba0 0308 	sub.w	r3, r0, r8
 80099e0:	fa09 f303 	lsl.w	r3, r9, r3
 80099e4:	4313      	orrs	r3, r2
 80099e6:	9304      	str	r3, [sp, #16]
 80099e8:	46a2      	mov	sl, r4
 80099ea:	e7d2      	b.n	8009992 <_vfiprintf_r+0xe2>
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	1d19      	adds	r1, r3, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	9103      	str	r1, [sp, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	bfbb      	ittet	lt
 80099f8:	425b      	neglt	r3, r3
 80099fa:	f042 0202 	orrlt.w	r2, r2, #2
 80099fe:	9307      	strge	r3, [sp, #28]
 8009a00:	9307      	strlt	r3, [sp, #28]
 8009a02:	bfb8      	it	lt
 8009a04:	9204      	strlt	r2, [sp, #16]
 8009a06:	7823      	ldrb	r3, [r4, #0]
 8009a08:	2b2e      	cmp	r3, #46	; 0x2e
 8009a0a:	d10c      	bne.n	8009a26 <_vfiprintf_r+0x176>
 8009a0c:	7863      	ldrb	r3, [r4, #1]
 8009a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a10:	d135      	bne.n	8009a7e <_vfiprintf_r+0x1ce>
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	1d1a      	adds	r2, r3, #4
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	9203      	str	r2, [sp, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	bfb8      	it	lt
 8009a1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a22:	3402      	adds	r4, #2
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b0c <_vfiprintf_r+0x25c>
 8009a2a:	7821      	ldrb	r1, [r4, #0]
 8009a2c:	2203      	movs	r2, #3
 8009a2e:	4650      	mov	r0, sl
 8009a30:	f7f6 fbd6 	bl	80001e0 <memchr>
 8009a34:	b140      	cbz	r0, 8009a48 <_vfiprintf_r+0x198>
 8009a36:	2340      	movs	r3, #64	; 0x40
 8009a38:	eba0 000a 	sub.w	r0, r0, sl
 8009a3c:	fa03 f000 	lsl.w	r0, r3, r0
 8009a40:	9b04      	ldr	r3, [sp, #16]
 8009a42:	4303      	orrs	r3, r0
 8009a44:	3401      	adds	r4, #1
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4c:	482c      	ldr	r0, [pc, #176]	; (8009b00 <_vfiprintf_r+0x250>)
 8009a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a52:	2206      	movs	r2, #6
 8009a54:	f7f6 fbc4 	bl	80001e0 <memchr>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d03f      	beq.n	8009adc <_vfiprintf_r+0x22c>
 8009a5c:	4b29      	ldr	r3, [pc, #164]	; (8009b04 <_vfiprintf_r+0x254>)
 8009a5e:	bb1b      	cbnz	r3, 8009aa8 <_vfiprintf_r+0x1f8>
 8009a60:	9b03      	ldr	r3, [sp, #12]
 8009a62:	3307      	adds	r3, #7
 8009a64:	f023 0307 	bic.w	r3, r3, #7
 8009a68:	3308      	adds	r3, #8
 8009a6a:	9303      	str	r3, [sp, #12]
 8009a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6e:	443b      	add	r3, r7
 8009a70:	9309      	str	r3, [sp, #36]	; 0x24
 8009a72:	e767      	b.n	8009944 <_vfiprintf_r+0x94>
 8009a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a78:	460c      	mov	r4, r1
 8009a7a:	2001      	movs	r0, #1
 8009a7c:	e7a5      	b.n	80099ca <_vfiprintf_r+0x11a>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	3401      	adds	r4, #1
 8009a82:	9305      	str	r3, [sp, #20]
 8009a84:	4619      	mov	r1, r3
 8009a86:	f04f 0c0a 	mov.w	ip, #10
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a90:	3a30      	subs	r2, #48	; 0x30
 8009a92:	2a09      	cmp	r2, #9
 8009a94:	d903      	bls.n	8009a9e <_vfiprintf_r+0x1ee>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0c5      	beq.n	8009a26 <_vfiprintf_r+0x176>
 8009a9a:	9105      	str	r1, [sp, #20]
 8009a9c:	e7c3      	b.n	8009a26 <_vfiprintf_r+0x176>
 8009a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e7f0      	b.n	8009a8a <_vfiprintf_r+0x1da>
 8009aa8:	ab03      	add	r3, sp, #12
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	462a      	mov	r2, r5
 8009aae:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <_vfiprintf_r+0x258>)
 8009ab0:	a904      	add	r1, sp, #16
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7fd ff3a 	bl	800792c <_printf_float>
 8009ab8:	4607      	mov	r7, r0
 8009aba:	1c78      	adds	r0, r7, #1
 8009abc:	d1d6      	bne.n	8009a6c <_vfiprintf_r+0x1bc>
 8009abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ac0:	07d9      	lsls	r1, r3, #31
 8009ac2:	d405      	bmi.n	8009ad0 <_vfiprintf_r+0x220>
 8009ac4:	89ab      	ldrh	r3, [r5, #12]
 8009ac6:	059a      	lsls	r2, r3, #22
 8009ac8:	d402      	bmi.n	8009ad0 <_vfiprintf_r+0x220>
 8009aca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009acc:	f7ff fa84 	bl	8008fd8 <__retarget_lock_release_recursive>
 8009ad0:	89ab      	ldrh	r3, [r5, #12]
 8009ad2:	065b      	lsls	r3, r3, #25
 8009ad4:	f53f af12 	bmi.w	80098fc <_vfiprintf_r+0x4c>
 8009ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ada:	e711      	b.n	8009900 <_vfiprintf_r+0x50>
 8009adc:	ab03      	add	r3, sp, #12
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	462a      	mov	r2, r5
 8009ae2:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <_vfiprintf_r+0x258>)
 8009ae4:	a904      	add	r1, sp, #16
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f7fe f9c4 	bl	8007e74 <_printf_i>
 8009aec:	e7e4      	b.n	8009ab8 <_vfiprintf_r+0x208>
 8009aee:	bf00      	nop
 8009af0:	0800a374 	.word	0x0800a374
 8009af4:	0800a394 	.word	0x0800a394
 8009af8:	0800a354 	.word	0x0800a354
 8009afc:	0800a514 	.word	0x0800a514
 8009b00:	0800a51e 	.word	0x0800a51e
 8009b04:	0800792d 	.word	0x0800792d
 8009b08:	0800988b 	.word	0x0800988b
 8009b0c:	0800a51a 	.word	0x0800a51a

08009b10 <_sbrk_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4d06      	ldr	r5, [pc, #24]	; (8009b2c <_sbrk_r+0x1c>)
 8009b14:	2300      	movs	r3, #0
 8009b16:	4604      	mov	r4, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	602b      	str	r3, [r5, #0]
 8009b1c:	f7f7 fdfc 	bl	8001718 <_sbrk>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_sbrk_r+0x1a>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_sbrk_r+0x1a>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	20001c54 	.word	0x20001c54

08009b30 <__sread>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	460c      	mov	r4, r1
 8009b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b38:	f000 faa6 	bl	800a088 <_read_r>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	bfab      	itete	ge
 8009b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b42:	89a3      	ldrhlt	r3, [r4, #12]
 8009b44:	181b      	addge	r3, r3, r0
 8009b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b4a:	bfac      	ite	ge
 8009b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b4e:	81a3      	strhlt	r3, [r4, #12]
 8009b50:	bd10      	pop	{r4, pc}

08009b52 <__swrite>:
 8009b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	461f      	mov	r7, r3
 8009b58:	898b      	ldrh	r3, [r1, #12]
 8009b5a:	05db      	lsls	r3, r3, #23
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	4616      	mov	r6, r2
 8009b62:	d505      	bpl.n	8009b70 <__swrite+0x1e>
 8009b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b68:	2302      	movs	r3, #2
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f000 f9f8 	bl	8009f60 <_lseek_r>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	4632      	mov	r2, r6
 8009b7e:	463b      	mov	r3, r7
 8009b80:	4628      	mov	r0, r5
 8009b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b86:	f000 b869 	b.w	8009c5c <_write_r>

08009b8a <__sseek>:
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b92:	f000 f9e5 	bl	8009f60 <_lseek_r>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	bf15      	itete	ne
 8009b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ba6:	81a3      	strheq	r3, [r4, #12]
 8009ba8:	bf18      	it	ne
 8009baa:	81a3      	strhne	r3, [r4, #12]
 8009bac:	bd10      	pop	{r4, pc}

08009bae <__sclose>:
 8009bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb2:	f000 b8f1 	b.w	8009d98 <_close_r>
	...

08009bb8 <__swbuf_r>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	460e      	mov	r6, r1
 8009bbc:	4614      	mov	r4, r2
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	b118      	cbz	r0, 8009bca <__swbuf_r+0x12>
 8009bc2:	6983      	ldr	r3, [r0, #24]
 8009bc4:	b90b      	cbnz	r3, 8009bca <__swbuf_r+0x12>
 8009bc6:	f7ff f963 	bl	8008e90 <__sinit>
 8009bca:	4b21      	ldr	r3, [pc, #132]	; (8009c50 <__swbuf_r+0x98>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	d12b      	bne.n	8009c28 <__swbuf_r+0x70>
 8009bd0:	686c      	ldr	r4, [r5, #4]
 8009bd2:	69a3      	ldr	r3, [r4, #24]
 8009bd4:	60a3      	str	r3, [r4, #8]
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	071a      	lsls	r2, r3, #28
 8009bda:	d52f      	bpl.n	8009c3c <__swbuf_r+0x84>
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	b36b      	cbz	r3, 8009c3c <__swbuf_r+0x84>
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	6820      	ldr	r0, [r4, #0]
 8009be4:	1ac0      	subs	r0, r0, r3
 8009be6:	6963      	ldr	r3, [r4, #20]
 8009be8:	b2f6      	uxtb	r6, r6
 8009bea:	4283      	cmp	r3, r0
 8009bec:	4637      	mov	r7, r6
 8009bee:	dc04      	bgt.n	8009bfa <__swbuf_r+0x42>
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f000 f966 	bl	8009ec4 <_fflush_r>
 8009bf8:	bb30      	cbnz	r0, 8009c48 <__swbuf_r+0x90>
 8009bfa:	68a3      	ldr	r3, [r4, #8]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	60a3      	str	r3, [r4, #8]
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	6022      	str	r2, [r4, #0]
 8009c06:	701e      	strb	r6, [r3, #0]
 8009c08:	6963      	ldr	r3, [r4, #20]
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	4283      	cmp	r3, r0
 8009c0e:	d004      	beq.n	8009c1a <__swbuf_r+0x62>
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	07db      	lsls	r3, r3, #31
 8009c14:	d506      	bpl.n	8009c24 <__swbuf_r+0x6c>
 8009c16:	2e0a      	cmp	r6, #10
 8009c18:	d104      	bne.n	8009c24 <__swbuf_r+0x6c>
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f000 f951 	bl	8009ec4 <_fflush_r>
 8009c22:	b988      	cbnz	r0, 8009c48 <__swbuf_r+0x90>
 8009c24:	4638      	mov	r0, r7
 8009c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c28:	4b0a      	ldr	r3, [pc, #40]	; (8009c54 <__swbuf_r+0x9c>)
 8009c2a:	429c      	cmp	r4, r3
 8009c2c:	d101      	bne.n	8009c32 <__swbuf_r+0x7a>
 8009c2e:	68ac      	ldr	r4, [r5, #8]
 8009c30:	e7cf      	b.n	8009bd2 <__swbuf_r+0x1a>
 8009c32:	4b09      	ldr	r3, [pc, #36]	; (8009c58 <__swbuf_r+0xa0>)
 8009c34:	429c      	cmp	r4, r3
 8009c36:	bf08      	it	eq
 8009c38:	68ec      	ldreq	r4, [r5, #12]
 8009c3a:	e7ca      	b.n	8009bd2 <__swbuf_r+0x1a>
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 f81e 	bl	8009c80 <__swsetup_r>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d0cb      	beq.n	8009be0 <__swbuf_r+0x28>
 8009c48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c4c:	e7ea      	b.n	8009c24 <__swbuf_r+0x6c>
 8009c4e:	bf00      	nop
 8009c50:	0800a374 	.word	0x0800a374
 8009c54:	0800a394 	.word	0x0800a394
 8009c58:	0800a354 	.word	0x0800a354

08009c5c <_write_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d07      	ldr	r5, [pc, #28]	; (8009c7c <_write_r+0x20>)
 8009c60:	4604      	mov	r4, r0
 8009c62:	4608      	mov	r0, r1
 8009c64:	4611      	mov	r1, r2
 8009c66:	2200      	movs	r2, #0
 8009c68:	602a      	str	r2, [r5, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f7f7 fd03 	bl	8001676 <_write>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_write_r+0x1e>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_write_r+0x1e>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20001c54 	.word	0x20001c54

08009c80 <__swsetup_r>:
 8009c80:	4b32      	ldr	r3, [pc, #200]	; (8009d4c <__swsetup_r+0xcc>)
 8009c82:	b570      	push	{r4, r5, r6, lr}
 8009c84:	681d      	ldr	r5, [r3, #0]
 8009c86:	4606      	mov	r6, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	b125      	cbz	r5, 8009c96 <__swsetup_r+0x16>
 8009c8c:	69ab      	ldr	r3, [r5, #24]
 8009c8e:	b913      	cbnz	r3, 8009c96 <__swsetup_r+0x16>
 8009c90:	4628      	mov	r0, r5
 8009c92:	f7ff f8fd 	bl	8008e90 <__sinit>
 8009c96:	4b2e      	ldr	r3, [pc, #184]	; (8009d50 <__swsetup_r+0xd0>)
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	d10f      	bne.n	8009cbc <__swsetup_r+0x3c>
 8009c9c:	686c      	ldr	r4, [r5, #4]
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca4:	0719      	lsls	r1, r3, #28
 8009ca6:	d42c      	bmi.n	8009d02 <__swsetup_r+0x82>
 8009ca8:	06dd      	lsls	r5, r3, #27
 8009caa:	d411      	bmi.n	8009cd0 <__swsetup_r+0x50>
 8009cac:	2309      	movs	r3, #9
 8009cae:	6033      	str	r3, [r6, #0]
 8009cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cba:	e03e      	b.n	8009d3a <__swsetup_r+0xba>
 8009cbc:	4b25      	ldr	r3, [pc, #148]	; (8009d54 <__swsetup_r+0xd4>)
 8009cbe:	429c      	cmp	r4, r3
 8009cc0:	d101      	bne.n	8009cc6 <__swsetup_r+0x46>
 8009cc2:	68ac      	ldr	r4, [r5, #8]
 8009cc4:	e7eb      	b.n	8009c9e <__swsetup_r+0x1e>
 8009cc6:	4b24      	ldr	r3, [pc, #144]	; (8009d58 <__swsetup_r+0xd8>)
 8009cc8:	429c      	cmp	r4, r3
 8009cca:	bf08      	it	eq
 8009ccc:	68ec      	ldreq	r4, [r5, #12]
 8009cce:	e7e6      	b.n	8009c9e <__swsetup_r+0x1e>
 8009cd0:	0758      	lsls	r0, r3, #29
 8009cd2:	d512      	bpl.n	8009cfa <__swsetup_r+0x7a>
 8009cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cd6:	b141      	cbz	r1, 8009cea <__swsetup_r+0x6a>
 8009cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cdc:	4299      	cmp	r1, r3
 8009cde:	d002      	beq.n	8009ce6 <__swsetup_r+0x66>
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	f7ff fd11 	bl	8009708 <_free_r>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	6063      	str	r3, [r4, #4]
 8009cf6:	6923      	ldr	r3, [r4, #16]
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	f043 0308 	orr.w	r3, r3, #8
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	6923      	ldr	r3, [r4, #16]
 8009d04:	b94b      	cbnz	r3, 8009d1a <__swsetup_r+0x9a>
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d10:	d003      	beq.n	8009d1a <__swsetup_r+0x9a>
 8009d12:	4621      	mov	r1, r4
 8009d14:	4630      	mov	r0, r6
 8009d16:	f000 f959 	bl	8009fcc <__smakebuf_r>
 8009d1a:	89a0      	ldrh	r0, [r4, #12]
 8009d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d20:	f010 0301 	ands.w	r3, r0, #1
 8009d24:	d00a      	beq.n	8009d3c <__swsetup_r+0xbc>
 8009d26:	2300      	movs	r3, #0
 8009d28:	60a3      	str	r3, [r4, #8]
 8009d2a:	6963      	ldr	r3, [r4, #20]
 8009d2c:	425b      	negs	r3, r3
 8009d2e:	61a3      	str	r3, [r4, #24]
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	b943      	cbnz	r3, 8009d46 <__swsetup_r+0xc6>
 8009d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d38:	d1ba      	bne.n	8009cb0 <__swsetup_r+0x30>
 8009d3a:	bd70      	pop	{r4, r5, r6, pc}
 8009d3c:	0781      	lsls	r1, r0, #30
 8009d3e:	bf58      	it	pl
 8009d40:	6963      	ldrpl	r3, [r4, #20]
 8009d42:	60a3      	str	r3, [r4, #8]
 8009d44:	e7f4      	b.n	8009d30 <__swsetup_r+0xb0>
 8009d46:	2000      	movs	r0, #0
 8009d48:	e7f7      	b.n	8009d3a <__swsetup_r+0xba>
 8009d4a:	bf00      	nop
 8009d4c:	20000010 	.word	0x20000010
 8009d50:	0800a374 	.word	0x0800a374
 8009d54:	0800a394 	.word	0x0800a394
 8009d58:	0800a354 	.word	0x0800a354

08009d5c <__assert_func>:
 8009d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d5e:	4614      	mov	r4, r2
 8009d60:	461a      	mov	r2, r3
 8009d62:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <__assert_func+0x2c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4605      	mov	r5, r0
 8009d68:	68d8      	ldr	r0, [r3, #12]
 8009d6a:	b14c      	cbz	r4, 8009d80 <__assert_func+0x24>
 8009d6c:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <__assert_func+0x30>)
 8009d6e:	9100      	str	r1, [sp, #0]
 8009d70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d74:	4906      	ldr	r1, [pc, #24]	; (8009d90 <__assert_func+0x34>)
 8009d76:	462b      	mov	r3, r5
 8009d78:	f000 f8e0 	bl	8009f3c <fiprintf>
 8009d7c:	f000 f9a3 	bl	800a0c6 <abort>
 8009d80:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <__assert_func+0x38>)
 8009d82:	461c      	mov	r4, r3
 8009d84:	e7f3      	b.n	8009d6e <__assert_func+0x12>
 8009d86:	bf00      	nop
 8009d88:	20000010 	.word	0x20000010
 8009d8c:	0800a525 	.word	0x0800a525
 8009d90:	0800a532 	.word	0x0800a532
 8009d94:	0800a560 	.word	0x0800a560

08009d98 <_close_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4d06      	ldr	r5, [pc, #24]	; (8009db4 <_close_r+0x1c>)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7f7 fc83 	bl	80016ae <_close>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_close_r+0x1a>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_close_r+0x1a>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	20001c54 	.word	0x20001c54

08009db8 <__sflush_r>:
 8009db8:	898a      	ldrh	r2, [r1, #12]
 8009dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	0710      	lsls	r0, r2, #28
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	d458      	bmi.n	8009e78 <__sflush_r+0xc0>
 8009dc6:	684b      	ldr	r3, [r1, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	dc05      	bgt.n	8009dd8 <__sflush_r+0x20>
 8009dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dc02      	bgt.n	8009dd8 <__sflush_r+0x20>
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dda:	2e00      	cmp	r6, #0
 8009ddc:	d0f9      	beq.n	8009dd2 <__sflush_r+0x1a>
 8009dde:	2300      	movs	r3, #0
 8009de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009de4:	682f      	ldr	r7, [r5, #0]
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	d032      	beq.n	8009e50 <__sflush_r+0x98>
 8009dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	075a      	lsls	r2, r3, #29
 8009df0:	d505      	bpl.n	8009dfe <__sflush_r+0x46>
 8009df2:	6863      	ldr	r3, [r4, #4]
 8009df4:	1ac0      	subs	r0, r0, r3
 8009df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009df8:	b10b      	cbz	r3, 8009dfe <__sflush_r+0x46>
 8009dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dfc:	1ac0      	subs	r0, r0, r3
 8009dfe:	2300      	movs	r3, #0
 8009e00:	4602      	mov	r2, r0
 8009e02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e04:	6a21      	ldr	r1, [r4, #32]
 8009e06:	4628      	mov	r0, r5
 8009e08:	47b0      	blx	r6
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	d106      	bne.n	8009e1e <__sflush_r+0x66>
 8009e10:	6829      	ldr	r1, [r5, #0]
 8009e12:	291d      	cmp	r1, #29
 8009e14:	d82c      	bhi.n	8009e70 <__sflush_r+0xb8>
 8009e16:	4a2a      	ldr	r2, [pc, #168]	; (8009ec0 <__sflush_r+0x108>)
 8009e18:	40ca      	lsrs	r2, r1
 8009e1a:	07d6      	lsls	r6, r2, #31
 8009e1c:	d528      	bpl.n	8009e70 <__sflush_r+0xb8>
 8009e1e:	2200      	movs	r2, #0
 8009e20:	6062      	str	r2, [r4, #4]
 8009e22:	04d9      	lsls	r1, r3, #19
 8009e24:	6922      	ldr	r2, [r4, #16]
 8009e26:	6022      	str	r2, [r4, #0]
 8009e28:	d504      	bpl.n	8009e34 <__sflush_r+0x7c>
 8009e2a:	1c42      	adds	r2, r0, #1
 8009e2c:	d101      	bne.n	8009e32 <__sflush_r+0x7a>
 8009e2e:	682b      	ldr	r3, [r5, #0]
 8009e30:	b903      	cbnz	r3, 8009e34 <__sflush_r+0x7c>
 8009e32:	6560      	str	r0, [r4, #84]	; 0x54
 8009e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e36:	602f      	str	r7, [r5, #0]
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d0ca      	beq.n	8009dd2 <__sflush_r+0x1a>
 8009e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e40:	4299      	cmp	r1, r3
 8009e42:	d002      	beq.n	8009e4a <__sflush_r+0x92>
 8009e44:	4628      	mov	r0, r5
 8009e46:	f7ff fc5f 	bl	8009708 <_free_r>
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e4e:	e7c1      	b.n	8009dd4 <__sflush_r+0x1c>
 8009e50:	6a21      	ldr	r1, [r4, #32]
 8009e52:	2301      	movs	r3, #1
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b0      	blx	r6
 8009e58:	1c41      	adds	r1, r0, #1
 8009e5a:	d1c7      	bne.n	8009dec <__sflush_r+0x34>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0c4      	beq.n	8009dec <__sflush_r+0x34>
 8009e62:	2b1d      	cmp	r3, #29
 8009e64:	d001      	beq.n	8009e6a <__sflush_r+0xb2>
 8009e66:	2b16      	cmp	r3, #22
 8009e68:	d101      	bne.n	8009e6e <__sflush_r+0xb6>
 8009e6a:	602f      	str	r7, [r5, #0]
 8009e6c:	e7b1      	b.n	8009dd2 <__sflush_r+0x1a>
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	e7ad      	b.n	8009dd4 <__sflush_r+0x1c>
 8009e78:	690f      	ldr	r7, [r1, #16]
 8009e7a:	2f00      	cmp	r7, #0
 8009e7c:	d0a9      	beq.n	8009dd2 <__sflush_r+0x1a>
 8009e7e:	0793      	lsls	r3, r2, #30
 8009e80:	680e      	ldr	r6, [r1, #0]
 8009e82:	bf08      	it	eq
 8009e84:	694b      	ldreq	r3, [r1, #20]
 8009e86:	600f      	str	r7, [r1, #0]
 8009e88:	bf18      	it	ne
 8009e8a:	2300      	movne	r3, #0
 8009e8c:	eba6 0807 	sub.w	r8, r6, r7
 8009e90:	608b      	str	r3, [r1, #8]
 8009e92:	f1b8 0f00 	cmp.w	r8, #0
 8009e96:	dd9c      	ble.n	8009dd2 <__sflush_r+0x1a>
 8009e98:	6a21      	ldr	r1, [r4, #32]
 8009e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e9c:	4643      	mov	r3, r8
 8009e9e:	463a      	mov	r2, r7
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	47b0      	blx	r6
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	dc06      	bgt.n	8009eb6 <__sflush_r+0xfe>
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eb4:	e78e      	b.n	8009dd4 <__sflush_r+0x1c>
 8009eb6:	4407      	add	r7, r0
 8009eb8:	eba8 0800 	sub.w	r8, r8, r0
 8009ebc:	e7e9      	b.n	8009e92 <__sflush_r+0xda>
 8009ebe:	bf00      	nop
 8009ec0:	20400001 	.word	0x20400001

08009ec4 <_fflush_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	4605      	mov	r5, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	b913      	cbnz	r3, 8009ed4 <_fflush_r+0x10>
 8009ece:	2500      	movs	r5, #0
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	b118      	cbz	r0, 8009ede <_fflush_r+0x1a>
 8009ed6:	6983      	ldr	r3, [r0, #24]
 8009ed8:	b90b      	cbnz	r3, 8009ede <_fflush_r+0x1a>
 8009eda:	f7fe ffd9 	bl	8008e90 <__sinit>
 8009ede:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <_fflush_r+0x6c>)
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	d11b      	bne.n	8009f1c <_fflush_r+0x58>
 8009ee4:	686c      	ldr	r4, [r5, #4]
 8009ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0ef      	beq.n	8009ece <_fflush_r+0xa>
 8009eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ef0:	07d0      	lsls	r0, r2, #31
 8009ef2:	d404      	bmi.n	8009efe <_fflush_r+0x3a>
 8009ef4:	0599      	lsls	r1, r3, #22
 8009ef6:	d402      	bmi.n	8009efe <_fflush_r+0x3a>
 8009ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009efa:	f7ff f86c 	bl	8008fd6 <__retarget_lock_acquire_recursive>
 8009efe:	4628      	mov	r0, r5
 8009f00:	4621      	mov	r1, r4
 8009f02:	f7ff ff59 	bl	8009db8 <__sflush_r>
 8009f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f08:	07da      	lsls	r2, r3, #31
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	d4e0      	bmi.n	8009ed0 <_fflush_r+0xc>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	059b      	lsls	r3, r3, #22
 8009f12:	d4dd      	bmi.n	8009ed0 <_fflush_r+0xc>
 8009f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f16:	f7ff f85f 	bl	8008fd8 <__retarget_lock_release_recursive>
 8009f1a:	e7d9      	b.n	8009ed0 <_fflush_r+0xc>
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <_fflush_r+0x70>)
 8009f1e:	429c      	cmp	r4, r3
 8009f20:	d101      	bne.n	8009f26 <_fflush_r+0x62>
 8009f22:	68ac      	ldr	r4, [r5, #8]
 8009f24:	e7df      	b.n	8009ee6 <_fflush_r+0x22>
 8009f26:	4b04      	ldr	r3, [pc, #16]	; (8009f38 <_fflush_r+0x74>)
 8009f28:	429c      	cmp	r4, r3
 8009f2a:	bf08      	it	eq
 8009f2c:	68ec      	ldreq	r4, [r5, #12]
 8009f2e:	e7da      	b.n	8009ee6 <_fflush_r+0x22>
 8009f30:	0800a374 	.word	0x0800a374
 8009f34:	0800a394 	.word	0x0800a394
 8009f38:	0800a354 	.word	0x0800a354

08009f3c <fiprintf>:
 8009f3c:	b40e      	push	{r1, r2, r3}
 8009f3e:	b503      	push	{r0, r1, lr}
 8009f40:	4601      	mov	r1, r0
 8009f42:	ab03      	add	r3, sp, #12
 8009f44:	4805      	ldr	r0, [pc, #20]	; (8009f5c <fiprintf+0x20>)
 8009f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f4a:	6800      	ldr	r0, [r0, #0]
 8009f4c:	9301      	str	r3, [sp, #4]
 8009f4e:	f7ff fcaf 	bl	80098b0 <_vfiprintf_r>
 8009f52:	b002      	add	sp, #8
 8009f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f58:	b003      	add	sp, #12
 8009f5a:	4770      	bx	lr
 8009f5c:	20000010 	.word	0x20000010

08009f60 <_lseek_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d07      	ldr	r5, [pc, #28]	; (8009f80 <_lseek_r+0x20>)
 8009f64:	4604      	mov	r4, r0
 8009f66:	4608      	mov	r0, r1
 8009f68:	4611      	mov	r1, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	602a      	str	r2, [r5, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f7f7 fbc4 	bl	80016fc <_lseek>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_lseek_r+0x1e>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_lseek_r+0x1e>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20001c54 	.word	0x20001c54

08009f84 <__swhatbuf_r>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	460e      	mov	r6, r1
 8009f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	b096      	sub	sp, #88	; 0x58
 8009f90:	4614      	mov	r4, r2
 8009f92:	461d      	mov	r5, r3
 8009f94:	da07      	bge.n	8009fa6 <__swhatbuf_r+0x22>
 8009f96:	2300      	movs	r3, #0
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	89b3      	ldrh	r3, [r6, #12]
 8009f9c:	061a      	lsls	r2, r3, #24
 8009f9e:	d410      	bmi.n	8009fc2 <__swhatbuf_r+0x3e>
 8009fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fa4:	e00e      	b.n	8009fc4 <__swhatbuf_r+0x40>
 8009fa6:	466a      	mov	r2, sp
 8009fa8:	f000 f894 	bl	800a0d4 <_fstat_r>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	dbf2      	blt.n	8009f96 <__swhatbuf_r+0x12>
 8009fb0:	9a01      	ldr	r2, [sp, #4]
 8009fb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fba:	425a      	negs	r2, r3
 8009fbc:	415a      	adcs	r2, r3
 8009fbe:	602a      	str	r2, [r5, #0]
 8009fc0:	e7ee      	b.n	8009fa0 <__swhatbuf_r+0x1c>
 8009fc2:	2340      	movs	r3, #64	; 0x40
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	b016      	add	sp, #88	; 0x58
 8009fca:	bd70      	pop	{r4, r5, r6, pc}

08009fcc <__smakebuf_r>:
 8009fcc:	898b      	ldrh	r3, [r1, #12]
 8009fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fd0:	079d      	lsls	r5, r3, #30
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	d507      	bpl.n	8009fe8 <__smakebuf_r+0x1c>
 8009fd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	6123      	str	r3, [r4, #16]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	6163      	str	r3, [r4, #20]
 8009fe4:	b002      	add	sp, #8
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}
 8009fe8:	ab01      	add	r3, sp, #4
 8009fea:	466a      	mov	r2, sp
 8009fec:	f7ff ffca 	bl	8009f84 <__swhatbuf_r>
 8009ff0:	9900      	ldr	r1, [sp, #0]
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7ff fbd7 	bl	80097a8 <_malloc_r>
 8009ffa:	b948      	cbnz	r0, 800a010 <__smakebuf_r+0x44>
 8009ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a000:	059a      	lsls	r2, r3, #22
 800a002:	d4ef      	bmi.n	8009fe4 <__smakebuf_r+0x18>
 800a004:	f023 0303 	bic.w	r3, r3, #3
 800a008:	f043 0302 	orr.w	r3, r3, #2
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	e7e3      	b.n	8009fd8 <__smakebuf_r+0xc>
 800a010:	4b0d      	ldr	r3, [pc, #52]	; (800a048 <__smakebuf_r+0x7c>)
 800a012:	62b3      	str	r3, [r6, #40]	; 0x28
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	6020      	str	r0, [r4, #0]
 800a018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a01c:	81a3      	strh	r3, [r4, #12]
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	6163      	str	r3, [r4, #20]
 800a022:	9b01      	ldr	r3, [sp, #4]
 800a024:	6120      	str	r0, [r4, #16]
 800a026:	b15b      	cbz	r3, 800a040 <__smakebuf_r+0x74>
 800a028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a02c:	4630      	mov	r0, r6
 800a02e:	f000 f863 	bl	800a0f8 <_isatty_r>
 800a032:	b128      	cbz	r0, 800a040 <__smakebuf_r+0x74>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	f023 0303 	bic.w	r3, r3, #3
 800a03a:	f043 0301 	orr.w	r3, r3, #1
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	89a0      	ldrh	r0, [r4, #12]
 800a042:	4305      	orrs	r5, r0
 800a044:	81a5      	strh	r5, [r4, #12]
 800a046:	e7cd      	b.n	8009fe4 <__smakebuf_r+0x18>
 800a048:	08008e29 	.word	0x08008e29

0800a04c <__ascii_mbtowc>:
 800a04c:	b082      	sub	sp, #8
 800a04e:	b901      	cbnz	r1, 800a052 <__ascii_mbtowc+0x6>
 800a050:	a901      	add	r1, sp, #4
 800a052:	b142      	cbz	r2, 800a066 <__ascii_mbtowc+0x1a>
 800a054:	b14b      	cbz	r3, 800a06a <__ascii_mbtowc+0x1e>
 800a056:	7813      	ldrb	r3, [r2, #0]
 800a058:	600b      	str	r3, [r1, #0]
 800a05a:	7812      	ldrb	r2, [r2, #0]
 800a05c:	1e10      	subs	r0, r2, #0
 800a05e:	bf18      	it	ne
 800a060:	2001      	movne	r0, #1
 800a062:	b002      	add	sp, #8
 800a064:	4770      	bx	lr
 800a066:	4610      	mov	r0, r2
 800a068:	e7fb      	b.n	800a062 <__ascii_mbtowc+0x16>
 800a06a:	f06f 0001 	mvn.w	r0, #1
 800a06e:	e7f8      	b.n	800a062 <__ascii_mbtowc+0x16>

0800a070 <__malloc_lock>:
 800a070:	4801      	ldr	r0, [pc, #4]	; (800a078 <__malloc_lock+0x8>)
 800a072:	f7fe bfb0 	b.w	8008fd6 <__retarget_lock_acquire_recursive>
 800a076:	bf00      	nop
 800a078:	20001c4c 	.word	0x20001c4c

0800a07c <__malloc_unlock>:
 800a07c:	4801      	ldr	r0, [pc, #4]	; (800a084 <__malloc_unlock+0x8>)
 800a07e:	f7fe bfab 	b.w	8008fd8 <__retarget_lock_release_recursive>
 800a082:	bf00      	nop
 800a084:	20001c4c 	.word	0x20001c4c

0800a088 <_read_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	4d07      	ldr	r5, [pc, #28]	; (800a0a8 <_read_r+0x20>)
 800a08c:	4604      	mov	r4, r0
 800a08e:	4608      	mov	r0, r1
 800a090:	4611      	mov	r1, r2
 800a092:	2200      	movs	r2, #0
 800a094:	602a      	str	r2, [r5, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	f7f7 fad0 	bl	800163c <_read>
 800a09c:	1c43      	adds	r3, r0, #1
 800a09e:	d102      	bne.n	800a0a6 <_read_r+0x1e>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	b103      	cbz	r3, 800a0a6 <_read_r+0x1e>
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	20001c54 	.word	0x20001c54

0800a0ac <__ascii_wctomb>:
 800a0ac:	b149      	cbz	r1, 800a0c2 <__ascii_wctomb+0x16>
 800a0ae:	2aff      	cmp	r2, #255	; 0xff
 800a0b0:	bf85      	ittet	hi
 800a0b2:	238a      	movhi	r3, #138	; 0x8a
 800a0b4:	6003      	strhi	r3, [r0, #0]
 800a0b6:	700a      	strbls	r2, [r1, #0]
 800a0b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a0bc:	bf98      	it	ls
 800a0be:	2001      	movls	r0, #1
 800a0c0:	4770      	bx	lr
 800a0c2:	4608      	mov	r0, r1
 800a0c4:	4770      	bx	lr

0800a0c6 <abort>:
 800a0c6:	b508      	push	{r3, lr}
 800a0c8:	2006      	movs	r0, #6
 800a0ca:	f000 f84d 	bl	800a168 <raise>
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	f7f7 faaa 	bl	8001628 <_exit>

0800a0d4 <_fstat_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d07      	ldr	r5, [pc, #28]	; (800a0f4 <_fstat_r+0x20>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	4611      	mov	r1, r2
 800a0e0:	602b      	str	r3, [r5, #0]
 800a0e2:	f7f7 faf0 	bl	80016c6 <_fstat>
 800a0e6:	1c43      	adds	r3, r0, #1
 800a0e8:	d102      	bne.n	800a0f0 <_fstat_r+0x1c>
 800a0ea:	682b      	ldr	r3, [r5, #0]
 800a0ec:	b103      	cbz	r3, 800a0f0 <_fstat_r+0x1c>
 800a0ee:	6023      	str	r3, [r4, #0]
 800a0f0:	bd38      	pop	{r3, r4, r5, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20001c54 	.word	0x20001c54

0800a0f8 <_isatty_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d06      	ldr	r5, [pc, #24]	; (800a114 <_isatty_r+0x1c>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	f7f7 faef 	bl	80016e6 <_isatty>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_isatty_r+0x1a>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_isatty_r+0x1a>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20001c54 	.word	0x20001c54

0800a118 <_raise_r>:
 800a118:	291f      	cmp	r1, #31
 800a11a:	b538      	push	{r3, r4, r5, lr}
 800a11c:	4604      	mov	r4, r0
 800a11e:	460d      	mov	r5, r1
 800a120:	d904      	bls.n	800a12c <_raise_r+0x14>
 800a122:	2316      	movs	r3, #22
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a12e:	b112      	cbz	r2, 800a136 <_raise_r+0x1e>
 800a130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a134:	b94b      	cbnz	r3, 800a14a <_raise_r+0x32>
 800a136:	4620      	mov	r0, r4
 800a138:	f000 f830 	bl	800a19c <_getpid_r>
 800a13c:	462a      	mov	r2, r5
 800a13e:	4601      	mov	r1, r0
 800a140:	4620      	mov	r0, r4
 800a142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a146:	f000 b817 	b.w	800a178 <_kill_r>
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d00a      	beq.n	800a164 <_raise_r+0x4c>
 800a14e:	1c59      	adds	r1, r3, #1
 800a150:	d103      	bne.n	800a15a <_raise_r+0x42>
 800a152:	2316      	movs	r3, #22
 800a154:	6003      	str	r3, [r0, #0]
 800a156:	2001      	movs	r0, #1
 800a158:	e7e7      	b.n	800a12a <_raise_r+0x12>
 800a15a:	2400      	movs	r4, #0
 800a15c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a160:	4628      	mov	r0, r5
 800a162:	4798      	blx	r3
 800a164:	2000      	movs	r0, #0
 800a166:	e7e0      	b.n	800a12a <_raise_r+0x12>

0800a168 <raise>:
 800a168:	4b02      	ldr	r3, [pc, #8]	; (800a174 <raise+0xc>)
 800a16a:	4601      	mov	r1, r0
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	f7ff bfd3 	b.w	800a118 <_raise_r>
 800a172:	bf00      	nop
 800a174:	20000010 	.word	0x20000010

0800a178 <_kill_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4d07      	ldr	r5, [pc, #28]	; (800a198 <_kill_r+0x20>)
 800a17c:	2300      	movs	r3, #0
 800a17e:	4604      	mov	r4, r0
 800a180:	4608      	mov	r0, r1
 800a182:	4611      	mov	r1, r2
 800a184:	602b      	str	r3, [r5, #0]
 800a186:	f7f7 fa3f 	bl	8001608 <_kill>
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	d102      	bne.n	800a194 <_kill_r+0x1c>
 800a18e:	682b      	ldr	r3, [r5, #0]
 800a190:	b103      	cbz	r3, 800a194 <_kill_r+0x1c>
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	bd38      	pop	{r3, r4, r5, pc}
 800a196:	bf00      	nop
 800a198:	20001c54 	.word	0x20001c54

0800a19c <_getpid_r>:
 800a19c:	f7f7 ba2c 	b.w	80015f8 <_getpid>

0800a1a0 <_init>:
 800a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a2:	bf00      	nop
 800a1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a6:	bc08      	pop	{r3}
 800a1a8:	469e      	mov	lr, r3
 800a1aa:	4770      	bx	lr

0800a1ac <_fini>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	bf00      	nop
 800a1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b2:	bc08      	pop	{r3}
 800a1b4:	469e      	mov	lr, r3
 800a1b6:	4770      	bx	lr
