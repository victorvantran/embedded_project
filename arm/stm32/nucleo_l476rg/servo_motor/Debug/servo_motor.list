
servo_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a508  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800a698  0800a698  0001a698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab14  0800ab14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab1c  0800ab1c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab1c  0800ab1c  0001ab1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab20  0800ab20  0001ab20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ab24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a64  200001e0  0800ad04  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c44  0800ad04  00021c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3fb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003914  00000000  00000000  0003e60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00041f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  00043638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f87  00000000  00000000  00044c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017afb  00000000  00000000  00049b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffa10  00000000  00000000  0006168a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016109a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b4  00000000  00000000  001610f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a680 	.word	0x0800a680

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a680 	.word	0x0800a680

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea4:	f000 fc41 	bl	800172a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea8:	f000 f826 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eac:	f000 f940 	bl	8001130 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 f90e 	bl	80010d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000eb4:	f000 f896 	bl	8000fe4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <main+0x48>)
 8000ebc:	f002 fb62 	bl	8003584 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR1 = htim2.Init.Period/2; // Capture Compare Register Value: 50/100 is 50% duty cycle
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <main+0x48>)
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <main+0x48>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	0852      	lsrs	r2, r2, #1
 8000eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ecc:	f004 f96c 	bl	80051a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of servoTask */
  servoTaskHandle = osThreadNew(StartServoTask, NULL, &servoTask_attributes);
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <main+0x4c>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <main+0x50>)
 8000ed6:	f004 f9b1 	bl	800523c <osThreadNew>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <main+0x54>)
 8000ede:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ee0:	f004 f986 	bl	80051f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (;;)
 8000ee4:	e7fe      	b.n	8000ee4 <main+0x44>
 8000ee6:	bf00      	nop
 8000ee8:	20001ad4 	.word	0x20001ad4
 8000eec:	0800a6c4 	.word	0x0800a6c4
 8000ef0:	080011cd 	.word	0x080011cd
 8000ef4:	20001ad0 	.word	0x20001ad0

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0b8      	sub	sp, #224	; 0xe0
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f02:	2244      	movs	r2, #68	; 0x44
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 fed8 	bl	8007cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2288      	movs	r2, #136	; 0x88
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f006 feca 	bl	8007cbc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f36:	2310      	movs	r3, #16
 8000f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f54:	2307      	movs	r3, #7
 8000f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 ff06 	bl	8001d7c <HAL_RCC_OscConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f76:	f000 f97f 	bl	8001278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f80:	2303      	movs	r3, #3
 8000f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fad2 	bl	8002548 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000faa:	f000 f965 	bl	8001278 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fcfd 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fc4:	f000 f958 	bl	8001278 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fcc:	f000 fe80 	bl	8001cd0 <HAL_PWREx_ControlVoltageScaling>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000fd6:	f000 f94f 	bl	8001278 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	37e0      	adds	r7, #224	; 0xe0
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	; 0x38
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	615a      	str	r2, [r3, #20]
 8001014:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <MX_TIM2_Init+0xe8>)
 8001018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80 - 1;
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <MX_TIM2_Init+0xe8>)
 8001020:	224f      	movs	r2, #79	; 0x4f
 8001022:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <MX_TIM2_Init+0xe8>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <MX_TIM2_Init+0xe8>)
 800102c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001030:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <MX_TIM2_Init+0xe8>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <MX_TIM2_Init+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800103e:	4823      	ldr	r0, [pc, #140]	; (80010cc <MX_TIM2_Init+0xe8>)
 8001040:	f002 f976 	bl	8003330 <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800104a:	f000 f915 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001058:	4619      	mov	r1, r3
 800105a:	481c      	ldr	r0, [pc, #112]	; (80010cc <MX_TIM2_Init+0xe8>)
 800105c:	f002 fdc8 	bl	8003bf0 <HAL_TIM_ConfigClockSource>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001066:	f000 f907 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <MX_TIM2_Init+0xe8>)
 800106c:	f002 fa28 	bl	80034c0 <HAL_TIM_PWM_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001076:	f000 f8ff 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <MX_TIM2_Init+0xe8>)
 800108a:	f003 facf 	bl	800462c <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001094:	f000 f8f0 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001098:	2360      	movs	r3, #96	; 0x60
 800109a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <MX_TIM2_Init+0xe8>)
 80010b0:	f002 fc8e 	bl	80039d0 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010ba:	f000 f8dd 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <MX_TIM2_Init+0xe8>)
 80010c0:	f000 f926 	bl	8001310 <HAL_TIM_MspPostInit>

}
 80010c4:	bf00      	nop
 80010c6:	3738      	adds	r7, #56	; 0x38
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20001ad4 	.word	0x20001ad4

080010d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_USART2_UART_Init+0x5c>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART2_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART2_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART2_UART_Init+0x58>)
 8001114:	f003 fb30 	bl	8004778 <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800111e:	f000 f8ab 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20001b20 	.word	0x20001b20
 800112c:	40004400 	.word	0x40004400

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_GPIO_Init+0x74>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <MX_GPIO_Init+0x74>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_GPIO_Init+0x74>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_GPIO_Init+0x74>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <MX_GPIO_Init+0x74>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_GPIO_Init+0x74>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_GPIO_Init+0x74>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <MX_GPIO_Init+0x74>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_GPIO_Init+0x74>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_GPIO_Init+0x74>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <MX_GPIO_Init+0x74>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_GPIO_Init+0x74>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80011b0:	1d39      	adds	r1, r7, #4
 80011b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b6:	2201      	movs	r2, #1
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <__io_putchar+0x20>)
 80011ba:	f003 fb2b 	bl	8004814 <HAL_UART_Transmit>
	return ch;
 80011be:	687b      	ldr	r3, [r7, #4]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20001b20 	.word	0x20001b20

080011cc <StartServoTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartServoTask */
void StartServoTask(void *argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t mode = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  	 */

//  	htim2.Instance->CCR1 = 1815;


  	if (mode == 0)
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d105      	bne.n	80011ea <StartServoTask+0x1e>
  	{
  	  htim2.Instance->CCR1 = 2460;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <StartServoTask+0x80>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f640 129c 	movw	r2, #2460	; 0x99c
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34
 80011e8:	e019      	b.n	800121e <StartServoTask+0x52>

  	}
  	else if (mode == 1)
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <StartServoTask+0x30>
  	{
  		htim2.Instance->CCR1 = 1815;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <StartServoTask+0x80>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f240 7217 	movw	r2, #1815	; 0x717
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
 80011fa:	e010      	b.n	800121e <StartServoTask+0x52>
  	}
  	else if (mode == 2)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d105      	bne.n	800120e <StartServoTask+0x42>
  	{
  		htim2.Instance->CCR1 = 1170;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <StartServoTask+0x80>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f240 4292 	movw	r2, #1170	; 0x492
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
 800120c:	e007      	b.n	800121e <StartServoTask+0x52>
  	}
  	else if (mode == 3)
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d104      	bne.n	800121e <StartServoTask+0x52>
  	{
    	htim2.Instance->CCR1 = 1815;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <StartServoTask+0x80>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7217 	movw	r2, #1815	; 0x717
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
  	}

  	mode = (mode + 1) % 4;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	3301      	adds	r3, #1
 8001222:	425a      	negs	r2, r3
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	f002 0203 	and.w	r2, r2, #3
 800122c:	bf58      	it	pl
 800122e:	4253      	negpl	r3, r2
 8001230:	73fb      	strb	r3, [r7, #15]
    printf("%lu\r\n", (uint32_t)htim2.Instance->CCR1);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <StartServoTask+0x80>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <StartServoTask+0x84>)
 800123c:	f007 f9b0 	bl	80085a0 <iprintf>

    osDelay(1000);
 8001240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001244:	f004 f88c 	bl	8005360 <osDelay>
  	if (mode == 0)
 8001248:	e7c6      	b.n	80011d8 <StartServoTask+0xc>
 800124a:	bf00      	nop
 800124c:	20001ad4 	.word	0x20001ad4
 8001250:	0800a6a4 	.word	0x0800a6a4

08001254 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001266:	f000 fa79 	bl	800175c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40001000 	.word	0x40001000

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_MspInit+0x4c>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128e:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <HAL_MspInit+0x4c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6613      	str	r3, [r2, #96]	; 0x60
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_MspInit+0x4c>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_MspInit+0x4c>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_MspInit+0x4c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6593      	str	r3, [r2, #88]	; 0x58
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	210f      	movs	r1, #15
 80012be:	f06f 0001 	mvn.w	r0, #1
 80012c2:	f000 fb23 	bl	800190c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e4:	d10b      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_TIM_Base_MspInit+0x38>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_TIM_Base_MspInit+0x38>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6593      	str	r3, [r2, #88]	; 0x58
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_TIM_Base_MspInit+0x38>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d11c      	bne.n	800136c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_TIM_MspPostInit+0x64>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_TIM_MspPostInit+0x64>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_TIM_MspPostInit+0x64>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134a:	2301      	movs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800135a:	2301      	movs	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f000 fafa 	bl	8001960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x7c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d128      	bne.n	80013ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0x80>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ca:	230c      	movs	r3, #12
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013da:	2307      	movs	r3, #7
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f000 faba 	bl	8001960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40004400 	.word	0x40004400
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	2036      	movs	r0, #54	; 0x36
 8001412:	f000 fa7b 	bl	800190c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001416:	2036      	movs	r0, #54	; 0x36
 8001418:	f000 fa94 	bl	8001944 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <HAL_InitTick+0x9c>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_InitTick+0x9c>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	6593      	str	r3, [r2, #88]	; 0x58
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_InitTick+0x9c>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001434:	f107 0210 	add.w	r2, r7, #16
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fa28 	bl	8002894 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001444:	f001 f9fa 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 8001448:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144c:	4a13      	ldr	r2, [pc, #76]	; (800149c <HAL_InitTick+0xa0>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0c9b      	lsrs	r3, r3, #18
 8001454:	3b01      	subs	r3, #1
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_InitTick+0xa4>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <HAL_InitTick+0xa8>)
 800145c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_InitTick+0xa4>)
 8001460:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001464:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_InitTick+0xa4>)
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_InitTick+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_InitTick+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <HAL_InitTick+0xa4>)
 800147a:	f001 ff59 	bl	8003330 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d104      	bne.n	800148e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <HAL_InitTick+0xa4>)
 8001486:	f001 ffab 	bl	80033e0 <HAL_TIM_Base_Start_IT>
 800148a:	4603      	mov	r3, r0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3730      	adds	r7, #48	; 0x30
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	431bde83 	.word	0x431bde83
 80014a0:	20001ba4 	.word	0x20001ba4
 80014a4:	40001000 	.word	0x40001000

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <NMI_Handler+0x4>

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM6_DAC_IRQHandler+0x10>)
 80014da:	f002 f959 	bl	8003790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20001ba4 	.word	0x20001ba4

080014e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
	return 1;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_kill>:

int _kill(int pid, int sig)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001502:	f006 fba3 	bl	8007c4c <__errno>
 8001506:	4603      	mov	r3, r0
 8001508:	2216      	movs	r2, #22
 800150a:	601a      	str	r2, [r3, #0]
	return -1;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_exit>:

void _exit (int status)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffe7 	bl	80014f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800152a:	e7fe      	b.n	800152a <_exit+0x12>

0800152c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e00a      	b.n	8001554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800153e:	f3af 8000 	nop.w
 8001542:	4601      	mov	r1, r0
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	b2ca      	uxtb	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf0      	blt.n	800153e <_read+0x12>
	}

return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e009      	b.n	800158c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60ba      	str	r2, [r7, #8]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fe11 	bl	80011a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf1      	blt.n	8001578 <_write+0x12>
	}
	return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_close>:

int _close(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c6:	605a      	str	r2, [r3, #4]
	return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_isatty>:

int _isatty(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
	return 1;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f006 fb08 	bl	8007c4c <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20018000 	.word	0x20018000
 8001668:	00000400 	.word	0x00000400
 800166c:	200001fc 	.word	0x200001fc
 8001670:	20001c48 	.word	0x20001c48

08001674 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <SystemInit+0x5c>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <SystemInit+0x5c>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <SystemInit+0x60>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <SystemInit+0x60>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <SystemInit+0x60>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <SystemInit+0x60>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <SystemInit+0x60>)
 80016a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80016a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <SystemInit+0x60>)
 80016ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <SystemInit+0x60>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <SystemInit+0x60>)
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SystemInit+0x60>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00
 80016d4:	40021000 	.word	0x40021000

080016d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016dc:	f7ff ffca 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016e2:	e003      	b.n	80016ec <LoopCopyDataInit>

080016e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016ea:	3104      	adds	r1, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <LoopForever+0xe>)
	adds	r2, r0, r1
 80016f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016f4:	d3f6      	bcc.n	80016e4 <CopyDataInit>
	ldr	r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016f8:	e002      	b.n	8001700 <LoopFillZerobss>

080016fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016fc:	f842 3b04 	str.w	r3, [r2], #4

08001700 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <LoopForever+0x16>)
	cmp	r2, r3
 8001702:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001704:	d3f9      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001706:	f006 faa7 	bl	8007c58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170a:	f7ff fbc9 	bl	8000ea0 <main>

0800170e <LoopForever>:

LoopForever:
    b LoopForever
 800170e:	e7fe      	b.n	800170e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001710:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001714:	0800ab24 	.word	0x0800ab24
	ldr	r0, =_sdata
 8001718:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800171c:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001720:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001724:	20001c44 	.word	0x20001c44

08001728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_2_IRQHandler>

0800172a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f8de 	bl	80018f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fe5e 	bl	80013fc <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	e001      	b.n	8001750 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800174c:	f7ff fd9a 	bl	8001284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001750:	79fb      	ldrb	r3, [r7, #7]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	20001bf0 	.word	0x20001bf0

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20001bf0 	.word	0x20001bf0

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff4c 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800191e:	f7ff ff61 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001922:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	68b9      	ldr	r1, [r7, #8]
 8001928:	6978      	ldr	r0, [r7, #20]
 800192a:	f7ff ffb1 	bl	8001890 <NVIC_EncodePriority>
 800192e:	4602      	mov	r2, r0
 8001930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff80 	bl	800183c <__NVIC_SetPriority>
}
 800193c:	bf00      	nop
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff54 	bl	8001800 <__NVIC_EnableIRQ>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e17f      	b.n	8001c70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8171 	beq.w	8001c6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d00b      	beq.n	80019a8 <HAL_GPIO_Init+0x48>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800199c:	2b11      	cmp	r3, #17
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b12      	cmp	r3, #18
 80019a6:	d130      	bne.n	8001a0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019de:	2201      	movs	r2, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	f003 0201 	and.w	r2, r3, #1
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d118      	bne.n	8001a48 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	f003 0201 	and.w	r2, r3, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x128>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b12      	cmp	r3, #18
 8001a86:	d123      	bne.n	8001ad0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	6939      	ldr	r1, [r7, #16]
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80ac 	beq.w	8001c6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_GPIO_Init+0x330>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	4a5e      	ldr	r2, [pc, #376]	; (8001c90 <HAL_GPIO_Init+0x330>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_GPIO_Init+0x330>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b2a:	4a5a      	ldr	r2, [pc, #360]	; (8001c94 <HAL_GPIO_Init+0x334>)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b54:	d025      	beq.n	8001ba2 <HAL_GPIO_Init+0x242>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4f      	ldr	r2, [pc, #316]	; (8001c98 <HAL_GPIO_Init+0x338>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01f      	beq.n	8001b9e <HAL_GPIO_Init+0x23e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4e      	ldr	r2, [pc, #312]	; (8001c9c <HAL_GPIO_Init+0x33c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x23a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4d      	ldr	r2, [pc, #308]	; (8001ca0 <HAL_GPIO_Init+0x340>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x236>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4c      	ldr	r2, [pc, #304]	; (8001ca4 <HAL_GPIO_Init+0x344>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x232>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <HAL_GPIO_Init+0x348>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x22e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4a      	ldr	r2, [pc, #296]	; (8001cac <HAL_GPIO_Init+0x34c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x22a>
 8001b86:	2306      	movs	r3, #6
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bb4:	4937      	ldr	r1, [pc, #220]	; (8001c94 <HAL_GPIO_Init+0x334>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c10:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f47f ae78 	bne.w	8001970 <HAL_GPIO_Init+0x10>
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	48000c00 	.word	0x48000c00
 8001ca4:	48001000 	.word	0x48001000
 8001ca8:	48001400 	.word	0x48001400
 8001cac:	48001800 	.word	0x48001800
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <HAL_PWREx_GetVoltageRange+0x18>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cde:	d130      	bne.n	8001d42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cec:	d038      	beq.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2232      	movs	r2, #50	; 0x32
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0c9b      	lsrs	r3, r3, #18
 8001d10:	3301      	adds	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d14:	e002      	b.n	8001d1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d28:	d102      	bne.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f2      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3c:	d110      	bne.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e00f      	b.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4e:	d007      	beq.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40007000 	.word	0x40007000
 8001d74:	20000000 	.word	0x20000000
 8001d78:	431bde83 	.word	0x431bde83

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e3d4      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8e:	4ba1      	ldr	r3, [pc, #644]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d98:	4b9e      	ldr	r3, [pc, #632]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80e4 	beq.w	8001f78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x4a>
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	f040 808b 	bne.w	8001ed4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 8087 	bne.w	8001ed4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dc6:	4b93      	ldr	r3, [pc, #588]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x62>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e3ac      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1a      	ldr	r2, [r3, #32]
 8001de2:	4b8c      	ldr	r3, [pc, #560]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <HAL_RCC_OscConfig+0x7c>
 8001dee:	4b89      	ldr	r3, [pc, #548]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df6:	e005      	b.n	8001e04 <HAL_RCC_OscConfig+0x88>
 8001df8:	4b86      	ldr	r3, [pc, #536]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d223      	bcs.n	8001e50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fd73 	bl	80028f8 <RCC_SetFlashLatencyFromMSIRange>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e38d      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1c:	4b7d      	ldr	r3, [pc, #500]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a7c      	ldr	r2, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4977      	ldr	r1, [pc, #476]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3a:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	4972      	ldr	r1, [pc, #456]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
 8001e4e:	e025      	b.n	8001e9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e50:	4b70      	ldr	r3, [pc, #448]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a6f      	ldr	r2, [pc, #444]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	496a      	ldr	r1, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6e:	4b69      	ldr	r3, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	4965      	ldr	r1, [pc, #404]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fd33 	bl	80028f8 <RCC_SetFlashLatencyFromMSIRange>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e34d      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e9c:	f000 fc36 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	495a      	ldr	r1, [pc, #360]	; (8002018 <HAL_RCC_OscConfig+0x29c>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb8:	4a58      	ldr	r2, [pc, #352]	; (800201c <HAL_RCC_OscConfig+0x2a0>)
 8001eba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_RCC_OscConfig+0x2a4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fa9b 	bl	80013fc <HAL_InitTick>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d052      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	e331      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d032      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001edc:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a4c      	ldr	r2, [pc, #304]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fc4c 	bl	8001784 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fc48 	bl	8001784 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e31a      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f02:	4b44      	ldr	r3, [pc, #272]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a40      	ldr	r2, [pc, #256]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	493b      	ldr	r1, [pc, #236]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2c:	4b39      	ldr	r3, [pc, #228]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	4936      	ldr	r1, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
 8001f40:	e01a      	b.n	8001f78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f42:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a33      	ldr	r2, [pc, #204]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fc19 	bl	8001784 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f56:	f7ff fc15 	bl	8001784 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e2e7      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f0      	bne.n	8001f56 <HAL_RCC_OscConfig+0x1da>
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d074      	beq.n	800206e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x21a>
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	d10e      	bne.n	8001fae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d10b      	bne.n	8001fae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d064      	beq.n	800206c <HAL_RCC_OscConfig+0x2f0>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d160      	bne.n	800206c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e2c4      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x24a>
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a15      	ldr	r2, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e01d      	b.n	8002002 <HAL_RCC_OscConfig+0x286>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fce:	d10c      	bne.n	8001fea <HAL_RCC_OscConfig+0x26e>
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0x286>
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_RCC_OscConfig+0x298>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01c      	beq.n	8002044 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7ff fbbb 	bl	8001784 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002010:	e011      	b.n	8002036 <HAL_RCC_OscConfig+0x2ba>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	0800a6e8 	.word	0x0800a6e8
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fbae 	bl	8001784 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e280      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002036:	4baf      	ldr	r3, [pc, #700]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x2a8>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff fb9e 	bl	8001784 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fb9a 	bl	8001784 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e26c      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800205e:	4ba5      	ldr	r3, [pc, #660]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x2d0>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d060      	beq.n	800213c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d005      	beq.n	800208c <HAL_RCC_OscConfig+0x310>
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d119      	bne.n	80020ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d116      	bne.n	80020ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800208c:	4b99      	ldr	r3, [pc, #612]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x328>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e249      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b93      	ldr	r3, [pc, #588]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	061b      	lsls	r3, r3, #24
 80020b2:	4990      	ldr	r1, [pc, #576]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b8:	e040      	b.n	800213c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d023      	beq.n	800210a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c2:	4b8c      	ldr	r3, [pc, #560]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a8b      	ldr	r2, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7ff fb59 	bl	8001784 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d6:	f7ff fb55 	bl	8001784 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e227      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e8:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f4:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	497c      	ldr	r1, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	e018      	b.n	800213c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210a:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a79      	ldr	r2, [pc, #484]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff fb35 	bl	8001784 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211e:	f7ff fb31 	bl	8001784 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e203      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002130:	4b70      	ldr	r3, [pc, #448]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d03c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01c      	beq.n	800218a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002156:	4a67      	ldr	r2, [pc, #412]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7ff fb10 	bl	8001784 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002168:	f7ff fb0c 	bl	8001784 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1de      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800217a:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 800217c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ef      	beq.n	8002168 <HAL_RCC_OscConfig+0x3ec>
 8002188:	e01b      	b.n	80021c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218a:	4b5a      	ldr	r3, [pc, #360]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 800218c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002190:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7ff faf3 	bl	8001784 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a2:	f7ff faef 	bl	8001784 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e1c1      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b4:	4b4f      	ldr	r3, [pc, #316]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80021b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ef      	bne.n	80021a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80a6 	beq.w	800231c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021d4:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	4a43      	ldr	r2, [pc, #268]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ea:	6593      	str	r3, [r2, #88]	; 0x58
 80021ec:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fc:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_RCC_OscConfig+0x57c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d118      	bne.n	800223a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002208:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_OscConfig+0x57c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a3a      	ldr	r2, [pc, #232]	; (80022f8 <HAL_RCC_OscConfig+0x57c>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002214:	f7ff fab6 	bl	8001784 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7ff fab2 	bl	8001784 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e184      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222e:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <HAL_RCC_OscConfig+0x57c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <HAL_RCC_OscConfig+0x4d8>
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002252:	e024      	b.n	800229e <HAL_RCC_OscConfig+0x522>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d110      	bne.n	800227e <HAL_RCC_OscConfig+0x502>
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800227c:	e00f      	b.n	800229e <HAL_RCC_OscConfig+0x522>
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7ff fa6d 	bl	8001784 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7ff fa69 	bl	8001784 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e139      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x578>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0ed      	beq.n	80022ae <HAL_RCC_OscConfig+0x532>
 80022d2:	e01a      	b.n	800230a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7ff fa56 	bl	8001784 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022da:	e00f      	b.n	80022fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7ff fa52 	bl	8001784 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d906      	bls.n	80022fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e122      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022fc:	4b90      	ldr	r3, [pc, #576]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e8      	bne.n	80022dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800230a:	7ffb      	ldrb	r3, [r7, #31]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002310:	4b8b      	ldr	r3, [pc, #556]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	4a8a      	ldr	r2, [pc, #552]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8108 	beq.w	8002536 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	2b02      	cmp	r3, #2
 800232c:	f040 80d0 	bne.w	80024d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002330:	4b83      	ldr	r3, [pc, #524]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	429a      	cmp	r2, r3
 8002342:	d130      	bne.n	80023a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	3b01      	subs	r3, #1
 8002350:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d127      	bne.n	80023a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002360:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d11f      	bne.n	80023a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002370:	2a07      	cmp	r2, #7
 8002372:	bf14      	ite	ne
 8002374:	2201      	movne	r2, #1
 8002376:	2200      	moveq	r2, #0
 8002378:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800237a:	4293      	cmp	r3, r2
 800237c:	d113      	bne.n	80023a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	3b01      	subs	r3, #1
 800238c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	3b01      	subs	r3, #1
 80023a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d06e      	beq.n	8002484 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b0c      	cmp	r3, #12
 80023aa:	d069      	beq.n	8002480 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023ac:	4b64      	ldr	r3, [pc, #400]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d105      	bne.n	80023c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023b8:	4b61      	ldr	r3, [pc, #388]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b7      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023c8:	4b5d      	ldr	r3, [pc, #372]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5c      	ldr	r2, [pc, #368]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80023ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023d4:	f7ff f9d6 	bl	8001784 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7ff f9d2 	bl	8001784 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0a4      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ee:	4b54      	ldr	r3, [pc, #336]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fa:	4b51      	ldr	r3, [pc, #324]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	4b51      	ldr	r3, [pc, #324]	; (8002544 <HAL_RCC_OscConfig+0x7c8>)
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800240a:	3a01      	subs	r2, #1
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	4311      	orrs	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002414:	0212      	lsls	r2, r2, #8
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800241c:	0852      	lsrs	r2, r2, #1
 800241e:	3a01      	subs	r2, #1
 8002420:	0552      	lsls	r2, r2, #21
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002428:	0852      	lsrs	r2, r2, #1
 800242a:	3a01      	subs	r2, #1
 800242c:	0652      	lsls	r2, r2, #25
 800242e:	4311      	orrs	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002434:	0912      	lsrs	r2, r2, #4
 8002436:	0452      	lsls	r2, r2, #17
 8002438:	430a      	orrs	r2, r1
 800243a:	4941      	ldr	r1, [pc, #260]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002440:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3e      	ldr	r2, [pc, #248]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800244c:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002456:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002458:	f7ff f994 	bl	8001784 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff f990 	bl	8001784 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e062      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800247e:	e05a      	b.n	8002536 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e059      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002484:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d152      	bne.n	8002536 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002490:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2a      	ldr	r2, [pc, #168]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800249c:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a27      	ldr	r2, [pc, #156]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024a8:	f7ff f96c 	bl	8001784 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7ff f968 	bl	8001784 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e03a      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x734>
 80024ce:	e032      	b.n	8002536 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d02d      	beq.n	8002532 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80024dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80024f4:	f023 0303 	bic.w	r3, r3, #3
 80024f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002500:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002508:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7ff f93b 	bl	8001784 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff f937 	bl	8001784 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e009      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_OscConfig+0x7c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x796>
 8002530:	e001      	b.n	8002536 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	f99d808c 	.word	0xf99d808c

08002548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0c8      	b.n	80026ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <HAL_RCC_ClockConfig+0x1b0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d910      	bls.n	800258c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_RCC_ClockConfig+0x1b0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 0207 	bic.w	r2, r3, #7
 8002572:	4961      	ldr	r1, [pc, #388]	; (80026f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <HAL_RCC_ClockConfig+0x1b0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0b0      	b.n	80026ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d04c      	beq.n	8002632 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a0:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d121      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e09e      	b.n	80026ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b8:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d115      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e092      	b.n	80026ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d0:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e086      	b.n	80026ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e07e      	b.n	80026ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f023 0203 	bic.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	493f      	ldr	r1, [pc, #252]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002602:	f7ff f8bf 	bl	8001784 <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002608:	e00a      	b.n	8002620 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260a:	f7ff f8bb 	bl	8001784 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e066      	b.n	80026ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002620:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 020c 	and.w	r2, r3, #12
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	429a      	cmp	r2, r3
 8002630:	d1eb      	bne.n	800260a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	492c      	ldr	r1, [pc, #176]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d210      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	4924      	ldr	r1, [pc, #144]	; (80026f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e036      	b.n	80026ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4918      	ldr	r1, [pc, #96]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4910      	ldr	r1, [pc, #64]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026be:	f000 f825 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_RCC_ClockConfig+0x1b4>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	490c      	ldr	r1, [pc, #48]	; (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	5ccb      	ldrb	r3, [r1, r3]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	fa22 f303 	lsr.w	r3, r2, r3
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fe8a 	bl	80013fc <HAL_InitTick>
 80026e8:	4603      	mov	r3, r0
 80026ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80026ec:	7afb      	ldrb	r3, [r7, #11]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40022000 	.word	0x40022000
 80026fc:	40021000 	.word	0x40021000
 8002700:	0800a6e8 	.word	0x0800a6e8
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271a:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x34>
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d121      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d11e      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002740:	4b34      	ldr	r3, [pc, #208]	; (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800274c:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e005      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002768:	4a2b      	ldr	r2, [pc, #172]	; (8002818 <HAL_RCC_GetSysClockFreq+0x10c>)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002770:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10d      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d102      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_RCC_GetSysClockFreq+0x110>)
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	e004      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d101      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002790:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_RCC_GetSysClockFreq+0x114>)
 8002792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d134      	bne.n	8002804 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d003      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0xac>
 80027b0:	e005      	b.n	80027be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_RCC_GetSysClockFreq+0x110>)
 80027b4:	617b      	str	r3, [r7, #20]
      break;
 80027b6:	e005      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_GetSysClockFreq+0x114>)
 80027ba:	617b      	str	r3, [r7, #20]
      break;
 80027bc:	e002      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	617b      	str	r3, [r7, #20]
      break;
 80027c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	3301      	adds	r3, #1
 80027d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	fb02 f203 	mul.w	r2, r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	0e5b      	lsrs	r3, r3, #25
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	3301      	adds	r3, #1
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002802:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002804:	69bb      	ldr	r3, [r7, #24]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	0800a700 	.word	0x0800a700
 800281c:	00f42400 	.word	0x00f42400
 8002820:	007a1200 	.word	0x007a1200

08002824 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_RCC_GetHCLKFreq+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000000 	.word	0x20000000

0800283c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002840:	f7ff fff0 	bl	8002824 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4904      	ldr	r1, [pc, #16]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	0800a6f8 	.word	0x0800a6f8

08002868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800286c:	f7ff ffda 	bl	8002824 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0adb      	lsrs	r3, r3, #11
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4904      	ldr	r1, [pc, #16]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	0800a6f8 	.word	0x0800a6f8

08002894 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	220f      	movs	r2, #15
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_GetClockConfig+0x5c>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_RCC_GetClockConfig+0x5c>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_RCC_GetClockConfig+0x5c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_GetClockConfig+0x5c>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	08db      	lsrs	r3, r3, #3
 80028ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_RCC_GetClockConfig+0x60>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0207 	and.w	r2, r3, #7
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40022000 	.word	0x40022000

080028f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002910:	f7ff f9d0 	bl	8001cb4 <HAL_PWREx_GetVoltageRange>
 8002914:	6178      	str	r0, [r7, #20]
 8002916:	e014      	b.n	8002942 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	4a24      	ldr	r2, [pc, #144]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	6593      	str	r3, [r2, #88]	; 0x58
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002930:	f7ff f9c0 	bl	8001cb4 <HAL_PWREx_GetVoltageRange>
 8002934:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002940:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002948:	d10b      	bne.n	8002962 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d919      	bls.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2ba0      	cmp	r3, #160	; 0xa0
 8002954:	d902      	bls.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002956:	2302      	movs	r3, #2
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	e013      	b.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800295c:	2301      	movs	r3, #1
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	e010      	b.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d902      	bls.n	800296e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002968:	2303      	movs	r3, #3
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	e00a      	b.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d102      	bne.n	800297a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002974:	2302      	movs	r3, #2
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	e004      	b.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b70      	cmp	r3, #112	; 0x70
 800297e:	d101      	bne.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002980:	2301      	movs	r3, #1
 8002982:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f023 0207 	bic.w	r2, r3, #7
 800298c:	4909      	ldr	r1, [pc, #36]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d001      	beq.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40022000 	.word	0x40022000

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c0:	2300      	movs	r3, #0
 80029c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029c4:	2300      	movs	r3, #0
 80029c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d041      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029dc:	d02a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029e2:	d824      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029e8:	d008      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ee:	d81e      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f8:	d010      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029fa:	e018      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029fc:	4b86      	ldr	r3, [pc, #536]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a85      	ldr	r2, [pc, #532]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a08:	e015      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fabb 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a1a:	e00c      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3320      	adds	r3, #32
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fba6 	bl	8003174 <RCCEx_PLLSAI2_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a2c:	e003      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	74fb      	strb	r3, [r7, #19]
      break;
 8002a32:	e000      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a3c:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a4a:	4973      	ldr	r1, [pc, #460]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a52:	e001      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d041      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a6c:	d02a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a72:	d824      	bhi.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a78:	d008      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a7e:	d81e      	bhi.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a88:	d010      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a8a:	e018      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a8c:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a61      	ldr	r2, [pc, #388]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a98:	e015      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fa73 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aaa:	e00c      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3320      	adds	r3, #32
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fb5e 	bl	8003174 <RCCEx_PLLSAI2_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002abc:	e003      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10b      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002acc:	4b52      	ldr	r3, [pc, #328]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ada:	494f      	ldr	r1, [pc, #316]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ae2:	e001      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a0 	beq.w	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002afa:	4b47      	ldr	r3, [pc, #284]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00d      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b1c:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a3a      	ldr	r2, [pc, #232]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fe24 	bl	8001784 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b3e:	e009      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b40:	f7fe fe20 	bl	8001784 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d902      	bls.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	74fb      	strb	r3, [r7, #19]
        break;
 8002b52:	e005      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ef      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d15c      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01f      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d019      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fddf 	bl	8001784 <HAL_GetTick>
 8002bc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc8:	e00b      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7fe fddb 	bl	8001784 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d902      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	74fb      	strb	r3, [r7, #19]
            break;
 8002be0:	e006      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ec      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c06:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c0e:	e009      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
 8002c14:	e006      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c24:	7c7b      	ldrb	r3, [r7, #17]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4b9e      	ldr	r3, [pc, #632]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	4a9d      	ldr	r2, [pc, #628]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c42:	4b98      	ldr	r3, [pc, #608]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	f023 0203 	bic.w	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	4994      	ldr	r1, [pc, #592]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c64:	4b8f      	ldr	r3, [pc, #572]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f023 020c 	bic.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	498c      	ldr	r1, [pc, #560]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c86:	4b87      	ldr	r3, [pc, #540]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4983      	ldr	r1, [pc, #524]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ca8:	4b7e      	ldr	r3, [pc, #504]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	497b      	ldr	r1, [pc, #492]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cca:	4b76      	ldr	r3, [pc, #472]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	4972      	ldr	r1, [pc, #456]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cec:	4b6d      	ldr	r3, [pc, #436]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	496a      	ldr	r1, [pc, #424]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d0e:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	4961      	ldr	r1, [pc, #388]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d30:	4b5c      	ldr	r3, [pc, #368]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	4959      	ldr	r1, [pc, #356]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d52:	4b54      	ldr	r3, [pc, #336]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d60:	4950      	ldr	r1, [pc, #320]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d74:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	4948      	ldr	r1, [pc, #288]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d96:	4b43      	ldr	r3, [pc, #268]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	493f      	ldr	r1, [pc, #252]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d028      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002db8:	4b3a      	ldr	r3, [pc, #232]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc6:	4937      	ldr	r1, [pc, #220]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a31      	ldr	r2, [pc, #196]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de2:	60d3      	str	r3, [r2, #12]
 8002de4:	e011      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f8c8 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d028      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e16:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	491f      	ldr	r1, [pc, #124]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e34:	d106      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e40:	60d3      	str	r3, [r2, #12]
 8002e42:	e011      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f899 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d02b      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	4908      	ldr	r1, [pc, #32]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e92:	d109      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a02      	ldr	r2, [pc, #8]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e9e:	60d3      	str	r3, [r2, #12]
 8002ea0:	e014      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f867 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d02f      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee6:	4928      	ldr	r1, [pc, #160]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef6:	d10d      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	2102      	movs	r1, #2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f844 	bl	8002f8c <RCCEx_PLLSAI1_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d014      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	74bb      	strb	r3, [r7, #18]
 8002f12:	e011      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3320      	adds	r3, #32
 8002f22:	2102      	movs	r1, #2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f925 	bl	8003174 <RCCEx_PLLSAI2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f52:	490d      	ldr	r1, [pc, #52]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f76:	4904      	ldr	r1, [pc, #16]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000

08002f8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f9a:	4b75      	ldr	r3, [pc, #468]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d018      	beq.n	8002fd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fa6:	4b72      	ldr	r3, [pc, #456]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0203 	and.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d10d      	bne.n	8002fd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fbe:	4b6c      	ldr	r3, [pc, #432]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
       ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d047      	beq.n	8003062 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	e044      	b.n	8003062 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d018      	beq.n	8003012 <RCCEx_PLLSAI1_Config+0x86>
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d825      	bhi.n	8003030 <RCCEx_PLLSAI1_Config+0xa4>
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d002      	beq.n	8002fee <RCCEx_PLLSAI1_Config+0x62>
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d009      	beq.n	8003000 <RCCEx_PLLSAI1_Config+0x74>
 8002fec:	e020      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fee:	4b60      	ldr	r3, [pc, #384]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11d      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffe:	e01a      	b.n	8003036 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003000:	4b5b      	ldr	r3, [pc, #364]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d116      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003010:	e013      	b.n	800303a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003012:	4b57      	ldr	r3, [pc, #348]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800301e:	4b54      	ldr	r3, [pc, #336]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800302e:	e006      	b.n	800303e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      break;
 8003034:	e004      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003036:	bf00      	nop
 8003038:	e002      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800303a:	bf00      	nop
 800303c:	e000      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800303e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10d      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	430b      	orrs	r3, r1
 800305c:	4944      	ldr	r1, [pc, #272]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d17d      	bne.n	8003164 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003068:	4b41      	ldr	r3, [pc, #260]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a40      	ldr	r2, [pc, #256]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003074:	f7fe fb86 	bl	8001784 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800307a:	e009      	b.n	8003090 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800307c:	f7fe fb82 	bl	8001784 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d902      	bls.n	8003090 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	73fb      	strb	r3, [r7, #15]
        break;
 800308e:	e005      	b.n	800309c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003090:	4b37      	ldr	r3, [pc, #220]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1ef      	bne.n	800307c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d160      	bne.n	8003164 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d111      	bne.n	80030cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a8:	4b31      	ldr	r3, [pc, #196]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6892      	ldr	r2, [r2, #8]
 80030b8:	0211      	lsls	r1, r2, #8
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68d2      	ldr	r2, [r2, #12]
 80030be:	0912      	lsrs	r2, r2, #4
 80030c0:	0452      	lsls	r2, r2, #17
 80030c2:	430a      	orrs	r2, r1
 80030c4:	492a      	ldr	r1, [pc, #168]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	610b      	str	r3, [r1, #16]
 80030ca:	e027      	b.n	800311c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d112      	bne.n	80030f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d2:	4b27      	ldr	r3, [pc, #156]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6892      	ldr	r2, [r2, #8]
 80030e2:	0211      	lsls	r1, r2, #8
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6912      	ldr	r2, [r2, #16]
 80030e8:	0852      	lsrs	r2, r2, #1
 80030ea:	3a01      	subs	r2, #1
 80030ec:	0552      	lsls	r2, r2, #21
 80030ee:	430a      	orrs	r2, r1
 80030f0:	491f      	ldr	r1, [pc, #124]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	610b      	str	r3, [r1, #16]
 80030f6:	e011      	b.n	800311c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003100:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6892      	ldr	r2, [r2, #8]
 8003108:	0211      	lsls	r1, r2, #8
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6952      	ldr	r2, [r2, #20]
 800310e:	0852      	lsrs	r2, r2, #1
 8003110:	3a01      	subs	r2, #1
 8003112:	0652      	lsls	r2, r2, #25
 8003114:	430a      	orrs	r2, r1
 8003116:	4916      	ldr	r1, [pc, #88]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003118:	4313      	orrs	r3, r2
 800311a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a13      	ldr	r2, [pc, #76]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003122:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003126:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe fb2c 	bl	8001784 <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800312e:	e009      	b.n	8003144 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003130:	f7fe fb28 	bl	8001784 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d902      	bls.n	8003144 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	73fb      	strb	r3, [r7, #15]
          break;
 8003142:	e005      	b.n	8003150 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ef      	beq.n	8003130 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	4904      	ldr	r1, [pc, #16]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000

08003174 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003182:	4b6a      	ldr	r3, [pc, #424]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d018      	beq.n	80031c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800318e:	4b67      	ldr	r3, [pc, #412]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0203 	and.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d10d      	bne.n	80031ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
       ||
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031a6:	4b61      	ldr	r3, [pc, #388]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
       ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d047      	beq.n	800324a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	e044      	b.n	800324a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d018      	beq.n	80031fa <RCCEx_PLLSAI2_Config+0x86>
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d825      	bhi.n	8003218 <RCCEx_PLLSAI2_Config+0xa4>
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d002      	beq.n	80031d6 <RCCEx_PLLSAI2_Config+0x62>
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d009      	beq.n	80031e8 <RCCEx_PLLSAI2_Config+0x74>
 80031d4:	e020      	b.n	8003218 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031d6:	4b55      	ldr	r3, [pc, #340]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11d      	bne.n	800321e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e6:	e01a      	b.n	800321e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031e8:	4b50      	ldr	r3, [pc, #320]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d116      	bne.n	8003222 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f8:	e013      	b.n	8003222 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031fa:	4b4c      	ldr	r3, [pc, #304]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003206:	4b49      	ldr	r3, [pc, #292]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003216:	e006      	b.n	8003226 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      break;
 800321c:	e004      	b.n	8003228 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800321e:	bf00      	nop
 8003220:	e002      	b.n	8003228 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003226:	bf00      	nop
    }

    if(status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10d      	bne.n	800324a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800322e:	4b3f      	ldr	r3, [pc, #252]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6819      	ldr	r1, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	430b      	orrs	r3, r1
 8003244:	4939      	ldr	r1, [pc, #228]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d167      	bne.n	8003320 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a35      	ldr	r2, [pc, #212]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325c:	f7fe fa92 	bl	8001784 <HAL_GetTick>
 8003260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003262:	e009      	b.n	8003278 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003264:	f7fe fa8e 	bl	8001784 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d902      	bls.n	8003278 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	73fb      	strb	r3, [r7, #15]
        break;
 8003276:	e005      	b.n	8003284 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ef      	bne.n	8003264 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d14a      	bne.n	8003320 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d111      	bne.n	80032b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003290:	4b26      	ldr	r3, [pc, #152]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6892      	ldr	r2, [r2, #8]
 80032a0:	0211      	lsls	r1, r2, #8
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68d2      	ldr	r2, [r2, #12]
 80032a6:	0912      	lsrs	r2, r2, #4
 80032a8:	0452      	lsls	r2, r2, #17
 80032aa:	430a      	orrs	r2, r1
 80032ac:	491f      	ldr	r1, [pc, #124]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	614b      	str	r3, [r1, #20]
 80032b2:	e011      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	0211      	lsls	r1, r2, #8
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6912      	ldr	r2, [r2, #16]
 80032ca:	0852      	lsrs	r2, r2, #1
 80032cc:	3a01      	subs	r2, #1
 80032ce:	0652      	lsls	r2, r2, #25
 80032d0:	430a      	orrs	r2, r1
 80032d2:	4916      	ldr	r1, [pc, #88]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a13      	ldr	r2, [pc, #76]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe fa4e 	bl	8001784 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ea:	e009      	b.n	8003300 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032ec:	f7fe fa4a 	bl	8001784 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d902      	bls.n	8003300 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	73fb      	strb	r3, [r7, #15]
          break;
 80032fe:	e005      	b.n	800330c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ef      	beq.n	80032ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	4904      	ldr	r1, [pc, #16]	; (800332c <RCCEx_PLLSAI2_Config+0x1b8>)
 800331c:	4313      	orrs	r3, r2
 800331e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000

08003330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e049      	b.n	80033d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd ffbc 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f000 fd2c 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d001      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e04f      	b.n	8003498 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a23      	ldr	r2, [pc, #140]	; (80034a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01d      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003422:	d018      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1f      	ldr	r2, [pc, #124]	; (80034a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x76>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d115      	bne.n	8003482 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <HAL_TIM_Base_Start_IT+0xdc>)
 800345e:	4013      	ands	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b06      	cmp	r3, #6
 8003466:	d015      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0xb4>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346e:	d011      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003480:	e008      	b.n	8003494 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e000      	b.n	8003496 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003494:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	40013400 	.word	0x40013400
 80034b8:	40014000 	.word	0x40014000
 80034bc:	00010007 	.word	0x00010007

080034c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e049      	b.n	8003566 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f841 	bl	800356e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f000 fc64 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_TIM_PWM_Start+0x24>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e03c      	b.n	8003622 <HAL_TIM_PWM_Start+0x9e>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d109      	bne.n	80035c2 <HAL_TIM_PWM_Start+0x3e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	bf14      	ite	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	2300      	moveq	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	e02f      	b.n	8003622 <HAL_TIM_PWM_Start+0x9e>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d109      	bne.n	80035dc <HAL_TIM_PWM_Start+0x58>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e022      	b.n	8003622 <HAL_TIM_PWM_Start+0x9e>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d109      	bne.n	80035f6 <HAL_TIM_PWM_Start+0x72>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e015      	b.n	8003622 <HAL_TIM_PWM_Start+0x9e>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d109      	bne.n	8003610 <HAL_TIM_PWM_Start+0x8c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e008      	b.n	8003622 <HAL_TIM_PWM_Start+0x9e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e09c      	b.n	8003764 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <HAL_TIM_PWM_Start+0xb6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003638:	e023      	b.n	8003682 <HAL_TIM_PWM_Start+0xfe>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0xc6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003648:	e01b      	b.n	8003682 <HAL_TIM_PWM_Start+0xfe>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d104      	bne.n	800365a <HAL_TIM_PWM_Start+0xd6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003658:	e013      	b.n	8003682 <HAL_TIM_PWM_Start+0xfe>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d104      	bne.n	800366a <HAL_TIM_PWM_Start+0xe6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003668:	e00b      	b.n	8003682 <HAL_TIM_PWM_Start+0xfe>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b10      	cmp	r3, #16
 800366e:	d104      	bne.n	800367a <HAL_TIM_PWM_Start+0xf6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003678:	e003      	b.n	8003682 <HAL_TIM_PWM_Start+0xfe>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2201      	movs	r2, #1
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 ffa8 	bl	80045e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a35      	ldr	r2, [pc, #212]	; (800376c <HAL_TIM_PWM_Start+0x1e8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x13e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a34      	ldr	r2, [pc, #208]	; (8003770 <HAL_TIM_PWM_Start+0x1ec>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x13e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a32      	ldr	r2, [pc, #200]	; (8003774 <HAL_TIM_PWM_Start+0x1f0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x13e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a31      	ldr	r2, [pc, #196]	; (8003778 <HAL_TIM_PWM_Start+0x1f4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x13e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2f      	ldr	r2, [pc, #188]	; (800377c <HAL_TIM_PWM_Start+0x1f8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_Start+0x142>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_TIM_PWM_Start+0x144>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a22      	ldr	r2, [pc, #136]	; (800376c <HAL_TIM_PWM_Start+0x1e8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <HAL_TIM_PWM_Start+0x19e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d018      	beq.n	8003722 <HAL_TIM_PWM_Start+0x19e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <HAL_TIM_PWM_Start+0x1fc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_TIM_PWM_Start+0x19e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a21      	ldr	r2, [pc, #132]	; (8003784 <HAL_TIM_PWM_Start+0x200>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_TIM_PWM_Start+0x19e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_TIM_PWM_Start+0x204>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_TIM_PWM_Start+0x19e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_TIM_PWM_Start+0x1ec>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_TIM_PWM_Start+0x19e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a15      	ldr	r2, [pc, #84]	; (8003774 <HAL_TIM_PWM_Start+0x1f0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d115      	bne.n	800374e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	4b18      	ldr	r3, [pc, #96]	; (800378c <HAL_TIM_PWM_Start+0x208>)
 800372a:	4013      	ands	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b06      	cmp	r3, #6
 8003732:	d015      	beq.n	8003760 <HAL_TIM_PWM_Start+0x1dc>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d011      	beq.n	8003760 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	e008      	b.n	8003760 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e000      	b.n	8003762 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003760:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40013400 	.word	0x40013400
 8003774:	40014000 	.word	0x40014000
 8003778:	40014400 	.word	0x40014400
 800377c:	40014800 	.word	0x40014800
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	00010007 	.word	0x00010007

08003790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0202 	mvn.w	r2, #2
 80037bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fadc 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 face 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fadf 	bl	8003da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d122      	bne.n	8003840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b04      	cmp	r3, #4
 8003806:	d11b      	bne.n	8003840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0204 	mvn.w	r2, #4
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fab2 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 faa4 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fab5 	bl	8003da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b08      	cmp	r3, #8
 800384c:	d122      	bne.n	8003894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b08      	cmp	r3, #8
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0208 	mvn.w	r2, #8
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2204      	movs	r2, #4
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa88 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa7a 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fa8b 	bl	8003da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d122      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d11b      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0210 	mvn.w	r2, #16
 80038b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2208      	movs	r2, #8
 80038be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa5e 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fa50 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fa61 	bl	8003da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d10e      	bne.n	8003914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0201 	mvn.w	r2, #1
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd fca0 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b80      	cmp	r3, #128	; 0x80
 8003920:	d10e      	bne.n	8003940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b80      	cmp	r3, #128	; 0x80
 800392e:	d107      	bne.n	8003940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 ff08 	bl	8004750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394e:	d10e      	bne.n	800396e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d107      	bne.n	800396e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fefb 	bl	8004764 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d10e      	bne.n	800399a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d107      	bne.n	800399a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fa0f 	bl	8003db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d10e      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d107      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f06f 0220 	mvn.w	r2, #32
 80039be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 febb 	bl	800473c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e0fd      	b.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b14      	cmp	r3, #20
 80039f6:	f200 80f0 	bhi.w	8003bda <HAL_TIM_PWM_ConfigChannel+0x20a>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a55 	.word	0x08003a55
 8003a04:	08003bdb 	.word	0x08003bdb
 8003a08:	08003bdb 	.word	0x08003bdb
 8003a0c:	08003bdb 	.word	0x08003bdb
 8003a10:	08003a95 	.word	0x08003a95
 8003a14:	08003bdb 	.word	0x08003bdb
 8003a18:	08003bdb 	.word	0x08003bdb
 8003a1c:	08003bdb 	.word	0x08003bdb
 8003a20:	08003ad7 	.word	0x08003ad7
 8003a24:	08003bdb 	.word	0x08003bdb
 8003a28:	08003bdb 	.word	0x08003bdb
 8003a2c:	08003bdb 	.word	0x08003bdb
 8003a30:	08003b17 	.word	0x08003b17
 8003a34:	08003bdb 	.word	0x08003bdb
 8003a38:	08003bdb 	.word	0x08003bdb
 8003a3c:	08003bdb 	.word	0x08003bdb
 8003a40:	08003b59 	.word	0x08003b59
 8003a44:	08003bdb 	.word	0x08003bdb
 8003a48:	08003bdb 	.word	0x08003bdb
 8003a4c:	08003bdb 	.word	0x08003bdb
 8003a50:	08003b99 	.word	0x08003b99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fa50 	bl	8003f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	619a      	str	r2, [r3, #24]
      break;
 8003a92:	e0a3      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fac0 	bl	8004020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	619a      	str	r2, [r3, #24]
      break;
 8003ad4:	e082      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fb29 	bl	8004134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0208 	orr.w	r2, r2, #8
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0204 	bic.w	r2, r2, #4
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	61da      	str	r2, [r3, #28]
      break;
 8003b14:	e062      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fb91 	bl	8004244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69d9      	ldr	r1, [r3, #28]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	021a      	lsls	r2, r3, #8
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	61da      	str	r2, [r3, #28]
      break;
 8003b56:	e041      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fbda 	bl	8004318 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0208 	orr.w	r2, r2, #8
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0204 	bic.w	r2, r2, #4
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b96:	e021      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fc1e 	bl	80043e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	021a      	lsls	r2, r3, #8
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bd8:	e000      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003bda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop

08003bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_ConfigClockSource+0x18>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e0b5      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x184>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c44:	d03e      	beq.n	8003cc4 <HAL_TIM_ConfigClockSource+0xd4>
 8003c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4a:	f200 8087 	bhi.w	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c52:	f000 8085 	beq.w	8003d60 <HAL_TIM_ConfigClockSource+0x170>
 8003c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5a:	d87f      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c5c:	2b70      	cmp	r3, #112	; 0x70
 8003c5e:	d01a      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0xa6>
 8003c60:	2b70      	cmp	r3, #112	; 0x70
 8003c62:	d87b      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c64:	2b60      	cmp	r3, #96	; 0x60
 8003c66:	d050      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x11a>
 8003c68:	2b60      	cmp	r3, #96	; 0x60
 8003c6a:	d877      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b50      	cmp	r3, #80	; 0x50
 8003c6e:	d03c      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0xfa>
 8003c70:	2b50      	cmp	r3, #80	; 0x50
 8003c72:	d873      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d058      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x13a>
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d86f      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c7c:	2b30      	cmp	r3, #48	; 0x30
 8003c7e:	d064      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d86b      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d060      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d867      	bhi.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05c      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d05a      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c94:	e062      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6899      	ldr	r1, [r3, #8]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f000 fc7b 	bl	80045a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	609a      	str	r2, [r3, #8]
      break;
 8003cc2:	e04e      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	6899      	ldr	r1, [r3, #8]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f000 fc64 	bl	80045a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce6:	609a      	str	r2, [r3, #8]
      break;
 8003ce8:	e03b      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f000 fbd8 	bl	80044ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2150      	movs	r1, #80	; 0x50
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fc31 	bl	800456a <TIM_ITRx_SetConfig>
      break;
 8003d08:	e02b      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f000 fbf7 	bl	800450a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2160      	movs	r1, #96	; 0x60
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fc21 	bl	800456a <TIM_ITRx_SetConfig>
      break;
 8003d28:	e01b      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	461a      	mov	r2, r3
 8003d38:	f000 fbb8 	bl	80044ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fc11 	bl	800456a <TIM_ITRx_SetConfig>
      break;
 8003d48:	e00b      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f000 fc08 	bl	800456a <TIM_ITRx_SetConfig>
        break;
 8003d5a:	e002      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003d60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a40      	ldr	r2, [pc, #256]	; (8003ee0 <TIM_Base_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d00f      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <TIM_Base_SetConfig+0x118>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00b      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3c      	ldr	r2, [pc, #240]	; (8003ee8 <TIM_Base_SetConfig+0x11c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d007      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3b      	ldr	r2, [pc, #236]	; (8003eec <TIM_Base_SetConfig+0x120>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3a      	ldr	r2, [pc, #232]	; (8003ef0 <TIM_Base_SetConfig+0x124>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d108      	bne.n	8003e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2f      	ldr	r2, [pc, #188]	; (8003ee0 <TIM_Base_SetConfig+0x114>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01f      	beq.n	8003e66 <TIM_Base_SetConfig+0x9a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d01b      	beq.n	8003e66 <TIM_Base_SetConfig+0x9a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <TIM_Base_SetConfig+0x118>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d017      	beq.n	8003e66 <TIM_Base_SetConfig+0x9a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2b      	ldr	r2, [pc, #172]	; (8003ee8 <TIM_Base_SetConfig+0x11c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <TIM_Base_SetConfig+0x9a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <TIM_Base_SetConfig+0x120>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00f      	beq.n	8003e66 <TIM_Base_SetConfig+0x9a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <TIM_Base_SetConfig+0x124>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00b      	beq.n	8003e66 <TIM_Base_SetConfig+0x9a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a28      	ldr	r2, [pc, #160]	; (8003ef4 <TIM_Base_SetConfig+0x128>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <TIM_Base_SetConfig+0x9a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a27      	ldr	r2, [pc, #156]	; (8003ef8 <TIM_Base_SetConfig+0x12c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_Base_SetConfig+0x9a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <TIM_Base_SetConfig+0x130>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <TIM_Base_SetConfig+0x114>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00f      	beq.n	8003ec4 <TIM_Base_SetConfig+0xf8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <TIM_Base_SetConfig+0x124>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0xf8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <TIM_Base_SetConfig+0x128>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0xf8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a10      	ldr	r2, [pc, #64]	; (8003ef8 <TIM_Base_SetConfig+0x12c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0xf8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <TIM_Base_SetConfig+0x130>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800
 8003eec:	40000c00 	.word	0x40000c00
 8003ef0:	40013400 	.word	0x40013400
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800

08003f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0201 	bic.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0303 	bic.w	r3, r3, #3
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 0302 	bic.w	r3, r3, #2
 8003f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a2c      	ldr	r2, [pc, #176]	; (800400c <TIM_OC1_SetConfig+0x10c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00f      	beq.n	8003f80 <TIM_OC1_SetConfig+0x80>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a2b      	ldr	r2, [pc, #172]	; (8004010 <TIM_OC1_SetConfig+0x110>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_OC1_SetConfig+0x80>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a2a      	ldr	r2, [pc, #168]	; (8004014 <TIM_OC1_SetConfig+0x114>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_OC1_SetConfig+0x80>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a29      	ldr	r2, [pc, #164]	; (8004018 <TIM_OC1_SetConfig+0x118>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_OC1_SetConfig+0x80>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a28      	ldr	r2, [pc, #160]	; (800401c <TIM_OC1_SetConfig+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d10c      	bne.n	8003f9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0308 	bic.w	r3, r3, #8
 8003f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	; (800400c <TIM_OC1_SetConfig+0x10c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00f      	beq.n	8003fc2 <TIM_OC1_SetConfig+0xc2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <TIM_OC1_SetConfig+0x110>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_OC1_SetConfig+0xc2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <TIM_OC1_SetConfig+0x114>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_OC1_SetConfig+0xc2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a18      	ldr	r2, [pc, #96]	; (8004018 <TIM_OC1_SetConfig+0x118>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_OC1_SetConfig+0xc2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a17      	ldr	r2, [pc, #92]	; (800401c <TIM_OC1_SetConfig+0x11c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d111      	bne.n	8003fe6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40013400 	.word	0x40013400
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800

08004020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0210 	bic.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0320 	bic.w	r3, r3, #32
 800406e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a28      	ldr	r2, [pc, #160]	; (8004120 <TIM_OC2_SetConfig+0x100>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_OC2_SetConfig+0x6c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a27      	ldr	r2, [pc, #156]	; (8004124 <TIM_OC2_SetConfig+0x104>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d10d      	bne.n	80040a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <TIM_OC2_SetConfig+0x100>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00f      	beq.n	80040d0 <TIM_OC2_SetConfig+0xb0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <TIM_OC2_SetConfig+0x104>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <TIM_OC2_SetConfig+0xb0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <TIM_OC2_SetConfig+0x108>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <TIM_OC2_SetConfig+0xb0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a1a      	ldr	r2, [pc, #104]	; (800412c <TIM_OC2_SetConfig+0x10c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_OC2_SetConfig+0xb0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a19      	ldr	r2, [pc, #100]	; (8004130 <TIM_OC2_SetConfig+0x110>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d113      	bne.n	80040f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40013400 	.word	0x40013400
 8004128:	40014000 	.word	0x40014000
 800412c:	40014400 	.word	0x40014400
 8004130:	40014800 	.word	0x40014800

08004134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a27      	ldr	r2, [pc, #156]	; (8004230 <TIM_OC3_SetConfig+0xfc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_OC3_SetConfig+0x6a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a26      	ldr	r2, [pc, #152]	; (8004234 <TIM_OC3_SetConfig+0x100>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d10d      	bne.n	80041ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <TIM_OC3_SetConfig+0xfc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_OC3_SetConfig+0xae>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <TIM_OC3_SetConfig+0x100>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_OC3_SetConfig+0xae>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <TIM_OC3_SetConfig+0x104>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_OC3_SetConfig+0xae>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <TIM_OC3_SetConfig+0x108>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_OC3_SetConfig+0xae>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <TIM_OC3_SetConfig+0x10c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d113      	bne.n	800420a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40013400 	.word	0x40013400
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800

08004244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	031b      	lsls	r3, r3, #12
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <TIM_OC4_SetConfig+0xc0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00f      	beq.n	80042c8 <TIM_OC4_SetConfig+0x84>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <TIM_OC4_SetConfig+0xc4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00b      	beq.n	80042c8 <TIM_OC4_SetConfig+0x84>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a16      	ldr	r2, [pc, #88]	; (800430c <TIM_OC4_SetConfig+0xc8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d007      	beq.n	80042c8 <TIM_OC4_SetConfig+0x84>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a15      	ldr	r2, [pc, #84]	; (8004310 <TIM_OC4_SetConfig+0xcc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_OC4_SetConfig+0x84>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a14      	ldr	r2, [pc, #80]	; (8004314 <TIM_OC4_SetConfig+0xd0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d109      	bne.n	80042dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40013400 	.word	0x40013400
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400
 8004314:	40014800 	.word	0x40014800

08004318 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800435c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a17      	ldr	r2, [pc, #92]	; (80043cc <TIM_OC5_SetConfig+0xb4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00f      	beq.n	8004392 <TIM_OC5_SetConfig+0x7a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <TIM_OC5_SetConfig+0xb8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00b      	beq.n	8004392 <TIM_OC5_SetConfig+0x7a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <TIM_OC5_SetConfig+0xbc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <TIM_OC5_SetConfig+0x7a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <TIM_OC5_SetConfig+0xc0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC5_SetConfig+0x7a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <TIM_OC5_SetConfig+0xc4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d109      	bne.n	80043a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004398:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40013400 	.word	0x40013400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800

080043e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	051b      	lsls	r3, r3, #20
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a18      	ldr	r2, [pc, #96]	; (8004498 <TIM_OC6_SetConfig+0xb8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00f      	beq.n	800445c <TIM_OC6_SetConfig+0x7c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a17      	ldr	r2, [pc, #92]	; (800449c <TIM_OC6_SetConfig+0xbc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00b      	beq.n	800445c <TIM_OC6_SetConfig+0x7c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <TIM_OC6_SetConfig+0xc0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <TIM_OC6_SetConfig+0x7c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <TIM_OC6_SetConfig+0xc4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_OC6_SetConfig+0x7c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <TIM_OC6_SetConfig+0xc8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d109      	bne.n	8004470 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004462:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	029b      	lsls	r3, r3, #10
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40013400 	.word	0x40013400
 80044a0:	40014000 	.word	0x40014000
 80044a4:	40014400 	.word	0x40014400
 80044a8:	40014800 	.word	0x40014800

080044ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f023 030a 	bic.w	r3, r3, #10
 80044e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800450a:	b480      	push	{r7}
 800450c:	b087      	sub	sp, #28
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0210 	bic.w	r2, r3, #16
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	031b      	lsls	r3, r3, #12
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004546:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800456a:	b480      	push	{r7}
 800456c:	b085      	sub	sp, #20
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	f043 0307 	orr.w	r3, r3, #7
 800458c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	021a      	lsls	r2, r3, #8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	609a      	str	r2, [r3, #8]
}
 80045d4:	bf00      	nop
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	2201      	movs	r2, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1a      	ldr	r2, [r3, #32]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	43db      	mvns	r3, r3
 8004602:	401a      	ands	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004640:	2302      	movs	r3, #2
 8004642:	e068      	b.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a2e      	ldr	r2, [pc, #184]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a2d      	ldr	r2, [pc, #180]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d108      	bne.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800467e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004690:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01d      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d018      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1b      	ldr	r2, [pc, #108]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a18      	ldr	r2, [pc, #96]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a13      	ldr	r2, [pc, #76]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a14      	ldr	r2, [pc, #80]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10c      	bne.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40013400 	.word	0x40013400
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40014000 	.word	0x40014000

0800473c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e040      	b.n	800480c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fc fdec 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2224      	movs	r2, #36	; 0x24
 80047a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f8c0 	bl	800493c <UART_SetConfig>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e022      	b.n	800480c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fb3e 	bl	8004e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fbc5 	bl	8004f94 <UART_CheckIdleState>
 800480a:	4603      	mov	r3, r0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004828:	2b20      	cmp	r3, #32
 800482a:	f040 8082 	bne.w	8004932 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_UART_Transmit+0x26>
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e07a      	b.n	8004934 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_UART_Transmit+0x38>
 8004848:	2302      	movs	r3, #2
 800484a:	e073      	b.n	8004934 <HAL_UART_Transmit+0x120>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2221      	movs	r2, #33	; 0x21
 8004860:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004862:	f7fc ff8f 	bl	8001784 <HAL_GetTick>
 8004866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004880:	d108      	bne.n	8004894 <HAL_UART_Transmit+0x80>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e003      	b.n	800489c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80048a4:	e02d      	b.n	8004902 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2200      	movs	r2, #0
 80048ae:	2180      	movs	r1, #128	; 0x80
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 fbb8 	bl	8005026 <UART_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e039      	b.n	8004934 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	881a      	ldrh	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048d2:	b292      	uxth	r2, r2
 80048d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	3302      	adds	r3, #2
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e008      	b.n	80048f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	b292      	uxth	r2, r2
 80048e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3301      	adds	r3, #1
 80048ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1cb      	bne.n	80048a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2200      	movs	r2, #0
 8004916:	2140      	movs	r1, #64	; 0x40
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fb84 	bl	8005026 <UART_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e005      	b.n	8004934 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e000      	b.n	8004934 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800493c:	b5b0      	push	{r4, r5, r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	4313      	orrs	r3, r2
 800495e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4bad      	ldr	r3, [pc, #692]	; (8004c1c <UART_SetConfig+0x2e0>)
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	430b      	orrs	r3, r1
 8004972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4aa2      	ldr	r2, [pc, #648]	; (8004c20 <UART_SetConfig+0x2e4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a99      	ldr	r2, [pc, #612]	; (8004c24 <UART_SetConfig+0x2e8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d121      	bne.n	8004a06 <UART_SetConfig+0xca>
 80049c2:	4b99      	ldr	r3, [pc, #612]	; (8004c28 <UART_SetConfig+0x2ec>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d817      	bhi.n	8004a00 <UART_SetConfig+0xc4>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0x9c>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f5 	.word	0x080049f5
 80049e0:	080049ef 	.word	0x080049ef
 80049e4:	080049fb 	.word	0x080049fb
 80049e8:	2301      	movs	r3, #1
 80049ea:	76fb      	strb	r3, [r7, #27]
 80049ec:	e0e7      	b.n	8004bbe <UART_SetConfig+0x282>
 80049ee:	2302      	movs	r3, #2
 80049f0:	76fb      	strb	r3, [r7, #27]
 80049f2:	e0e4      	b.n	8004bbe <UART_SetConfig+0x282>
 80049f4:	2304      	movs	r3, #4
 80049f6:	76fb      	strb	r3, [r7, #27]
 80049f8:	e0e1      	b.n	8004bbe <UART_SetConfig+0x282>
 80049fa:	2308      	movs	r3, #8
 80049fc:	76fb      	strb	r3, [r7, #27]
 80049fe:	e0de      	b.n	8004bbe <UART_SetConfig+0x282>
 8004a00:	2310      	movs	r3, #16
 8004a02:	76fb      	strb	r3, [r7, #27]
 8004a04:	e0db      	b.n	8004bbe <UART_SetConfig+0x282>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a88      	ldr	r2, [pc, #544]	; (8004c2c <UART_SetConfig+0x2f0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d132      	bne.n	8004a76 <UART_SetConfig+0x13a>
 8004a10:	4b85      	ldr	r3, [pc, #532]	; (8004c28 <UART_SetConfig+0x2ec>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d828      	bhi.n	8004a70 <UART_SetConfig+0x134>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0xe8>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a59 	.word	0x08004a59
 8004a28:	08004a71 	.word	0x08004a71
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a71 	.word	0x08004a71
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a71 	.word	0x08004a71
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a71 	.word	0x08004a71
 8004a44:	08004a5f 	.word	0x08004a5f
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a71 	.word	0x08004a71
 8004a54:	08004a6b 	.word	0x08004a6b
 8004a58:	2300      	movs	r3, #0
 8004a5a:	76fb      	strb	r3, [r7, #27]
 8004a5c:	e0af      	b.n	8004bbe <UART_SetConfig+0x282>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	76fb      	strb	r3, [r7, #27]
 8004a62:	e0ac      	b.n	8004bbe <UART_SetConfig+0x282>
 8004a64:	2304      	movs	r3, #4
 8004a66:	76fb      	strb	r3, [r7, #27]
 8004a68:	e0a9      	b.n	8004bbe <UART_SetConfig+0x282>
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	76fb      	strb	r3, [r7, #27]
 8004a6e:	e0a6      	b.n	8004bbe <UART_SetConfig+0x282>
 8004a70:	2310      	movs	r3, #16
 8004a72:	76fb      	strb	r3, [r7, #27]
 8004a74:	e0a3      	b.n	8004bbe <UART_SetConfig+0x282>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6d      	ldr	r2, [pc, #436]	; (8004c30 <UART_SetConfig+0x2f4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d120      	bne.n	8004ac2 <UART_SetConfig+0x186>
 8004a80:	4b69      	ldr	r3, [pc, #420]	; (8004c28 <UART_SetConfig+0x2ec>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a8a:	2b30      	cmp	r3, #48	; 0x30
 8004a8c:	d013      	beq.n	8004ab6 <UART_SetConfig+0x17a>
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	d814      	bhi.n	8004abc <UART_SetConfig+0x180>
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d009      	beq.n	8004aaa <UART_SetConfig+0x16e>
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d810      	bhi.n	8004abc <UART_SetConfig+0x180>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <UART_SetConfig+0x168>
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d006      	beq.n	8004ab0 <UART_SetConfig+0x174>
 8004aa2:	e00b      	b.n	8004abc <UART_SetConfig+0x180>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	76fb      	strb	r3, [r7, #27]
 8004aa8:	e089      	b.n	8004bbe <UART_SetConfig+0x282>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	76fb      	strb	r3, [r7, #27]
 8004aae:	e086      	b.n	8004bbe <UART_SetConfig+0x282>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	76fb      	strb	r3, [r7, #27]
 8004ab4:	e083      	b.n	8004bbe <UART_SetConfig+0x282>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	76fb      	strb	r3, [r7, #27]
 8004aba:	e080      	b.n	8004bbe <UART_SetConfig+0x282>
 8004abc:	2310      	movs	r3, #16
 8004abe:	76fb      	strb	r3, [r7, #27]
 8004ac0:	e07d      	b.n	8004bbe <UART_SetConfig+0x282>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a5b      	ldr	r2, [pc, #364]	; (8004c34 <UART_SetConfig+0x2f8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d120      	bne.n	8004b0e <UART_SetConfig+0x1d2>
 8004acc:	4b56      	ldr	r3, [pc, #344]	; (8004c28 <UART_SetConfig+0x2ec>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad8:	d013      	beq.n	8004b02 <UART_SetConfig+0x1c6>
 8004ada:	2bc0      	cmp	r3, #192	; 0xc0
 8004adc:	d814      	bhi.n	8004b08 <UART_SetConfig+0x1cc>
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d009      	beq.n	8004af6 <UART_SetConfig+0x1ba>
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d810      	bhi.n	8004b08 <UART_SetConfig+0x1cc>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <UART_SetConfig+0x1b4>
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d006      	beq.n	8004afc <UART_SetConfig+0x1c0>
 8004aee:	e00b      	b.n	8004b08 <UART_SetConfig+0x1cc>
 8004af0:	2300      	movs	r3, #0
 8004af2:	76fb      	strb	r3, [r7, #27]
 8004af4:	e063      	b.n	8004bbe <UART_SetConfig+0x282>
 8004af6:	2302      	movs	r3, #2
 8004af8:	76fb      	strb	r3, [r7, #27]
 8004afa:	e060      	b.n	8004bbe <UART_SetConfig+0x282>
 8004afc:	2304      	movs	r3, #4
 8004afe:	76fb      	strb	r3, [r7, #27]
 8004b00:	e05d      	b.n	8004bbe <UART_SetConfig+0x282>
 8004b02:	2308      	movs	r3, #8
 8004b04:	76fb      	strb	r3, [r7, #27]
 8004b06:	e05a      	b.n	8004bbe <UART_SetConfig+0x282>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	76fb      	strb	r3, [r7, #27]
 8004b0c:	e057      	b.n	8004bbe <UART_SetConfig+0x282>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a49      	ldr	r2, [pc, #292]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d125      	bne.n	8004b64 <UART_SetConfig+0x228>
 8004b18:	4b43      	ldr	r3, [pc, #268]	; (8004c28 <UART_SetConfig+0x2ec>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b26:	d017      	beq.n	8004b58 <UART_SetConfig+0x21c>
 8004b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2c:	d817      	bhi.n	8004b5e <UART_SetConfig+0x222>
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b32:	d00b      	beq.n	8004b4c <UART_SetConfig+0x210>
 8004b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b38:	d811      	bhi.n	8004b5e <UART_SetConfig+0x222>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <UART_SetConfig+0x20a>
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	d006      	beq.n	8004b52 <UART_SetConfig+0x216>
 8004b44:	e00b      	b.n	8004b5e <UART_SetConfig+0x222>
 8004b46:	2300      	movs	r3, #0
 8004b48:	76fb      	strb	r3, [r7, #27]
 8004b4a:	e038      	b.n	8004bbe <UART_SetConfig+0x282>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	76fb      	strb	r3, [r7, #27]
 8004b50:	e035      	b.n	8004bbe <UART_SetConfig+0x282>
 8004b52:	2304      	movs	r3, #4
 8004b54:	76fb      	strb	r3, [r7, #27]
 8004b56:	e032      	b.n	8004bbe <UART_SetConfig+0x282>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	76fb      	strb	r3, [r7, #27]
 8004b5c:	e02f      	b.n	8004bbe <UART_SetConfig+0x282>
 8004b5e:	2310      	movs	r3, #16
 8004b60:	76fb      	strb	r3, [r7, #27]
 8004b62:	e02c      	b.n	8004bbe <UART_SetConfig+0x282>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2d      	ldr	r2, [pc, #180]	; (8004c20 <UART_SetConfig+0x2e4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d125      	bne.n	8004bba <UART_SetConfig+0x27e>
 8004b6e:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <UART_SetConfig+0x2ec>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7c:	d017      	beq.n	8004bae <UART_SetConfig+0x272>
 8004b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b82:	d817      	bhi.n	8004bb4 <UART_SetConfig+0x278>
 8004b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b88:	d00b      	beq.n	8004ba2 <UART_SetConfig+0x266>
 8004b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8e:	d811      	bhi.n	8004bb4 <UART_SetConfig+0x278>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <UART_SetConfig+0x260>
 8004b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b98:	d006      	beq.n	8004ba8 <UART_SetConfig+0x26c>
 8004b9a:	e00b      	b.n	8004bb4 <UART_SetConfig+0x278>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	76fb      	strb	r3, [r7, #27]
 8004ba0:	e00d      	b.n	8004bbe <UART_SetConfig+0x282>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	76fb      	strb	r3, [r7, #27]
 8004ba6:	e00a      	b.n	8004bbe <UART_SetConfig+0x282>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	76fb      	strb	r3, [r7, #27]
 8004bac:	e007      	b.n	8004bbe <UART_SetConfig+0x282>
 8004bae:	2308      	movs	r3, #8
 8004bb0:	76fb      	strb	r3, [r7, #27]
 8004bb2:	e004      	b.n	8004bbe <UART_SetConfig+0x282>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	76fb      	strb	r3, [r7, #27]
 8004bb8:	e001      	b.n	8004bbe <UART_SetConfig+0x282>
 8004bba:	2310      	movs	r3, #16
 8004bbc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <UART_SetConfig+0x2e4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	f040 8087 	bne.w	8004cd8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bca:	7efb      	ldrb	r3, [r7, #27]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d837      	bhi.n	8004c40 <UART_SetConfig+0x304>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <UART_SetConfig+0x29c>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004c41 	.word	0x08004c41
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c41 	.word	0x08004c41
 8004be8:	08004c0b 	.word	0x08004c0b
 8004bec:	08004c41 	.word	0x08004c41
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c13 	.word	0x08004c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bfc:	f7fd fe1e 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 8004c00:	6178      	str	r0, [r7, #20]
        break;
 8004c02:	e022      	b.n	8004c4a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c04:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <UART_SetConfig+0x300>)
 8004c06:	617b      	str	r3, [r7, #20]
        break;
 8004c08:	e01f      	b.n	8004c4a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0a:	f7fd fd7f 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8004c0e:	6178      	str	r0, [r7, #20]
        break;
 8004c10:	e01b      	b.n	8004c4a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c16:	617b      	str	r3, [r7, #20]
        break;
 8004c18:	e017      	b.n	8004c4a <UART_SetConfig+0x30e>
 8004c1a:	bf00      	nop
 8004c1c:	efff69f3 	.word	0xefff69f3
 8004c20:	40008000 	.word	0x40008000
 8004c24:	40013800 	.word	0x40013800
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40004400 	.word	0x40004400
 8004c30:	40004800 	.word	0x40004800
 8004c34:	40004c00 	.word	0x40004c00
 8004c38:	40005000 	.word	0x40005000
 8004c3c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	76bb      	strb	r3, [r7, #26]
        break;
 8004c48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80f1 	beq.w	8004e34 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d305      	bcc.n	8004c6e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d902      	bls.n	8004c74 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	76bb      	strb	r3, [r7, #26]
 8004c72:	e0df      	b.n	8004e34 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	020b      	lsls	r3, r1, #8
 8004c86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c8a:	0202      	lsls	r2, r0, #8
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	6849      	ldr	r1, [r1, #4]
 8004c90:	0849      	lsrs	r1, r1, #1
 8004c92:	4608      	mov	r0, r1
 8004c94:	f04f 0100 	mov.w	r1, #0
 8004c98:	1814      	adds	r4, r2, r0
 8004c9a:	eb43 0501 	adc.w	r5, r3, r1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	4620      	mov	r0, r4
 8004caa:	4629      	mov	r1, r5
 8004cac:	f7fb ff7c 	bl	8000ba8 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cbe:	d308      	bcc.n	8004cd2 <UART_SetConfig+0x396>
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc6:	d204      	bcs.n	8004cd2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e0b0      	b.n	8004e34 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	76bb      	strb	r3, [r7, #26]
 8004cd6:	e0ad      	b.n	8004e34 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce0:	d15c      	bne.n	8004d9c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004ce2:	7efb      	ldrb	r3, [r7, #27]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d828      	bhi.n	8004d3a <UART_SetConfig+0x3fe>
 8004ce8:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0x3b4>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d1d 	.word	0x08004d1d
 8004cf8:	08004d25 	.word	0x08004d25
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d2b 	.word	0x08004d2b
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d3b 	.word	0x08004d3b
 8004d0c:	08004d3b 	.word	0x08004d3b
 8004d10:	08004d33 	.word	0x08004d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fd fd92 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 8004d18:	6178      	str	r0, [r7, #20]
        break;
 8004d1a:	e013      	b.n	8004d44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d1c:	f7fd fda4 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8004d20:	6178      	str	r0, [r7, #20]
        break;
 8004d22:	e00f      	b.n	8004d44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d24:	4b49      	ldr	r3, [pc, #292]	; (8004e4c <UART_SetConfig+0x510>)
 8004d26:	617b      	str	r3, [r7, #20]
        break;
 8004d28:	e00c      	b.n	8004d44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2a:	f7fd fcef 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8004d2e:	6178      	str	r0, [r7, #20]
        break;
 8004d30:	e008      	b.n	8004d44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	617b      	str	r3, [r7, #20]
        break;
 8004d38:	e004      	b.n	8004d44 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	76bb      	strb	r3, [r7, #26]
        break;
 8004d42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d074      	beq.n	8004e34 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	005a      	lsls	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b0f      	cmp	r3, #15
 8004d66:	d916      	bls.n	8004d96 <UART_SetConfig+0x45a>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6e:	d212      	bcs.n	8004d96 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f023 030f 	bic.w	r3, r3, #15
 8004d78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	89fb      	ldrh	r3, [r7, #14]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	89fa      	ldrh	r2, [r7, #14]
 8004d92:	60da      	str	r2, [r3, #12]
 8004d94:	e04e      	b.n	8004e34 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	76bb      	strb	r3, [r7, #26]
 8004d9a:	e04b      	b.n	8004e34 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d9c:	7efb      	ldrb	r3, [r7, #27]
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d827      	bhi.n	8004df2 <UART_SetConfig+0x4b6>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <UART_SetConfig+0x46c>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004dcd 	.word	0x08004dcd
 8004dac:	08004dd5 	.word	0x08004dd5
 8004db0:	08004ddd 	.word	0x08004ddd
 8004db4:	08004df3 	.word	0x08004df3
 8004db8:	08004de3 	.word	0x08004de3
 8004dbc:	08004df3 	.word	0x08004df3
 8004dc0:	08004df3 	.word	0x08004df3
 8004dc4:	08004df3 	.word	0x08004df3
 8004dc8:	08004deb 	.word	0x08004deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dcc:	f7fd fd36 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 8004dd0:	6178      	str	r0, [r7, #20]
        break;
 8004dd2:	e013      	b.n	8004dfc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd4:	f7fd fd48 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8004dd8:	6178      	str	r0, [r7, #20]
        break;
 8004dda:	e00f      	b.n	8004dfc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <UART_SetConfig+0x510>)
 8004dde:	617b      	str	r3, [r7, #20]
        break;
 8004de0:	e00c      	b.n	8004dfc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de2:	f7fd fc93 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8004de6:	6178      	str	r0, [r7, #20]
        break;
 8004de8:	e008      	b.n	8004dfc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dee:	617b      	str	r3, [r7, #20]
        break;
 8004df0:	e004      	b.n	8004dfc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	76bb      	strb	r3, [r7, #26]
        break;
 8004dfa:	bf00      	nop
    }

    if (pclk != 0U)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d018      	beq.n	8004e34 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	085a      	lsrs	r2, r3, #1
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	d908      	bls.n	8004e30 <UART_SetConfig+0x4f4>
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e24:	d204      	bcs.n	8004e30 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	e001      	b.n	8004e34 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e40:	7ebb      	ldrb	r3, [r7, #26]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bdb0      	pop	{r4, r5, r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	00f42400 	.word	0x00f42400

08004e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01a      	beq.n	8004f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4e:	d10a      	bne.n	8004f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa4:	f7fc fbee 	bl	8001784 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d10e      	bne.n	8004fd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f82d 	bl	8005026 <UART_WaitOnFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e023      	b.n	800501e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d10e      	bne.n	8005002 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f817 	bl	8005026 <UART_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e00d      	b.n	800501e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	4613      	mov	r3, r2
 8005034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005036:	e05e      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800503e:	d05a      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005040:	f7fc fba0 	bl	8001784 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	429a      	cmp	r2, r3
 800504e:	d302      	bcc.n	8005056 <UART_WaitOnFlagUntilTimeout+0x30>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d11b      	bne.n	800508e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005064:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e043      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02c      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050aa:	d124      	bne.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050c4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e00f      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69da      	ldr	r2, [r3, #28]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4013      	ands	r3, r2
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	429a      	cmp	r2, r3
 8005112:	d091      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <__NVIC_SetPriority>:
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	6039      	str	r1, [r7, #0]
 800512a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800512c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005130:	2b00      	cmp	r3, #0
 8005132:	db0a      	blt.n	800514a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	490c      	ldr	r1, [pc, #48]	; (800516c <__NVIC_SetPriority+0x4c>)
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	0112      	lsls	r2, r2, #4
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	440b      	add	r3, r1
 8005144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005148:	e00a      	b.n	8005160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4908      	ldr	r1, [pc, #32]	; (8005170 <__NVIC_SetPriority+0x50>)
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	3b04      	subs	r3, #4
 8005158:	0112      	lsls	r2, r2, #4
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	440b      	add	r3, r1
 800515e:	761a      	strb	r2, [r3, #24]
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	e000e100 	.word	0xe000e100
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <SysTick_Handler+0x1c>)
 800517a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800517c:	f001 fcfe 	bl	8006b7c <xTaskGetSchedulerState>
 8005180:	4603      	mov	r3, r0
 8005182:	2b01      	cmp	r3, #1
 8005184:	d001      	beq.n	800518a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005186:	f002 fae7 	bl	8007758 <xPortSysTickHandler>
  }
}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	e000e010 	.word	0xe000e010

08005194 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005198:	2100      	movs	r1, #0
 800519a:	f06f 0004 	mvn.w	r0, #4
 800519e:	f7ff ffbf 	bl	8005120 <__NVIC_SetPriority>
#endif
}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ae:	f3ef 8305 	mrs	r3, IPSR
 80051b2:	603b      	str	r3, [r7, #0]
  return(result);
 80051b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051ba:	f06f 0305 	mvn.w	r3, #5
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	e00c      	b.n	80051dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <osKernelInitialize+0x44>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d105      	bne.n	80051d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <osKernelInitialize+0x44>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	e002      	b.n	80051dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051dc:	687b      	ldr	r3, [r7, #4]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	20000200 	.word	0x20000200

080051f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f6:	f3ef 8305 	mrs	r3, IPSR
 80051fa:	603b      	str	r3, [r7, #0]
  return(result);
 80051fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005202:	f06f 0305 	mvn.w	r3, #5
 8005206:	607b      	str	r3, [r7, #4]
 8005208:	e010      	b.n	800522c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800520a:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <osKernelStart+0x48>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d109      	bne.n	8005226 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005212:	f7ff ffbf 	bl	8005194 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <osKernelStart+0x48>)
 8005218:	2202      	movs	r2, #2
 800521a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800521c:	f001 f866 	bl	80062ec <vTaskStartScheduler>
      stat = osOK;
 8005220:	2300      	movs	r3, #0
 8005222:	607b      	str	r3, [r7, #4]
 8005224:	e002      	b.n	800522c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800522a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800522c:	687b      	ldr	r3, [r7, #4]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000200 	.word	0x20000200

0800523c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b08e      	sub	sp, #56	; 0x38
 8005240:	af04      	add	r7, sp, #16
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800524c:	f3ef 8305 	mrs	r3, IPSR
 8005250:	617b      	str	r3, [r7, #20]
  return(result);
 8005252:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005254:	2b00      	cmp	r3, #0
 8005256:	d17e      	bne.n	8005356 <osThreadNew+0x11a>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d07b      	beq.n	8005356 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005262:	2318      	movs	r3, #24
 8005264:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800526a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d045      	beq.n	8005302 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <osThreadNew+0x48>
        name = attr->name;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <osThreadNew+0x6e>
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b38      	cmp	r3, #56	; 0x38
 800529c:	d805      	bhi.n	80052aa <osThreadNew+0x6e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <osThreadNew+0x72>
        return (NULL);
 80052aa:	2300      	movs	r3, #0
 80052ac:	e054      	b.n	8005358 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	089b      	lsrs	r3, r3, #2
 80052bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00e      	beq.n	80052e4 <osThreadNew+0xa8>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b5b      	cmp	r3, #91	; 0x5b
 80052cc:	d90a      	bls.n	80052e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d006      	beq.n	80052e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <osThreadNew+0xa8>
        mem = 1;
 80052de:	2301      	movs	r3, #1
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e010      	b.n	8005306 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10c      	bne.n	8005306 <osThreadNew+0xca>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d108      	bne.n	8005306 <osThreadNew+0xca>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <osThreadNew+0xca>
          mem = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	e001      	b.n	8005306 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d110      	bne.n	800532e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005314:	9202      	str	r2, [sp, #8]
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6a3a      	ldr	r2, [r7, #32]
 8005320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fe0c 	bl	8005f40 <xTaskCreateStatic>
 8005328:	4603      	mov	r3, r0
 800532a:	613b      	str	r3, [r7, #16]
 800532c:	e013      	b.n	8005356 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d110      	bne.n	8005356 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	b29a      	uxth	r2, r3
 8005338:	f107 0310 	add.w	r3, r7, #16
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fe57 	bl	8005ffa <xTaskCreate>
 800534c:	4603      	mov	r3, r0
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <osThreadNew+0x11a>
            hTask = NULL;
 8005352:	2300      	movs	r3, #0
 8005354:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005356:	693b      	ldr	r3, [r7, #16]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3728      	adds	r7, #40	; 0x28
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005368:	f3ef 8305 	mrs	r3, IPSR
 800536c:	60bb      	str	r3, [r7, #8]
  return(result);
 800536e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <osDelay+0x1c>
    stat = osErrorISR;
 8005374:	f06f 0305 	mvn.w	r3, #5
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e007      	b.n	800538c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 ff7c 	bl	8006284 <vTaskDelay>
    }
  }

  return (stat);
 800538c:	68fb      	ldr	r3, [r7, #12]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80053a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4a06      	ldr	r2, [pc, #24]	; (80053c8 <vApplicationGetIdleTaskMemory+0x30>)
 80053ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2280      	movs	r2, #128	; 0x80
 80053b4:	601a      	str	r2, [r3, #0]
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000204 	.word	0x20000204
 80053c8:	20000260 	.word	0x20000260

080053cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a07      	ldr	r2, [pc, #28]	; (80053f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80053dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4a06      	ldr	r2, [pc, #24]	; (80053fc <vApplicationGetTimerTaskMemory+0x30>)
 80053e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053ea:	601a      	str	r2, [r3, #0]
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	20000460 	.word	0x20000460
 80053fc:	200004bc 	.word	0x200004bc

08005400 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f103 0208 	add.w	r2, r3, #8
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005418:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f103 0208 	add.w	r2, r3, #8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f103 0208 	add.w	r2, r3, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b8:	d103      	bne.n	80054c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e00c      	b.n	80054dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3308      	adds	r3, #8
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e002      	b.n	80054d0 <vListInsert+0x2e>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d2f6      	bcs.n	80054ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	601a      	str	r2, [r3, #0]
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6892      	ldr	r2, [r2, #8]
 800552a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6852      	ldr	r2, [r2, #4]
 8005534:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d103      	bne.n	8005548 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	1e5a      	subs	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005592:	f002 f84f 	bl	8007634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	441a      	add	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c2:	3b01      	subs	r3, #1
 80055c4:	68f9      	ldr	r1, [r7, #12]
 80055c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	441a      	add	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	22ff      	movs	r2, #255	; 0xff
 80055d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	22ff      	movs	r2, #255	; 0xff
 80055de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d114      	bne.n	8005612 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01a      	beq.n	8005626 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3310      	adds	r3, #16
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f903 	bl	8006800 <xTaskRemoveFromEventList>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d012      	beq.n	8005626 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <xQueueGenericReset+0xcc>)
 8005602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	e009      	b.n	8005626 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3310      	adds	r3, #16
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fef2 	bl	8005400 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3324      	adds	r3, #36	; 0x24
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff feed 	bl	8005400 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005626:	f002 f835 	bl	8007694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800562a:	2301      	movs	r3, #1
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08e      	sub	sp, #56	; 0x38
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <xQueueGenericCreateStatic+0x52>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <xQueueGenericCreateStatic+0x56>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueGenericCreateStatic+0x58>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	623b      	str	r3, [r7, #32]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <xQueueGenericCreateStatic+0x7e>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <xQueueGenericCreateStatic+0x82>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <xQueueGenericCreateStatic+0x84>
 80056ba:	2300      	movs	r3, #0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	61fb      	str	r3, [r7, #28]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056d6:	2350      	movs	r3, #80	; 0x50
 80056d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b50      	cmp	r3, #80	; 0x50
 80056de:	d00a      	beq.n	80056f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	61bb      	str	r3, [r7, #24]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00d      	beq.n	800571e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800570a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f805 	bl	8005728 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005720:	4618      	mov	r0, r3
 8005722:	3730      	adds	r7, #48	; 0x30
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d103      	bne.n	8005744 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e002      	b.n	800574a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005756:	2101      	movs	r1, #1
 8005758:	69b8      	ldr	r0, [r7, #24]
 800575a:	f7ff ff05 	bl	8005568 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	78fa      	ldrb	r2, [r7, #3]
 8005762:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08e      	sub	sp, #56	; 0x38
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800577e:	2300      	movs	r3, #0
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <xQueueGenericSend+0x32>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <xQueueGenericSend+0x40>
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <xQueueGenericSend+0x44>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <xQueueGenericSend+0x46>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <xQueueGenericSend+0x60>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d103      	bne.n	80057de <xQueueGenericSend+0x6e>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <xQueueGenericSend+0x72>
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <xQueueGenericSend+0x74>
 80057e2:	2300      	movs	r3, #0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <xQueueGenericSend+0x8e>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	623b      	str	r3, [r7, #32]
}
 80057fa:	bf00      	nop
 80057fc:	e7fe      	b.n	80057fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057fe:	f001 f9bd 	bl	8006b7c <xTaskGetSchedulerState>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d102      	bne.n	800580e <xQueueGenericSend+0x9e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <xQueueGenericSend+0xa2>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <xQueueGenericSend+0xa4>
 8005812:	2300      	movs	r3, #0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <xQueueGenericSend+0xbe>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	61fb      	str	r3, [r7, #28]
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800582e:	f001 ff01 	bl	8007634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583a:	429a      	cmp	r2, r3
 800583c:	d302      	bcc.n	8005844 <xQueueGenericSend+0xd4>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d129      	bne.n	8005898 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800584a:	f000 fa0b 	bl	8005c64 <prvCopyDataToQueue>
 800584e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d010      	beq.n	800587a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	3324      	adds	r3, #36	; 0x24
 800585c:	4618      	mov	r0, r3
 800585e:	f000 ffcf 	bl	8006800 <xTaskRemoveFromEventList>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005868:	4b3f      	ldr	r3, [pc, #252]	; (8005968 <xQueueGenericSend+0x1f8>)
 800586a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	e00a      	b.n	8005890 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005880:	4b39      	ldr	r3, [pc, #228]	; (8005968 <xQueueGenericSend+0x1f8>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005890:	f001 ff00 	bl	8007694 <vPortExitCritical>
				return pdPASS;
 8005894:	2301      	movs	r3, #1
 8005896:	e063      	b.n	8005960 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800589e:	f001 fef9 	bl	8007694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e05c      	b.n	8005960 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058ac:	f107 0314 	add.w	r3, r7, #20
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 f809 	bl	80068c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058b6:	2301      	movs	r3, #1
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ba:	f001 feeb 	bl	8007694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058be:	f000 fd7b 	bl	80063b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058c2:	f001 feb7 	bl	8007634 <vPortEnterCritical>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058cc:	b25b      	sxtb	r3, r3
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d2:	d103      	bne.n	80058dc <xQueueGenericSend+0x16c>
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e2:	b25b      	sxtb	r3, r3
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e8:	d103      	bne.n	80058f2 <xQueueGenericSend+0x182>
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f2:	f001 fecf 	bl	8007694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058f6:	1d3a      	adds	r2, r7, #4
 80058f8:	f107 0314 	add.w	r3, r7, #20
 80058fc:	4611      	mov	r1, r2
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fff8 	bl	80068f4 <xTaskCheckForTimeOut>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d124      	bne.n	8005954 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800590a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800590c:	f000 faa2 	bl	8005e54 <prvIsQueueFull>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	3310      	adds	r3, #16
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4611      	mov	r1, r2
 800591e:	4618      	mov	r0, r3
 8005920:	f000 ff1e 	bl	8006760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005926:	f000 fa2d 	bl	8005d84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800592a:	f000 fd53 	bl	80063d4 <xTaskResumeAll>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	f47f af7c 	bne.w	800582e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005936:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <xQueueGenericSend+0x1f8>)
 8005938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	e772      	b.n	800582e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800594a:	f000 fa1b 	bl	8005d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800594e:	f000 fd41 	bl	80063d4 <xTaskResumeAll>
 8005952:	e76c      	b.n	800582e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005956:	f000 fa15 	bl	8005d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800595a:	f000 fd3b 	bl	80063d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800595e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005960:	4618      	mov	r0, r3
 8005962:	3738      	adds	r7, #56	; 0x38
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b090      	sub	sp, #64	; 0x40
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d103      	bne.n	80059a8 <xQueueGenericSendFromISR+0x3c>
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <xQueueGenericSendFromISR+0x40>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <xQueueGenericSendFromISR+0x42>
 80059ac:	2300      	movs	r3, #0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d103      	bne.n	80059d6 <xQueueGenericSendFromISR+0x6a>
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <xQueueGenericSendFromISR+0x6e>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <xQueueGenericSendFromISR+0x70>
 80059da:	2300      	movs	r3, #0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	623b      	str	r3, [r7, #32]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059f6:	f001 feff 	bl	80077f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059fa:	f3ef 8211 	mrs	r2, BASEPRI
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	61fa      	str	r2, [r7, #28]
 8005a10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <xQueueGenericSendFromISR+0xbc>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d12f      	bne.n	8005a88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a3e:	f000 f911 	bl	8005c64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4a:	d112      	bne.n	8005a72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d016      	beq.n	8005a82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	3324      	adds	r3, #36	; 0x24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fed1 	bl	8006800 <xTaskRemoveFromEventList>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00e      	beq.n	8005a82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	e007      	b.n	8005a82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a76:	3301      	adds	r3, #1
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	b25a      	sxtb	r2, r3
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a82:	2301      	movs	r3, #1
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a86:	e001      	b.n	8005a8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3740      	adds	r7, #64	; 0x40
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08c      	sub	sp, #48	; 0x30
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <xQueueReceive+0x30>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	623b      	str	r3, [r7, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <xQueueReceive+0x3e>
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <xQueueReceive+0x42>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <xQueueReceive+0x44>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <xQueueReceive+0x5e>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	61fb      	str	r3, [r7, #28]
}
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b02:	f001 f83b 	bl	8006b7c <xTaskGetSchedulerState>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <xQueueReceive+0x6e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <xQueueReceive+0x72>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <xQueueReceive+0x74>
 8005b16:	2300      	movs	r3, #0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <xQueueReceive+0x8e>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	61bb      	str	r3, [r7, #24]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b32:	f001 fd7f 	bl	8007634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01f      	beq.n	8005b82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b46:	f000 f8f7 	bl	8005d38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	1e5a      	subs	r2, r3, #1
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00f      	beq.n	8005b7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	3310      	adds	r3, #16
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fe4e 	bl	8006800 <xTaskRemoveFromEventList>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b6a:	4b3d      	ldr	r3, [pc, #244]	; (8005c60 <xQueueReceive+0x1bc>)
 8005b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b7a:	f001 fd8b 	bl	8007694 <vPortExitCritical>
				return pdPASS;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e069      	b.n	8005c56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d103      	bne.n	8005b90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b88:	f001 fd84 	bl	8007694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e062      	b.n	8005c56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b96:	f107 0310 	add.w	r3, r7, #16
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fe94 	bl	80068c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ba4:	f001 fd76 	bl	8007694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ba8:	f000 fc06 	bl	80063b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bac:	f001 fd42 	bl	8007634 <vPortEnterCritical>
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb6:	b25b      	sxtb	r3, r3
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bbc:	d103      	bne.n	8005bc6 <xQueueReceive+0x122>
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bcc:	b25b      	sxtb	r3, r3
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd2:	d103      	bne.n	8005bdc <xQueueReceive+0x138>
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bdc:	f001 fd5a 	bl	8007694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005be0:	1d3a      	adds	r2, r7, #4
 8005be2:	f107 0310 	add.w	r3, r7, #16
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fe83 	bl	80068f4 <xTaskCheckForTimeOut>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d123      	bne.n	8005c3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf6:	f000 f917 	bl	8005e28 <prvIsQueueEmpty>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d017      	beq.n	8005c30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	3324      	adds	r3, #36	; 0x24
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fda9 	bl	8006760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c10:	f000 f8b8 	bl	8005d84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c14:	f000 fbde 	bl	80063d4 <xTaskResumeAll>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d189      	bne.n	8005b32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c1e:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <xQueueReceive+0x1bc>)
 8005c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	e780      	b.n	8005b32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c32:	f000 f8a7 	bl	8005d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c36:	f000 fbcd 	bl	80063d4 <xTaskResumeAll>
 8005c3a:	e77a      	b.n	8005b32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3e:	f000 f8a1 	bl	8005d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c42:	f000 fbc7 	bl	80063d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c48:	f000 f8ee 	bl	8005e28 <prvIsQueueEmpty>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f43f af6f 	beq.w	8005b32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3730      	adds	r7, #48	; 0x30
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	e000ed04 	.word	0xe000ed04

08005c64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10d      	bne.n	8005c9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d14d      	bne.n	8005d26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 ff92 	bl	8006bb8 <xTaskPriorityDisinherit>
 8005c94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	e043      	b.n	8005d26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d119      	bne.n	8005cd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6858      	ldr	r0, [r3, #4]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	461a      	mov	r2, r3
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	f001 fff6 	bl	8007ca0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	441a      	add	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d32b      	bcc.n	8005d26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	e026      	b.n	8005d26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68d8      	ldr	r0, [r3, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	f001 ffdc 	bl	8007ca0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	425b      	negs	r3, r3
 8005cf2:	441a      	add	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d207      	bcs.n	8005d14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	425b      	negs	r3, r3
 8005d0e:	441a      	add	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d105      	bne.n	8005d26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d2e:	697b      	ldr	r3, [r7, #20]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d018      	beq.n	8005d7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	441a      	add	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d303      	bcc.n	8005d6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68d9      	ldr	r1, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	461a      	mov	r2, r3
 8005d76:	6838      	ldr	r0, [r7, #0]
 8005d78:	f001 ff92 	bl	8007ca0 <memcpy>
	}
}
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d8c:	f001 fc52 	bl	8007634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d98:	e011      	b.n	8005dbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d012      	beq.n	8005dc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3324      	adds	r3, #36	; 0x24
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fd2a 	bl	8006800 <xTaskRemoveFromEventList>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005db2:	f000 fe01 	bl	80069b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	dce9      	bgt.n	8005d9a <prvUnlockQueue+0x16>
 8005dc6:	e000      	b.n	8005dca <prvUnlockQueue+0x46>
					break;
 8005dc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	22ff      	movs	r2, #255	; 0xff
 8005dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005dd2:	f001 fc5f 	bl	8007694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dd6:	f001 fc2d 	bl	8007634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005de0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005de2:	e011      	b.n	8005e08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d012      	beq.n	8005e12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3310      	adds	r3, #16
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fd05 	bl	8006800 <xTaskRemoveFromEventList>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dfc:	f000 fddc 	bl	80069b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dce9      	bgt.n	8005de4 <prvUnlockQueue+0x60>
 8005e10:	e000      	b.n	8005e14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	22ff      	movs	r2, #255	; 0xff
 8005e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e1c:	f001 fc3a 	bl	8007694 <vPortExitCritical>
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e30:	f001 fc00 	bl	8007634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	e001      	b.n	8005e46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e46:	f001 fc25 	bl	8007694 <vPortExitCritical>

	return xReturn;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e5c:	f001 fbea 	bl	8007634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d102      	bne.n	8005e72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	e001      	b.n	8005e76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e76:	f001 fc0d 	bl	8007694 <vPortExitCritical>

	return xReturn;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	e014      	b.n	8005ebe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e94:	4a0f      	ldr	r2, [pc, #60]	; (8005ed4 <vQueueAddToRegistry+0x50>)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ea0:	490c      	ldr	r1, [pc, #48]	; (8005ed4 <vQueueAddToRegistry+0x50>)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005eaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ed4 <vQueueAddToRegistry+0x50>)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005eb6:	e006      	b.n	8005ec6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b07      	cmp	r3, #7
 8005ec2:	d9e7      	bls.n	8005e94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20001bf4 	.word	0x20001bf4

08005ed8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ee8:	f001 fba4 	bl	8007634 <vPortEnterCritical>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef2:	b25b      	sxtb	r3, r3
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef8:	d103      	bne.n	8005f02 <vQueueWaitForMessageRestricted+0x2a>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f08:	b25b      	sxtb	r3, r3
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f0e:	d103      	bne.n	8005f18 <vQueueWaitForMessageRestricted+0x40>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f18:	f001 fbbc 	bl	8007694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	3324      	adds	r3, #36	; 0x24
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fc3b 	bl	80067a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f32:	6978      	ldr	r0, [r7, #20]
 8005f34:	f7ff ff26 	bl	8005d84 <prvUnlockQueue>
	}
 8005f38:	bf00      	nop
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08e      	sub	sp, #56	; 0x38
 8005f44:	af04      	add	r7, sp, #16
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	623b      	str	r3, [r7, #32]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	61fb      	str	r3, [r7, #28]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f86:	235c      	movs	r3, #92	; 0x5c
 8005f88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b5c      	cmp	r3, #92	; 0x5c
 8005f8e:	d00a      	beq.n	8005fa6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	61bb      	str	r3, [r7, #24]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fa6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01e      	beq.n	8005fec <xTaskCreateStatic+0xac>
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01b      	beq.n	8005fec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9303      	str	r3, [sp, #12]
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	9302      	str	r3, [sp, #8]
 8005fce:	f107 0314 	add.w	r3, r7, #20
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f850 	bl	8006084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fe6:	f000 f8dd 	bl	80061a4 <prvAddNewTaskToReadyList>
 8005fea:	e001      	b.n	8005ff0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ff0:	697b      	ldr	r3, [r7, #20]
	}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3728      	adds	r7, #40	; 0x28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b08c      	sub	sp, #48	; 0x30
 8005ffe:	af04      	add	r7, sp, #16
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fc32 	bl	8007878 <pvPortMalloc>
 8006014:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00e      	beq.n	800603a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800601c:	205c      	movs	r0, #92	; 0x5c
 800601e:	f001 fc2b 	bl	8007878 <pvPortMalloc>
 8006022:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
 8006030:	e005      	b.n	800603e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006032:	6978      	ldr	r0, [r7, #20]
 8006034:	f001 fcec 	bl	8007a10 <vPortFree>
 8006038:	e001      	b.n	800603e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d017      	beq.n	8006074 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800604c:	88fa      	ldrh	r2, [r7, #6]
 800604e:	2300      	movs	r3, #0
 8006050:	9303      	str	r3, [sp, #12]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	9302      	str	r3, [sp, #8]
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f80e 	bl	8006084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006068:	69f8      	ldr	r0, [r7, #28]
 800606a:	f000 f89b 	bl	80061a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800606e:	2301      	movs	r3, #1
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	e002      	b.n	800607a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006078:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800607a:	69bb      	ldr	r3, [r7, #24]
	}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	461a      	mov	r2, r3
 800609c:	21a5      	movs	r1, #165	; 0xa5
 800609e:	f001 fe0d 	bl	8007cbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060ac:	3b01      	subs	r3, #1
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f023 0307 	bic.w	r3, r3, #7
 80060ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	617b      	str	r3, [r7, #20]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01f      	beq.n	8006122 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	e012      	b.n	800610e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	7819      	ldrb	r1, [r3, #0]
 80060f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4413      	add	r3, r2
 80060f6:	3334      	adds	r3, #52	; 0x34
 80060f8:	460a      	mov	r2, r1
 80060fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	3301      	adds	r3, #1
 800610c:	61fb      	str	r3, [r7, #28]
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	2b0f      	cmp	r3, #15
 8006112:	d9e9      	bls.n	80060e8 <prvInitialiseNewTask+0x64>
 8006114:	e000      	b.n	8006118 <prvInitialiseNewTask+0x94>
			{
				break;
 8006116:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006120:	e003      	b.n	800612a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	2b37      	cmp	r3, #55	; 0x37
 800612e:	d901      	bls.n	8006134 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006130:	2337      	movs	r3, #55	; 0x37
 8006132:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006138:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	2200      	movs	r2, #0
 8006144:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	3304      	adds	r3, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff f978 	bl	8005440 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	3318      	adds	r3, #24
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff f973 	bl	8005440 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	2200      	movs	r2, #0
 8006174:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	69b8      	ldr	r0, [r7, #24]
 8006184:	f001 f928 	bl	80073d8 <pxPortInitialiseStack>
 8006188:	4602      	mov	r2, r0
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800619a:	bf00      	nop
 800619c:	3720      	adds	r7, #32
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061ac:	f001 fa42 	bl	8007634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061b0:	4b2d      	ldr	r3, [pc, #180]	; (8006268 <prvAddNewTaskToReadyList+0xc4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3301      	adds	r3, #1
 80061b6:	4a2c      	ldr	r2, [pc, #176]	; (8006268 <prvAddNewTaskToReadyList+0xc4>)
 80061b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061ba:	4b2c      	ldr	r3, [pc, #176]	; (800626c <prvAddNewTaskToReadyList+0xc8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061c2:	4a2a      	ldr	r2, [pc, #168]	; (800626c <prvAddNewTaskToReadyList+0xc8>)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <prvAddNewTaskToReadyList+0xc4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d110      	bne.n	80061f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061d0:	f000 fc16 	bl	8006a00 <prvInitialiseTaskLists>
 80061d4:	e00d      	b.n	80061f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061d6:	4b26      	ldr	r3, [pc, #152]	; (8006270 <prvAddNewTaskToReadyList+0xcc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061de:	4b23      	ldr	r3, [pc, #140]	; (800626c <prvAddNewTaskToReadyList+0xc8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d802      	bhi.n	80061f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061ec:	4a1f      	ldr	r2, [pc, #124]	; (800626c <prvAddNewTaskToReadyList+0xc8>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <prvAddNewTaskToReadyList+0xd0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3301      	adds	r3, #1
 80061f8:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <prvAddNewTaskToReadyList+0xd0>)
 80061fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061fc:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <prvAddNewTaskToReadyList+0xd0>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006208:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <prvAddNewTaskToReadyList+0xd4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d903      	bls.n	8006218 <prvAddNewTaskToReadyList+0x74>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	4a18      	ldr	r2, [pc, #96]	; (8006278 <prvAddNewTaskToReadyList+0xd4>)
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4a15      	ldr	r2, [pc, #84]	; (800627c <prvAddNewTaskToReadyList+0xd8>)
 8006226:	441a      	add	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f7ff f913 	bl	800545a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006234:	f001 fa2e 	bl	8007694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006238:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <prvAddNewTaskToReadyList+0xcc>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00e      	beq.n	800625e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <prvAddNewTaskToReadyList+0xc8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	429a      	cmp	r2, r3
 800624c:	d207      	bcs.n	800625e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <prvAddNewTaskToReadyList+0xdc>)
 8006250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000d90 	.word	0x20000d90
 800626c:	200008bc 	.word	0x200008bc
 8006270:	20000d9c 	.word	0x20000d9c
 8006274:	20000dac 	.word	0x20000dac
 8006278:	20000d98 	.word	0x20000d98
 800627c:	200008c0 	.word	0x200008c0
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d017      	beq.n	80062c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <vTaskDelay+0x60>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <vTaskDelay+0x30>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	60bb      	str	r3, [r7, #8]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062b4:	f000 f880 	bl	80063b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062b8:	2100      	movs	r1, #0
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fcea 	bl	8006c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062c0:	f000 f888 	bl	80063d4 <xTaskResumeAll>
 80062c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d107      	bne.n	80062dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <vTaskDelay+0x64>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000db8 	.word	0x20000db8
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	; 0x28
 80062f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062fa:	463a      	mov	r2, r7
 80062fc:	1d39      	adds	r1, r7, #4
 80062fe:	f107 0308 	add.w	r3, r7, #8
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff f848 	bl	8005398 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	9202      	str	r2, [sp, #8]
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	2300      	movs	r3, #0
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	2300      	movs	r3, #0
 8006318:	460a      	mov	r2, r1
 800631a:	4921      	ldr	r1, [pc, #132]	; (80063a0 <vTaskStartScheduler+0xb4>)
 800631c:	4821      	ldr	r0, [pc, #132]	; (80063a4 <vTaskStartScheduler+0xb8>)
 800631e:	f7ff fe0f 	bl	8005f40 <xTaskCreateStatic>
 8006322:	4603      	mov	r3, r0
 8006324:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <vTaskStartScheduler+0xbc>)
 8006326:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006328:	4b1f      	ldr	r3, [pc, #124]	; (80063a8 <vTaskStartScheduler+0xbc>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006330:	2301      	movs	r3, #1
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	e001      	b.n	800633a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d102      	bne.n	8006346 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006340:	f000 fcfc 	bl	8006d3c <xTimerCreateTimerTask>
 8006344:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d116      	bne.n	800637a <vTaskStartScheduler+0x8e>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	613b      	str	r3, [r7, #16]
}
 800635e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006360:	4b12      	ldr	r3, [pc, #72]	; (80063ac <vTaskStartScheduler+0xc0>)
 8006362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006366:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006368:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <vTaskStartScheduler+0xc4>)
 800636a:	2201      	movs	r2, #1
 800636c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <vTaskStartScheduler+0xc8>)
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006374:	f001 f8bc 	bl	80074f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006378:	e00e      	b.n	8006398 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006380:	d10a      	bne.n	8006398 <vTaskStartScheduler+0xac>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	60fb      	str	r3, [r7, #12]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <vTaskStartScheduler+0xaa>
}
 8006398:	bf00      	nop
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	0800a6ac 	.word	0x0800a6ac
 80063a4:	080069d1 	.word	0x080069d1
 80063a8:	20000db4 	.word	0x20000db4
 80063ac:	20000db0 	.word	0x20000db0
 80063b0:	20000d9c 	.word	0x20000d9c
 80063b4:	20000d94 	.word	0x20000d94

080063b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063bc:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <vTaskSuspendAll+0x18>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3301      	adds	r3, #1
 80063c2:	4a03      	ldr	r2, [pc, #12]	; (80063d0 <vTaskSuspendAll+0x18>)
 80063c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063c6:	bf00      	nop
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20000db8 	.word	0x20000db8

080063d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063e2:	4b42      	ldr	r3, [pc, #264]	; (80064ec <xTaskResumeAll+0x118>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <xTaskResumeAll+0x2c>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	603b      	str	r3, [r7, #0]
}
 80063fc:	bf00      	nop
 80063fe:	e7fe      	b.n	80063fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006400:	f001 f918 	bl	8007634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006404:	4b39      	ldr	r3, [pc, #228]	; (80064ec <xTaskResumeAll+0x118>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3b01      	subs	r3, #1
 800640a:	4a38      	ldr	r2, [pc, #224]	; (80064ec <xTaskResumeAll+0x118>)
 800640c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800640e:	4b37      	ldr	r3, [pc, #220]	; (80064ec <xTaskResumeAll+0x118>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d162      	bne.n	80064dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006416:	4b36      	ldr	r3, [pc, #216]	; (80064f0 <xTaskResumeAll+0x11c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d05e      	beq.n	80064dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800641e:	e02f      	b.n	8006480 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006420:	4b34      	ldr	r3, [pc, #208]	; (80064f4 <xTaskResumeAll+0x120>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3318      	adds	r3, #24
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff f871 	bl	8005514 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3304      	adds	r3, #4
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff f86c 	bl	8005514 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006440:	4b2d      	ldr	r3, [pc, #180]	; (80064f8 <xTaskResumeAll+0x124>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d903      	bls.n	8006450 <xTaskResumeAll+0x7c>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <xTaskResumeAll+0x124>)
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4a27      	ldr	r2, [pc, #156]	; (80064fc <xTaskResumeAll+0x128>)
 800645e:	441a      	add	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3304      	adds	r3, #4
 8006464:	4619      	mov	r1, r3
 8006466:	4610      	mov	r0, r2
 8006468:	f7fe fff7 	bl	800545a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006470:	4b23      	ldr	r3, [pc, #140]	; (8006500 <xTaskResumeAll+0x12c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	429a      	cmp	r2, r3
 8006478:	d302      	bcc.n	8006480 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800647a:	4b22      	ldr	r3, [pc, #136]	; (8006504 <xTaskResumeAll+0x130>)
 800647c:	2201      	movs	r2, #1
 800647e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006480:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <xTaskResumeAll+0x120>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1cb      	bne.n	8006420 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800648e:	f000 fb55 	bl	8006b3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006492:	4b1d      	ldr	r3, [pc, #116]	; (8006508 <xTaskResumeAll+0x134>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d010      	beq.n	80064c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800649e:	f000 f847 	bl	8006530 <xTaskIncrementTick>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064a8:	4b16      	ldr	r3, [pc, #88]	; (8006504 <xTaskResumeAll+0x130>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f1      	bne.n	800649e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <xTaskResumeAll+0x134>)
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064c0:	4b10      	ldr	r3, [pc, #64]	; (8006504 <xTaskResumeAll+0x130>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064c8:	2301      	movs	r3, #1
 80064ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064cc:	4b0f      	ldr	r3, [pc, #60]	; (800650c <xTaskResumeAll+0x138>)
 80064ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064dc:	f001 f8da 	bl	8007694 <vPortExitCritical>

	return xAlreadyYielded;
 80064e0:	68bb      	ldr	r3, [r7, #8]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000db8 	.word	0x20000db8
 80064f0:	20000d90 	.word	0x20000d90
 80064f4:	20000d50 	.word	0x20000d50
 80064f8:	20000d98 	.word	0x20000d98
 80064fc:	200008c0 	.word	0x200008c0
 8006500:	200008bc 	.word	0x200008bc
 8006504:	20000da4 	.word	0x20000da4
 8006508:	20000da0 	.word	0x20000da0
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <xTaskGetTickCount+0x1c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800651c:	687b      	ldr	r3, [r7, #4]
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000d94 	.word	0x20000d94

08006530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800653a:	4b4f      	ldr	r3, [pc, #316]	; (8006678 <xTaskIncrementTick+0x148>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f040 808f 	bne.w	8006662 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006544:	4b4d      	ldr	r3, [pc, #308]	; (800667c <xTaskIncrementTick+0x14c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3301      	adds	r3, #1
 800654a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800654c:	4a4b      	ldr	r2, [pc, #300]	; (800667c <xTaskIncrementTick+0x14c>)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d120      	bne.n	800659a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006558:	4b49      	ldr	r3, [pc, #292]	; (8006680 <xTaskIncrementTick+0x150>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <xTaskIncrementTick+0x48>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	603b      	str	r3, [r7, #0]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <xTaskIncrementTick+0x46>
 8006578:	4b41      	ldr	r3, [pc, #260]	; (8006680 <xTaskIncrementTick+0x150>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	4b41      	ldr	r3, [pc, #260]	; (8006684 <xTaskIncrementTick+0x154>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a3f      	ldr	r2, [pc, #252]	; (8006680 <xTaskIncrementTick+0x150>)
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	4a3f      	ldr	r2, [pc, #252]	; (8006684 <xTaskIncrementTick+0x154>)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	4b3e      	ldr	r3, [pc, #248]	; (8006688 <xTaskIncrementTick+0x158>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a3d      	ldr	r2, [pc, #244]	; (8006688 <xTaskIncrementTick+0x158>)
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	f000 fad1 	bl	8006b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800659a:	4b3c      	ldr	r3, [pc, #240]	; (800668c <xTaskIncrementTick+0x15c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d349      	bcc.n	8006638 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a4:	4b36      	ldr	r3, [pc, #216]	; (8006680 <xTaskIncrementTick+0x150>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d104      	bne.n	80065b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ae:	4b37      	ldr	r3, [pc, #220]	; (800668c <xTaskIncrementTick+0x15c>)
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065b4:	601a      	str	r2, [r3, #0]
					break;
 80065b6:	e03f      	b.n	8006638 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b8:	4b31      	ldr	r3, [pc, #196]	; (8006680 <xTaskIncrementTick+0x150>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d203      	bcs.n	80065d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065d0:	4a2e      	ldr	r2, [pc, #184]	; (800668c <xTaskIncrementTick+0x15c>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065d6:	e02f      	b.n	8006638 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	3304      	adds	r3, #4
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe ff99 	bl	8005514 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3318      	adds	r3, #24
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe ff90 	bl	8005514 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <xTaskIncrementTick+0x160>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d903      	bls.n	8006608 <xTaskIncrementTick+0xd8>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a22      	ldr	r2, [pc, #136]	; (8006690 <xTaskIncrementTick+0x160>)
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4a1f      	ldr	r2, [pc, #124]	; (8006694 <xTaskIncrementTick+0x164>)
 8006616:	441a      	add	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f7fe ff1b 	bl	800545a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006628:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <xTaskIncrementTick+0x168>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	429a      	cmp	r2, r3
 8006630:	d3b8      	bcc.n	80065a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006632:	2301      	movs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006636:	e7b5      	b.n	80065a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006638:	4b17      	ldr	r3, [pc, #92]	; (8006698 <xTaskIncrementTick+0x168>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663e:	4915      	ldr	r1, [pc, #84]	; (8006694 <xTaskIncrementTick+0x164>)
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d901      	bls.n	8006654 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006650:	2301      	movs	r3, #1
 8006652:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006654:	4b11      	ldr	r3, [pc, #68]	; (800669c <xTaskIncrementTick+0x16c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e004      	b.n	800666c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006662:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <xTaskIncrementTick+0x170>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3301      	adds	r3, #1
 8006668:	4a0d      	ldr	r2, [pc, #52]	; (80066a0 <xTaskIncrementTick+0x170>)
 800666a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800666c:	697b      	ldr	r3, [r7, #20]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000db8 	.word	0x20000db8
 800667c:	20000d94 	.word	0x20000d94
 8006680:	20000d48 	.word	0x20000d48
 8006684:	20000d4c 	.word	0x20000d4c
 8006688:	20000da8 	.word	0x20000da8
 800668c:	20000db0 	.word	0x20000db0
 8006690:	20000d98 	.word	0x20000d98
 8006694:	200008c0 	.word	0x200008c0
 8006698:	200008bc 	.word	0x200008bc
 800669c:	20000da4 	.word	0x20000da4
 80066a0:	20000da0 	.word	0x20000da0

080066a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066aa:	4b28      	ldr	r3, [pc, #160]	; (800674c <vTaskSwitchContext+0xa8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066b2:	4b27      	ldr	r3, [pc, #156]	; (8006750 <vTaskSwitchContext+0xac>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066b8:	e041      	b.n	800673e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80066ba:	4b25      	ldr	r3, [pc, #148]	; (8006750 <vTaskSwitchContext+0xac>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c0:	4b24      	ldr	r3, [pc, #144]	; (8006754 <vTaskSwitchContext+0xb0>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e010      	b.n	80066ea <vTaskSwitchContext+0x46>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <vTaskSwitchContext+0x3e>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	491b      	ldr	r1, [pc, #108]	; (8006758 <vTaskSwitchContext+0xb4>)
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0e4      	beq.n	80066c8 <vTaskSwitchContext+0x24>
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4a13      	ldr	r2, [pc, #76]	; (8006758 <vTaskSwitchContext+0xb4>)
 800670a:	4413      	add	r3, r2
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	605a      	str	r2, [r3, #4]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	3308      	adds	r3, #8
 8006720:	429a      	cmp	r2, r3
 8006722:	d104      	bne.n	800672e <vTaskSwitchContext+0x8a>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	4a09      	ldr	r2, [pc, #36]	; (800675c <vTaskSwitchContext+0xb8>)
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	4a06      	ldr	r2, [pc, #24]	; (8006754 <vTaskSwitchContext+0xb0>)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6013      	str	r3, [r2, #0]
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	20000db8 	.word	0x20000db8
 8006750:	20000da4 	.word	0x20000da4
 8006754:	20000d98 	.word	0x20000d98
 8006758:	200008c0 	.word	0x200008c0
 800675c:	200008bc 	.word	0x200008bc

08006760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	60fb      	str	r3, [r7, #12]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006786:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <vTaskPlaceOnEventList+0x44>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3318      	adds	r3, #24
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fe fe87 	bl	80054a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006794:	2101      	movs	r1, #1
 8006796:	6838      	ldr	r0, [r7, #0]
 8006798:	f000 fa7c 	bl	8006c94 <prvAddCurrentTaskToDelayedList>
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	200008bc 	.word	0x200008bc

080067a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	617b      	str	r3, [r7, #20]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <vTaskPlaceOnEventListRestricted+0x54>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3318      	adds	r3, #24
 80067d6:	4619      	mov	r1, r3
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7fe fe3e 	bl	800545a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	68b8      	ldr	r0, [r7, #8]
 80067ee:	f000 fa51 	bl	8006c94 <prvAddCurrentTaskToDelayedList>
	}
 80067f2:	bf00      	nop
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	200008bc 	.word	0x200008bc

08006800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60fb      	str	r3, [r7, #12]
}
 8006828:	bf00      	nop
 800682a:	e7fe      	b.n	800682a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	3318      	adds	r3, #24
 8006830:	4618      	mov	r0, r3
 8006832:	f7fe fe6f 	bl	8005514 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006836:	4b1e      	ldr	r3, [pc, #120]	; (80068b0 <xTaskRemoveFromEventList+0xb0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d11d      	bne.n	800687a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	3304      	adds	r3, #4
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe fe66 	bl	8005514 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <xTaskRemoveFromEventList+0xb4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	429a      	cmp	r2, r3
 8006852:	d903      	bls.n	800685c <xTaskRemoveFromEventList+0x5c>
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	4a16      	ldr	r2, [pc, #88]	; (80068b4 <xTaskRemoveFromEventList+0xb4>)
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4a13      	ldr	r2, [pc, #76]	; (80068b8 <xTaskRemoveFromEventList+0xb8>)
 800686a:	441a      	add	r2, r3
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	3304      	adds	r3, #4
 8006870:	4619      	mov	r1, r3
 8006872:	4610      	mov	r0, r2
 8006874:	f7fe fdf1 	bl	800545a <vListInsertEnd>
 8006878:	e005      	b.n	8006886 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	3318      	adds	r3, #24
 800687e:	4619      	mov	r1, r3
 8006880:	480e      	ldr	r0, [pc, #56]	; (80068bc <xTaskRemoveFromEventList+0xbc>)
 8006882:	f7fe fdea 	bl	800545a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688a:	4b0d      	ldr	r3, [pc, #52]	; (80068c0 <xTaskRemoveFromEventList+0xc0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	429a      	cmp	r2, r3
 8006892:	d905      	bls.n	80068a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <xTaskRemoveFromEventList+0xc4>)
 800689a:	2201      	movs	r2, #1
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	e001      	b.n	80068a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068a4:	697b      	ldr	r3, [r7, #20]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000db8 	.word	0x20000db8
 80068b4:	20000d98 	.word	0x20000d98
 80068b8:	200008c0 	.word	0x200008c0
 80068bc:	20000d50 	.word	0x20000d50
 80068c0:	200008bc 	.word	0x200008bc
 80068c4:	20000da4 	.word	0x20000da4

080068c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <vTaskInternalSetTimeOutState+0x24>)
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <vTaskInternalSetTimeOutState+0x28>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	605a      	str	r2, [r3, #4]
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	20000da8 	.word	0x20000da8
 80068f0:	20000d94 	.word	0x20000d94

080068f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	613b      	str	r3, [r7, #16]
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006936:	f000 fe7d 	bl	8007634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800693a:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <xTaskCheckForTimeOut+0xbc>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006952:	d102      	bne.n	800695a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006954:	2300      	movs	r3, #0
 8006956:	61fb      	str	r3, [r7, #28]
 8006958:	e023      	b.n	80069a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <xTaskCheckForTimeOut+0xc0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d007      	beq.n	8006976 <xTaskCheckForTimeOut+0x82>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	429a      	cmp	r2, r3
 800696e:	d302      	bcc.n	8006976 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006970:	2301      	movs	r3, #1
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	e015      	b.n	80069a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	429a      	cmp	r2, r3
 800697e:	d20b      	bcs.n	8006998 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	1ad2      	subs	r2, r2, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff9b 	bl	80068c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006992:	2300      	movs	r3, #0
 8006994:	61fb      	str	r3, [r7, #28]
 8006996:	e004      	b.n	80069a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800699e:	2301      	movs	r3, #1
 80069a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069a2:	f000 fe77 	bl	8007694 <vPortExitCritical>

	return xReturn;
 80069a6:	69fb      	ldr	r3, [r7, #28]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20000d94 	.word	0x20000d94
 80069b4:	20000da8 	.word	0x20000da8

080069b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069bc:	4b03      	ldr	r3, [pc, #12]	; (80069cc <vTaskMissedYield+0x14>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
}
 80069c2:	bf00      	nop
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	20000da4 	.word	0x20000da4

080069d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069d8:	f000 f852 	bl	8006a80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069dc:	4b06      	ldr	r3, [pc, #24]	; (80069f8 <prvIdleTask+0x28>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d9f9      	bls.n	80069d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <prvIdleTask+0x2c>)
 80069e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069f4:	e7f0      	b.n	80069d8 <prvIdleTask+0x8>
 80069f6:	bf00      	nop
 80069f8:	200008c0 	.word	0x200008c0
 80069fc:	e000ed04 	.word	0xe000ed04

08006a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a06:	2300      	movs	r3, #0
 8006a08:	607b      	str	r3, [r7, #4]
 8006a0a:	e00c      	b.n	8006a26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a12      	ldr	r2, [pc, #72]	; (8006a60 <prvInitialiseTaskLists+0x60>)
 8006a18:	4413      	add	r3, r2
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fcf0 	bl	8005400 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3301      	adds	r3, #1
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b37      	cmp	r3, #55	; 0x37
 8006a2a:	d9ef      	bls.n	8006a0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a2c:	480d      	ldr	r0, [pc, #52]	; (8006a64 <prvInitialiseTaskLists+0x64>)
 8006a2e:	f7fe fce7 	bl	8005400 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a32:	480d      	ldr	r0, [pc, #52]	; (8006a68 <prvInitialiseTaskLists+0x68>)
 8006a34:	f7fe fce4 	bl	8005400 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a38:	480c      	ldr	r0, [pc, #48]	; (8006a6c <prvInitialiseTaskLists+0x6c>)
 8006a3a:	f7fe fce1 	bl	8005400 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a3e:	480c      	ldr	r0, [pc, #48]	; (8006a70 <prvInitialiseTaskLists+0x70>)
 8006a40:	f7fe fcde 	bl	8005400 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a44:	480b      	ldr	r0, [pc, #44]	; (8006a74 <prvInitialiseTaskLists+0x74>)
 8006a46:	f7fe fcdb 	bl	8005400 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <prvInitialiseTaskLists+0x78>)
 8006a4c:	4a05      	ldr	r2, [pc, #20]	; (8006a64 <prvInitialiseTaskLists+0x64>)
 8006a4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <prvInitialiseTaskLists+0x7c>)
 8006a52:	4a05      	ldr	r2, [pc, #20]	; (8006a68 <prvInitialiseTaskLists+0x68>)
 8006a54:	601a      	str	r2, [r3, #0]
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	200008c0 	.word	0x200008c0
 8006a64:	20000d20 	.word	0x20000d20
 8006a68:	20000d34 	.word	0x20000d34
 8006a6c:	20000d50 	.word	0x20000d50
 8006a70:	20000d64 	.word	0x20000d64
 8006a74:	20000d7c 	.word	0x20000d7c
 8006a78:	20000d48 	.word	0x20000d48
 8006a7c:	20000d4c 	.word	0x20000d4c

08006a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a86:	e019      	b.n	8006abc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a88:	f000 fdd4 	bl	8007634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8c:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <prvCheckTasksWaitingTermination+0x50>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe fd3b 	bl	8005514 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ad4 <prvCheckTasksWaitingTermination+0x54>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	4a0b      	ldr	r2, [pc, #44]	; (8006ad4 <prvCheckTasksWaitingTermination+0x54>)
 8006aa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <prvCheckTasksWaitingTermination+0x58>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <prvCheckTasksWaitingTermination+0x58>)
 8006ab0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ab2:	f000 fdef 	bl	8007694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f810 	bl	8006adc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006abc:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <prvCheckTasksWaitingTermination+0x58>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e1      	bne.n	8006a88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000d64 	.word	0x20000d64
 8006ad4:	20000d90 	.word	0x20000d90
 8006ad8:	20000d78 	.word	0x20000d78

08006adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d108      	bne.n	8006b00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 ff8c 	bl	8007a10 <vPortFree>
				vPortFree( pxTCB );
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 ff89 	bl	8007a10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006afe:	e018      	b.n	8006b32 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d103      	bne.n	8006b12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 ff80 	bl	8007a10 <vPortFree>
	}
 8006b10:	e00f      	b.n	8006b32 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d00a      	beq.n	8006b32 <prvDeleteTCB+0x56>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	60fb      	str	r3, [r7, #12]
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <prvDeleteTCB+0x54>
	}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b42:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <prvResetNextTaskUnblockTime+0x38>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <prvResetNextTaskUnblockTime+0x3c>)
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b54:	e008      	b.n	8006b68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b56:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <prvResetNextTaskUnblockTime+0x38>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	4a04      	ldr	r2, [pc, #16]	; (8006b78 <prvResetNextTaskUnblockTime+0x3c>)
 8006b66:	6013      	str	r3, [r2, #0]
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	20000d48 	.word	0x20000d48
 8006b78:	20000db0 	.word	0x20000db0

08006b7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b82:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <xTaskGetSchedulerState+0x34>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	e008      	b.n	8006ba2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b90:	4b08      	ldr	r3, [pc, #32]	; (8006bb4 <xTaskGetSchedulerState+0x38>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d102      	bne.n	8006b9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	e001      	b.n	8006ba2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ba2:	687b      	ldr	r3, [r7, #4]
	}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	20000d9c 	.word	0x20000d9c
 8006bb4:	20000db8 	.word	0x20000db8

08006bb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d056      	beq.n	8006c7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bce:	4b2e      	ldr	r3, [pc, #184]	; (8006c88 <xTaskPriorityDisinherit+0xd0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d00a      	beq.n	8006bee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	60fb      	str	r3, [r7, #12]
}
 8006bea:	bf00      	nop
 8006bec:	e7fe      	b.n	8006bec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60bb      	str	r3, [r7, #8]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c10:	1e5a      	subs	r2, r3, #1
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d02c      	beq.n	8006c7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d128      	bne.n	8006c7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe fc70 	bl	8005514 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <xTaskPriorityDisinherit+0xd4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d903      	bls.n	8006c5c <xTaskPriorityDisinherit+0xa4>
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	4a0c      	ldr	r2, [pc, #48]	; (8006c8c <xTaskPriorityDisinherit+0xd4>)
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <xTaskPriorityDisinherit+0xd8>)
 8006c6a:	441a      	add	r2, r3
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f7fe fbf1 	bl	800545a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c7c:	697b      	ldr	r3, [r7, #20]
	}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	200008bc 	.word	0x200008bc
 8006c8c:	20000d98 	.word	0x20000d98
 8006c90:	200008c0 	.word	0x200008c0

08006c94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c9e:	4b21      	ldr	r3, [pc, #132]	; (8006d24 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ca4:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe fc32 	bl	8005514 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb6:	d10a      	bne.n	8006cce <prvAddCurrentTaskToDelayedList+0x3a>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cbe:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4819      	ldr	r0, [pc, #100]	; (8006d2c <prvAddCurrentTaskToDelayedList+0x98>)
 8006cc8:	f7fe fbc7 	bl	800545a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ccc:	e026      	b.n	8006d1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d209      	bcs.n	8006cfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ce6:	4b12      	ldr	r3, [pc, #72]	; (8006d30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b0f      	ldr	r3, [pc, #60]	; (8006d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f7fe fbd5 	bl	80054a2 <vListInsert>
}
 8006cf8:	e010      	b.n	8006d1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cfa:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3304      	adds	r3, #4
 8006d04:	4619      	mov	r1, r3
 8006d06:	4610      	mov	r0, r2
 8006d08:	f7fe fbcb 	bl	80054a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d202      	bcs.n	8006d1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d16:	4a08      	ldr	r2, [pc, #32]	; (8006d38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	6013      	str	r3, [r2, #0]
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20000d94 	.word	0x20000d94
 8006d28:	200008bc 	.word	0x200008bc
 8006d2c:	20000d7c 	.word	0x20000d7c
 8006d30:	20000d4c 	.word	0x20000d4c
 8006d34:	20000d48 	.word	0x20000d48
 8006d38:	20000db0 	.word	0x20000db0

08006d3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	; 0x28
 8006d40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d46:	f000 fb07 	bl	8007358 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d4a:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <xTimerCreateTimerTask+0x80>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d021      	beq.n	8006d96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d5a:	1d3a      	adds	r2, r7, #4
 8006d5c:	f107 0108 	add.w	r1, r7, #8
 8006d60:	f107 030c 	add.w	r3, r7, #12
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fb31 	bl	80053cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	9202      	str	r2, [sp, #8]
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	2302      	movs	r3, #2
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	4910      	ldr	r1, [pc, #64]	; (8006dc0 <xTimerCreateTimerTask+0x84>)
 8006d7e:	4811      	ldr	r0, [pc, #68]	; (8006dc4 <xTimerCreateTimerTask+0x88>)
 8006d80:	f7ff f8de 	bl	8005f40 <xTaskCreateStatic>
 8006d84:	4603      	mov	r3, r0
 8006d86:	4a10      	ldr	r2, [pc, #64]	; (8006dc8 <xTimerCreateTimerTask+0x8c>)
 8006d88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <xTimerCreateTimerTask+0x8c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d92:	2301      	movs	r3, #1
 8006d94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	613b      	str	r3, [r7, #16]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006db2:	697b      	ldr	r3, [r7, #20]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20000dec 	.word	0x20000dec
 8006dc0:	0800a6b4 	.word	0x0800a6b4
 8006dc4:	08006f01 	.word	0x08006f01
 8006dc8:	20000df0 	.word	0x20000df0

08006dcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	; 0x28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <xTimerGenericCommand+0x2e>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	623b      	str	r3, [r7, #32]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dfa:	4b1a      	ldr	r3, [pc, #104]	; (8006e64 <xTimerGenericCommand+0x98>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d02a      	beq.n	8006e58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b05      	cmp	r3, #5
 8006e12:	dc18      	bgt.n	8006e46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e14:	f7ff feb2 	bl	8006b7c <xTaskGetSchedulerState>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d109      	bne.n	8006e32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e1e:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <xTimerGenericCommand+0x98>)
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	f107 0110 	add.w	r1, r7, #16
 8006e26:	2300      	movs	r3, #0
 8006e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2a:	f7fe fca1 	bl	8005770 <xQueueGenericSend>
 8006e2e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e30:	e012      	b.n	8006e58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <xTimerGenericCommand+0x98>)
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	f107 0110 	add.w	r1, r7, #16
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f7fe fc97 	bl	8005770 <xQueueGenericSend>
 8006e42:	6278      	str	r0, [r7, #36]	; 0x24
 8006e44:	e008      	b.n	8006e58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <xTimerGenericCommand+0x98>)
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f107 0110 	add.w	r1, r7, #16
 8006e4e:	2300      	movs	r3, #0
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	f7fe fd8b 	bl	800596c <xQueueGenericSendFromISR>
 8006e56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3728      	adds	r7, #40	; 0x28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000dec 	.word	0x20000dec

08006e68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e72:	4b22      	ldr	r3, [pc, #136]	; (8006efc <prvProcessExpiredTimer+0x94>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe fb47 	bl	8005514 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d022      	beq.n	8006eda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	18d1      	adds	r1, r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	6978      	ldr	r0, [r7, #20]
 8006ea2:	f000 f8d1 	bl	8007048 <prvInsertTimerInActiveList>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01f      	beq.n	8006eec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eac:	2300      	movs	r3, #0
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6978      	ldr	r0, [r7, #20]
 8006eb8:	f7ff ff88 	bl	8006dcc <xTimerGenericCommand>
 8006ebc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d113      	bne.n	8006eec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60fb      	str	r3, [r7, #12]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	6978      	ldr	r0, [r7, #20]
 8006ef2:	4798      	blx	r3
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20000de4 	.word	0x20000de4

08006f00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f08:	f107 0308 	add.w	r3, r7, #8
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 f857 	bl	8006fc0 <prvGetNextExpireTime>
 8006f12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	4619      	mov	r1, r3
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f803 	bl	8006f24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f1e:	f000 f8d5 	bl	80070cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f22:	e7f1      	b.n	8006f08 <prvTimerTask+0x8>

08006f24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f2e:	f7ff fa43 	bl	80063b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f32:	f107 0308 	add.w	r3, r7, #8
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f866 	bl	8007008 <prvSampleTimeNow>
 8006f3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d130      	bne.n	8006fa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <prvProcessTimerOrBlockTask+0x3c>
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d806      	bhi.n	8006f60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f52:	f7ff fa3f 	bl	80063d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ff85 	bl	8006e68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f5e:	e024      	b.n	8006faa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <prvProcessTimerOrBlockTask+0x90>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <prvProcessTimerOrBlockTask+0x50>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <prvProcessTimerOrBlockTask+0x52>
 8006f74:	2300      	movs	r3, #0
 8006f76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f78:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <prvProcessTimerOrBlockTask+0x94>)
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	4619      	mov	r1, r3
 8006f86:	f7fe ffa7 	bl	8005ed8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f8a:	f7ff fa23 	bl	80063d4 <xTaskResumeAll>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f94:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <prvProcessTimerOrBlockTask+0x98>)
 8006f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	f3bf 8f6f 	isb	sy
}
 8006fa4:	e001      	b.n	8006faa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fa6:	f7ff fa15 	bl	80063d4 <xTaskResumeAll>
}
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000de8 	.word	0x20000de8
 8006fb8:	20000dec 	.word	0x20000dec
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fc8:	4b0e      	ldr	r3, [pc, #56]	; (8007004 <prvGetNextExpireTime+0x44>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <prvGetNextExpireTime+0x16>
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	e000      	b.n	8006fd8 <prvGetNextExpireTime+0x18>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d105      	bne.n	8006ff0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fe4:	4b07      	ldr	r3, [pc, #28]	; (8007004 <prvGetNextExpireTime+0x44>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e001      	b.n	8006ff4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000de4 	.word	0x20000de4

08007008 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007010:	f7ff fa7e 	bl	8006510 <xTaskGetTickCount>
 8007014:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <prvSampleTimeNow+0x3c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	429a      	cmp	r2, r3
 800701e:	d205      	bcs.n	800702c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007020:	f000 f936 	bl	8007290 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e002      	b.n	8007032 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007032:	4a04      	ldr	r2, [pc, #16]	; (8007044 <prvSampleTimeNow+0x3c>)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007038:	68fb      	ldr	r3, [r7, #12]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000df4 	.word	0x20000df4

08007048 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	429a      	cmp	r2, r3
 800706c:	d812      	bhi.n	8007094 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	429a      	cmp	r2, r3
 800707a:	d302      	bcc.n	8007082 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	e01b      	b.n	80070ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007082:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <prvInsertTimerInActiveList+0x7c>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3304      	adds	r3, #4
 800708a:	4619      	mov	r1, r3
 800708c:	4610      	mov	r0, r2
 800708e:	f7fe fa08 	bl	80054a2 <vListInsert>
 8007092:	e012      	b.n	80070ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d206      	bcs.n	80070aa <prvInsertTimerInActiveList+0x62>
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d302      	bcc.n	80070aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e007      	b.n	80070ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070aa:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <prvInsertTimerInActiveList+0x80>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f7fe f9f4 	bl	80054a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070ba:	697b      	ldr	r3, [r7, #20]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000de8 	.word	0x20000de8
 80070c8:	20000de4 	.word	0x20000de4

080070cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08e      	sub	sp, #56	; 0x38
 80070d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070d2:	e0ca      	b.n	800726a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	da18      	bge.n	800710c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070da:	1d3b      	adds	r3, r7, #4
 80070dc:	3304      	adds	r3, #4
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	61fb      	str	r3, [r7, #28]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007102:	6850      	ldr	r0, [r2, #4]
 8007104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007106:	6892      	ldr	r2, [r2, #8]
 8007108:	4611      	mov	r1, r2
 800710a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f2c0 80aa 	blt.w	8007268 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	3304      	adds	r3, #4
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe f9f5 	bl	8005514 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800712a:	463b      	mov	r3, r7
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff ff6b 	bl	8007008 <prvSampleTimeNow>
 8007132:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b09      	cmp	r3, #9
 8007138:	f200 8097 	bhi.w	800726a <prvProcessReceivedCommands+0x19e>
 800713c:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <prvProcessReceivedCommands+0x78>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	0800716d 	.word	0x0800716d
 8007148:	0800716d 	.word	0x0800716d
 800714c:	0800716d 	.word	0x0800716d
 8007150:	080071e1 	.word	0x080071e1
 8007154:	080071f5 	.word	0x080071f5
 8007158:	0800723f 	.word	0x0800723f
 800715c:	0800716d 	.word	0x0800716d
 8007160:	0800716d 	.word	0x0800716d
 8007164:	080071e1 	.word	0x080071e1
 8007168:	080071f5 	.word	0x080071f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007172:	f043 0301 	orr.w	r3, r3, #1
 8007176:	b2da      	uxtb	r2, r3
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	18d1      	adds	r1, r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718c:	f7ff ff5c 	bl	8007048 <prvInsertTimerInActiveList>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d069      	beq.n	800726a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d05e      	beq.n	800726a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	441a      	add	r2, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	2100      	movs	r1, #0
 80071bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071be:	f7ff fe05 	bl	8006dcc <xTimerGenericCommand>
 80071c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d14f      	bne.n	800726a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	61bb      	str	r3, [r7, #24]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e6:	f023 0301 	bic.w	r3, r3, #1
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80071f2:	e03a      	b.n	800726a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	617b      	str	r3, [r7, #20]
}
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	18d1      	adds	r1, r2, r3
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007238:	f7ff ff06 	bl	8007048 <prvInsertTimerInActiveList>
					break;
 800723c:	e015      	b.n	800726a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d103      	bne.n	8007254 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800724c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724e:	f000 fbdf 	bl	8007a10 <vPortFree>
 8007252:	e00a      	b.n	800726a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	b2da      	uxtb	r2, r3
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007266:	e000      	b.n	800726a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007268:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800726a:	4b08      	ldr	r3, [pc, #32]	; (800728c <prvProcessReceivedCommands+0x1c0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	1d39      	adds	r1, r7, #4
 8007270:	2200      	movs	r2, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fc16 	bl	8005aa4 <xQueueReceive>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	f47f af2a 	bne.w	80070d4 <prvProcessReceivedCommands+0x8>
	}
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	3730      	adds	r7, #48	; 0x30
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000dec 	.word	0x20000dec

08007290 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007296:	e048      	b.n	800732a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007298:	4b2d      	ldr	r3, [pc, #180]	; (8007350 <prvSwitchTimerLists+0xc0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a2:	4b2b      	ldr	r3, [pc, #172]	; (8007350 <prvSwitchTimerLists+0xc0>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe f92f 	bl	8005514 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d02e      	beq.n	800732a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	4413      	add	r3, r2
 80072d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d90e      	bls.n	80072fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072ea:	4b19      	ldr	r3, [pc, #100]	; (8007350 <prvSwitchTimerLists+0xc0>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f7fe f8d4 	bl	80054a2 <vListInsert>
 80072fa:	e016      	b.n	800732a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072fc:	2300      	movs	r3, #0
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	2300      	movs	r3, #0
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	2100      	movs	r1, #0
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff fd60 	bl	8006dcc <xTimerGenericCommand>
 800730c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	603b      	str	r3, [r7, #0]
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800732a:	4b09      	ldr	r3, [pc, #36]	; (8007350 <prvSwitchTimerLists+0xc0>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1b1      	bne.n	8007298 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <prvSwitchTimerLists+0xc0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800733a:	4b06      	ldr	r3, [pc, #24]	; (8007354 <prvSwitchTimerLists+0xc4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a04      	ldr	r2, [pc, #16]	; (8007350 <prvSwitchTimerLists+0xc0>)
 8007340:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007342:	4a04      	ldr	r2, [pc, #16]	; (8007354 <prvSwitchTimerLists+0xc4>)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	6013      	str	r3, [r2, #0]
}
 8007348:	bf00      	nop
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20000de4 	.word	0x20000de4
 8007354:	20000de8 	.word	0x20000de8

08007358 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800735e:	f000 f969 	bl	8007634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007362:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <prvCheckForValidListAndQueue+0x60>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d120      	bne.n	80073ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800736a:	4814      	ldr	r0, [pc, #80]	; (80073bc <prvCheckForValidListAndQueue+0x64>)
 800736c:	f7fe f848 	bl	8005400 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007370:	4813      	ldr	r0, [pc, #76]	; (80073c0 <prvCheckForValidListAndQueue+0x68>)
 8007372:	f7fe f845 	bl	8005400 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007376:	4b13      	ldr	r3, [pc, #76]	; (80073c4 <prvCheckForValidListAndQueue+0x6c>)
 8007378:	4a10      	ldr	r2, [pc, #64]	; (80073bc <prvCheckForValidListAndQueue+0x64>)
 800737a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800737c:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <prvCheckForValidListAndQueue+0x70>)
 800737e:	4a10      	ldr	r2, [pc, #64]	; (80073c0 <prvCheckForValidListAndQueue+0x68>)
 8007380:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007382:	2300      	movs	r3, #0
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4b11      	ldr	r3, [pc, #68]	; (80073cc <prvCheckForValidListAndQueue+0x74>)
 8007388:	4a11      	ldr	r2, [pc, #68]	; (80073d0 <prvCheckForValidListAndQueue+0x78>)
 800738a:	2110      	movs	r1, #16
 800738c:	200a      	movs	r0, #10
 800738e:	f7fe f953 	bl	8005638 <xQueueGenericCreateStatic>
 8007392:	4603      	mov	r3, r0
 8007394:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <prvCheckForValidListAndQueue+0x60>)
 8007396:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007398:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <prvCheckForValidListAndQueue+0x60>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <prvCheckForValidListAndQueue+0x60>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	490b      	ldr	r1, [pc, #44]	; (80073d4 <prvCheckForValidListAndQueue+0x7c>)
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fd6c 	bl	8005e84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073ac:	f000 f972 	bl	8007694 <vPortExitCritical>
}
 80073b0:	bf00      	nop
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000dec 	.word	0x20000dec
 80073bc:	20000dbc 	.word	0x20000dbc
 80073c0:	20000dd0 	.word	0x20000dd0
 80073c4:	20000de4 	.word	0x20000de4
 80073c8:	20000de8 	.word	0x20000de8
 80073cc:	20000e98 	.word	0x20000e98
 80073d0:	20000df8 	.word	0x20000df8
 80073d4:	0800a6bc 	.word	0x0800a6bc

080073d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3b04      	subs	r3, #4
 80073e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3b04      	subs	r3, #4
 80073f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f023 0201 	bic.w	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3b04      	subs	r3, #4
 8007406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007408:	4a0c      	ldr	r2, [pc, #48]	; (800743c <pxPortInitialiseStack+0x64>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3b14      	subs	r3, #20
 8007412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3b04      	subs	r3, #4
 800741e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f06f 0202 	mvn.w	r2, #2
 8007426:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3b20      	subs	r3, #32
 800742c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800742e:	68fb      	ldr	r3, [r7, #12]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	08007441 	.word	0x08007441

08007440 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800744a:	4b12      	ldr	r3, [pc, #72]	; (8007494 <prvTaskExitError+0x54>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007452:	d00a      	beq.n	800746a <prvTaskExitError+0x2a>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	60fb      	str	r3, [r7, #12]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <prvTaskExitError+0x28>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	60bb      	str	r3, [r7, #8]
}
 800747c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800747e:	bf00      	nop
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0fc      	beq.n	8007480 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	2000000c 	.word	0x2000000c
	...

080074a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074a0:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <pxCurrentTCBConst2>)
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	6808      	ldr	r0, [r1, #0]
 80074a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074aa:	f380 8809 	msr	PSP, r0
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8811 	msr	BASEPRI, r0
 80074ba:	4770      	bx	lr
 80074bc:	f3af 8000 	nop.w

080074c0 <pxCurrentTCBConst2>:
 80074c0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop

080074c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074c8:	4808      	ldr	r0, [pc, #32]	; (80074ec <prvPortStartFirstTask+0x24>)
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	6800      	ldr	r0, [r0, #0]
 80074ce:	f380 8808 	msr	MSP, r0
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8814 	msr	CONTROL, r0
 80074da:	b662      	cpsie	i
 80074dc:	b661      	cpsie	f
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	df00      	svc	0
 80074e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ea:	bf00      	nop
 80074ec:	e000ed08 	.word	0xe000ed08

080074f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074f6:	4b46      	ldr	r3, [pc, #280]	; (8007610 <xPortStartScheduler+0x120>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a46      	ldr	r2, [pc, #280]	; (8007614 <xPortStartScheduler+0x124>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10a      	bne.n	8007516 <xPortStartScheduler+0x26>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	613b      	str	r3, [r7, #16]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007516:	4b3e      	ldr	r3, [pc, #248]	; (8007610 <xPortStartScheduler+0x120>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a3f      	ldr	r2, [pc, #252]	; (8007618 <xPortStartScheduler+0x128>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10a      	bne.n	8007536 <xPortStartScheduler+0x46>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60fb      	str	r3, [r7, #12]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007536:	4b39      	ldr	r3, [pc, #228]	; (800761c <xPortStartScheduler+0x12c>)
 8007538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	22ff      	movs	r2, #255	; 0xff
 8007546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007558:	b2da      	uxtb	r2, r3
 800755a:	4b31      	ldr	r3, [pc, #196]	; (8007620 <xPortStartScheduler+0x130>)
 800755c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800755e:	4b31      	ldr	r3, [pc, #196]	; (8007624 <xPortStartScheduler+0x134>)
 8007560:	2207      	movs	r2, #7
 8007562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007564:	e009      	b.n	800757a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007566:	4b2f      	ldr	r3, [pc, #188]	; (8007624 <xPortStartScheduler+0x134>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3b01      	subs	r3, #1
 800756c:	4a2d      	ldr	r2, [pc, #180]	; (8007624 <xPortStartScheduler+0x134>)
 800756e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	b2db      	uxtb	r3, r3
 8007578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d0ef      	beq.n	8007566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007586:	4b27      	ldr	r3, [pc, #156]	; (8007624 <xPortStartScheduler+0x134>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f1c3 0307 	rsb	r3, r3, #7
 800758e:	2b04      	cmp	r3, #4
 8007590:	d00a      	beq.n	80075a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60bb      	str	r3, [r7, #8]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075a8:	4b1e      	ldr	r3, [pc, #120]	; (8007624 <xPortStartScheduler+0x134>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <xPortStartScheduler+0x134>)
 80075b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075b2:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <xPortStartScheduler+0x134>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ba:	4a1a      	ldr	r2, [pc, #104]	; (8007624 <xPortStartScheduler+0x134>)
 80075bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075c6:	4b18      	ldr	r3, [pc, #96]	; (8007628 <xPortStartScheduler+0x138>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <xPortStartScheduler+0x138>)
 80075cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075d2:	4b15      	ldr	r3, [pc, #84]	; (8007628 <xPortStartScheduler+0x138>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a14      	ldr	r2, [pc, #80]	; (8007628 <xPortStartScheduler+0x138>)
 80075d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075de:	f000 f8dd 	bl	800779c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075e2:	4b12      	ldr	r3, [pc, #72]	; (800762c <xPortStartScheduler+0x13c>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075e8:	f000 f8fc 	bl	80077e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075ec:	4b10      	ldr	r3, [pc, #64]	; (8007630 <xPortStartScheduler+0x140>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a0f      	ldr	r2, [pc, #60]	; (8007630 <xPortStartScheduler+0x140>)
 80075f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075f8:	f7ff ff66 	bl	80074c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075fc:	f7ff f852 	bl	80066a4 <vTaskSwitchContext>
	prvTaskExitError();
 8007600:	f7ff ff1e 	bl	8007440 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	e000ed00 	.word	0xe000ed00
 8007614:	410fc271 	.word	0x410fc271
 8007618:	410fc270 	.word	0x410fc270
 800761c:	e000e400 	.word	0xe000e400
 8007620:	20000ee8 	.word	0x20000ee8
 8007624:	20000eec 	.word	0x20000eec
 8007628:	e000ed20 	.word	0xe000ed20
 800762c:	2000000c 	.word	0x2000000c
 8007630:	e000ef34 	.word	0xe000ef34

08007634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	607b      	str	r3, [r7, #4]
}
 800764c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <vPortEnterCritical+0x58>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3301      	adds	r3, #1
 8007654:	4a0d      	ldr	r2, [pc, #52]	; (800768c <vPortEnterCritical+0x58>)
 8007656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <vPortEnterCritical+0x58>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d10f      	bne.n	8007680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <vPortEnterCritical+0x5c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <vPortEnterCritical+0x4c>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	603b      	str	r3, [r7, #0]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <vPortEnterCritical+0x4a>
	}
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	2000000c 	.word	0x2000000c
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800769a:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <vPortExitCritical+0x50>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <vPortExitCritical+0x24>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	607b      	str	r3, [r7, #4]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076b8:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <vPortExitCritical+0x50>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3b01      	subs	r3, #1
 80076be:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <vPortExitCritical+0x50>)
 80076c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076c2:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <vPortExitCritical+0x50>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d105      	bne.n	80076d6 <vPortExitCritical+0x42>
 80076ca:	2300      	movs	r3, #0
 80076cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	f383 8811 	msr	BASEPRI, r3
}
 80076d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	2000000c 	.word	0x2000000c
	...

080076f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076f0:	f3ef 8009 	mrs	r0, PSP
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4b15      	ldr	r3, [pc, #84]	; (8007750 <pxCurrentTCBConst>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	f01e 0f10 	tst.w	lr, #16
 8007700:	bf08      	it	eq
 8007702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770a:	6010      	str	r0, [r2, #0]
 800770c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007714:	f380 8811 	msr	BASEPRI, r0
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f7fe ffc0 	bl	80066a4 <vTaskSwitchContext>
 8007724:	f04f 0000 	mov.w	r0, #0
 8007728:	f380 8811 	msr	BASEPRI, r0
 800772c:	bc09      	pop	{r0, r3}
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	6808      	ldr	r0, [r1, #0]
 8007732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007736:	f01e 0f10 	tst.w	lr, #16
 800773a:	bf08      	it	eq
 800773c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007740:	f380 8809 	msr	PSP, r0
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	f3af 8000 	nop.w

08007750 <pxCurrentTCBConst>:
 8007750:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop

08007758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	607b      	str	r3, [r7, #4]
}
 8007770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007772:	f7fe fedd 	bl	8006530 <xTaskIncrementTick>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <xPortSysTickHandler+0x40>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f383 8811 	msr	BASEPRI, r3
}
 800778e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077a0:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <vPortSetupTimerInterrupt+0x34>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077a6:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <vPortSetupTimerInterrupt+0x38>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <vPortSetupTimerInterrupt+0x3c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <vPortSetupTimerInterrupt+0x40>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	4a09      	ldr	r2, [pc, #36]	; (80077e0 <vPortSetupTimerInterrupt+0x44>)
 80077ba:	3b01      	subs	r3, #1
 80077bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077be:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <vPortSetupTimerInterrupt+0x34>)
 80077c0:	2207      	movs	r2, #7
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	e000e010 	.word	0xe000e010
 80077d4:	e000e018 	.word	0xe000e018
 80077d8:	20000000 	.word	0x20000000
 80077dc:	10624dd3 	.word	0x10624dd3
 80077e0:	e000e014 	.word	0xe000e014

080077e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077f4 <vPortEnableVFP+0x10>
 80077e8:	6801      	ldr	r1, [r0, #0]
 80077ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077ee:	6001      	str	r1, [r0, #0]
 80077f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077f2:	bf00      	nop
 80077f4:	e000ed88 	.word	0xe000ed88

080077f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077fe:	f3ef 8305 	mrs	r3, IPSR
 8007802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d914      	bls.n	8007834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800780a:	4a17      	ldr	r2, [pc, #92]	; (8007868 <vPortValidateInterruptPriority+0x70>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007814:	4b15      	ldr	r3, [pc, #84]	; (800786c <vPortValidateInterruptPriority+0x74>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	7afa      	ldrb	r2, [r7, #11]
 800781a:	429a      	cmp	r2, r3
 800781c:	d20a      	bcs.n	8007834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007834:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <vPortValidateInterruptPriority+0x78>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <vPortValidateInterruptPriority+0x7c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d90a      	bls.n	800785a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	603b      	str	r3, [r7, #0]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <vPortValidateInterruptPriority+0x60>
	}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	e000e3f0 	.word	0xe000e3f0
 800786c:	20000ee8 	.word	0x20000ee8
 8007870:	e000ed0c 	.word	0xe000ed0c
 8007874:	20000eec 	.word	0x20000eec

08007878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007884:	f7fe fd98 	bl	80063b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007888:	4b5b      	ldr	r3, [pc, #364]	; (80079f8 <pvPortMalloc+0x180>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007890:	f000 f920 	bl	8007ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007894:	4b59      	ldr	r3, [pc, #356]	; (80079fc <pvPortMalloc+0x184>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 8093 	bne.w	80079c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01d      	beq.n	80078e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078a8:	2208      	movs	r2, #8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d014      	beq.n	80078e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f023 0307 	bic.w	r3, r3, #7
 80078c0:	3308      	adds	r3, #8
 80078c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <pvPortMalloc+0x6c>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	617b      	str	r3, [r7, #20]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d06e      	beq.n	80079c8 <pvPortMalloc+0x150>
 80078ea:	4b45      	ldr	r3, [pc, #276]	; (8007a00 <pvPortMalloc+0x188>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d869      	bhi.n	80079c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078f4:	4b43      	ldr	r3, [pc, #268]	; (8007a04 <pvPortMalloc+0x18c>)
 80078f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078f8:	4b42      	ldr	r3, [pc, #264]	; (8007a04 <pvPortMalloc+0x18c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078fe:	e004      	b.n	800790a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d903      	bls.n	800791c <pvPortMalloc+0xa4>
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f1      	bne.n	8007900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800791c:	4b36      	ldr	r3, [pc, #216]	; (80079f8 <pvPortMalloc+0x180>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007922:	429a      	cmp	r2, r3
 8007924:	d050      	beq.n	80079c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2208      	movs	r2, #8
 800792c:	4413      	add	r3, r2
 800792e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	1ad2      	subs	r2, r2, r3
 8007940:	2308      	movs	r3, #8
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	429a      	cmp	r2, r3
 8007946:	d91f      	bls.n	8007988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <pvPortMalloc+0xf8>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	613b      	str	r3, [r7, #16]
}
 800796c:	bf00      	nop
 800796e:	e7fe      	b.n	800796e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007982:	69b8      	ldr	r0, [r7, #24]
 8007984:	f000 f908 	bl	8007b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007988:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <pvPortMalloc+0x188>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	4a1b      	ldr	r2, [pc, #108]	; (8007a00 <pvPortMalloc+0x188>)
 8007994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007996:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <pvPortMalloc+0x188>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <pvPortMalloc+0x190>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d203      	bcs.n	80079aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079a2:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <pvPortMalloc+0x188>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <pvPortMalloc+0x190>)
 80079a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	4b13      	ldr	r3, [pc, #76]	; (80079fc <pvPortMalloc+0x184>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <pvPortMalloc+0x194>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a11      	ldr	r2, [pc, #68]	; (8007a0c <pvPortMalloc+0x194>)
 80079c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079c8:	f7fe fd04 	bl	80063d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <pvPortMalloc+0x174>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	60fb      	str	r3, [r7, #12]
}
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <pvPortMalloc+0x172>
	return pvReturn;
 80079ec:	69fb      	ldr	r3, [r7, #28]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3728      	adds	r7, #40	; 0x28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20001ab0 	.word	0x20001ab0
 80079fc:	20001ac4 	.word	0x20001ac4
 8007a00:	20001ab4 	.word	0x20001ab4
 8007a04:	20001aa8 	.word	0x20001aa8
 8007a08:	20001ab8 	.word	0x20001ab8
 8007a0c:	20001abc 	.word	0x20001abc

08007a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d04d      	beq.n	8007abe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a22:	2308      	movs	r3, #8
 8007a24:	425b      	negs	r3, r3
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4413      	add	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	4b24      	ldr	r3, [pc, #144]	; (8007ac8 <vPortFree+0xb8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <vPortFree+0x44>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60fb      	str	r3, [r7, #12]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <vPortFree+0x62>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60bb      	str	r3, [r7, #8]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	4b14      	ldr	r3, [pc, #80]	; (8007ac8 <vPortFree+0xb8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01e      	beq.n	8007abe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11a      	bne.n	8007abe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <vPortFree+0xb8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	43db      	mvns	r3, r3
 8007a92:	401a      	ands	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a98:	f7fe fc8e 	bl	80063b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <vPortFree+0xbc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	4a09      	ldr	r2, [pc, #36]	; (8007acc <vPortFree+0xbc>)
 8007aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aaa:	6938      	ldr	r0, [r7, #16]
 8007aac:	f000 f874 	bl	8007b98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <vPortFree+0xc0>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	4a06      	ldr	r2, [pc, #24]	; (8007ad0 <vPortFree+0xc0>)
 8007ab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aba:	f7fe fc8b 	bl	80063d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20001ac4 	.word	0x20001ac4
 8007acc:	20001ab4 	.word	0x20001ab4
 8007ad0:	20001ac0 	.word	0x20001ac0

08007ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ada:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ae0:	4b27      	ldr	r3, [pc, #156]	; (8007b80 <prvHeapInit+0xac>)
 8007ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00c      	beq.n	8007b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3307      	adds	r3, #7
 8007af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0307 	bic.w	r3, r3, #7
 8007afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <prvHeapInit+0xac>)
 8007b04:	4413      	add	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b0c:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <prvHeapInit+0xb0>)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b12:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <prvHeapInit+0xb0>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b20:	2208      	movs	r2, #8
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	1a9b      	subs	r3, r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <prvHeapInit+0xb4>)
 8007b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b36:	4b14      	ldr	r3, [pc, #80]	; (8007b88 <prvHeapInit+0xb4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b3e:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <prvHeapInit+0xb4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b54:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <prvHeapInit+0xb4>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	4a0a      	ldr	r2, [pc, #40]	; (8007b8c <prvHeapInit+0xb8>)
 8007b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <prvHeapInit+0xbc>)
 8007b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b6c:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <prvHeapInit+0xc0>)
 8007b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	20000ef0 	.word	0x20000ef0
 8007b84:	20001aa8 	.word	0x20001aa8
 8007b88:	20001ab0 	.word	0x20001ab0
 8007b8c:	20001ab8 	.word	0x20001ab8
 8007b90:	20001ab4 	.word	0x20001ab4
 8007b94:	20001ac4 	.word	0x20001ac4

08007b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ba0:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <prvInsertBlockIntoFreeList+0xac>)
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e002      	b.n	8007bac <prvInsertBlockIntoFreeList+0x14>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d8f7      	bhi.n	8007ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d108      	bne.n	8007bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	441a      	add	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	441a      	add	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d118      	bne.n	8007c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <prvInsertBlockIntoFreeList+0xb0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d00d      	beq.n	8007c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	441a      	add	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e008      	b.n	8007c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c16:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <prvInsertBlockIntoFreeList+0xb0>)
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e003      	b.n	8007c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d002      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c36:	bf00      	nop
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20001aa8 	.word	0x20001aa8
 8007c48:	20001ab0 	.word	0x20001ab0

08007c4c <__errno>:
 8007c4c:	4b01      	ldr	r3, [pc, #4]	; (8007c54 <__errno+0x8>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20000010 	.word	0x20000010

08007c58 <__libc_init_array>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	4d0d      	ldr	r5, [pc, #52]	; (8007c90 <__libc_init_array+0x38>)
 8007c5c:	4c0d      	ldr	r4, [pc, #52]	; (8007c94 <__libc_init_array+0x3c>)
 8007c5e:	1b64      	subs	r4, r4, r5
 8007c60:	10a4      	asrs	r4, r4, #2
 8007c62:	2600      	movs	r6, #0
 8007c64:	42a6      	cmp	r6, r4
 8007c66:	d109      	bne.n	8007c7c <__libc_init_array+0x24>
 8007c68:	4d0b      	ldr	r5, [pc, #44]	; (8007c98 <__libc_init_array+0x40>)
 8007c6a:	4c0c      	ldr	r4, [pc, #48]	; (8007c9c <__libc_init_array+0x44>)
 8007c6c:	f002 fd08 	bl	800a680 <_init>
 8007c70:	1b64      	subs	r4, r4, r5
 8007c72:	10a4      	asrs	r4, r4, #2
 8007c74:	2600      	movs	r6, #0
 8007c76:	42a6      	cmp	r6, r4
 8007c78:	d105      	bne.n	8007c86 <__libc_init_array+0x2e>
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c80:	4798      	blx	r3
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7ee      	b.n	8007c64 <__libc_init_array+0xc>
 8007c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8a:	4798      	blx	r3
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	e7f2      	b.n	8007c76 <__libc_init_array+0x1e>
 8007c90:	0800ab1c 	.word	0x0800ab1c
 8007c94:	0800ab1c 	.word	0x0800ab1c
 8007c98:	0800ab1c 	.word	0x0800ab1c
 8007c9c:	0800ab20 	.word	0x0800ab20

08007ca0 <memcpy>:
 8007ca0:	440a      	add	r2, r1
 8007ca2:	4291      	cmp	r1, r2
 8007ca4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ca8:	d100      	bne.n	8007cac <memcpy+0xc>
 8007caa:	4770      	bx	lr
 8007cac:	b510      	push	{r4, lr}
 8007cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cb6:	4291      	cmp	r1, r2
 8007cb8:	d1f9      	bne.n	8007cae <memcpy+0xe>
 8007cba:	bd10      	pop	{r4, pc}

08007cbc <memset>:
 8007cbc:	4402      	add	r2, r0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d100      	bne.n	8007cc6 <memset+0xa>
 8007cc4:	4770      	bx	lr
 8007cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cca:	e7f9      	b.n	8007cc0 <memset+0x4>

08007ccc <__cvt>:
 8007ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	ec55 4b10 	vmov	r4, r5, d0
 8007cd4:	2d00      	cmp	r5, #0
 8007cd6:	460e      	mov	r6, r1
 8007cd8:	4619      	mov	r1, r3
 8007cda:	462b      	mov	r3, r5
 8007cdc:	bfbb      	ittet	lt
 8007cde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ce2:	461d      	movlt	r5, r3
 8007ce4:	2300      	movge	r3, #0
 8007ce6:	232d      	movlt	r3, #45	; 0x2d
 8007ce8:	700b      	strb	r3, [r1, #0]
 8007cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cf0:	4691      	mov	r9, r2
 8007cf2:	f023 0820 	bic.w	r8, r3, #32
 8007cf6:	bfbc      	itt	lt
 8007cf8:	4622      	movlt	r2, r4
 8007cfa:	4614      	movlt	r4, r2
 8007cfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d00:	d005      	beq.n	8007d0e <__cvt+0x42>
 8007d02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d06:	d100      	bne.n	8007d0a <__cvt+0x3e>
 8007d08:	3601      	adds	r6, #1
 8007d0a:	2102      	movs	r1, #2
 8007d0c:	e000      	b.n	8007d10 <__cvt+0x44>
 8007d0e:	2103      	movs	r1, #3
 8007d10:	ab03      	add	r3, sp, #12
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	ab02      	add	r3, sp, #8
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	ec45 4b10 	vmov	d0, r4, r5
 8007d1c:	4653      	mov	r3, sl
 8007d1e:	4632      	mov	r2, r6
 8007d20:	f000 fce2 	bl	80086e8 <_dtoa_r>
 8007d24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d28:	4607      	mov	r7, r0
 8007d2a:	d102      	bne.n	8007d32 <__cvt+0x66>
 8007d2c:	f019 0f01 	tst.w	r9, #1
 8007d30:	d022      	beq.n	8007d78 <__cvt+0xac>
 8007d32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d36:	eb07 0906 	add.w	r9, r7, r6
 8007d3a:	d110      	bne.n	8007d5e <__cvt+0x92>
 8007d3c:	783b      	ldrb	r3, [r7, #0]
 8007d3e:	2b30      	cmp	r3, #48	; 0x30
 8007d40:	d10a      	bne.n	8007d58 <__cvt+0x8c>
 8007d42:	2200      	movs	r2, #0
 8007d44:	2300      	movs	r3, #0
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7f8 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d4e:	b918      	cbnz	r0, 8007d58 <__cvt+0x8c>
 8007d50:	f1c6 0601 	rsb	r6, r6, #1
 8007d54:	f8ca 6000 	str.w	r6, [sl]
 8007d58:	f8da 3000 	ldr.w	r3, [sl]
 8007d5c:	4499      	add	r9, r3
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2300      	movs	r3, #0
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	f7f8 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d6a:	b108      	cbz	r0, 8007d70 <__cvt+0xa4>
 8007d6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d70:	2230      	movs	r2, #48	; 0x30
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	454b      	cmp	r3, r9
 8007d76:	d307      	bcc.n	8007d88 <__cvt+0xbc>
 8007d78:	9b03      	ldr	r3, [sp, #12]
 8007d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d7c:	1bdb      	subs	r3, r3, r7
 8007d7e:	4638      	mov	r0, r7
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	b004      	add	sp, #16
 8007d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d88:	1c59      	adds	r1, r3, #1
 8007d8a:	9103      	str	r1, [sp, #12]
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e7f0      	b.n	8007d72 <__cvt+0xa6>

08007d90 <__exponent>:
 8007d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d92:	4603      	mov	r3, r0
 8007d94:	2900      	cmp	r1, #0
 8007d96:	bfb8      	it	lt
 8007d98:	4249      	neglt	r1, r1
 8007d9a:	f803 2b02 	strb.w	r2, [r3], #2
 8007d9e:	bfb4      	ite	lt
 8007da0:	222d      	movlt	r2, #45	; 0x2d
 8007da2:	222b      	movge	r2, #43	; 0x2b
 8007da4:	2909      	cmp	r1, #9
 8007da6:	7042      	strb	r2, [r0, #1]
 8007da8:	dd2a      	ble.n	8007e00 <__exponent+0x70>
 8007daa:	f10d 0407 	add.w	r4, sp, #7
 8007dae:	46a4      	mov	ip, r4
 8007db0:	270a      	movs	r7, #10
 8007db2:	46a6      	mov	lr, r4
 8007db4:	460a      	mov	r2, r1
 8007db6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dba:	fb07 1516 	mls	r5, r7, r6, r1
 8007dbe:	3530      	adds	r5, #48	; 0x30
 8007dc0:	2a63      	cmp	r2, #99	; 0x63
 8007dc2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007dc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007dca:	4631      	mov	r1, r6
 8007dcc:	dcf1      	bgt.n	8007db2 <__exponent+0x22>
 8007dce:	3130      	adds	r1, #48	; 0x30
 8007dd0:	f1ae 0502 	sub.w	r5, lr, #2
 8007dd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007dd8:	1c44      	adds	r4, r0, #1
 8007dda:	4629      	mov	r1, r5
 8007ddc:	4561      	cmp	r1, ip
 8007dde:	d30a      	bcc.n	8007df6 <__exponent+0x66>
 8007de0:	f10d 0209 	add.w	r2, sp, #9
 8007de4:	eba2 020e 	sub.w	r2, r2, lr
 8007de8:	4565      	cmp	r5, ip
 8007dea:	bf88      	it	hi
 8007dec:	2200      	movhi	r2, #0
 8007dee:	4413      	add	r3, r2
 8007df0:	1a18      	subs	r0, r3, r0
 8007df2:	b003      	add	sp, #12
 8007df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dfa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007dfe:	e7ed      	b.n	8007ddc <__exponent+0x4c>
 8007e00:	2330      	movs	r3, #48	; 0x30
 8007e02:	3130      	adds	r1, #48	; 0x30
 8007e04:	7083      	strb	r3, [r0, #2]
 8007e06:	70c1      	strb	r1, [r0, #3]
 8007e08:	1d03      	adds	r3, r0, #4
 8007e0a:	e7f1      	b.n	8007df0 <__exponent+0x60>

08007e0c <_printf_float>:
 8007e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	ed2d 8b02 	vpush	{d8}
 8007e14:	b08d      	sub	sp, #52	; 0x34
 8007e16:	460c      	mov	r4, r1
 8007e18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	461f      	mov	r7, r3
 8007e20:	4605      	mov	r5, r0
 8007e22:	f001 fb43 	bl	80094ac <_localeconv_r>
 8007e26:	f8d0 a000 	ldr.w	sl, [r0]
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	f7f8 f9d0 	bl	80001d0 <strlen>
 8007e30:	2300      	movs	r3, #0
 8007e32:	930a      	str	r3, [sp, #40]	; 0x28
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	9305      	str	r3, [sp, #20]
 8007e38:	f8d8 3000 	ldr.w	r3, [r8]
 8007e3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e40:	3307      	adds	r3, #7
 8007e42:	f023 0307 	bic.w	r3, r3, #7
 8007e46:	f103 0208 	add.w	r2, r3, #8
 8007e4a:	f8c8 2000 	str.w	r2, [r8]
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e5e:	9307      	str	r3, [sp, #28]
 8007e60:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e64:	ee08 0a10 	vmov	s16, r0
 8007e68:	4b9f      	ldr	r3, [pc, #636]	; (80080e8 <_printf_float+0x2dc>)
 8007e6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e72:	f7f8 fe5b 	bl	8000b2c <__aeabi_dcmpun>
 8007e76:	bb88      	cbnz	r0, 8007edc <_printf_float+0xd0>
 8007e78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e7c:	4b9a      	ldr	r3, [pc, #616]	; (80080e8 <_printf_float+0x2dc>)
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e82:	f7f8 fe35 	bl	8000af0 <__aeabi_dcmple>
 8007e86:	bb48      	cbnz	r0, 8007edc <_printf_float+0xd0>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	4649      	mov	r1, r9
 8007e90:	f7f8 fe24 	bl	8000adc <__aeabi_dcmplt>
 8007e94:	b110      	cbz	r0, 8007e9c <_printf_float+0x90>
 8007e96:	232d      	movs	r3, #45	; 0x2d
 8007e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e9c:	4b93      	ldr	r3, [pc, #588]	; (80080ec <_printf_float+0x2e0>)
 8007e9e:	4894      	ldr	r0, [pc, #592]	; (80080f0 <_printf_float+0x2e4>)
 8007ea0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ea4:	bf94      	ite	ls
 8007ea6:	4698      	movls	r8, r3
 8007ea8:	4680      	movhi	r8, r0
 8007eaa:	2303      	movs	r3, #3
 8007eac:	6123      	str	r3, [r4, #16]
 8007eae:	9b05      	ldr	r3, [sp, #20]
 8007eb0:	f023 0204 	bic.w	r2, r3, #4
 8007eb4:	6022      	str	r2, [r4, #0]
 8007eb6:	f04f 0900 	mov.w	r9, #0
 8007eba:	9700      	str	r7, [sp, #0]
 8007ebc:	4633      	mov	r3, r6
 8007ebe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 f9d8 	bl	8008278 <_printf_common>
 8007ec8:	3001      	adds	r0, #1
 8007eca:	f040 8090 	bne.w	8007fee <_printf_float+0x1e2>
 8007ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ed2:	b00d      	add	sp, #52	; 0x34
 8007ed4:	ecbd 8b02 	vpop	{d8}
 8007ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007edc:	4642      	mov	r2, r8
 8007ede:	464b      	mov	r3, r9
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 fe22 	bl	8000b2c <__aeabi_dcmpun>
 8007ee8:	b140      	cbz	r0, 8007efc <_printf_float+0xf0>
 8007eea:	464b      	mov	r3, r9
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bfbc      	itt	lt
 8007ef0:	232d      	movlt	r3, #45	; 0x2d
 8007ef2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ef6:	487f      	ldr	r0, [pc, #508]	; (80080f4 <_printf_float+0x2e8>)
 8007ef8:	4b7f      	ldr	r3, [pc, #508]	; (80080f8 <_printf_float+0x2ec>)
 8007efa:	e7d1      	b.n	8007ea0 <_printf_float+0x94>
 8007efc:	6863      	ldr	r3, [r4, #4]
 8007efe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f02:	9206      	str	r2, [sp, #24]
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	d13f      	bne.n	8007f88 <_printf_float+0x17c>
 8007f08:	2306      	movs	r3, #6
 8007f0a:	6063      	str	r3, [r4, #4]
 8007f0c:	9b05      	ldr	r3, [sp, #20]
 8007f0e:	6861      	ldr	r1, [r4, #4]
 8007f10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f14:	2300      	movs	r3, #0
 8007f16:	9303      	str	r3, [sp, #12]
 8007f18:	ab0a      	add	r3, sp, #40	; 0x28
 8007f1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f1e:	ab09      	add	r3, sp, #36	; 0x24
 8007f20:	ec49 8b10 	vmov	d0, r8, r9
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	6022      	str	r2, [r4, #0]
 8007f28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f7ff fecd 	bl	8007ccc <__cvt>
 8007f32:	9b06      	ldr	r3, [sp, #24]
 8007f34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f36:	2b47      	cmp	r3, #71	; 0x47
 8007f38:	4680      	mov	r8, r0
 8007f3a:	d108      	bne.n	8007f4e <_printf_float+0x142>
 8007f3c:	1cc8      	adds	r0, r1, #3
 8007f3e:	db02      	blt.n	8007f46 <_printf_float+0x13a>
 8007f40:	6863      	ldr	r3, [r4, #4]
 8007f42:	4299      	cmp	r1, r3
 8007f44:	dd41      	ble.n	8007fca <_printf_float+0x1be>
 8007f46:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f4a:	fa5f fb8b 	uxtb.w	fp, fp
 8007f4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f52:	d820      	bhi.n	8007f96 <_printf_float+0x18a>
 8007f54:	3901      	subs	r1, #1
 8007f56:	465a      	mov	r2, fp
 8007f58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f5c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f5e:	f7ff ff17 	bl	8007d90 <__exponent>
 8007f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f64:	1813      	adds	r3, r2, r0
 8007f66:	2a01      	cmp	r2, #1
 8007f68:	4681      	mov	r9, r0
 8007f6a:	6123      	str	r3, [r4, #16]
 8007f6c:	dc02      	bgt.n	8007f74 <_printf_float+0x168>
 8007f6e:	6822      	ldr	r2, [r4, #0]
 8007f70:	07d2      	lsls	r2, r2, #31
 8007f72:	d501      	bpl.n	8007f78 <_printf_float+0x16c>
 8007f74:	3301      	adds	r3, #1
 8007f76:	6123      	str	r3, [r4, #16]
 8007f78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d09c      	beq.n	8007eba <_printf_float+0xae>
 8007f80:	232d      	movs	r3, #45	; 0x2d
 8007f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f86:	e798      	b.n	8007eba <_printf_float+0xae>
 8007f88:	9a06      	ldr	r2, [sp, #24]
 8007f8a:	2a47      	cmp	r2, #71	; 0x47
 8007f8c:	d1be      	bne.n	8007f0c <_printf_float+0x100>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1bc      	bne.n	8007f0c <_printf_float+0x100>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e7b9      	b.n	8007f0a <_printf_float+0xfe>
 8007f96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f9a:	d118      	bne.n	8007fce <_printf_float+0x1c2>
 8007f9c:	2900      	cmp	r1, #0
 8007f9e:	6863      	ldr	r3, [r4, #4]
 8007fa0:	dd0b      	ble.n	8007fba <_printf_float+0x1ae>
 8007fa2:	6121      	str	r1, [r4, #16]
 8007fa4:	b913      	cbnz	r3, 8007fac <_printf_float+0x1a0>
 8007fa6:	6822      	ldr	r2, [r4, #0]
 8007fa8:	07d0      	lsls	r0, r2, #31
 8007faa:	d502      	bpl.n	8007fb2 <_printf_float+0x1a6>
 8007fac:	3301      	adds	r3, #1
 8007fae:	440b      	add	r3, r1
 8007fb0:	6123      	str	r3, [r4, #16]
 8007fb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fb4:	f04f 0900 	mov.w	r9, #0
 8007fb8:	e7de      	b.n	8007f78 <_printf_float+0x16c>
 8007fba:	b913      	cbnz	r3, 8007fc2 <_printf_float+0x1b6>
 8007fbc:	6822      	ldr	r2, [r4, #0]
 8007fbe:	07d2      	lsls	r2, r2, #31
 8007fc0:	d501      	bpl.n	8007fc6 <_printf_float+0x1ba>
 8007fc2:	3302      	adds	r3, #2
 8007fc4:	e7f4      	b.n	8007fb0 <_printf_float+0x1a4>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e7f2      	b.n	8007fb0 <_printf_float+0x1a4>
 8007fca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd0:	4299      	cmp	r1, r3
 8007fd2:	db05      	blt.n	8007fe0 <_printf_float+0x1d4>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	6121      	str	r1, [r4, #16]
 8007fd8:	07d8      	lsls	r0, r3, #31
 8007fda:	d5ea      	bpl.n	8007fb2 <_printf_float+0x1a6>
 8007fdc:	1c4b      	adds	r3, r1, #1
 8007fde:	e7e7      	b.n	8007fb0 <_printf_float+0x1a4>
 8007fe0:	2900      	cmp	r1, #0
 8007fe2:	bfd4      	ite	le
 8007fe4:	f1c1 0202 	rsble	r2, r1, #2
 8007fe8:	2201      	movgt	r2, #1
 8007fea:	4413      	add	r3, r2
 8007fec:	e7e0      	b.n	8007fb0 <_printf_float+0x1a4>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	055a      	lsls	r2, r3, #21
 8007ff2:	d407      	bmi.n	8008004 <_printf_float+0x1f8>
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	4642      	mov	r2, r8
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	d12c      	bne.n	800805c <_printf_float+0x250>
 8008002:	e764      	b.n	8007ece <_printf_float+0xc2>
 8008004:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008008:	f240 80e0 	bls.w	80081cc <_printf_float+0x3c0>
 800800c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008010:	2200      	movs	r2, #0
 8008012:	2300      	movs	r3, #0
 8008014:	f7f8 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008018:	2800      	cmp	r0, #0
 800801a:	d034      	beq.n	8008086 <_printf_float+0x27a>
 800801c:	4a37      	ldr	r2, [pc, #220]	; (80080fc <_printf_float+0x2f0>)
 800801e:	2301      	movs	r3, #1
 8008020:	4631      	mov	r1, r6
 8008022:	4628      	mov	r0, r5
 8008024:	47b8      	blx	r7
 8008026:	3001      	adds	r0, #1
 8008028:	f43f af51 	beq.w	8007ece <_printf_float+0xc2>
 800802c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008030:	429a      	cmp	r2, r3
 8008032:	db02      	blt.n	800803a <_printf_float+0x22e>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	07d8      	lsls	r0, r3, #31
 8008038:	d510      	bpl.n	800805c <_printf_float+0x250>
 800803a:	ee18 3a10 	vmov	r3, s16
 800803e:	4652      	mov	r2, sl
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	f43f af41 	beq.w	8007ece <_printf_float+0xc2>
 800804c:	f04f 0800 	mov.w	r8, #0
 8008050:	f104 091a 	add.w	r9, r4, #26
 8008054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008056:	3b01      	subs	r3, #1
 8008058:	4543      	cmp	r3, r8
 800805a:	dc09      	bgt.n	8008070 <_printf_float+0x264>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	079b      	lsls	r3, r3, #30
 8008060:	f100 8105 	bmi.w	800826e <_printf_float+0x462>
 8008064:	68e0      	ldr	r0, [r4, #12]
 8008066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008068:	4298      	cmp	r0, r3
 800806a:	bfb8      	it	lt
 800806c:	4618      	movlt	r0, r3
 800806e:	e730      	b.n	8007ed2 <_printf_float+0xc6>
 8008070:	2301      	movs	r3, #1
 8008072:	464a      	mov	r2, r9
 8008074:	4631      	mov	r1, r6
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	f43f af27 	beq.w	8007ece <_printf_float+0xc2>
 8008080:	f108 0801 	add.w	r8, r8, #1
 8008084:	e7e6      	b.n	8008054 <_printf_float+0x248>
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	dc39      	bgt.n	8008100 <_printf_float+0x2f4>
 800808c:	4a1b      	ldr	r2, [pc, #108]	; (80080fc <_printf_float+0x2f0>)
 800808e:	2301      	movs	r3, #1
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	47b8      	blx	r7
 8008096:	3001      	adds	r0, #1
 8008098:	f43f af19 	beq.w	8007ece <_printf_float+0xc2>
 800809c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080a0:	4313      	orrs	r3, r2
 80080a2:	d102      	bne.n	80080aa <_printf_float+0x29e>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	07d9      	lsls	r1, r3, #31
 80080a8:	d5d8      	bpl.n	800805c <_printf_float+0x250>
 80080aa:	ee18 3a10 	vmov	r3, s16
 80080ae:	4652      	mov	r2, sl
 80080b0:	4631      	mov	r1, r6
 80080b2:	4628      	mov	r0, r5
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	f43f af09 	beq.w	8007ece <_printf_float+0xc2>
 80080bc:	f04f 0900 	mov.w	r9, #0
 80080c0:	f104 0a1a 	add.w	sl, r4, #26
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	425b      	negs	r3, r3
 80080c8:	454b      	cmp	r3, r9
 80080ca:	dc01      	bgt.n	80080d0 <_printf_float+0x2c4>
 80080cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ce:	e792      	b.n	8007ff6 <_printf_float+0x1ea>
 80080d0:	2301      	movs	r3, #1
 80080d2:	4652      	mov	r2, sl
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	f43f aef7 	beq.w	8007ece <_printf_float+0xc2>
 80080e0:	f109 0901 	add.w	r9, r9, #1
 80080e4:	e7ee      	b.n	80080c4 <_printf_float+0x2b8>
 80080e6:	bf00      	nop
 80080e8:	7fefffff 	.word	0x7fefffff
 80080ec:	0800a734 	.word	0x0800a734
 80080f0:	0800a738 	.word	0x0800a738
 80080f4:	0800a740 	.word	0x0800a740
 80080f8:	0800a73c 	.word	0x0800a73c
 80080fc:	0800a744 	.word	0x0800a744
 8008100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008102:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008104:	429a      	cmp	r2, r3
 8008106:	bfa8      	it	ge
 8008108:	461a      	movge	r2, r3
 800810a:	2a00      	cmp	r2, #0
 800810c:	4691      	mov	r9, r2
 800810e:	dc37      	bgt.n	8008180 <_printf_float+0x374>
 8008110:	f04f 0b00 	mov.w	fp, #0
 8008114:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008118:	f104 021a 	add.w	r2, r4, #26
 800811c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	eba3 0309 	sub.w	r3, r3, r9
 8008124:	455b      	cmp	r3, fp
 8008126:	dc33      	bgt.n	8008190 <_printf_float+0x384>
 8008128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800812c:	429a      	cmp	r2, r3
 800812e:	db3b      	blt.n	80081a8 <_printf_float+0x39c>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	07da      	lsls	r2, r3, #31
 8008134:	d438      	bmi.n	80081a8 <_printf_float+0x39c>
 8008136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008138:	9b05      	ldr	r3, [sp, #20]
 800813a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	eba2 0901 	sub.w	r9, r2, r1
 8008142:	4599      	cmp	r9, r3
 8008144:	bfa8      	it	ge
 8008146:	4699      	movge	r9, r3
 8008148:	f1b9 0f00 	cmp.w	r9, #0
 800814c:	dc35      	bgt.n	80081ba <_printf_float+0x3ae>
 800814e:	f04f 0800 	mov.w	r8, #0
 8008152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008156:	f104 0a1a 	add.w	sl, r4, #26
 800815a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	eba3 0309 	sub.w	r3, r3, r9
 8008164:	4543      	cmp	r3, r8
 8008166:	f77f af79 	ble.w	800805c <_printf_float+0x250>
 800816a:	2301      	movs	r3, #1
 800816c:	4652      	mov	r2, sl
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	f43f aeaa 	beq.w	8007ece <_printf_float+0xc2>
 800817a:	f108 0801 	add.w	r8, r8, #1
 800817e:	e7ec      	b.n	800815a <_printf_float+0x34e>
 8008180:	4613      	mov	r3, r2
 8008182:	4631      	mov	r1, r6
 8008184:	4642      	mov	r2, r8
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	d1c0      	bne.n	8008110 <_printf_float+0x304>
 800818e:	e69e      	b.n	8007ece <_printf_float+0xc2>
 8008190:	2301      	movs	r3, #1
 8008192:	4631      	mov	r1, r6
 8008194:	4628      	mov	r0, r5
 8008196:	9205      	str	r2, [sp, #20]
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	f43f ae97 	beq.w	8007ece <_printf_float+0xc2>
 80081a0:	9a05      	ldr	r2, [sp, #20]
 80081a2:	f10b 0b01 	add.w	fp, fp, #1
 80081a6:	e7b9      	b.n	800811c <_printf_float+0x310>
 80081a8:	ee18 3a10 	vmov	r3, s16
 80081ac:	4652      	mov	r2, sl
 80081ae:	4631      	mov	r1, r6
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b8      	blx	r7
 80081b4:	3001      	adds	r0, #1
 80081b6:	d1be      	bne.n	8008136 <_printf_float+0x32a>
 80081b8:	e689      	b.n	8007ece <_printf_float+0xc2>
 80081ba:	9a05      	ldr	r2, [sp, #20]
 80081bc:	464b      	mov	r3, r9
 80081be:	4442      	add	r2, r8
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	d1c1      	bne.n	800814e <_printf_float+0x342>
 80081ca:	e680      	b.n	8007ece <_printf_float+0xc2>
 80081cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ce:	2a01      	cmp	r2, #1
 80081d0:	dc01      	bgt.n	80081d6 <_printf_float+0x3ca>
 80081d2:	07db      	lsls	r3, r3, #31
 80081d4:	d538      	bpl.n	8008248 <_printf_float+0x43c>
 80081d6:	2301      	movs	r3, #1
 80081d8:	4642      	mov	r2, r8
 80081da:	4631      	mov	r1, r6
 80081dc:	4628      	mov	r0, r5
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	f43f ae74 	beq.w	8007ece <_printf_float+0xc2>
 80081e6:	ee18 3a10 	vmov	r3, s16
 80081ea:	4652      	mov	r2, sl
 80081ec:	4631      	mov	r1, r6
 80081ee:	4628      	mov	r0, r5
 80081f0:	47b8      	blx	r7
 80081f2:	3001      	adds	r0, #1
 80081f4:	f43f ae6b 	beq.w	8007ece <_printf_float+0xc2>
 80081f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081fc:	2200      	movs	r2, #0
 80081fe:	2300      	movs	r3, #0
 8008200:	f7f8 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8008204:	b9d8      	cbnz	r0, 800823e <_printf_float+0x432>
 8008206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008208:	f108 0201 	add.w	r2, r8, #1
 800820c:	3b01      	subs	r3, #1
 800820e:	4631      	mov	r1, r6
 8008210:	4628      	mov	r0, r5
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	d10e      	bne.n	8008236 <_printf_float+0x42a>
 8008218:	e659      	b.n	8007ece <_printf_float+0xc2>
 800821a:	2301      	movs	r3, #1
 800821c:	4652      	mov	r2, sl
 800821e:	4631      	mov	r1, r6
 8008220:	4628      	mov	r0, r5
 8008222:	47b8      	blx	r7
 8008224:	3001      	adds	r0, #1
 8008226:	f43f ae52 	beq.w	8007ece <_printf_float+0xc2>
 800822a:	f108 0801 	add.w	r8, r8, #1
 800822e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008230:	3b01      	subs	r3, #1
 8008232:	4543      	cmp	r3, r8
 8008234:	dcf1      	bgt.n	800821a <_printf_float+0x40e>
 8008236:	464b      	mov	r3, r9
 8008238:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800823c:	e6dc      	b.n	8007ff8 <_printf_float+0x1ec>
 800823e:	f04f 0800 	mov.w	r8, #0
 8008242:	f104 0a1a 	add.w	sl, r4, #26
 8008246:	e7f2      	b.n	800822e <_printf_float+0x422>
 8008248:	2301      	movs	r3, #1
 800824a:	4642      	mov	r2, r8
 800824c:	e7df      	b.n	800820e <_printf_float+0x402>
 800824e:	2301      	movs	r3, #1
 8008250:	464a      	mov	r2, r9
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	47b8      	blx	r7
 8008258:	3001      	adds	r0, #1
 800825a:	f43f ae38 	beq.w	8007ece <_printf_float+0xc2>
 800825e:	f108 0801 	add.w	r8, r8, #1
 8008262:	68e3      	ldr	r3, [r4, #12]
 8008264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008266:	1a5b      	subs	r3, r3, r1
 8008268:	4543      	cmp	r3, r8
 800826a:	dcf0      	bgt.n	800824e <_printf_float+0x442>
 800826c:	e6fa      	b.n	8008064 <_printf_float+0x258>
 800826e:	f04f 0800 	mov.w	r8, #0
 8008272:	f104 0919 	add.w	r9, r4, #25
 8008276:	e7f4      	b.n	8008262 <_printf_float+0x456>

08008278 <_printf_common>:
 8008278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	4616      	mov	r6, r2
 800827e:	4699      	mov	r9, r3
 8008280:	688a      	ldr	r2, [r1, #8]
 8008282:	690b      	ldr	r3, [r1, #16]
 8008284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008288:	4293      	cmp	r3, r2
 800828a:	bfb8      	it	lt
 800828c:	4613      	movlt	r3, r2
 800828e:	6033      	str	r3, [r6, #0]
 8008290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008294:	4607      	mov	r7, r0
 8008296:	460c      	mov	r4, r1
 8008298:	b10a      	cbz	r2, 800829e <_printf_common+0x26>
 800829a:	3301      	adds	r3, #1
 800829c:	6033      	str	r3, [r6, #0]
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	0699      	lsls	r1, r3, #26
 80082a2:	bf42      	ittt	mi
 80082a4:	6833      	ldrmi	r3, [r6, #0]
 80082a6:	3302      	addmi	r3, #2
 80082a8:	6033      	strmi	r3, [r6, #0]
 80082aa:	6825      	ldr	r5, [r4, #0]
 80082ac:	f015 0506 	ands.w	r5, r5, #6
 80082b0:	d106      	bne.n	80082c0 <_printf_common+0x48>
 80082b2:	f104 0a19 	add.w	sl, r4, #25
 80082b6:	68e3      	ldr	r3, [r4, #12]
 80082b8:	6832      	ldr	r2, [r6, #0]
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	42ab      	cmp	r3, r5
 80082be:	dc26      	bgt.n	800830e <_printf_common+0x96>
 80082c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082c4:	1e13      	subs	r3, r2, #0
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	bf18      	it	ne
 80082ca:	2301      	movne	r3, #1
 80082cc:	0692      	lsls	r2, r2, #26
 80082ce:	d42b      	bmi.n	8008328 <_printf_common+0xb0>
 80082d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082d4:	4649      	mov	r1, r9
 80082d6:	4638      	mov	r0, r7
 80082d8:	47c0      	blx	r8
 80082da:	3001      	adds	r0, #1
 80082dc:	d01e      	beq.n	800831c <_printf_common+0xa4>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	68e5      	ldr	r5, [r4, #12]
 80082e2:	6832      	ldr	r2, [r6, #0]
 80082e4:	f003 0306 	and.w	r3, r3, #6
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	bf08      	it	eq
 80082ec:	1aad      	subeq	r5, r5, r2
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	bf0c      	ite	eq
 80082f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082f8:	2500      	movne	r5, #0
 80082fa:	4293      	cmp	r3, r2
 80082fc:	bfc4      	itt	gt
 80082fe:	1a9b      	subgt	r3, r3, r2
 8008300:	18ed      	addgt	r5, r5, r3
 8008302:	2600      	movs	r6, #0
 8008304:	341a      	adds	r4, #26
 8008306:	42b5      	cmp	r5, r6
 8008308:	d11a      	bne.n	8008340 <_printf_common+0xc8>
 800830a:	2000      	movs	r0, #0
 800830c:	e008      	b.n	8008320 <_printf_common+0xa8>
 800830e:	2301      	movs	r3, #1
 8008310:	4652      	mov	r2, sl
 8008312:	4649      	mov	r1, r9
 8008314:	4638      	mov	r0, r7
 8008316:	47c0      	blx	r8
 8008318:	3001      	adds	r0, #1
 800831a:	d103      	bne.n	8008324 <_printf_common+0xac>
 800831c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008324:	3501      	adds	r5, #1
 8008326:	e7c6      	b.n	80082b6 <_printf_common+0x3e>
 8008328:	18e1      	adds	r1, r4, r3
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	2030      	movs	r0, #48	; 0x30
 800832e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008332:	4422      	add	r2, r4
 8008334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800833c:	3302      	adds	r3, #2
 800833e:	e7c7      	b.n	80082d0 <_printf_common+0x58>
 8008340:	2301      	movs	r3, #1
 8008342:	4622      	mov	r2, r4
 8008344:	4649      	mov	r1, r9
 8008346:	4638      	mov	r0, r7
 8008348:	47c0      	blx	r8
 800834a:	3001      	adds	r0, #1
 800834c:	d0e6      	beq.n	800831c <_printf_common+0xa4>
 800834e:	3601      	adds	r6, #1
 8008350:	e7d9      	b.n	8008306 <_printf_common+0x8e>
	...

08008354 <_printf_i>:
 8008354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008358:	460c      	mov	r4, r1
 800835a:	4691      	mov	r9, r2
 800835c:	7e27      	ldrb	r7, [r4, #24]
 800835e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008360:	2f78      	cmp	r7, #120	; 0x78
 8008362:	4680      	mov	r8, r0
 8008364:	469a      	mov	sl, r3
 8008366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800836a:	d807      	bhi.n	800837c <_printf_i+0x28>
 800836c:	2f62      	cmp	r7, #98	; 0x62
 800836e:	d80a      	bhi.n	8008386 <_printf_i+0x32>
 8008370:	2f00      	cmp	r7, #0
 8008372:	f000 80d8 	beq.w	8008526 <_printf_i+0x1d2>
 8008376:	2f58      	cmp	r7, #88	; 0x58
 8008378:	f000 80a3 	beq.w	80084c2 <_printf_i+0x16e>
 800837c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008384:	e03a      	b.n	80083fc <_printf_i+0xa8>
 8008386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800838a:	2b15      	cmp	r3, #21
 800838c:	d8f6      	bhi.n	800837c <_printf_i+0x28>
 800838e:	a001      	add	r0, pc, #4	; (adr r0, 8008394 <_printf_i+0x40>)
 8008390:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008394:	080083ed 	.word	0x080083ed
 8008398:	08008401 	.word	0x08008401
 800839c:	0800837d 	.word	0x0800837d
 80083a0:	0800837d 	.word	0x0800837d
 80083a4:	0800837d 	.word	0x0800837d
 80083a8:	0800837d 	.word	0x0800837d
 80083ac:	08008401 	.word	0x08008401
 80083b0:	0800837d 	.word	0x0800837d
 80083b4:	0800837d 	.word	0x0800837d
 80083b8:	0800837d 	.word	0x0800837d
 80083bc:	0800837d 	.word	0x0800837d
 80083c0:	0800850d 	.word	0x0800850d
 80083c4:	08008431 	.word	0x08008431
 80083c8:	080084ef 	.word	0x080084ef
 80083cc:	0800837d 	.word	0x0800837d
 80083d0:	0800837d 	.word	0x0800837d
 80083d4:	0800852f 	.word	0x0800852f
 80083d8:	0800837d 	.word	0x0800837d
 80083dc:	08008431 	.word	0x08008431
 80083e0:	0800837d 	.word	0x0800837d
 80083e4:	0800837d 	.word	0x0800837d
 80083e8:	080084f7 	.word	0x080084f7
 80083ec:	680b      	ldr	r3, [r1, #0]
 80083ee:	1d1a      	adds	r2, r3, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	600a      	str	r2, [r1, #0]
 80083f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0a3      	b.n	8008548 <_printf_i+0x1f4>
 8008400:	6825      	ldr	r5, [r4, #0]
 8008402:	6808      	ldr	r0, [r1, #0]
 8008404:	062e      	lsls	r6, r5, #24
 8008406:	f100 0304 	add.w	r3, r0, #4
 800840a:	d50a      	bpl.n	8008422 <_printf_i+0xce>
 800840c:	6805      	ldr	r5, [r0, #0]
 800840e:	600b      	str	r3, [r1, #0]
 8008410:	2d00      	cmp	r5, #0
 8008412:	da03      	bge.n	800841c <_printf_i+0xc8>
 8008414:	232d      	movs	r3, #45	; 0x2d
 8008416:	426d      	negs	r5, r5
 8008418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800841c:	485e      	ldr	r0, [pc, #376]	; (8008598 <_printf_i+0x244>)
 800841e:	230a      	movs	r3, #10
 8008420:	e019      	b.n	8008456 <_printf_i+0x102>
 8008422:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008426:	6805      	ldr	r5, [r0, #0]
 8008428:	600b      	str	r3, [r1, #0]
 800842a:	bf18      	it	ne
 800842c:	b22d      	sxthne	r5, r5
 800842e:	e7ef      	b.n	8008410 <_printf_i+0xbc>
 8008430:	680b      	ldr	r3, [r1, #0]
 8008432:	6825      	ldr	r5, [r4, #0]
 8008434:	1d18      	adds	r0, r3, #4
 8008436:	6008      	str	r0, [r1, #0]
 8008438:	0628      	lsls	r0, r5, #24
 800843a:	d501      	bpl.n	8008440 <_printf_i+0xec>
 800843c:	681d      	ldr	r5, [r3, #0]
 800843e:	e002      	b.n	8008446 <_printf_i+0xf2>
 8008440:	0669      	lsls	r1, r5, #25
 8008442:	d5fb      	bpl.n	800843c <_printf_i+0xe8>
 8008444:	881d      	ldrh	r5, [r3, #0]
 8008446:	4854      	ldr	r0, [pc, #336]	; (8008598 <_printf_i+0x244>)
 8008448:	2f6f      	cmp	r7, #111	; 0x6f
 800844a:	bf0c      	ite	eq
 800844c:	2308      	moveq	r3, #8
 800844e:	230a      	movne	r3, #10
 8008450:	2100      	movs	r1, #0
 8008452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008456:	6866      	ldr	r6, [r4, #4]
 8008458:	60a6      	str	r6, [r4, #8]
 800845a:	2e00      	cmp	r6, #0
 800845c:	bfa2      	ittt	ge
 800845e:	6821      	ldrge	r1, [r4, #0]
 8008460:	f021 0104 	bicge.w	r1, r1, #4
 8008464:	6021      	strge	r1, [r4, #0]
 8008466:	b90d      	cbnz	r5, 800846c <_printf_i+0x118>
 8008468:	2e00      	cmp	r6, #0
 800846a:	d04d      	beq.n	8008508 <_printf_i+0x1b4>
 800846c:	4616      	mov	r6, r2
 800846e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008472:	fb03 5711 	mls	r7, r3, r1, r5
 8008476:	5dc7      	ldrb	r7, [r0, r7]
 8008478:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800847c:	462f      	mov	r7, r5
 800847e:	42bb      	cmp	r3, r7
 8008480:	460d      	mov	r5, r1
 8008482:	d9f4      	bls.n	800846e <_printf_i+0x11a>
 8008484:	2b08      	cmp	r3, #8
 8008486:	d10b      	bne.n	80084a0 <_printf_i+0x14c>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	07df      	lsls	r7, r3, #31
 800848c:	d508      	bpl.n	80084a0 <_printf_i+0x14c>
 800848e:	6923      	ldr	r3, [r4, #16]
 8008490:	6861      	ldr	r1, [r4, #4]
 8008492:	4299      	cmp	r1, r3
 8008494:	bfde      	ittt	le
 8008496:	2330      	movle	r3, #48	; 0x30
 8008498:	f806 3c01 	strble.w	r3, [r6, #-1]
 800849c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80084a0:	1b92      	subs	r2, r2, r6
 80084a2:	6122      	str	r2, [r4, #16]
 80084a4:	f8cd a000 	str.w	sl, [sp]
 80084a8:	464b      	mov	r3, r9
 80084aa:	aa03      	add	r2, sp, #12
 80084ac:	4621      	mov	r1, r4
 80084ae:	4640      	mov	r0, r8
 80084b0:	f7ff fee2 	bl	8008278 <_printf_common>
 80084b4:	3001      	adds	r0, #1
 80084b6:	d14c      	bne.n	8008552 <_printf_i+0x1fe>
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084bc:	b004      	add	sp, #16
 80084be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c2:	4835      	ldr	r0, [pc, #212]	; (8008598 <_printf_i+0x244>)
 80084c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	680e      	ldr	r6, [r1, #0]
 80084cc:	061f      	lsls	r7, r3, #24
 80084ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80084d2:	600e      	str	r6, [r1, #0]
 80084d4:	d514      	bpl.n	8008500 <_printf_i+0x1ac>
 80084d6:	07d9      	lsls	r1, r3, #31
 80084d8:	bf44      	itt	mi
 80084da:	f043 0320 	orrmi.w	r3, r3, #32
 80084de:	6023      	strmi	r3, [r4, #0]
 80084e0:	b91d      	cbnz	r5, 80084ea <_printf_i+0x196>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	f023 0320 	bic.w	r3, r3, #32
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	2310      	movs	r3, #16
 80084ec:	e7b0      	b.n	8008450 <_printf_i+0xfc>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	f043 0320 	orr.w	r3, r3, #32
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	2378      	movs	r3, #120	; 0x78
 80084f8:	4828      	ldr	r0, [pc, #160]	; (800859c <_printf_i+0x248>)
 80084fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084fe:	e7e3      	b.n	80084c8 <_printf_i+0x174>
 8008500:	065e      	lsls	r6, r3, #25
 8008502:	bf48      	it	mi
 8008504:	b2ad      	uxthmi	r5, r5
 8008506:	e7e6      	b.n	80084d6 <_printf_i+0x182>
 8008508:	4616      	mov	r6, r2
 800850a:	e7bb      	b.n	8008484 <_printf_i+0x130>
 800850c:	680b      	ldr	r3, [r1, #0]
 800850e:	6826      	ldr	r6, [r4, #0]
 8008510:	6960      	ldr	r0, [r4, #20]
 8008512:	1d1d      	adds	r5, r3, #4
 8008514:	600d      	str	r5, [r1, #0]
 8008516:	0635      	lsls	r5, r6, #24
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	d501      	bpl.n	8008520 <_printf_i+0x1cc>
 800851c:	6018      	str	r0, [r3, #0]
 800851e:	e002      	b.n	8008526 <_printf_i+0x1d2>
 8008520:	0671      	lsls	r1, r6, #25
 8008522:	d5fb      	bpl.n	800851c <_printf_i+0x1c8>
 8008524:	8018      	strh	r0, [r3, #0]
 8008526:	2300      	movs	r3, #0
 8008528:	6123      	str	r3, [r4, #16]
 800852a:	4616      	mov	r6, r2
 800852c:	e7ba      	b.n	80084a4 <_printf_i+0x150>
 800852e:	680b      	ldr	r3, [r1, #0]
 8008530:	1d1a      	adds	r2, r3, #4
 8008532:	600a      	str	r2, [r1, #0]
 8008534:	681e      	ldr	r6, [r3, #0]
 8008536:	6862      	ldr	r2, [r4, #4]
 8008538:	2100      	movs	r1, #0
 800853a:	4630      	mov	r0, r6
 800853c:	f7f7 fe50 	bl	80001e0 <memchr>
 8008540:	b108      	cbz	r0, 8008546 <_printf_i+0x1f2>
 8008542:	1b80      	subs	r0, r0, r6
 8008544:	6060      	str	r0, [r4, #4]
 8008546:	6863      	ldr	r3, [r4, #4]
 8008548:	6123      	str	r3, [r4, #16]
 800854a:	2300      	movs	r3, #0
 800854c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008550:	e7a8      	b.n	80084a4 <_printf_i+0x150>
 8008552:	6923      	ldr	r3, [r4, #16]
 8008554:	4632      	mov	r2, r6
 8008556:	4649      	mov	r1, r9
 8008558:	4640      	mov	r0, r8
 800855a:	47d0      	blx	sl
 800855c:	3001      	adds	r0, #1
 800855e:	d0ab      	beq.n	80084b8 <_printf_i+0x164>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	079b      	lsls	r3, r3, #30
 8008564:	d413      	bmi.n	800858e <_printf_i+0x23a>
 8008566:	68e0      	ldr	r0, [r4, #12]
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	4298      	cmp	r0, r3
 800856c:	bfb8      	it	lt
 800856e:	4618      	movlt	r0, r3
 8008570:	e7a4      	b.n	80084bc <_printf_i+0x168>
 8008572:	2301      	movs	r3, #1
 8008574:	4632      	mov	r2, r6
 8008576:	4649      	mov	r1, r9
 8008578:	4640      	mov	r0, r8
 800857a:	47d0      	blx	sl
 800857c:	3001      	adds	r0, #1
 800857e:	d09b      	beq.n	80084b8 <_printf_i+0x164>
 8008580:	3501      	adds	r5, #1
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	9903      	ldr	r1, [sp, #12]
 8008586:	1a5b      	subs	r3, r3, r1
 8008588:	42ab      	cmp	r3, r5
 800858a:	dcf2      	bgt.n	8008572 <_printf_i+0x21e>
 800858c:	e7eb      	b.n	8008566 <_printf_i+0x212>
 800858e:	2500      	movs	r5, #0
 8008590:	f104 0619 	add.w	r6, r4, #25
 8008594:	e7f5      	b.n	8008582 <_printf_i+0x22e>
 8008596:	bf00      	nop
 8008598:	0800a746 	.word	0x0800a746
 800859c:	0800a757 	.word	0x0800a757

080085a0 <iprintf>:
 80085a0:	b40f      	push	{r0, r1, r2, r3}
 80085a2:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <iprintf+0x2c>)
 80085a4:	b513      	push	{r0, r1, r4, lr}
 80085a6:	681c      	ldr	r4, [r3, #0]
 80085a8:	b124      	cbz	r4, 80085b4 <iprintf+0x14>
 80085aa:	69a3      	ldr	r3, [r4, #24]
 80085ac:	b913      	cbnz	r3, 80085b4 <iprintf+0x14>
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 fede 	bl	8009370 <__sinit>
 80085b4:	ab05      	add	r3, sp, #20
 80085b6:	9a04      	ldr	r2, [sp, #16]
 80085b8:	68a1      	ldr	r1, [r4, #8]
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	4620      	mov	r0, r4
 80085be:	f001 fbe7 	bl	8009d90 <_vfiprintf_r>
 80085c2:	b002      	add	sp, #8
 80085c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c8:	b004      	add	sp, #16
 80085ca:	4770      	bx	lr
 80085cc:	20000010 	.word	0x20000010

080085d0 <quorem>:
 80085d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	6903      	ldr	r3, [r0, #16]
 80085d6:	690c      	ldr	r4, [r1, #16]
 80085d8:	42a3      	cmp	r3, r4
 80085da:	4607      	mov	r7, r0
 80085dc:	f2c0 8081 	blt.w	80086e2 <quorem+0x112>
 80085e0:	3c01      	subs	r4, #1
 80085e2:	f101 0814 	add.w	r8, r1, #20
 80085e6:	f100 0514 	add.w	r5, r0, #20
 80085ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085f8:	3301      	adds	r3, #1
 80085fa:	429a      	cmp	r2, r3
 80085fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008600:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008604:	fbb2 f6f3 	udiv	r6, r2, r3
 8008608:	d331      	bcc.n	800866e <quorem+0x9e>
 800860a:	f04f 0e00 	mov.w	lr, #0
 800860e:	4640      	mov	r0, r8
 8008610:	46ac      	mov	ip, r5
 8008612:	46f2      	mov	sl, lr
 8008614:	f850 2b04 	ldr.w	r2, [r0], #4
 8008618:	b293      	uxth	r3, r2
 800861a:	fb06 e303 	mla	r3, r6, r3, lr
 800861e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008622:	b29b      	uxth	r3, r3
 8008624:	ebaa 0303 	sub.w	r3, sl, r3
 8008628:	0c12      	lsrs	r2, r2, #16
 800862a:	f8dc a000 	ldr.w	sl, [ip]
 800862e:	fb06 e202 	mla	r2, r6, r2, lr
 8008632:	fa13 f38a 	uxtah	r3, r3, sl
 8008636:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800863a:	fa1f fa82 	uxth.w	sl, r2
 800863e:	f8dc 2000 	ldr.w	r2, [ip]
 8008642:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008646:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800864a:	b29b      	uxth	r3, r3
 800864c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008650:	4581      	cmp	r9, r0
 8008652:	f84c 3b04 	str.w	r3, [ip], #4
 8008656:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800865a:	d2db      	bcs.n	8008614 <quorem+0x44>
 800865c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008660:	b92b      	cbnz	r3, 800866e <quorem+0x9e>
 8008662:	9b01      	ldr	r3, [sp, #4]
 8008664:	3b04      	subs	r3, #4
 8008666:	429d      	cmp	r5, r3
 8008668:	461a      	mov	r2, r3
 800866a:	d32e      	bcc.n	80086ca <quorem+0xfa>
 800866c:	613c      	str	r4, [r7, #16]
 800866e:	4638      	mov	r0, r7
 8008670:	f001 f9aa 	bl	80099c8 <__mcmp>
 8008674:	2800      	cmp	r0, #0
 8008676:	db24      	blt.n	80086c2 <quorem+0xf2>
 8008678:	3601      	adds	r6, #1
 800867a:	4628      	mov	r0, r5
 800867c:	f04f 0c00 	mov.w	ip, #0
 8008680:	f858 2b04 	ldr.w	r2, [r8], #4
 8008684:	f8d0 e000 	ldr.w	lr, [r0]
 8008688:	b293      	uxth	r3, r2
 800868a:	ebac 0303 	sub.w	r3, ip, r3
 800868e:	0c12      	lsrs	r2, r2, #16
 8008690:	fa13 f38e 	uxtah	r3, r3, lr
 8008694:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086a2:	45c1      	cmp	r9, r8
 80086a4:	f840 3b04 	str.w	r3, [r0], #4
 80086a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086ac:	d2e8      	bcs.n	8008680 <quorem+0xb0>
 80086ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086b6:	b922      	cbnz	r2, 80086c2 <quorem+0xf2>
 80086b8:	3b04      	subs	r3, #4
 80086ba:	429d      	cmp	r5, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	d30a      	bcc.n	80086d6 <quorem+0x106>
 80086c0:	613c      	str	r4, [r7, #16]
 80086c2:	4630      	mov	r0, r6
 80086c4:	b003      	add	sp, #12
 80086c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ca:	6812      	ldr	r2, [r2, #0]
 80086cc:	3b04      	subs	r3, #4
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	d1cc      	bne.n	800866c <quorem+0x9c>
 80086d2:	3c01      	subs	r4, #1
 80086d4:	e7c7      	b.n	8008666 <quorem+0x96>
 80086d6:	6812      	ldr	r2, [r2, #0]
 80086d8:	3b04      	subs	r3, #4
 80086da:	2a00      	cmp	r2, #0
 80086dc:	d1f0      	bne.n	80086c0 <quorem+0xf0>
 80086de:	3c01      	subs	r4, #1
 80086e0:	e7eb      	b.n	80086ba <quorem+0xea>
 80086e2:	2000      	movs	r0, #0
 80086e4:	e7ee      	b.n	80086c4 <quorem+0xf4>
	...

080086e8 <_dtoa_r>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	ed2d 8b02 	vpush	{d8}
 80086f0:	ec57 6b10 	vmov	r6, r7, d0
 80086f4:	b095      	sub	sp, #84	; 0x54
 80086f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086fc:	9105      	str	r1, [sp, #20]
 80086fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008702:	4604      	mov	r4, r0
 8008704:	9209      	str	r2, [sp, #36]	; 0x24
 8008706:	930f      	str	r3, [sp, #60]	; 0x3c
 8008708:	b975      	cbnz	r5, 8008728 <_dtoa_r+0x40>
 800870a:	2010      	movs	r0, #16
 800870c:	f000 fed6 	bl	80094bc <malloc>
 8008710:	4602      	mov	r2, r0
 8008712:	6260      	str	r0, [r4, #36]	; 0x24
 8008714:	b920      	cbnz	r0, 8008720 <_dtoa_r+0x38>
 8008716:	4bb2      	ldr	r3, [pc, #712]	; (80089e0 <_dtoa_r+0x2f8>)
 8008718:	21ea      	movs	r1, #234	; 0xea
 800871a:	48b2      	ldr	r0, [pc, #712]	; (80089e4 <_dtoa_r+0x2fc>)
 800871c:	f001 fd8e 	bl	800a23c <__assert_func>
 8008720:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008724:	6005      	str	r5, [r0, #0]
 8008726:	60c5      	str	r5, [r0, #12]
 8008728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800872a:	6819      	ldr	r1, [r3, #0]
 800872c:	b151      	cbz	r1, 8008744 <_dtoa_r+0x5c>
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	604a      	str	r2, [r1, #4]
 8008732:	2301      	movs	r3, #1
 8008734:	4093      	lsls	r3, r2
 8008736:	608b      	str	r3, [r1, #8]
 8008738:	4620      	mov	r0, r4
 800873a:	f000 ff07 	bl	800954c <_Bfree>
 800873e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	1e3b      	subs	r3, r7, #0
 8008746:	bfb9      	ittee	lt
 8008748:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800874c:	9303      	strlt	r3, [sp, #12]
 800874e:	2300      	movge	r3, #0
 8008750:	f8c8 3000 	strge.w	r3, [r8]
 8008754:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008758:	4ba3      	ldr	r3, [pc, #652]	; (80089e8 <_dtoa_r+0x300>)
 800875a:	bfbc      	itt	lt
 800875c:	2201      	movlt	r2, #1
 800875e:	f8c8 2000 	strlt.w	r2, [r8]
 8008762:	ea33 0309 	bics.w	r3, r3, r9
 8008766:	d11b      	bne.n	80087a0 <_dtoa_r+0xb8>
 8008768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800876a:	f242 730f 	movw	r3, #9999	; 0x270f
 800876e:	6013      	str	r3, [r2, #0]
 8008770:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008774:	4333      	orrs	r3, r6
 8008776:	f000 857a 	beq.w	800926e <_dtoa_r+0xb86>
 800877a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800877c:	b963      	cbnz	r3, 8008798 <_dtoa_r+0xb0>
 800877e:	4b9b      	ldr	r3, [pc, #620]	; (80089ec <_dtoa_r+0x304>)
 8008780:	e024      	b.n	80087cc <_dtoa_r+0xe4>
 8008782:	4b9b      	ldr	r3, [pc, #620]	; (80089f0 <_dtoa_r+0x308>)
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	3308      	adds	r3, #8
 8008788:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	9800      	ldr	r0, [sp, #0]
 800878e:	b015      	add	sp, #84	; 0x54
 8008790:	ecbd 8b02 	vpop	{d8}
 8008794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008798:	4b94      	ldr	r3, [pc, #592]	; (80089ec <_dtoa_r+0x304>)
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	3303      	adds	r3, #3
 800879e:	e7f3      	b.n	8008788 <_dtoa_r+0xa0>
 80087a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	ec51 0b17 	vmov	r0, r1, d7
 80087aa:	2300      	movs	r3, #0
 80087ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80087b0:	f7f8 f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80087b4:	4680      	mov	r8, r0
 80087b6:	b158      	cbz	r0, 80087d0 <_dtoa_r+0xe8>
 80087b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087ba:	2301      	movs	r3, #1
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8551 	beq.w	8009268 <_dtoa_r+0xb80>
 80087c6:	488b      	ldr	r0, [pc, #556]	; (80089f4 <_dtoa_r+0x30c>)
 80087c8:	6018      	str	r0, [r3, #0]
 80087ca:	1e43      	subs	r3, r0, #1
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	e7dd      	b.n	800878c <_dtoa_r+0xa4>
 80087d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80087d4:	aa12      	add	r2, sp, #72	; 0x48
 80087d6:	a913      	add	r1, sp, #76	; 0x4c
 80087d8:	4620      	mov	r0, r4
 80087da:	f001 f999 	bl	8009b10 <__d2b>
 80087de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087e2:	4683      	mov	fp, r0
 80087e4:	2d00      	cmp	r5, #0
 80087e6:	d07c      	beq.n	80088e2 <_dtoa_r+0x1fa>
 80087e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80087ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80087f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80087fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80087fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008802:	4b7d      	ldr	r3, [pc, #500]	; (80089f8 <_dtoa_r+0x310>)
 8008804:	2200      	movs	r2, #0
 8008806:	4630      	mov	r0, r6
 8008808:	4639      	mov	r1, r7
 800880a:	f7f7 fd3d 	bl	8000288 <__aeabi_dsub>
 800880e:	a36e      	add	r3, pc, #440	; (adr r3, 80089c8 <_dtoa_r+0x2e0>)
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f7f7 fef0 	bl	80005f8 <__aeabi_dmul>
 8008818:	a36d      	add	r3, pc, #436	; (adr r3, 80089d0 <_dtoa_r+0x2e8>)
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 fd35 	bl	800028c <__adddf3>
 8008822:	4606      	mov	r6, r0
 8008824:	4628      	mov	r0, r5
 8008826:	460f      	mov	r7, r1
 8008828:	f7f7 fe7c 	bl	8000524 <__aeabi_i2d>
 800882c:	a36a      	add	r3, pc, #424	; (adr r3, 80089d8 <_dtoa_r+0x2f0>)
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	f7f7 fee1 	bl	80005f8 <__aeabi_dmul>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4630      	mov	r0, r6
 800883c:	4639      	mov	r1, r7
 800883e:	f7f7 fd25 	bl	800028c <__adddf3>
 8008842:	4606      	mov	r6, r0
 8008844:	460f      	mov	r7, r1
 8008846:	f7f8 f987 	bl	8000b58 <__aeabi_d2iz>
 800884a:	2200      	movs	r2, #0
 800884c:	4682      	mov	sl, r0
 800884e:	2300      	movs	r3, #0
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	f7f8 f942 	bl	8000adc <__aeabi_dcmplt>
 8008858:	b148      	cbz	r0, 800886e <_dtoa_r+0x186>
 800885a:	4650      	mov	r0, sl
 800885c:	f7f7 fe62 	bl	8000524 <__aeabi_i2d>
 8008860:	4632      	mov	r2, r6
 8008862:	463b      	mov	r3, r7
 8008864:	f7f8 f930 	bl	8000ac8 <__aeabi_dcmpeq>
 8008868:	b908      	cbnz	r0, 800886e <_dtoa_r+0x186>
 800886a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800886e:	f1ba 0f16 	cmp.w	sl, #22
 8008872:	d854      	bhi.n	800891e <_dtoa_r+0x236>
 8008874:	4b61      	ldr	r3, [pc, #388]	; (80089fc <_dtoa_r+0x314>)
 8008876:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008882:	f7f8 f92b 	bl	8000adc <__aeabi_dcmplt>
 8008886:	2800      	cmp	r0, #0
 8008888:	d04b      	beq.n	8008922 <_dtoa_r+0x23a>
 800888a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800888e:	2300      	movs	r3, #0
 8008890:	930e      	str	r3, [sp, #56]	; 0x38
 8008892:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008894:	1b5d      	subs	r5, r3, r5
 8008896:	1e6b      	subs	r3, r5, #1
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	bf43      	ittte	mi
 800889c:	2300      	movmi	r3, #0
 800889e:	f1c5 0801 	rsbmi	r8, r5, #1
 80088a2:	9304      	strmi	r3, [sp, #16]
 80088a4:	f04f 0800 	movpl.w	r8, #0
 80088a8:	f1ba 0f00 	cmp.w	sl, #0
 80088ac:	db3b      	blt.n	8008926 <_dtoa_r+0x23e>
 80088ae:	9b04      	ldr	r3, [sp, #16]
 80088b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80088b4:	4453      	add	r3, sl
 80088b6:	9304      	str	r3, [sp, #16]
 80088b8:	2300      	movs	r3, #0
 80088ba:	9306      	str	r3, [sp, #24]
 80088bc:	9b05      	ldr	r3, [sp, #20]
 80088be:	2b09      	cmp	r3, #9
 80088c0:	d869      	bhi.n	8008996 <_dtoa_r+0x2ae>
 80088c2:	2b05      	cmp	r3, #5
 80088c4:	bfc4      	itt	gt
 80088c6:	3b04      	subgt	r3, #4
 80088c8:	9305      	strgt	r3, [sp, #20]
 80088ca:	9b05      	ldr	r3, [sp, #20]
 80088cc:	f1a3 0302 	sub.w	r3, r3, #2
 80088d0:	bfcc      	ite	gt
 80088d2:	2500      	movgt	r5, #0
 80088d4:	2501      	movle	r5, #1
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d869      	bhi.n	80089ae <_dtoa_r+0x2c6>
 80088da:	e8df f003 	tbb	[pc, r3]
 80088de:	4e2c      	.short	0x4e2c
 80088e0:	5a4c      	.short	0x5a4c
 80088e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80088e6:	441d      	add	r5, r3
 80088e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	bfc1      	itttt	gt
 80088f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80088f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80088f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80088fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008900:	bfda      	itte	le
 8008902:	f1c3 0320 	rsble	r3, r3, #32
 8008906:	fa06 f003 	lslle.w	r0, r6, r3
 800890a:	4318      	orrgt	r0, r3
 800890c:	f7f7 fdfa 	bl	8000504 <__aeabi_ui2d>
 8008910:	2301      	movs	r3, #1
 8008912:	4606      	mov	r6, r0
 8008914:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008918:	3d01      	subs	r5, #1
 800891a:	9310      	str	r3, [sp, #64]	; 0x40
 800891c:	e771      	b.n	8008802 <_dtoa_r+0x11a>
 800891e:	2301      	movs	r3, #1
 8008920:	e7b6      	b.n	8008890 <_dtoa_r+0x1a8>
 8008922:	900e      	str	r0, [sp, #56]	; 0x38
 8008924:	e7b5      	b.n	8008892 <_dtoa_r+0x1aa>
 8008926:	f1ca 0300 	rsb	r3, sl, #0
 800892a:	9306      	str	r3, [sp, #24]
 800892c:	2300      	movs	r3, #0
 800892e:	eba8 080a 	sub.w	r8, r8, sl
 8008932:	930d      	str	r3, [sp, #52]	; 0x34
 8008934:	e7c2      	b.n	80088bc <_dtoa_r+0x1d4>
 8008936:	2300      	movs	r3, #0
 8008938:	9308      	str	r3, [sp, #32]
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	dc39      	bgt.n	80089b4 <_dtoa_r+0x2cc>
 8008940:	f04f 0901 	mov.w	r9, #1
 8008944:	f8cd 9004 	str.w	r9, [sp, #4]
 8008948:	464b      	mov	r3, r9
 800894a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800894e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008950:	2200      	movs	r2, #0
 8008952:	6042      	str	r2, [r0, #4]
 8008954:	2204      	movs	r2, #4
 8008956:	f102 0614 	add.w	r6, r2, #20
 800895a:	429e      	cmp	r6, r3
 800895c:	6841      	ldr	r1, [r0, #4]
 800895e:	d92f      	bls.n	80089c0 <_dtoa_r+0x2d8>
 8008960:	4620      	mov	r0, r4
 8008962:	f000 fdb3 	bl	80094cc <_Balloc>
 8008966:	9000      	str	r0, [sp, #0]
 8008968:	2800      	cmp	r0, #0
 800896a:	d14b      	bne.n	8008a04 <_dtoa_r+0x31c>
 800896c:	4b24      	ldr	r3, [pc, #144]	; (8008a00 <_dtoa_r+0x318>)
 800896e:	4602      	mov	r2, r0
 8008970:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008974:	e6d1      	b.n	800871a <_dtoa_r+0x32>
 8008976:	2301      	movs	r3, #1
 8008978:	e7de      	b.n	8008938 <_dtoa_r+0x250>
 800897a:	2300      	movs	r3, #0
 800897c:	9308      	str	r3, [sp, #32]
 800897e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008980:	eb0a 0903 	add.w	r9, sl, r3
 8008984:	f109 0301 	add.w	r3, r9, #1
 8008988:	2b01      	cmp	r3, #1
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	bfb8      	it	lt
 800898e:	2301      	movlt	r3, #1
 8008990:	e7dd      	b.n	800894e <_dtoa_r+0x266>
 8008992:	2301      	movs	r3, #1
 8008994:	e7f2      	b.n	800897c <_dtoa_r+0x294>
 8008996:	2501      	movs	r5, #1
 8008998:	2300      	movs	r3, #0
 800899a:	9305      	str	r3, [sp, #20]
 800899c:	9508      	str	r5, [sp, #32]
 800899e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80089a8:	2312      	movs	r3, #18
 80089aa:	9209      	str	r2, [sp, #36]	; 0x24
 80089ac:	e7cf      	b.n	800894e <_dtoa_r+0x266>
 80089ae:	2301      	movs	r3, #1
 80089b0:	9308      	str	r3, [sp, #32]
 80089b2:	e7f4      	b.n	800899e <_dtoa_r+0x2b6>
 80089b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80089b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80089bc:	464b      	mov	r3, r9
 80089be:	e7c6      	b.n	800894e <_dtoa_r+0x266>
 80089c0:	3101      	adds	r1, #1
 80089c2:	6041      	str	r1, [r0, #4]
 80089c4:	0052      	lsls	r2, r2, #1
 80089c6:	e7c6      	b.n	8008956 <_dtoa_r+0x26e>
 80089c8:	636f4361 	.word	0x636f4361
 80089cc:	3fd287a7 	.word	0x3fd287a7
 80089d0:	8b60c8b3 	.word	0x8b60c8b3
 80089d4:	3fc68a28 	.word	0x3fc68a28
 80089d8:	509f79fb 	.word	0x509f79fb
 80089dc:	3fd34413 	.word	0x3fd34413
 80089e0:	0800a775 	.word	0x0800a775
 80089e4:	0800a78c 	.word	0x0800a78c
 80089e8:	7ff00000 	.word	0x7ff00000
 80089ec:	0800a771 	.word	0x0800a771
 80089f0:	0800a768 	.word	0x0800a768
 80089f4:	0800a745 	.word	0x0800a745
 80089f8:	3ff80000 	.word	0x3ff80000
 80089fc:	0800a8e8 	.word	0x0800a8e8
 8008a00:	0800a7eb 	.word	0x0800a7eb
 8008a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a06:	9a00      	ldr	r2, [sp, #0]
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	2b0e      	cmp	r3, #14
 8008a0e:	f200 80ad 	bhi.w	8008b6c <_dtoa_r+0x484>
 8008a12:	2d00      	cmp	r5, #0
 8008a14:	f000 80aa 	beq.w	8008b6c <_dtoa_r+0x484>
 8008a18:	f1ba 0f00 	cmp.w	sl, #0
 8008a1c:	dd36      	ble.n	8008a8c <_dtoa_r+0x3a4>
 8008a1e:	4ac3      	ldr	r2, [pc, #780]	; (8008d2c <_dtoa_r+0x644>)
 8008a20:	f00a 030f 	and.w	r3, sl, #15
 8008a24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a28:	ed93 7b00 	vldr	d7, [r3]
 8008a2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008a34:	eeb0 8a47 	vmov.f32	s16, s14
 8008a38:	eef0 8a67 	vmov.f32	s17, s15
 8008a3c:	d016      	beq.n	8008a6c <_dtoa_r+0x384>
 8008a3e:	4bbc      	ldr	r3, [pc, #752]	; (8008d30 <_dtoa_r+0x648>)
 8008a40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a48:	f7f7 ff00 	bl	800084c <__aeabi_ddiv>
 8008a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a50:	f007 070f 	and.w	r7, r7, #15
 8008a54:	2503      	movs	r5, #3
 8008a56:	4eb6      	ldr	r6, [pc, #728]	; (8008d30 <_dtoa_r+0x648>)
 8008a58:	b957      	cbnz	r7, 8008a70 <_dtoa_r+0x388>
 8008a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a5e:	ec53 2b18 	vmov	r2, r3, d8
 8008a62:	f7f7 fef3 	bl	800084c <__aeabi_ddiv>
 8008a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a6a:	e029      	b.n	8008ac0 <_dtoa_r+0x3d8>
 8008a6c:	2502      	movs	r5, #2
 8008a6e:	e7f2      	b.n	8008a56 <_dtoa_r+0x36e>
 8008a70:	07f9      	lsls	r1, r7, #31
 8008a72:	d508      	bpl.n	8008a86 <_dtoa_r+0x39e>
 8008a74:	ec51 0b18 	vmov	r0, r1, d8
 8008a78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	ec41 0b18 	vmov	d8, r0, r1
 8008a84:	3501      	adds	r5, #1
 8008a86:	107f      	asrs	r7, r7, #1
 8008a88:	3608      	adds	r6, #8
 8008a8a:	e7e5      	b.n	8008a58 <_dtoa_r+0x370>
 8008a8c:	f000 80a6 	beq.w	8008bdc <_dtoa_r+0x4f4>
 8008a90:	f1ca 0600 	rsb	r6, sl, #0
 8008a94:	4ba5      	ldr	r3, [pc, #660]	; (8008d2c <_dtoa_r+0x644>)
 8008a96:	4fa6      	ldr	r7, [pc, #664]	; (8008d30 <_dtoa_r+0x648>)
 8008a98:	f006 020f 	and.w	r2, r6, #15
 8008a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008aa8:	f7f7 fda6 	bl	80005f8 <__aeabi_dmul>
 8008aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ab0:	1136      	asrs	r6, r6, #4
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2502      	movs	r5, #2
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	f040 8085 	bne.w	8008bc6 <_dtoa_r+0x4de>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1d2      	bne.n	8008a66 <_dtoa_r+0x37e>
 8008ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 808c 	beq.w	8008be0 <_dtoa_r+0x4f8>
 8008ac8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008acc:	4b99      	ldr	r3, [pc, #612]	; (8008d34 <_dtoa_r+0x64c>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	f7f8 f802 	bl	8000adc <__aeabi_dcmplt>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	f000 8081 	beq.w	8008be0 <_dtoa_r+0x4f8>
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d07d      	beq.n	8008be0 <_dtoa_r+0x4f8>
 8008ae4:	f1b9 0f00 	cmp.w	r9, #0
 8008ae8:	dd3c      	ble.n	8008b64 <_dtoa_r+0x47c>
 8008aea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008aee:	9307      	str	r3, [sp, #28]
 8008af0:	2200      	movs	r2, #0
 8008af2:	4b91      	ldr	r3, [pc, #580]	; (8008d38 <_dtoa_r+0x650>)
 8008af4:	4630      	mov	r0, r6
 8008af6:	4639      	mov	r1, r7
 8008af8:	f7f7 fd7e 	bl	80005f8 <__aeabi_dmul>
 8008afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b00:	3501      	adds	r5, #1
 8008b02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008b06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f7f7 fd0a 	bl	8000524 <__aeabi_i2d>
 8008b10:	4632      	mov	r2, r6
 8008b12:	463b      	mov	r3, r7
 8008b14:	f7f7 fd70 	bl	80005f8 <__aeabi_dmul>
 8008b18:	4b88      	ldr	r3, [pc, #544]	; (8008d3c <_dtoa_r+0x654>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f7f7 fbb6 	bl	800028c <__adddf3>
 8008b20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b28:	9303      	str	r3, [sp, #12]
 8008b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d15c      	bne.n	8008bea <_dtoa_r+0x502>
 8008b30:	4b83      	ldr	r3, [pc, #524]	; (8008d40 <_dtoa_r+0x658>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	4630      	mov	r0, r6
 8008b36:	4639      	mov	r1, r7
 8008b38:	f7f7 fba6 	bl	8000288 <__aeabi_dsub>
 8008b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b40:	4606      	mov	r6, r0
 8008b42:	460f      	mov	r7, r1
 8008b44:	f7f7 ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	f040 8296 	bne.w	800907a <_dtoa_r+0x992>
 8008b4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008b52:	4630      	mov	r0, r6
 8008b54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b58:	4639      	mov	r1, r7
 8008b5a:	f7f7 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f040 8288 	bne.w	8009074 <_dtoa_r+0x98c>
 8008b64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f2c0 8158 	blt.w	8008e24 <_dtoa_r+0x73c>
 8008b74:	f1ba 0f0e 	cmp.w	sl, #14
 8008b78:	f300 8154 	bgt.w	8008e24 <_dtoa_r+0x73c>
 8008b7c:	4b6b      	ldr	r3, [pc, #428]	; (8008d2c <_dtoa_r+0x644>)
 8008b7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f280 80e3 	bge.w	8008d54 <_dtoa_r+0x66c>
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f300 80df 	bgt.w	8008d54 <_dtoa_r+0x66c>
 8008b96:	f040 826d 	bne.w	8009074 <_dtoa_r+0x98c>
 8008b9a:	4b69      	ldr	r3, [pc, #420]	; (8008d40 <_dtoa_r+0x658>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	f7f7 fd29 	bl	80005f8 <__aeabi_dmul>
 8008ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008baa:	f7f7 ffab 	bl	8000b04 <__aeabi_dcmpge>
 8008bae:	9e01      	ldr	r6, [sp, #4]
 8008bb0:	4637      	mov	r7, r6
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f040 8243 	bne.w	800903e <_dtoa_r+0x956>
 8008bb8:	9d00      	ldr	r5, [sp, #0]
 8008bba:	2331      	movs	r3, #49	; 0x31
 8008bbc:	f805 3b01 	strb.w	r3, [r5], #1
 8008bc0:	f10a 0a01 	add.w	sl, sl, #1
 8008bc4:	e23f      	b.n	8009046 <_dtoa_r+0x95e>
 8008bc6:	07f2      	lsls	r2, r6, #31
 8008bc8:	d505      	bpl.n	8008bd6 <_dtoa_r+0x4ee>
 8008bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bce:	f7f7 fd13 	bl	80005f8 <__aeabi_dmul>
 8008bd2:	3501      	adds	r5, #1
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	1076      	asrs	r6, r6, #1
 8008bd8:	3708      	adds	r7, #8
 8008bda:	e76c      	b.n	8008ab6 <_dtoa_r+0x3ce>
 8008bdc:	2502      	movs	r5, #2
 8008bde:	e76f      	b.n	8008ac0 <_dtoa_r+0x3d8>
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008be6:	930c      	str	r3, [sp, #48]	; 0x30
 8008be8:	e78d      	b.n	8008b06 <_dtoa_r+0x41e>
 8008bea:	9900      	ldr	r1, [sp, #0]
 8008bec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bf0:	4b4e      	ldr	r3, [pc, #312]	; (8008d2c <_dtoa_r+0x644>)
 8008bf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bf6:	4401      	add	r1, r0
 8008bf8:	9102      	str	r1, [sp, #8]
 8008bfa:	9908      	ldr	r1, [sp, #32]
 8008bfc:	eeb0 8a47 	vmov.f32	s16, s14
 8008c00:	eef0 8a67 	vmov.f32	s17, s15
 8008c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	d045      	beq.n	8008c9c <_dtoa_r+0x5b4>
 8008c10:	494c      	ldr	r1, [pc, #304]	; (8008d44 <_dtoa_r+0x65c>)
 8008c12:	2000      	movs	r0, #0
 8008c14:	f7f7 fe1a 	bl	800084c <__aeabi_ddiv>
 8008c18:	ec53 2b18 	vmov	r2, r3, d8
 8008c1c:	f7f7 fb34 	bl	8000288 <__aeabi_dsub>
 8008c20:	9d00      	ldr	r5, [sp, #0]
 8008c22:	ec41 0b18 	vmov	d8, r0, r1
 8008c26:	4639      	mov	r1, r7
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7f7 ff95 	bl	8000b58 <__aeabi_d2iz>
 8008c2e:	900c      	str	r0, [sp, #48]	; 0x30
 8008c30:	f7f7 fc78 	bl	8000524 <__aeabi_i2d>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 fb24 	bl	8000288 <__aeabi_dsub>
 8008c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c42:	3330      	adds	r3, #48	; 0x30
 8008c44:	f805 3b01 	strb.w	r3, [r5], #1
 8008c48:	ec53 2b18 	vmov	r2, r3, d8
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	460f      	mov	r7, r1
 8008c50:	f7f7 ff44 	bl	8000adc <__aeabi_dcmplt>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d165      	bne.n	8008d24 <_dtoa_r+0x63c>
 8008c58:	4632      	mov	r2, r6
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	4935      	ldr	r1, [pc, #212]	; (8008d34 <_dtoa_r+0x64c>)
 8008c5e:	2000      	movs	r0, #0
 8008c60:	f7f7 fb12 	bl	8000288 <__aeabi_dsub>
 8008c64:	ec53 2b18 	vmov	r2, r3, d8
 8008c68:	f7f7 ff38 	bl	8000adc <__aeabi_dcmplt>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f040 80b9 	bne.w	8008de4 <_dtoa_r+0x6fc>
 8008c72:	9b02      	ldr	r3, [sp, #8]
 8008c74:	429d      	cmp	r5, r3
 8008c76:	f43f af75 	beq.w	8008b64 <_dtoa_r+0x47c>
 8008c7a:	4b2f      	ldr	r3, [pc, #188]	; (8008d38 <_dtoa_r+0x650>)
 8008c7c:	ec51 0b18 	vmov	r0, r1, d8
 8008c80:	2200      	movs	r2, #0
 8008c82:	f7f7 fcb9 	bl	80005f8 <__aeabi_dmul>
 8008c86:	4b2c      	ldr	r3, [pc, #176]	; (8008d38 <_dtoa_r+0x650>)
 8008c88:	ec41 0b18 	vmov	d8, r0, r1
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 fcb1 	bl	80005f8 <__aeabi_dmul>
 8008c96:	4606      	mov	r6, r0
 8008c98:	460f      	mov	r7, r1
 8008c9a:	e7c4      	b.n	8008c26 <_dtoa_r+0x53e>
 8008c9c:	ec51 0b17 	vmov	r0, r1, d7
 8008ca0:	f7f7 fcaa 	bl	80005f8 <__aeabi_dmul>
 8008ca4:	9b02      	ldr	r3, [sp, #8]
 8008ca6:	9d00      	ldr	r5, [sp, #0]
 8008ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8008caa:	ec41 0b18 	vmov	d8, r0, r1
 8008cae:	4639      	mov	r1, r7
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7f7 ff51 	bl	8000b58 <__aeabi_d2iz>
 8008cb6:	9011      	str	r0, [sp, #68]	; 0x44
 8008cb8:	f7f7 fc34 	bl	8000524 <__aeabi_i2d>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7f7 fae0 	bl	8000288 <__aeabi_dsub>
 8008cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cca:	3330      	adds	r3, #48	; 0x30
 8008ccc:	f805 3b01 	strb.w	r3, [r5], #1
 8008cd0:	9b02      	ldr	r3, [sp, #8]
 8008cd2:	429d      	cmp	r5, r3
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	460f      	mov	r7, r1
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	d134      	bne.n	8008d48 <_dtoa_r+0x660>
 8008cde:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <_dtoa_r+0x65c>)
 8008ce0:	ec51 0b18 	vmov	r0, r1, d8
 8008ce4:	f7f7 fad2 	bl	800028c <__adddf3>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f7f7 ff12 	bl	8000b18 <__aeabi_dcmpgt>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d175      	bne.n	8008de4 <_dtoa_r+0x6fc>
 8008cf8:	ec53 2b18 	vmov	r2, r3, d8
 8008cfc:	4911      	ldr	r1, [pc, #68]	; (8008d44 <_dtoa_r+0x65c>)
 8008cfe:	2000      	movs	r0, #0
 8008d00:	f7f7 fac2 	bl	8000288 <__aeabi_dsub>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4630      	mov	r0, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f7f7 fee6 	bl	8000adc <__aeabi_dcmplt>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	f43f af27 	beq.w	8008b64 <_dtoa_r+0x47c>
 8008d16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d18:	1e6b      	subs	r3, r5, #1
 8008d1a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d20:	2b30      	cmp	r3, #48	; 0x30
 8008d22:	d0f8      	beq.n	8008d16 <_dtoa_r+0x62e>
 8008d24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d28:	e04a      	b.n	8008dc0 <_dtoa_r+0x6d8>
 8008d2a:	bf00      	nop
 8008d2c:	0800a8e8 	.word	0x0800a8e8
 8008d30:	0800a8c0 	.word	0x0800a8c0
 8008d34:	3ff00000 	.word	0x3ff00000
 8008d38:	40240000 	.word	0x40240000
 8008d3c:	401c0000 	.word	0x401c0000
 8008d40:	40140000 	.word	0x40140000
 8008d44:	3fe00000 	.word	0x3fe00000
 8008d48:	4baf      	ldr	r3, [pc, #700]	; (8009008 <_dtoa_r+0x920>)
 8008d4a:	f7f7 fc55 	bl	80005f8 <__aeabi_dmul>
 8008d4e:	4606      	mov	r6, r0
 8008d50:	460f      	mov	r7, r1
 8008d52:	e7ac      	b.n	8008cae <_dtoa_r+0x5c6>
 8008d54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d58:	9d00      	ldr	r5, [sp, #0]
 8008d5a:	4642      	mov	r2, r8
 8008d5c:	464b      	mov	r3, r9
 8008d5e:	4630      	mov	r0, r6
 8008d60:	4639      	mov	r1, r7
 8008d62:	f7f7 fd73 	bl	800084c <__aeabi_ddiv>
 8008d66:	f7f7 fef7 	bl	8000b58 <__aeabi_d2iz>
 8008d6a:	9002      	str	r0, [sp, #8]
 8008d6c:	f7f7 fbda 	bl	8000524 <__aeabi_i2d>
 8008d70:	4642      	mov	r2, r8
 8008d72:	464b      	mov	r3, r9
 8008d74:	f7f7 fc40 	bl	80005f8 <__aeabi_dmul>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	4639      	mov	r1, r7
 8008d80:	f7f7 fa82 	bl	8000288 <__aeabi_dsub>
 8008d84:	9e02      	ldr	r6, [sp, #8]
 8008d86:	9f01      	ldr	r7, [sp, #4]
 8008d88:	3630      	adds	r6, #48	; 0x30
 8008d8a:	f805 6b01 	strb.w	r6, [r5], #1
 8008d8e:	9e00      	ldr	r6, [sp, #0]
 8008d90:	1bae      	subs	r6, r5, r6
 8008d92:	42b7      	cmp	r7, r6
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	d137      	bne.n	8008e0a <_dtoa_r+0x722>
 8008d9a:	f7f7 fa77 	bl	800028c <__adddf3>
 8008d9e:	4642      	mov	r2, r8
 8008da0:	464b      	mov	r3, r9
 8008da2:	4606      	mov	r6, r0
 8008da4:	460f      	mov	r7, r1
 8008da6:	f7f7 feb7 	bl	8000b18 <__aeabi_dcmpgt>
 8008daa:	b9c8      	cbnz	r0, 8008de0 <_dtoa_r+0x6f8>
 8008dac:	4642      	mov	r2, r8
 8008dae:	464b      	mov	r3, r9
 8008db0:	4630      	mov	r0, r6
 8008db2:	4639      	mov	r1, r7
 8008db4:	f7f7 fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db8:	b110      	cbz	r0, 8008dc0 <_dtoa_r+0x6d8>
 8008dba:	9b02      	ldr	r3, [sp, #8]
 8008dbc:	07d9      	lsls	r1, r3, #31
 8008dbe:	d40f      	bmi.n	8008de0 <_dtoa_r+0x6f8>
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	f000 fbc2 	bl	800954c <_Bfree>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	702b      	strb	r3, [r5, #0]
 8008dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dce:	f10a 0001 	add.w	r0, sl, #1
 8008dd2:	6018      	str	r0, [r3, #0]
 8008dd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f43f acd8 	beq.w	800878c <_dtoa_r+0xa4>
 8008ddc:	601d      	str	r5, [r3, #0]
 8008dde:	e4d5      	b.n	800878c <_dtoa_r+0xa4>
 8008de0:	f8cd a01c 	str.w	sl, [sp, #28]
 8008de4:	462b      	mov	r3, r5
 8008de6:	461d      	mov	r5, r3
 8008de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dec:	2a39      	cmp	r2, #57	; 0x39
 8008dee:	d108      	bne.n	8008e02 <_dtoa_r+0x71a>
 8008df0:	9a00      	ldr	r2, [sp, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d1f7      	bne.n	8008de6 <_dtoa_r+0x6fe>
 8008df6:	9a07      	ldr	r2, [sp, #28]
 8008df8:	9900      	ldr	r1, [sp, #0]
 8008dfa:	3201      	adds	r2, #1
 8008dfc:	9207      	str	r2, [sp, #28]
 8008dfe:	2230      	movs	r2, #48	; 0x30
 8008e00:	700a      	strb	r2, [r1, #0]
 8008e02:	781a      	ldrb	r2, [r3, #0]
 8008e04:	3201      	adds	r2, #1
 8008e06:	701a      	strb	r2, [r3, #0]
 8008e08:	e78c      	b.n	8008d24 <_dtoa_r+0x63c>
 8008e0a:	4b7f      	ldr	r3, [pc, #508]	; (8009008 <_dtoa_r+0x920>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f7f7 fbf3 	bl	80005f8 <__aeabi_dmul>
 8008e12:	2200      	movs	r2, #0
 8008e14:	2300      	movs	r3, #0
 8008e16:	4606      	mov	r6, r0
 8008e18:	460f      	mov	r7, r1
 8008e1a:	f7f7 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d09b      	beq.n	8008d5a <_dtoa_r+0x672>
 8008e22:	e7cd      	b.n	8008dc0 <_dtoa_r+0x6d8>
 8008e24:	9a08      	ldr	r2, [sp, #32]
 8008e26:	2a00      	cmp	r2, #0
 8008e28:	f000 80c4 	beq.w	8008fb4 <_dtoa_r+0x8cc>
 8008e2c:	9a05      	ldr	r2, [sp, #20]
 8008e2e:	2a01      	cmp	r2, #1
 8008e30:	f300 80a8 	bgt.w	8008f84 <_dtoa_r+0x89c>
 8008e34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	f000 80a0 	beq.w	8008f7c <_dtoa_r+0x894>
 8008e3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e40:	9e06      	ldr	r6, [sp, #24]
 8008e42:	4645      	mov	r5, r8
 8008e44:	9a04      	ldr	r2, [sp, #16]
 8008e46:	2101      	movs	r1, #1
 8008e48:	441a      	add	r2, r3
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4498      	add	r8, r3
 8008e4e:	9204      	str	r2, [sp, #16]
 8008e50:	f000 fc38 	bl	80096c4 <__i2b>
 8008e54:	4607      	mov	r7, r0
 8008e56:	2d00      	cmp	r5, #0
 8008e58:	dd0b      	ble.n	8008e72 <_dtoa_r+0x78a>
 8008e5a:	9b04      	ldr	r3, [sp, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	dd08      	ble.n	8008e72 <_dtoa_r+0x78a>
 8008e60:	42ab      	cmp	r3, r5
 8008e62:	9a04      	ldr	r2, [sp, #16]
 8008e64:	bfa8      	it	ge
 8008e66:	462b      	movge	r3, r5
 8008e68:	eba8 0803 	sub.w	r8, r8, r3
 8008e6c:	1aed      	subs	r5, r5, r3
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	9304      	str	r3, [sp, #16]
 8008e72:	9b06      	ldr	r3, [sp, #24]
 8008e74:	b1fb      	cbz	r3, 8008eb6 <_dtoa_r+0x7ce>
 8008e76:	9b08      	ldr	r3, [sp, #32]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 809f 	beq.w	8008fbc <_dtoa_r+0x8d4>
 8008e7e:	2e00      	cmp	r6, #0
 8008e80:	dd11      	ble.n	8008ea6 <_dtoa_r+0x7be>
 8008e82:	4639      	mov	r1, r7
 8008e84:	4632      	mov	r2, r6
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 fcd8 	bl	800983c <__pow5mult>
 8008e8c:	465a      	mov	r2, fp
 8008e8e:	4601      	mov	r1, r0
 8008e90:	4607      	mov	r7, r0
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 fc2c 	bl	80096f0 <__multiply>
 8008e98:	4659      	mov	r1, fp
 8008e9a:	9007      	str	r0, [sp, #28]
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 fb55 	bl	800954c <_Bfree>
 8008ea2:	9b07      	ldr	r3, [sp, #28]
 8008ea4:	469b      	mov	fp, r3
 8008ea6:	9b06      	ldr	r3, [sp, #24]
 8008ea8:	1b9a      	subs	r2, r3, r6
 8008eaa:	d004      	beq.n	8008eb6 <_dtoa_r+0x7ce>
 8008eac:	4659      	mov	r1, fp
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f000 fcc4 	bl	800983c <__pow5mult>
 8008eb4:	4683      	mov	fp, r0
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 fc03 	bl	80096c4 <__i2b>
 8008ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	dd7c      	ble.n	8008fc0 <_dtoa_r+0x8d8>
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	4601      	mov	r1, r0
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 fcb6 	bl	800983c <__pow5mult>
 8008ed0:	9b05      	ldr	r3, [sp, #20]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	dd76      	ble.n	8008fc6 <_dtoa_r+0x8de>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9306      	str	r3, [sp, #24]
 8008edc:	6933      	ldr	r3, [r6, #16]
 8008ede:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ee2:	6918      	ldr	r0, [r3, #16]
 8008ee4:	f000 fb9e 	bl	8009624 <__hi0bits>
 8008ee8:	f1c0 0020 	rsb	r0, r0, #32
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	4418      	add	r0, r3
 8008ef0:	f010 001f 	ands.w	r0, r0, #31
 8008ef4:	f000 8086 	beq.w	8009004 <_dtoa_r+0x91c>
 8008ef8:	f1c0 0320 	rsb	r3, r0, #32
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	dd7f      	ble.n	8009000 <_dtoa_r+0x918>
 8008f00:	f1c0 001c 	rsb	r0, r0, #28
 8008f04:	9b04      	ldr	r3, [sp, #16]
 8008f06:	4403      	add	r3, r0
 8008f08:	4480      	add	r8, r0
 8008f0a:	4405      	add	r5, r0
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	f1b8 0f00 	cmp.w	r8, #0
 8008f12:	dd05      	ble.n	8008f20 <_dtoa_r+0x838>
 8008f14:	4659      	mov	r1, fp
 8008f16:	4642      	mov	r2, r8
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 fce9 	bl	80098f0 <__lshift>
 8008f1e:	4683      	mov	fp, r0
 8008f20:	9b04      	ldr	r3, [sp, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dd05      	ble.n	8008f32 <_dtoa_r+0x84a>
 8008f26:	4631      	mov	r1, r6
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fce0 	bl	80098f0 <__lshift>
 8008f30:	4606      	mov	r6, r0
 8008f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d069      	beq.n	800900c <_dtoa_r+0x924>
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4658      	mov	r0, fp
 8008f3c:	f000 fd44 	bl	80099c8 <__mcmp>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	da63      	bge.n	800900c <_dtoa_r+0x924>
 8008f44:	2300      	movs	r3, #0
 8008f46:	4659      	mov	r1, fp
 8008f48:	220a      	movs	r2, #10
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 fb20 	bl	8009590 <__multadd>
 8008f50:	9b08      	ldr	r3, [sp, #32]
 8008f52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008f56:	4683      	mov	fp, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 818f 	beq.w	800927c <_dtoa_r+0xb94>
 8008f5e:	4639      	mov	r1, r7
 8008f60:	2300      	movs	r3, #0
 8008f62:	220a      	movs	r2, #10
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 fb13 	bl	8009590 <__multadd>
 8008f6a:	f1b9 0f00 	cmp.w	r9, #0
 8008f6e:	4607      	mov	r7, r0
 8008f70:	f300 808e 	bgt.w	8009090 <_dtoa_r+0x9a8>
 8008f74:	9b05      	ldr	r3, [sp, #20]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	dc50      	bgt.n	800901c <_dtoa_r+0x934>
 8008f7a:	e089      	b.n	8009090 <_dtoa_r+0x9a8>
 8008f7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f82:	e75d      	b.n	8008e40 <_dtoa_r+0x758>
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	1e5e      	subs	r6, r3, #1
 8008f88:	9b06      	ldr	r3, [sp, #24]
 8008f8a:	42b3      	cmp	r3, r6
 8008f8c:	bfbf      	itttt	lt
 8008f8e:	9b06      	ldrlt	r3, [sp, #24]
 8008f90:	9606      	strlt	r6, [sp, #24]
 8008f92:	1af2      	sublt	r2, r6, r3
 8008f94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008f96:	bfb6      	itet	lt
 8008f98:	189b      	addlt	r3, r3, r2
 8008f9a:	1b9e      	subge	r6, r3, r6
 8008f9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008f9e:	9b01      	ldr	r3, [sp, #4]
 8008fa0:	bfb8      	it	lt
 8008fa2:	2600      	movlt	r6, #0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bfb5      	itete	lt
 8008fa8:	eba8 0503 	sublt.w	r5, r8, r3
 8008fac:	9b01      	ldrge	r3, [sp, #4]
 8008fae:	2300      	movlt	r3, #0
 8008fb0:	4645      	movge	r5, r8
 8008fb2:	e747      	b.n	8008e44 <_dtoa_r+0x75c>
 8008fb4:	9e06      	ldr	r6, [sp, #24]
 8008fb6:	9f08      	ldr	r7, [sp, #32]
 8008fb8:	4645      	mov	r5, r8
 8008fba:	e74c      	b.n	8008e56 <_dtoa_r+0x76e>
 8008fbc:	9a06      	ldr	r2, [sp, #24]
 8008fbe:	e775      	b.n	8008eac <_dtoa_r+0x7c4>
 8008fc0:	9b05      	ldr	r3, [sp, #20]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	dc18      	bgt.n	8008ff8 <_dtoa_r+0x910>
 8008fc6:	9b02      	ldr	r3, [sp, #8]
 8008fc8:	b9b3      	cbnz	r3, 8008ff8 <_dtoa_r+0x910>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fd0:	b9a3      	cbnz	r3, 8008ffc <_dtoa_r+0x914>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fd8:	0d1b      	lsrs	r3, r3, #20
 8008fda:	051b      	lsls	r3, r3, #20
 8008fdc:	b12b      	cbz	r3, 8008fea <_dtoa_r+0x902>
 8008fde:	9b04      	ldr	r3, [sp, #16]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	9304      	str	r3, [sp, #16]
 8008fe4:	f108 0801 	add.w	r8, r8, #1
 8008fe8:	2301      	movs	r3, #1
 8008fea:	9306      	str	r3, [sp, #24]
 8008fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f47f af74 	bne.w	8008edc <_dtoa_r+0x7f4>
 8008ff4:	2001      	movs	r0, #1
 8008ff6:	e779      	b.n	8008eec <_dtoa_r+0x804>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	e7f6      	b.n	8008fea <_dtoa_r+0x902>
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	e7f4      	b.n	8008fea <_dtoa_r+0x902>
 8009000:	d085      	beq.n	8008f0e <_dtoa_r+0x826>
 8009002:	4618      	mov	r0, r3
 8009004:	301c      	adds	r0, #28
 8009006:	e77d      	b.n	8008f04 <_dtoa_r+0x81c>
 8009008:	40240000 	.word	0x40240000
 800900c:	9b01      	ldr	r3, [sp, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dc38      	bgt.n	8009084 <_dtoa_r+0x99c>
 8009012:	9b05      	ldr	r3, [sp, #20]
 8009014:	2b02      	cmp	r3, #2
 8009016:	dd35      	ble.n	8009084 <_dtoa_r+0x99c>
 8009018:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800901c:	f1b9 0f00 	cmp.w	r9, #0
 8009020:	d10d      	bne.n	800903e <_dtoa_r+0x956>
 8009022:	4631      	mov	r1, r6
 8009024:	464b      	mov	r3, r9
 8009026:	2205      	movs	r2, #5
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fab1 	bl	8009590 <__multadd>
 800902e:	4601      	mov	r1, r0
 8009030:	4606      	mov	r6, r0
 8009032:	4658      	mov	r0, fp
 8009034:	f000 fcc8 	bl	80099c8 <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	f73f adbd 	bgt.w	8008bb8 <_dtoa_r+0x4d0>
 800903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009040:	9d00      	ldr	r5, [sp, #0]
 8009042:	ea6f 0a03 	mvn.w	sl, r3
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	4631      	mov	r1, r6
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fa7d 	bl	800954c <_Bfree>
 8009052:	2f00      	cmp	r7, #0
 8009054:	f43f aeb4 	beq.w	8008dc0 <_dtoa_r+0x6d8>
 8009058:	f1b8 0f00 	cmp.w	r8, #0
 800905c:	d005      	beq.n	800906a <_dtoa_r+0x982>
 800905e:	45b8      	cmp	r8, r7
 8009060:	d003      	beq.n	800906a <_dtoa_r+0x982>
 8009062:	4641      	mov	r1, r8
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fa71 	bl	800954c <_Bfree>
 800906a:	4639      	mov	r1, r7
 800906c:	4620      	mov	r0, r4
 800906e:	f000 fa6d 	bl	800954c <_Bfree>
 8009072:	e6a5      	b.n	8008dc0 <_dtoa_r+0x6d8>
 8009074:	2600      	movs	r6, #0
 8009076:	4637      	mov	r7, r6
 8009078:	e7e1      	b.n	800903e <_dtoa_r+0x956>
 800907a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800907c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009080:	4637      	mov	r7, r6
 8009082:	e599      	b.n	8008bb8 <_dtoa_r+0x4d0>
 8009084:	9b08      	ldr	r3, [sp, #32]
 8009086:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	f000 80fd 	beq.w	800928a <_dtoa_r+0xba2>
 8009090:	2d00      	cmp	r5, #0
 8009092:	dd05      	ble.n	80090a0 <_dtoa_r+0x9b8>
 8009094:	4639      	mov	r1, r7
 8009096:	462a      	mov	r2, r5
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fc29 	bl	80098f0 <__lshift>
 800909e:	4607      	mov	r7, r0
 80090a0:	9b06      	ldr	r3, [sp, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d05c      	beq.n	8009160 <_dtoa_r+0xa78>
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 fa0f 	bl	80094cc <_Balloc>
 80090ae:	4605      	mov	r5, r0
 80090b0:	b928      	cbnz	r0, 80090be <_dtoa_r+0x9d6>
 80090b2:	4b80      	ldr	r3, [pc, #512]	; (80092b4 <_dtoa_r+0xbcc>)
 80090b4:	4602      	mov	r2, r0
 80090b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090ba:	f7ff bb2e 	b.w	800871a <_dtoa_r+0x32>
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	3202      	adds	r2, #2
 80090c2:	0092      	lsls	r2, r2, #2
 80090c4:	f107 010c 	add.w	r1, r7, #12
 80090c8:	300c      	adds	r0, #12
 80090ca:	f7fe fde9 	bl	8007ca0 <memcpy>
 80090ce:	2201      	movs	r2, #1
 80090d0:	4629      	mov	r1, r5
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 fc0c 	bl	80098f0 <__lshift>
 80090d8:	9b00      	ldr	r3, [sp, #0]
 80090da:	3301      	adds	r3, #1
 80090dc:	9301      	str	r3, [sp, #4]
 80090de:	9b00      	ldr	r3, [sp, #0]
 80090e0:	444b      	add	r3, r9
 80090e2:	9307      	str	r3, [sp, #28]
 80090e4:	9b02      	ldr	r3, [sp, #8]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	46b8      	mov	r8, r7
 80090ec:	9306      	str	r3, [sp, #24]
 80090ee:	4607      	mov	r7, r0
 80090f0:	9b01      	ldr	r3, [sp, #4]
 80090f2:	4631      	mov	r1, r6
 80090f4:	3b01      	subs	r3, #1
 80090f6:	4658      	mov	r0, fp
 80090f8:	9302      	str	r3, [sp, #8]
 80090fa:	f7ff fa69 	bl	80085d0 <quorem>
 80090fe:	4603      	mov	r3, r0
 8009100:	3330      	adds	r3, #48	; 0x30
 8009102:	9004      	str	r0, [sp, #16]
 8009104:	4641      	mov	r1, r8
 8009106:	4658      	mov	r0, fp
 8009108:	9308      	str	r3, [sp, #32]
 800910a:	f000 fc5d 	bl	80099c8 <__mcmp>
 800910e:	463a      	mov	r2, r7
 8009110:	4681      	mov	r9, r0
 8009112:	4631      	mov	r1, r6
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fc73 	bl	8009a00 <__mdiff>
 800911a:	68c2      	ldr	r2, [r0, #12]
 800911c:	9b08      	ldr	r3, [sp, #32]
 800911e:	4605      	mov	r5, r0
 8009120:	bb02      	cbnz	r2, 8009164 <_dtoa_r+0xa7c>
 8009122:	4601      	mov	r1, r0
 8009124:	4658      	mov	r0, fp
 8009126:	f000 fc4f 	bl	80099c8 <__mcmp>
 800912a:	9b08      	ldr	r3, [sp, #32]
 800912c:	4602      	mov	r2, r0
 800912e:	4629      	mov	r1, r5
 8009130:	4620      	mov	r0, r4
 8009132:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009136:	f000 fa09 	bl	800954c <_Bfree>
 800913a:	9b05      	ldr	r3, [sp, #20]
 800913c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800913e:	9d01      	ldr	r5, [sp, #4]
 8009140:	ea43 0102 	orr.w	r1, r3, r2
 8009144:	9b06      	ldr	r3, [sp, #24]
 8009146:	430b      	orrs	r3, r1
 8009148:	9b08      	ldr	r3, [sp, #32]
 800914a:	d10d      	bne.n	8009168 <_dtoa_r+0xa80>
 800914c:	2b39      	cmp	r3, #57	; 0x39
 800914e:	d029      	beq.n	80091a4 <_dtoa_r+0xabc>
 8009150:	f1b9 0f00 	cmp.w	r9, #0
 8009154:	dd01      	ble.n	800915a <_dtoa_r+0xa72>
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	3331      	adds	r3, #49	; 0x31
 800915a:	9a02      	ldr	r2, [sp, #8]
 800915c:	7013      	strb	r3, [r2, #0]
 800915e:	e774      	b.n	800904a <_dtoa_r+0x962>
 8009160:	4638      	mov	r0, r7
 8009162:	e7b9      	b.n	80090d8 <_dtoa_r+0x9f0>
 8009164:	2201      	movs	r2, #1
 8009166:	e7e2      	b.n	800912e <_dtoa_r+0xa46>
 8009168:	f1b9 0f00 	cmp.w	r9, #0
 800916c:	db06      	blt.n	800917c <_dtoa_r+0xa94>
 800916e:	9905      	ldr	r1, [sp, #20]
 8009170:	ea41 0909 	orr.w	r9, r1, r9
 8009174:	9906      	ldr	r1, [sp, #24]
 8009176:	ea59 0101 	orrs.w	r1, r9, r1
 800917a:	d120      	bne.n	80091be <_dtoa_r+0xad6>
 800917c:	2a00      	cmp	r2, #0
 800917e:	ddec      	ble.n	800915a <_dtoa_r+0xa72>
 8009180:	4659      	mov	r1, fp
 8009182:	2201      	movs	r2, #1
 8009184:	4620      	mov	r0, r4
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	f000 fbb2 	bl	80098f0 <__lshift>
 800918c:	4631      	mov	r1, r6
 800918e:	4683      	mov	fp, r0
 8009190:	f000 fc1a 	bl	80099c8 <__mcmp>
 8009194:	2800      	cmp	r0, #0
 8009196:	9b01      	ldr	r3, [sp, #4]
 8009198:	dc02      	bgt.n	80091a0 <_dtoa_r+0xab8>
 800919a:	d1de      	bne.n	800915a <_dtoa_r+0xa72>
 800919c:	07da      	lsls	r2, r3, #31
 800919e:	d5dc      	bpl.n	800915a <_dtoa_r+0xa72>
 80091a0:	2b39      	cmp	r3, #57	; 0x39
 80091a2:	d1d8      	bne.n	8009156 <_dtoa_r+0xa6e>
 80091a4:	9a02      	ldr	r2, [sp, #8]
 80091a6:	2339      	movs	r3, #57	; 0x39
 80091a8:	7013      	strb	r3, [r2, #0]
 80091aa:	462b      	mov	r3, r5
 80091ac:	461d      	mov	r5, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091b4:	2a39      	cmp	r2, #57	; 0x39
 80091b6:	d050      	beq.n	800925a <_dtoa_r+0xb72>
 80091b8:	3201      	adds	r2, #1
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	e745      	b.n	800904a <_dtoa_r+0x962>
 80091be:	2a00      	cmp	r2, #0
 80091c0:	dd03      	ble.n	80091ca <_dtoa_r+0xae2>
 80091c2:	2b39      	cmp	r3, #57	; 0x39
 80091c4:	d0ee      	beq.n	80091a4 <_dtoa_r+0xabc>
 80091c6:	3301      	adds	r3, #1
 80091c8:	e7c7      	b.n	800915a <_dtoa_r+0xa72>
 80091ca:	9a01      	ldr	r2, [sp, #4]
 80091cc:	9907      	ldr	r1, [sp, #28]
 80091ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80091d2:	428a      	cmp	r2, r1
 80091d4:	d02a      	beq.n	800922c <_dtoa_r+0xb44>
 80091d6:	4659      	mov	r1, fp
 80091d8:	2300      	movs	r3, #0
 80091da:	220a      	movs	r2, #10
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 f9d7 	bl	8009590 <__multadd>
 80091e2:	45b8      	cmp	r8, r7
 80091e4:	4683      	mov	fp, r0
 80091e6:	f04f 0300 	mov.w	r3, #0
 80091ea:	f04f 020a 	mov.w	r2, #10
 80091ee:	4641      	mov	r1, r8
 80091f0:	4620      	mov	r0, r4
 80091f2:	d107      	bne.n	8009204 <_dtoa_r+0xb1c>
 80091f4:	f000 f9cc 	bl	8009590 <__multadd>
 80091f8:	4680      	mov	r8, r0
 80091fa:	4607      	mov	r7, r0
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	3301      	adds	r3, #1
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	e775      	b.n	80090f0 <_dtoa_r+0xa08>
 8009204:	f000 f9c4 	bl	8009590 <__multadd>
 8009208:	4639      	mov	r1, r7
 800920a:	4680      	mov	r8, r0
 800920c:	2300      	movs	r3, #0
 800920e:	220a      	movs	r2, #10
 8009210:	4620      	mov	r0, r4
 8009212:	f000 f9bd 	bl	8009590 <__multadd>
 8009216:	4607      	mov	r7, r0
 8009218:	e7f0      	b.n	80091fc <_dtoa_r+0xb14>
 800921a:	f1b9 0f00 	cmp.w	r9, #0
 800921e:	9a00      	ldr	r2, [sp, #0]
 8009220:	bfcc      	ite	gt
 8009222:	464d      	movgt	r5, r9
 8009224:	2501      	movle	r5, #1
 8009226:	4415      	add	r5, r2
 8009228:	f04f 0800 	mov.w	r8, #0
 800922c:	4659      	mov	r1, fp
 800922e:	2201      	movs	r2, #1
 8009230:	4620      	mov	r0, r4
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	f000 fb5c 	bl	80098f0 <__lshift>
 8009238:	4631      	mov	r1, r6
 800923a:	4683      	mov	fp, r0
 800923c:	f000 fbc4 	bl	80099c8 <__mcmp>
 8009240:	2800      	cmp	r0, #0
 8009242:	dcb2      	bgt.n	80091aa <_dtoa_r+0xac2>
 8009244:	d102      	bne.n	800924c <_dtoa_r+0xb64>
 8009246:	9b01      	ldr	r3, [sp, #4]
 8009248:	07db      	lsls	r3, r3, #31
 800924a:	d4ae      	bmi.n	80091aa <_dtoa_r+0xac2>
 800924c:	462b      	mov	r3, r5
 800924e:	461d      	mov	r5, r3
 8009250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009254:	2a30      	cmp	r2, #48	; 0x30
 8009256:	d0fa      	beq.n	800924e <_dtoa_r+0xb66>
 8009258:	e6f7      	b.n	800904a <_dtoa_r+0x962>
 800925a:	9a00      	ldr	r2, [sp, #0]
 800925c:	429a      	cmp	r2, r3
 800925e:	d1a5      	bne.n	80091ac <_dtoa_r+0xac4>
 8009260:	f10a 0a01 	add.w	sl, sl, #1
 8009264:	2331      	movs	r3, #49	; 0x31
 8009266:	e779      	b.n	800915c <_dtoa_r+0xa74>
 8009268:	4b13      	ldr	r3, [pc, #76]	; (80092b8 <_dtoa_r+0xbd0>)
 800926a:	f7ff baaf 	b.w	80087cc <_dtoa_r+0xe4>
 800926e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009270:	2b00      	cmp	r3, #0
 8009272:	f47f aa86 	bne.w	8008782 <_dtoa_r+0x9a>
 8009276:	4b11      	ldr	r3, [pc, #68]	; (80092bc <_dtoa_r+0xbd4>)
 8009278:	f7ff baa8 	b.w	80087cc <_dtoa_r+0xe4>
 800927c:	f1b9 0f00 	cmp.w	r9, #0
 8009280:	dc03      	bgt.n	800928a <_dtoa_r+0xba2>
 8009282:	9b05      	ldr	r3, [sp, #20]
 8009284:	2b02      	cmp	r3, #2
 8009286:	f73f aec9 	bgt.w	800901c <_dtoa_r+0x934>
 800928a:	9d00      	ldr	r5, [sp, #0]
 800928c:	4631      	mov	r1, r6
 800928e:	4658      	mov	r0, fp
 8009290:	f7ff f99e 	bl	80085d0 <quorem>
 8009294:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009298:	f805 3b01 	strb.w	r3, [r5], #1
 800929c:	9a00      	ldr	r2, [sp, #0]
 800929e:	1aaa      	subs	r2, r5, r2
 80092a0:	4591      	cmp	r9, r2
 80092a2:	ddba      	ble.n	800921a <_dtoa_r+0xb32>
 80092a4:	4659      	mov	r1, fp
 80092a6:	2300      	movs	r3, #0
 80092a8:	220a      	movs	r2, #10
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 f970 	bl	8009590 <__multadd>
 80092b0:	4683      	mov	fp, r0
 80092b2:	e7eb      	b.n	800928c <_dtoa_r+0xba4>
 80092b4:	0800a7eb 	.word	0x0800a7eb
 80092b8:	0800a744 	.word	0x0800a744
 80092bc:	0800a768 	.word	0x0800a768

080092c0 <std>:
 80092c0:	2300      	movs	r3, #0
 80092c2:	b510      	push	{r4, lr}
 80092c4:	4604      	mov	r4, r0
 80092c6:	e9c0 3300 	strd	r3, r3, [r0]
 80092ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092ce:	6083      	str	r3, [r0, #8]
 80092d0:	8181      	strh	r1, [r0, #12]
 80092d2:	6643      	str	r3, [r0, #100]	; 0x64
 80092d4:	81c2      	strh	r2, [r0, #14]
 80092d6:	6183      	str	r3, [r0, #24]
 80092d8:	4619      	mov	r1, r3
 80092da:	2208      	movs	r2, #8
 80092dc:	305c      	adds	r0, #92	; 0x5c
 80092de:	f7fe fced 	bl	8007cbc <memset>
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <std+0x38>)
 80092e4:	6263      	str	r3, [r4, #36]	; 0x24
 80092e6:	4b05      	ldr	r3, [pc, #20]	; (80092fc <std+0x3c>)
 80092e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <std+0x40>)
 80092ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std+0x44>)
 80092f0:	6224      	str	r4, [r4, #32]
 80092f2:	6323      	str	r3, [r4, #48]	; 0x30
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	bf00      	nop
 80092f8:	0800a011 	.word	0x0800a011
 80092fc:	0800a033 	.word	0x0800a033
 8009300:	0800a06b 	.word	0x0800a06b
 8009304:	0800a08f 	.word	0x0800a08f

08009308 <_cleanup_r>:
 8009308:	4901      	ldr	r1, [pc, #4]	; (8009310 <_cleanup_r+0x8>)
 800930a:	f000 b8af 	b.w	800946c <_fwalk_reent>
 800930e:	bf00      	nop
 8009310:	0800a3a5 	.word	0x0800a3a5

08009314 <__sfmoreglue>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	1e4a      	subs	r2, r1, #1
 8009318:	2568      	movs	r5, #104	; 0x68
 800931a:	4355      	muls	r5, r2
 800931c:	460e      	mov	r6, r1
 800931e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009322:	f000 fcb1 	bl	8009c88 <_malloc_r>
 8009326:	4604      	mov	r4, r0
 8009328:	b140      	cbz	r0, 800933c <__sfmoreglue+0x28>
 800932a:	2100      	movs	r1, #0
 800932c:	e9c0 1600 	strd	r1, r6, [r0]
 8009330:	300c      	adds	r0, #12
 8009332:	60a0      	str	r0, [r4, #8]
 8009334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009338:	f7fe fcc0 	bl	8007cbc <memset>
 800933c:	4620      	mov	r0, r4
 800933e:	bd70      	pop	{r4, r5, r6, pc}

08009340 <__sfp_lock_acquire>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__sfp_lock_acquire+0x8>)
 8009342:	f000 b8b8 	b.w	80094b6 <__retarget_lock_acquire_recursive>
 8009346:	bf00      	nop
 8009348:	20001c3c 	.word	0x20001c3c

0800934c <__sfp_lock_release>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__sfp_lock_release+0x8>)
 800934e:	f000 b8b3 	b.w	80094b8 <__retarget_lock_release_recursive>
 8009352:	bf00      	nop
 8009354:	20001c3c 	.word	0x20001c3c

08009358 <__sinit_lock_acquire>:
 8009358:	4801      	ldr	r0, [pc, #4]	; (8009360 <__sinit_lock_acquire+0x8>)
 800935a:	f000 b8ac 	b.w	80094b6 <__retarget_lock_acquire_recursive>
 800935e:	bf00      	nop
 8009360:	20001c37 	.word	0x20001c37

08009364 <__sinit_lock_release>:
 8009364:	4801      	ldr	r0, [pc, #4]	; (800936c <__sinit_lock_release+0x8>)
 8009366:	f000 b8a7 	b.w	80094b8 <__retarget_lock_release_recursive>
 800936a:	bf00      	nop
 800936c:	20001c37 	.word	0x20001c37

08009370 <__sinit>:
 8009370:	b510      	push	{r4, lr}
 8009372:	4604      	mov	r4, r0
 8009374:	f7ff fff0 	bl	8009358 <__sinit_lock_acquire>
 8009378:	69a3      	ldr	r3, [r4, #24]
 800937a:	b11b      	cbz	r3, 8009384 <__sinit+0x14>
 800937c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009380:	f7ff bff0 	b.w	8009364 <__sinit_lock_release>
 8009384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009388:	6523      	str	r3, [r4, #80]	; 0x50
 800938a:	4b13      	ldr	r3, [pc, #76]	; (80093d8 <__sinit+0x68>)
 800938c:	4a13      	ldr	r2, [pc, #76]	; (80093dc <__sinit+0x6c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	62a2      	str	r2, [r4, #40]	; 0x28
 8009392:	42a3      	cmp	r3, r4
 8009394:	bf04      	itt	eq
 8009396:	2301      	moveq	r3, #1
 8009398:	61a3      	streq	r3, [r4, #24]
 800939a:	4620      	mov	r0, r4
 800939c:	f000 f820 	bl	80093e0 <__sfp>
 80093a0:	6060      	str	r0, [r4, #4]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 f81c 	bl	80093e0 <__sfp>
 80093a8:	60a0      	str	r0, [r4, #8]
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 f818 	bl	80093e0 <__sfp>
 80093b0:	2200      	movs	r2, #0
 80093b2:	60e0      	str	r0, [r4, #12]
 80093b4:	2104      	movs	r1, #4
 80093b6:	6860      	ldr	r0, [r4, #4]
 80093b8:	f7ff ff82 	bl	80092c0 <std>
 80093bc:	68a0      	ldr	r0, [r4, #8]
 80093be:	2201      	movs	r2, #1
 80093c0:	2109      	movs	r1, #9
 80093c2:	f7ff ff7d 	bl	80092c0 <std>
 80093c6:	68e0      	ldr	r0, [r4, #12]
 80093c8:	2202      	movs	r2, #2
 80093ca:	2112      	movs	r1, #18
 80093cc:	f7ff ff78 	bl	80092c0 <std>
 80093d0:	2301      	movs	r3, #1
 80093d2:	61a3      	str	r3, [r4, #24]
 80093d4:	e7d2      	b.n	800937c <__sinit+0xc>
 80093d6:	bf00      	nop
 80093d8:	0800a730 	.word	0x0800a730
 80093dc:	08009309 	.word	0x08009309

080093e0 <__sfp>:
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e2:	4607      	mov	r7, r0
 80093e4:	f7ff ffac 	bl	8009340 <__sfp_lock_acquire>
 80093e8:	4b1e      	ldr	r3, [pc, #120]	; (8009464 <__sfp+0x84>)
 80093ea:	681e      	ldr	r6, [r3, #0]
 80093ec:	69b3      	ldr	r3, [r6, #24]
 80093ee:	b913      	cbnz	r3, 80093f6 <__sfp+0x16>
 80093f0:	4630      	mov	r0, r6
 80093f2:	f7ff ffbd 	bl	8009370 <__sinit>
 80093f6:	3648      	adds	r6, #72	; 0x48
 80093f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	d503      	bpl.n	8009408 <__sfp+0x28>
 8009400:	6833      	ldr	r3, [r6, #0]
 8009402:	b30b      	cbz	r3, 8009448 <__sfp+0x68>
 8009404:	6836      	ldr	r6, [r6, #0]
 8009406:	e7f7      	b.n	80093f8 <__sfp+0x18>
 8009408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800940c:	b9d5      	cbnz	r5, 8009444 <__sfp+0x64>
 800940e:	4b16      	ldr	r3, [pc, #88]	; (8009468 <__sfp+0x88>)
 8009410:	60e3      	str	r3, [r4, #12]
 8009412:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009416:	6665      	str	r5, [r4, #100]	; 0x64
 8009418:	f000 f84c 	bl	80094b4 <__retarget_lock_init_recursive>
 800941c:	f7ff ff96 	bl	800934c <__sfp_lock_release>
 8009420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009428:	6025      	str	r5, [r4, #0]
 800942a:	61a5      	str	r5, [r4, #24]
 800942c:	2208      	movs	r2, #8
 800942e:	4629      	mov	r1, r5
 8009430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009434:	f7fe fc42 	bl	8007cbc <memset>
 8009438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800943c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009440:	4620      	mov	r0, r4
 8009442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009444:	3468      	adds	r4, #104	; 0x68
 8009446:	e7d9      	b.n	80093fc <__sfp+0x1c>
 8009448:	2104      	movs	r1, #4
 800944a:	4638      	mov	r0, r7
 800944c:	f7ff ff62 	bl	8009314 <__sfmoreglue>
 8009450:	4604      	mov	r4, r0
 8009452:	6030      	str	r0, [r6, #0]
 8009454:	2800      	cmp	r0, #0
 8009456:	d1d5      	bne.n	8009404 <__sfp+0x24>
 8009458:	f7ff ff78 	bl	800934c <__sfp_lock_release>
 800945c:	230c      	movs	r3, #12
 800945e:	603b      	str	r3, [r7, #0]
 8009460:	e7ee      	b.n	8009440 <__sfp+0x60>
 8009462:	bf00      	nop
 8009464:	0800a730 	.word	0x0800a730
 8009468:	ffff0001 	.word	0xffff0001

0800946c <_fwalk_reent>:
 800946c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009470:	4606      	mov	r6, r0
 8009472:	4688      	mov	r8, r1
 8009474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009478:	2700      	movs	r7, #0
 800947a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800947e:	f1b9 0901 	subs.w	r9, r9, #1
 8009482:	d505      	bpl.n	8009490 <_fwalk_reent+0x24>
 8009484:	6824      	ldr	r4, [r4, #0]
 8009486:	2c00      	cmp	r4, #0
 8009488:	d1f7      	bne.n	800947a <_fwalk_reent+0xe>
 800948a:	4638      	mov	r0, r7
 800948c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009490:	89ab      	ldrh	r3, [r5, #12]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d907      	bls.n	80094a6 <_fwalk_reent+0x3a>
 8009496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800949a:	3301      	adds	r3, #1
 800949c:	d003      	beq.n	80094a6 <_fwalk_reent+0x3a>
 800949e:	4629      	mov	r1, r5
 80094a0:	4630      	mov	r0, r6
 80094a2:	47c0      	blx	r8
 80094a4:	4307      	orrs	r7, r0
 80094a6:	3568      	adds	r5, #104	; 0x68
 80094a8:	e7e9      	b.n	800947e <_fwalk_reent+0x12>
	...

080094ac <_localeconv_r>:
 80094ac:	4800      	ldr	r0, [pc, #0]	; (80094b0 <_localeconv_r+0x4>)
 80094ae:	4770      	bx	lr
 80094b0:	20000164 	.word	0x20000164

080094b4 <__retarget_lock_init_recursive>:
 80094b4:	4770      	bx	lr

080094b6 <__retarget_lock_acquire_recursive>:
 80094b6:	4770      	bx	lr

080094b8 <__retarget_lock_release_recursive>:
 80094b8:	4770      	bx	lr
	...

080094bc <malloc>:
 80094bc:	4b02      	ldr	r3, [pc, #8]	; (80094c8 <malloc+0xc>)
 80094be:	4601      	mov	r1, r0
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	f000 bbe1 	b.w	8009c88 <_malloc_r>
 80094c6:	bf00      	nop
 80094c8:	20000010 	.word	0x20000010

080094cc <_Balloc>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094d0:	4604      	mov	r4, r0
 80094d2:	460d      	mov	r5, r1
 80094d4:	b976      	cbnz	r6, 80094f4 <_Balloc+0x28>
 80094d6:	2010      	movs	r0, #16
 80094d8:	f7ff fff0 	bl	80094bc <malloc>
 80094dc:	4602      	mov	r2, r0
 80094de:	6260      	str	r0, [r4, #36]	; 0x24
 80094e0:	b920      	cbnz	r0, 80094ec <_Balloc+0x20>
 80094e2:	4b18      	ldr	r3, [pc, #96]	; (8009544 <_Balloc+0x78>)
 80094e4:	4818      	ldr	r0, [pc, #96]	; (8009548 <_Balloc+0x7c>)
 80094e6:	2166      	movs	r1, #102	; 0x66
 80094e8:	f000 fea8 	bl	800a23c <__assert_func>
 80094ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094f0:	6006      	str	r6, [r0, #0]
 80094f2:	60c6      	str	r6, [r0, #12]
 80094f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094f6:	68f3      	ldr	r3, [r6, #12]
 80094f8:	b183      	cbz	r3, 800951c <_Balloc+0x50>
 80094fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009502:	b9b8      	cbnz	r0, 8009534 <_Balloc+0x68>
 8009504:	2101      	movs	r1, #1
 8009506:	fa01 f605 	lsl.w	r6, r1, r5
 800950a:	1d72      	adds	r2, r6, #5
 800950c:	0092      	lsls	r2, r2, #2
 800950e:	4620      	mov	r0, r4
 8009510:	f000 fb5a 	bl	8009bc8 <_calloc_r>
 8009514:	b160      	cbz	r0, 8009530 <_Balloc+0x64>
 8009516:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800951a:	e00e      	b.n	800953a <_Balloc+0x6e>
 800951c:	2221      	movs	r2, #33	; 0x21
 800951e:	2104      	movs	r1, #4
 8009520:	4620      	mov	r0, r4
 8009522:	f000 fb51 	bl	8009bc8 <_calloc_r>
 8009526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009528:	60f0      	str	r0, [r6, #12]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e4      	bne.n	80094fa <_Balloc+0x2e>
 8009530:	2000      	movs	r0, #0
 8009532:	bd70      	pop	{r4, r5, r6, pc}
 8009534:	6802      	ldr	r2, [r0, #0]
 8009536:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800953a:	2300      	movs	r3, #0
 800953c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009540:	e7f7      	b.n	8009532 <_Balloc+0x66>
 8009542:	bf00      	nop
 8009544:	0800a775 	.word	0x0800a775
 8009548:	0800a85c 	.word	0x0800a85c

0800954c <_Bfree>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009550:	4605      	mov	r5, r0
 8009552:	460c      	mov	r4, r1
 8009554:	b976      	cbnz	r6, 8009574 <_Bfree+0x28>
 8009556:	2010      	movs	r0, #16
 8009558:	f7ff ffb0 	bl	80094bc <malloc>
 800955c:	4602      	mov	r2, r0
 800955e:	6268      	str	r0, [r5, #36]	; 0x24
 8009560:	b920      	cbnz	r0, 800956c <_Bfree+0x20>
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <_Bfree+0x3c>)
 8009564:	4809      	ldr	r0, [pc, #36]	; (800958c <_Bfree+0x40>)
 8009566:	218a      	movs	r1, #138	; 0x8a
 8009568:	f000 fe68 	bl	800a23c <__assert_func>
 800956c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009570:	6006      	str	r6, [r0, #0]
 8009572:	60c6      	str	r6, [r0, #12]
 8009574:	b13c      	cbz	r4, 8009586 <_Bfree+0x3a>
 8009576:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009578:	6862      	ldr	r2, [r4, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009580:	6021      	str	r1, [r4, #0]
 8009582:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	0800a775 	.word	0x0800a775
 800958c:	0800a85c 	.word	0x0800a85c

08009590 <__multadd>:
 8009590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009594:	690e      	ldr	r6, [r1, #16]
 8009596:	4607      	mov	r7, r0
 8009598:	4698      	mov	r8, r3
 800959a:	460c      	mov	r4, r1
 800959c:	f101 0014 	add.w	r0, r1, #20
 80095a0:	2300      	movs	r3, #0
 80095a2:	6805      	ldr	r5, [r0, #0]
 80095a4:	b2a9      	uxth	r1, r5
 80095a6:	fb02 8101 	mla	r1, r2, r1, r8
 80095aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80095ae:	0c2d      	lsrs	r5, r5, #16
 80095b0:	fb02 c505 	mla	r5, r2, r5, ip
 80095b4:	b289      	uxth	r1, r1
 80095b6:	3301      	adds	r3, #1
 80095b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80095bc:	429e      	cmp	r6, r3
 80095be:	f840 1b04 	str.w	r1, [r0], #4
 80095c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80095c6:	dcec      	bgt.n	80095a2 <__multadd+0x12>
 80095c8:	f1b8 0f00 	cmp.w	r8, #0
 80095cc:	d022      	beq.n	8009614 <__multadd+0x84>
 80095ce:	68a3      	ldr	r3, [r4, #8]
 80095d0:	42b3      	cmp	r3, r6
 80095d2:	dc19      	bgt.n	8009608 <__multadd+0x78>
 80095d4:	6861      	ldr	r1, [r4, #4]
 80095d6:	4638      	mov	r0, r7
 80095d8:	3101      	adds	r1, #1
 80095da:	f7ff ff77 	bl	80094cc <_Balloc>
 80095de:	4605      	mov	r5, r0
 80095e0:	b928      	cbnz	r0, 80095ee <__multadd+0x5e>
 80095e2:	4602      	mov	r2, r0
 80095e4:	4b0d      	ldr	r3, [pc, #52]	; (800961c <__multadd+0x8c>)
 80095e6:	480e      	ldr	r0, [pc, #56]	; (8009620 <__multadd+0x90>)
 80095e8:	21b5      	movs	r1, #181	; 0xb5
 80095ea:	f000 fe27 	bl	800a23c <__assert_func>
 80095ee:	6922      	ldr	r2, [r4, #16]
 80095f0:	3202      	adds	r2, #2
 80095f2:	f104 010c 	add.w	r1, r4, #12
 80095f6:	0092      	lsls	r2, r2, #2
 80095f8:	300c      	adds	r0, #12
 80095fa:	f7fe fb51 	bl	8007ca0 <memcpy>
 80095fe:	4621      	mov	r1, r4
 8009600:	4638      	mov	r0, r7
 8009602:	f7ff ffa3 	bl	800954c <_Bfree>
 8009606:	462c      	mov	r4, r5
 8009608:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800960c:	3601      	adds	r6, #1
 800960e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009612:	6126      	str	r6, [r4, #16]
 8009614:	4620      	mov	r0, r4
 8009616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800961a:	bf00      	nop
 800961c:	0800a7eb 	.word	0x0800a7eb
 8009620:	0800a85c 	.word	0x0800a85c

08009624 <__hi0bits>:
 8009624:	0c03      	lsrs	r3, r0, #16
 8009626:	041b      	lsls	r3, r3, #16
 8009628:	b9d3      	cbnz	r3, 8009660 <__hi0bits+0x3c>
 800962a:	0400      	lsls	r0, r0, #16
 800962c:	2310      	movs	r3, #16
 800962e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009632:	bf04      	itt	eq
 8009634:	0200      	lsleq	r0, r0, #8
 8009636:	3308      	addeq	r3, #8
 8009638:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800963c:	bf04      	itt	eq
 800963e:	0100      	lsleq	r0, r0, #4
 8009640:	3304      	addeq	r3, #4
 8009642:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009646:	bf04      	itt	eq
 8009648:	0080      	lsleq	r0, r0, #2
 800964a:	3302      	addeq	r3, #2
 800964c:	2800      	cmp	r0, #0
 800964e:	db05      	blt.n	800965c <__hi0bits+0x38>
 8009650:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009654:	f103 0301 	add.w	r3, r3, #1
 8009658:	bf08      	it	eq
 800965a:	2320      	moveq	r3, #32
 800965c:	4618      	mov	r0, r3
 800965e:	4770      	bx	lr
 8009660:	2300      	movs	r3, #0
 8009662:	e7e4      	b.n	800962e <__hi0bits+0xa>

08009664 <__lo0bits>:
 8009664:	6803      	ldr	r3, [r0, #0]
 8009666:	f013 0207 	ands.w	r2, r3, #7
 800966a:	4601      	mov	r1, r0
 800966c:	d00b      	beq.n	8009686 <__lo0bits+0x22>
 800966e:	07da      	lsls	r2, r3, #31
 8009670:	d424      	bmi.n	80096bc <__lo0bits+0x58>
 8009672:	0798      	lsls	r0, r3, #30
 8009674:	bf49      	itett	mi
 8009676:	085b      	lsrmi	r3, r3, #1
 8009678:	089b      	lsrpl	r3, r3, #2
 800967a:	2001      	movmi	r0, #1
 800967c:	600b      	strmi	r3, [r1, #0]
 800967e:	bf5c      	itt	pl
 8009680:	600b      	strpl	r3, [r1, #0]
 8009682:	2002      	movpl	r0, #2
 8009684:	4770      	bx	lr
 8009686:	b298      	uxth	r0, r3
 8009688:	b9b0      	cbnz	r0, 80096b8 <__lo0bits+0x54>
 800968a:	0c1b      	lsrs	r3, r3, #16
 800968c:	2010      	movs	r0, #16
 800968e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009692:	bf04      	itt	eq
 8009694:	0a1b      	lsreq	r3, r3, #8
 8009696:	3008      	addeq	r0, #8
 8009698:	071a      	lsls	r2, r3, #28
 800969a:	bf04      	itt	eq
 800969c:	091b      	lsreq	r3, r3, #4
 800969e:	3004      	addeq	r0, #4
 80096a0:	079a      	lsls	r2, r3, #30
 80096a2:	bf04      	itt	eq
 80096a4:	089b      	lsreq	r3, r3, #2
 80096a6:	3002      	addeq	r0, #2
 80096a8:	07da      	lsls	r2, r3, #31
 80096aa:	d403      	bmi.n	80096b4 <__lo0bits+0x50>
 80096ac:	085b      	lsrs	r3, r3, #1
 80096ae:	f100 0001 	add.w	r0, r0, #1
 80096b2:	d005      	beq.n	80096c0 <__lo0bits+0x5c>
 80096b4:	600b      	str	r3, [r1, #0]
 80096b6:	4770      	bx	lr
 80096b8:	4610      	mov	r0, r2
 80096ba:	e7e8      	b.n	800968e <__lo0bits+0x2a>
 80096bc:	2000      	movs	r0, #0
 80096be:	4770      	bx	lr
 80096c0:	2020      	movs	r0, #32
 80096c2:	4770      	bx	lr

080096c4 <__i2b>:
 80096c4:	b510      	push	{r4, lr}
 80096c6:	460c      	mov	r4, r1
 80096c8:	2101      	movs	r1, #1
 80096ca:	f7ff feff 	bl	80094cc <_Balloc>
 80096ce:	4602      	mov	r2, r0
 80096d0:	b928      	cbnz	r0, 80096de <__i2b+0x1a>
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <__i2b+0x24>)
 80096d4:	4805      	ldr	r0, [pc, #20]	; (80096ec <__i2b+0x28>)
 80096d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096da:	f000 fdaf 	bl	800a23c <__assert_func>
 80096de:	2301      	movs	r3, #1
 80096e0:	6144      	str	r4, [r0, #20]
 80096e2:	6103      	str	r3, [r0, #16]
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	bf00      	nop
 80096e8:	0800a7eb 	.word	0x0800a7eb
 80096ec:	0800a85c 	.word	0x0800a85c

080096f0 <__multiply>:
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	4614      	mov	r4, r2
 80096f6:	690a      	ldr	r2, [r1, #16]
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	bfb8      	it	lt
 80096fe:	460b      	movlt	r3, r1
 8009700:	460d      	mov	r5, r1
 8009702:	bfbc      	itt	lt
 8009704:	4625      	movlt	r5, r4
 8009706:	461c      	movlt	r4, r3
 8009708:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800970c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009710:	68ab      	ldr	r3, [r5, #8]
 8009712:	6869      	ldr	r1, [r5, #4]
 8009714:	eb0a 0709 	add.w	r7, sl, r9
 8009718:	42bb      	cmp	r3, r7
 800971a:	b085      	sub	sp, #20
 800971c:	bfb8      	it	lt
 800971e:	3101      	addlt	r1, #1
 8009720:	f7ff fed4 	bl	80094cc <_Balloc>
 8009724:	b930      	cbnz	r0, 8009734 <__multiply+0x44>
 8009726:	4602      	mov	r2, r0
 8009728:	4b42      	ldr	r3, [pc, #264]	; (8009834 <__multiply+0x144>)
 800972a:	4843      	ldr	r0, [pc, #268]	; (8009838 <__multiply+0x148>)
 800972c:	f240 115d 	movw	r1, #349	; 0x15d
 8009730:	f000 fd84 	bl	800a23c <__assert_func>
 8009734:	f100 0614 	add.w	r6, r0, #20
 8009738:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800973c:	4633      	mov	r3, r6
 800973e:	2200      	movs	r2, #0
 8009740:	4543      	cmp	r3, r8
 8009742:	d31e      	bcc.n	8009782 <__multiply+0x92>
 8009744:	f105 0c14 	add.w	ip, r5, #20
 8009748:	f104 0314 	add.w	r3, r4, #20
 800974c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009750:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009754:	9202      	str	r2, [sp, #8]
 8009756:	ebac 0205 	sub.w	r2, ip, r5
 800975a:	3a15      	subs	r2, #21
 800975c:	f022 0203 	bic.w	r2, r2, #3
 8009760:	3204      	adds	r2, #4
 8009762:	f105 0115 	add.w	r1, r5, #21
 8009766:	458c      	cmp	ip, r1
 8009768:	bf38      	it	cc
 800976a:	2204      	movcc	r2, #4
 800976c:	9201      	str	r2, [sp, #4]
 800976e:	9a02      	ldr	r2, [sp, #8]
 8009770:	9303      	str	r3, [sp, #12]
 8009772:	429a      	cmp	r2, r3
 8009774:	d808      	bhi.n	8009788 <__multiply+0x98>
 8009776:	2f00      	cmp	r7, #0
 8009778:	dc55      	bgt.n	8009826 <__multiply+0x136>
 800977a:	6107      	str	r7, [r0, #16]
 800977c:	b005      	add	sp, #20
 800977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009782:	f843 2b04 	str.w	r2, [r3], #4
 8009786:	e7db      	b.n	8009740 <__multiply+0x50>
 8009788:	f8b3 a000 	ldrh.w	sl, [r3]
 800978c:	f1ba 0f00 	cmp.w	sl, #0
 8009790:	d020      	beq.n	80097d4 <__multiply+0xe4>
 8009792:	f105 0e14 	add.w	lr, r5, #20
 8009796:	46b1      	mov	r9, r6
 8009798:	2200      	movs	r2, #0
 800979a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800979e:	f8d9 b000 	ldr.w	fp, [r9]
 80097a2:	b2a1      	uxth	r1, r4
 80097a4:	fa1f fb8b 	uxth.w	fp, fp
 80097a8:	fb0a b101 	mla	r1, sl, r1, fp
 80097ac:	4411      	add	r1, r2
 80097ae:	f8d9 2000 	ldr.w	r2, [r9]
 80097b2:	0c24      	lsrs	r4, r4, #16
 80097b4:	0c12      	lsrs	r2, r2, #16
 80097b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80097ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80097be:	b289      	uxth	r1, r1
 80097c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80097c4:	45f4      	cmp	ip, lr
 80097c6:	f849 1b04 	str.w	r1, [r9], #4
 80097ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80097ce:	d8e4      	bhi.n	800979a <__multiply+0xaa>
 80097d0:	9901      	ldr	r1, [sp, #4]
 80097d2:	5072      	str	r2, [r6, r1]
 80097d4:	9a03      	ldr	r2, [sp, #12]
 80097d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097da:	3304      	adds	r3, #4
 80097dc:	f1b9 0f00 	cmp.w	r9, #0
 80097e0:	d01f      	beq.n	8009822 <__multiply+0x132>
 80097e2:	6834      	ldr	r4, [r6, #0]
 80097e4:	f105 0114 	add.w	r1, r5, #20
 80097e8:	46b6      	mov	lr, r6
 80097ea:	f04f 0a00 	mov.w	sl, #0
 80097ee:	880a      	ldrh	r2, [r1, #0]
 80097f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80097f4:	fb09 b202 	mla	r2, r9, r2, fp
 80097f8:	4492      	add	sl, r2
 80097fa:	b2a4      	uxth	r4, r4
 80097fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009800:	f84e 4b04 	str.w	r4, [lr], #4
 8009804:	f851 4b04 	ldr.w	r4, [r1], #4
 8009808:	f8be 2000 	ldrh.w	r2, [lr]
 800980c:	0c24      	lsrs	r4, r4, #16
 800980e:	fb09 2404 	mla	r4, r9, r4, r2
 8009812:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009816:	458c      	cmp	ip, r1
 8009818:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800981c:	d8e7      	bhi.n	80097ee <__multiply+0xfe>
 800981e:	9a01      	ldr	r2, [sp, #4]
 8009820:	50b4      	str	r4, [r6, r2]
 8009822:	3604      	adds	r6, #4
 8009824:	e7a3      	b.n	800976e <__multiply+0x7e>
 8009826:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1a5      	bne.n	800977a <__multiply+0x8a>
 800982e:	3f01      	subs	r7, #1
 8009830:	e7a1      	b.n	8009776 <__multiply+0x86>
 8009832:	bf00      	nop
 8009834:	0800a7eb 	.word	0x0800a7eb
 8009838:	0800a85c 	.word	0x0800a85c

0800983c <__pow5mult>:
 800983c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009840:	4615      	mov	r5, r2
 8009842:	f012 0203 	ands.w	r2, r2, #3
 8009846:	4606      	mov	r6, r0
 8009848:	460f      	mov	r7, r1
 800984a:	d007      	beq.n	800985c <__pow5mult+0x20>
 800984c:	4c25      	ldr	r4, [pc, #148]	; (80098e4 <__pow5mult+0xa8>)
 800984e:	3a01      	subs	r2, #1
 8009850:	2300      	movs	r3, #0
 8009852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009856:	f7ff fe9b 	bl	8009590 <__multadd>
 800985a:	4607      	mov	r7, r0
 800985c:	10ad      	asrs	r5, r5, #2
 800985e:	d03d      	beq.n	80098dc <__pow5mult+0xa0>
 8009860:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009862:	b97c      	cbnz	r4, 8009884 <__pow5mult+0x48>
 8009864:	2010      	movs	r0, #16
 8009866:	f7ff fe29 	bl	80094bc <malloc>
 800986a:	4602      	mov	r2, r0
 800986c:	6270      	str	r0, [r6, #36]	; 0x24
 800986e:	b928      	cbnz	r0, 800987c <__pow5mult+0x40>
 8009870:	4b1d      	ldr	r3, [pc, #116]	; (80098e8 <__pow5mult+0xac>)
 8009872:	481e      	ldr	r0, [pc, #120]	; (80098ec <__pow5mult+0xb0>)
 8009874:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009878:	f000 fce0 	bl	800a23c <__assert_func>
 800987c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009880:	6004      	str	r4, [r0, #0]
 8009882:	60c4      	str	r4, [r0, #12]
 8009884:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800988c:	b94c      	cbnz	r4, 80098a2 <__pow5mult+0x66>
 800988e:	f240 2171 	movw	r1, #625	; 0x271
 8009892:	4630      	mov	r0, r6
 8009894:	f7ff ff16 	bl	80096c4 <__i2b>
 8009898:	2300      	movs	r3, #0
 800989a:	f8c8 0008 	str.w	r0, [r8, #8]
 800989e:	4604      	mov	r4, r0
 80098a0:	6003      	str	r3, [r0, #0]
 80098a2:	f04f 0900 	mov.w	r9, #0
 80098a6:	07eb      	lsls	r3, r5, #31
 80098a8:	d50a      	bpl.n	80098c0 <__pow5mult+0x84>
 80098aa:	4639      	mov	r1, r7
 80098ac:	4622      	mov	r2, r4
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff ff1e 	bl	80096f0 <__multiply>
 80098b4:	4639      	mov	r1, r7
 80098b6:	4680      	mov	r8, r0
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7ff fe47 	bl	800954c <_Bfree>
 80098be:	4647      	mov	r7, r8
 80098c0:	106d      	asrs	r5, r5, #1
 80098c2:	d00b      	beq.n	80098dc <__pow5mult+0xa0>
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	b938      	cbnz	r0, 80098d8 <__pow5mult+0x9c>
 80098c8:	4622      	mov	r2, r4
 80098ca:	4621      	mov	r1, r4
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7ff ff0f 	bl	80096f0 <__multiply>
 80098d2:	6020      	str	r0, [r4, #0]
 80098d4:	f8c0 9000 	str.w	r9, [r0]
 80098d8:	4604      	mov	r4, r0
 80098da:	e7e4      	b.n	80098a6 <__pow5mult+0x6a>
 80098dc:	4638      	mov	r0, r7
 80098de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e2:	bf00      	nop
 80098e4:	0800a9b0 	.word	0x0800a9b0
 80098e8:	0800a775 	.word	0x0800a775
 80098ec:	0800a85c 	.word	0x0800a85c

080098f0 <__lshift>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	460c      	mov	r4, r1
 80098f6:	6849      	ldr	r1, [r1, #4]
 80098f8:	6923      	ldr	r3, [r4, #16]
 80098fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098fe:	68a3      	ldr	r3, [r4, #8]
 8009900:	4607      	mov	r7, r0
 8009902:	4691      	mov	r9, r2
 8009904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009908:	f108 0601 	add.w	r6, r8, #1
 800990c:	42b3      	cmp	r3, r6
 800990e:	db0b      	blt.n	8009928 <__lshift+0x38>
 8009910:	4638      	mov	r0, r7
 8009912:	f7ff fddb 	bl	80094cc <_Balloc>
 8009916:	4605      	mov	r5, r0
 8009918:	b948      	cbnz	r0, 800992e <__lshift+0x3e>
 800991a:	4602      	mov	r2, r0
 800991c:	4b28      	ldr	r3, [pc, #160]	; (80099c0 <__lshift+0xd0>)
 800991e:	4829      	ldr	r0, [pc, #164]	; (80099c4 <__lshift+0xd4>)
 8009920:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009924:	f000 fc8a 	bl	800a23c <__assert_func>
 8009928:	3101      	adds	r1, #1
 800992a:	005b      	lsls	r3, r3, #1
 800992c:	e7ee      	b.n	800990c <__lshift+0x1c>
 800992e:	2300      	movs	r3, #0
 8009930:	f100 0114 	add.w	r1, r0, #20
 8009934:	f100 0210 	add.w	r2, r0, #16
 8009938:	4618      	mov	r0, r3
 800993a:	4553      	cmp	r3, sl
 800993c:	db33      	blt.n	80099a6 <__lshift+0xb6>
 800993e:	6920      	ldr	r0, [r4, #16]
 8009940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009944:	f104 0314 	add.w	r3, r4, #20
 8009948:	f019 091f 	ands.w	r9, r9, #31
 800994c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009950:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009954:	d02b      	beq.n	80099ae <__lshift+0xbe>
 8009956:	f1c9 0e20 	rsb	lr, r9, #32
 800995a:	468a      	mov	sl, r1
 800995c:	2200      	movs	r2, #0
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	fa00 f009 	lsl.w	r0, r0, r9
 8009964:	4302      	orrs	r2, r0
 8009966:	f84a 2b04 	str.w	r2, [sl], #4
 800996a:	f853 2b04 	ldr.w	r2, [r3], #4
 800996e:	459c      	cmp	ip, r3
 8009970:	fa22 f20e 	lsr.w	r2, r2, lr
 8009974:	d8f3      	bhi.n	800995e <__lshift+0x6e>
 8009976:	ebac 0304 	sub.w	r3, ip, r4
 800997a:	3b15      	subs	r3, #21
 800997c:	f023 0303 	bic.w	r3, r3, #3
 8009980:	3304      	adds	r3, #4
 8009982:	f104 0015 	add.w	r0, r4, #21
 8009986:	4584      	cmp	ip, r0
 8009988:	bf38      	it	cc
 800998a:	2304      	movcc	r3, #4
 800998c:	50ca      	str	r2, [r1, r3]
 800998e:	b10a      	cbz	r2, 8009994 <__lshift+0xa4>
 8009990:	f108 0602 	add.w	r6, r8, #2
 8009994:	3e01      	subs	r6, #1
 8009996:	4638      	mov	r0, r7
 8009998:	612e      	str	r6, [r5, #16]
 800999a:	4621      	mov	r1, r4
 800999c:	f7ff fdd6 	bl	800954c <_Bfree>
 80099a0:	4628      	mov	r0, r5
 80099a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80099aa:	3301      	adds	r3, #1
 80099ac:	e7c5      	b.n	800993a <__lshift+0x4a>
 80099ae:	3904      	subs	r1, #4
 80099b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80099b8:	459c      	cmp	ip, r3
 80099ba:	d8f9      	bhi.n	80099b0 <__lshift+0xc0>
 80099bc:	e7ea      	b.n	8009994 <__lshift+0xa4>
 80099be:	bf00      	nop
 80099c0:	0800a7eb 	.word	0x0800a7eb
 80099c4:	0800a85c 	.word	0x0800a85c

080099c8 <__mcmp>:
 80099c8:	b530      	push	{r4, r5, lr}
 80099ca:	6902      	ldr	r2, [r0, #16]
 80099cc:	690c      	ldr	r4, [r1, #16]
 80099ce:	1b12      	subs	r2, r2, r4
 80099d0:	d10e      	bne.n	80099f0 <__mcmp+0x28>
 80099d2:	f100 0314 	add.w	r3, r0, #20
 80099d6:	3114      	adds	r1, #20
 80099d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099e8:	42a5      	cmp	r5, r4
 80099ea:	d003      	beq.n	80099f4 <__mcmp+0x2c>
 80099ec:	d305      	bcc.n	80099fa <__mcmp+0x32>
 80099ee:	2201      	movs	r2, #1
 80099f0:	4610      	mov	r0, r2
 80099f2:	bd30      	pop	{r4, r5, pc}
 80099f4:	4283      	cmp	r3, r0
 80099f6:	d3f3      	bcc.n	80099e0 <__mcmp+0x18>
 80099f8:	e7fa      	b.n	80099f0 <__mcmp+0x28>
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099fe:	e7f7      	b.n	80099f0 <__mcmp+0x28>

08009a00 <__mdiff>:
 8009a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	460c      	mov	r4, r1
 8009a06:	4606      	mov	r6, r0
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	4617      	mov	r7, r2
 8009a0e:	f7ff ffdb 	bl	80099c8 <__mcmp>
 8009a12:	1e05      	subs	r5, r0, #0
 8009a14:	d110      	bne.n	8009a38 <__mdiff+0x38>
 8009a16:	4629      	mov	r1, r5
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7ff fd57 	bl	80094cc <_Balloc>
 8009a1e:	b930      	cbnz	r0, 8009a2e <__mdiff+0x2e>
 8009a20:	4b39      	ldr	r3, [pc, #228]	; (8009b08 <__mdiff+0x108>)
 8009a22:	4602      	mov	r2, r0
 8009a24:	f240 2132 	movw	r1, #562	; 0x232
 8009a28:	4838      	ldr	r0, [pc, #224]	; (8009b0c <__mdiff+0x10c>)
 8009a2a:	f000 fc07 	bl	800a23c <__assert_func>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	bfa4      	itt	ge
 8009a3a:	463b      	movge	r3, r7
 8009a3c:	4627      	movge	r7, r4
 8009a3e:	4630      	mov	r0, r6
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	bfa6      	itte	ge
 8009a44:	461c      	movge	r4, r3
 8009a46:	2500      	movge	r5, #0
 8009a48:	2501      	movlt	r5, #1
 8009a4a:	f7ff fd3f 	bl	80094cc <_Balloc>
 8009a4e:	b920      	cbnz	r0, 8009a5a <__mdiff+0x5a>
 8009a50:	4b2d      	ldr	r3, [pc, #180]	; (8009b08 <__mdiff+0x108>)
 8009a52:	4602      	mov	r2, r0
 8009a54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a58:	e7e6      	b.n	8009a28 <__mdiff+0x28>
 8009a5a:	693e      	ldr	r6, [r7, #16]
 8009a5c:	60c5      	str	r5, [r0, #12]
 8009a5e:	6925      	ldr	r5, [r4, #16]
 8009a60:	f107 0114 	add.w	r1, r7, #20
 8009a64:	f104 0914 	add.w	r9, r4, #20
 8009a68:	f100 0e14 	add.w	lr, r0, #20
 8009a6c:	f107 0210 	add.w	r2, r7, #16
 8009a70:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009a74:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009a78:	46f2      	mov	sl, lr
 8009a7a:	2700      	movs	r7, #0
 8009a7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a84:	fa1f f883 	uxth.w	r8, r3
 8009a88:	fa17 f78b 	uxtah	r7, r7, fp
 8009a8c:	0c1b      	lsrs	r3, r3, #16
 8009a8e:	eba7 0808 	sub.w	r8, r7, r8
 8009a92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a9a:	fa1f f888 	uxth.w	r8, r8
 8009a9e:	141f      	asrs	r7, r3, #16
 8009aa0:	454d      	cmp	r5, r9
 8009aa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009aa6:	f84a 3b04 	str.w	r3, [sl], #4
 8009aaa:	d8e7      	bhi.n	8009a7c <__mdiff+0x7c>
 8009aac:	1b2b      	subs	r3, r5, r4
 8009aae:	3b15      	subs	r3, #21
 8009ab0:	f023 0303 	bic.w	r3, r3, #3
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	3415      	adds	r4, #21
 8009ab8:	42a5      	cmp	r5, r4
 8009aba:	bf38      	it	cc
 8009abc:	2304      	movcc	r3, #4
 8009abe:	4419      	add	r1, r3
 8009ac0:	4473      	add	r3, lr
 8009ac2:	469e      	mov	lr, r3
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	4565      	cmp	r5, ip
 8009ac8:	d30e      	bcc.n	8009ae8 <__mdiff+0xe8>
 8009aca:	f10c 0203 	add.w	r2, ip, #3
 8009ace:	1a52      	subs	r2, r2, r1
 8009ad0:	f022 0203 	bic.w	r2, r2, #3
 8009ad4:	3903      	subs	r1, #3
 8009ad6:	458c      	cmp	ip, r1
 8009ad8:	bf38      	it	cc
 8009ada:	2200      	movcc	r2, #0
 8009adc:	441a      	add	r2, r3
 8009ade:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ae2:	b17b      	cbz	r3, 8009b04 <__mdiff+0x104>
 8009ae4:	6106      	str	r6, [r0, #16]
 8009ae6:	e7a5      	b.n	8009a34 <__mdiff+0x34>
 8009ae8:	f855 8b04 	ldr.w	r8, [r5], #4
 8009aec:	fa17 f488 	uxtah	r4, r7, r8
 8009af0:	1422      	asrs	r2, r4, #16
 8009af2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009af6:	b2a4      	uxth	r4, r4
 8009af8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009afc:	f84e 4b04 	str.w	r4, [lr], #4
 8009b00:	1417      	asrs	r7, r2, #16
 8009b02:	e7e0      	b.n	8009ac6 <__mdiff+0xc6>
 8009b04:	3e01      	subs	r6, #1
 8009b06:	e7ea      	b.n	8009ade <__mdiff+0xde>
 8009b08:	0800a7eb 	.word	0x0800a7eb
 8009b0c:	0800a85c 	.word	0x0800a85c

08009b10 <__d2b>:
 8009b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b14:	4689      	mov	r9, r1
 8009b16:	2101      	movs	r1, #1
 8009b18:	ec57 6b10 	vmov	r6, r7, d0
 8009b1c:	4690      	mov	r8, r2
 8009b1e:	f7ff fcd5 	bl	80094cc <_Balloc>
 8009b22:	4604      	mov	r4, r0
 8009b24:	b930      	cbnz	r0, 8009b34 <__d2b+0x24>
 8009b26:	4602      	mov	r2, r0
 8009b28:	4b25      	ldr	r3, [pc, #148]	; (8009bc0 <__d2b+0xb0>)
 8009b2a:	4826      	ldr	r0, [pc, #152]	; (8009bc4 <__d2b+0xb4>)
 8009b2c:	f240 310a 	movw	r1, #778	; 0x30a
 8009b30:	f000 fb84 	bl	800a23c <__assert_func>
 8009b34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009b38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b3c:	bb35      	cbnz	r5, 8009b8c <__d2b+0x7c>
 8009b3e:	2e00      	cmp	r6, #0
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	d028      	beq.n	8009b96 <__d2b+0x86>
 8009b44:	4668      	mov	r0, sp
 8009b46:	9600      	str	r6, [sp, #0]
 8009b48:	f7ff fd8c 	bl	8009664 <__lo0bits>
 8009b4c:	9900      	ldr	r1, [sp, #0]
 8009b4e:	b300      	cbz	r0, 8009b92 <__d2b+0x82>
 8009b50:	9a01      	ldr	r2, [sp, #4]
 8009b52:	f1c0 0320 	rsb	r3, r0, #32
 8009b56:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5a:	430b      	orrs	r3, r1
 8009b5c:	40c2      	lsrs	r2, r0
 8009b5e:	6163      	str	r3, [r4, #20]
 8009b60:	9201      	str	r2, [sp, #4]
 8009b62:	9b01      	ldr	r3, [sp, #4]
 8009b64:	61a3      	str	r3, [r4, #24]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bf14      	ite	ne
 8009b6a:	2202      	movne	r2, #2
 8009b6c:	2201      	moveq	r2, #1
 8009b6e:	6122      	str	r2, [r4, #16]
 8009b70:	b1d5      	cbz	r5, 8009ba8 <__d2b+0x98>
 8009b72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b76:	4405      	add	r5, r0
 8009b78:	f8c9 5000 	str.w	r5, [r9]
 8009b7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b80:	f8c8 0000 	str.w	r0, [r8]
 8009b84:	4620      	mov	r0, r4
 8009b86:	b003      	add	sp, #12
 8009b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b90:	e7d5      	b.n	8009b3e <__d2b+0x2e>
 8009b92:	6161      	str	r1, [r4, #20]
 8009b94:	e7e5      	b.n	8009b62 <__d2b+0x52>
 8009b96:	a801      	add	r0, sp, #4
 8009b98:	f7ff fd64 	bl	8009664 <__lo0bits>
 8009b9c:	9b01      	ldr	r3, [sp, #4]
 8009b9e:	6163      	str	r3, [r4, #20]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	6122      	str	r2, [r4, #16]
 8009ba4:	3020      	adds	r0, #32
 8009ba6:	e7e3      	b.n	8009b70 <__d2b+0x60>
 8009ba8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bb0:	f8c9 0000 	str.w	r0, [r9]
 8009bb4:	6918      	ldr	r0, [r3, #16]
 8009bb6:	f7ff fd35 	bl	8009624 <__hi0bits>
 8009bba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bbe:	e7df      	b.n	8009b80 <__d2b+0x70>
 8009bc0:	0800a7eb 	.word	0x0800a7eb
 8009bc4:	0800a85c 	.word	0x0800a85c

08009bc8 <_calloc_r>:
 8009bc8:	b513      	push	{r0, r1, r4, lr}
 8009bca:	434a      	muls	r2, r1
 8009bcc:	4611      	mov	r1, r2
 8009bce:	9201      	str	r2, [sp, #4]
 8009bd0:	f000 f85a 	bl	8009c88 <_malloc_r>
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	b118      	cbz	r0, 8009be0 <_calloc_r+0x18>
 8009bd8:	9a01      	ldr	r2, [sp, #4]
 8009bda:	2100      	movs	r1, #0
 8009bdc:	f7fe f86e 	bl	8007cbc <memset>
 8009be0:	4620      	mov	r0, r4
 8009be2:	b002      	add	sp, #8
 8009be4:	bd10      	pop	{r4, pc}
	...

08009be8 <_free_r>:
 8009be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bea:	2900      	cmp	r1, #0
 8009bec:	d048      	beq.n	8009c80 <_free_r+0x98>
 8009bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf2:	9001      	str	r0, [sp, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f1a1 0404 	sub.w	r4, r1, #4
 8009bfa:	bfb8      	it	lt
 8009bfc:	18e4      	addlt	r4, r4, r3
 8009bfe:	f000 fca7 	bl	800a550 <__malloc_lock>
 8009c02:	4a20      	ldr	r2, [pc, #128]	; (8009c84 <_free_r+0x9c>)
 8009c04:	9801      	ldr	r0, [sp, #4]
 8009c06:	6813      	ldr	r3, [r2, #0]
 8009c08:	4615      	mov	r5, r2
 8009c0a:	b933      	cbnz	r3, 8009c1a <_free_r+0x32>
 8009c0c:	6063      	str	r3, [r4, #4]
 8009c0e:	6014      	str	r4, [r2, #0]
 8009c10:	b003      	add	sp, #12
 8009c12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c16:	f000 bca1 	b.w	800a55c <__malloc_unlock>
 8009c1a:	42a3      	cmp	r3, r4
 8009c1c:	d90b      	bls.n	8009c36 <_free_r+0x4e>
 8009c1e:	6821      	ldr	r1, [r4, #0]
 8009c20:	1862      	adds	r2, r4, r1
 8009c22:	4293      	cmp	r3, r2
 8009c24:	bf04      	itt	eq
 8009c26:	681a      	ldreq	r2, [r3, #0]
 8009c28:	685b      	ldreq	r3, [r3, #4]
 8009c2a:	6063      	str	r3, [r4, #4]
 8009c2c:	bf04      	itt	eq
 8009c2e:	1852      	addeq	r2, r2, r1
 8009c30:	6022      	streq	r2, [r4, #0]
 8009c32:	602c      	str	r4, [r5, #0]
 8009c34:	e7ec      	b.n	8009c10 <_free_r+0x28>
 8009c36:	461a      	mov	r2, r3
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	b10b      	cbz	r3, 8009c40 <_free_r+0x58>
 8009c3c:	42a3      	cmp	r3, r4
 8009c3e:	d9fa      	bls.n	8009c36 <_free_r+0x4e>
 8009c40:	6811      	ldr	r1, [r2, #0]
 8009c42:	1855      	adds	r5, r2, r1
 8009c44:	42a5      	cmp	r5, r4
 8009c46:	d10b      	bne.n	8009c60 <_free_r+0x78>
 8009c48:	6824      	ldr	r4, [r4, #0]
 8009c4a:	4421      	add	r1, r4
 8009c4c:	1854      	adds	r4, r2, r1
 8009c4e:	42a3      	cmp	r3, r4
 8009c50:	6011      	str	r1, [r2, #0]
 8009c52:	d1dd      	bne.n	8009c10 <_free_r+0x28>
 8009c54:	681c      	ldr	r4, [r3, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	6053      	str	r3, [r2, #4]
 8009c5a:	4421      	add	r1, r4
 8009c5c:	6011      	str	r1, [r2, #0]
 8009c5e:	e7d7      	b.n	8009c10 <_free_r+0x28>
 8009c60:	d902      	bls.n	8009c68 <_free_r+0x80>
 8009c62:	230c      	movs	r3, #12
 8009c64:	6003      	str	r3, [r0, #0]
 8009c66:	e7d3      	b.n	8009c10 <_free_r+0x28>
 8009c68:	6825      	ldr	r5, [r4, #0]
 8009c6a:	1961      	adds	r1, r4, r5
 8009c6c:	428b      	cmp	r3, r1
 8009c6e:	bf04      	itt	eq
 8009c70:	6819      	ldreq	r1, [r3, #0]
 8009c72:	685b      	ldreq	r3, [r3, #4]
 8009c74:	6063      	str	r3, [r4, #4]
 8009c76:	bf04      	itt	eq
 8009c78:	1949      	addeq	r1, r1, r5
 8009c7a:	6021      	streq	r1, [r4, #0]
 8009c7c:	6054      	str	r4, [r2, #4]
 8009c7e:	e7c7      	b.n	8009c10 <_free_r+0x28>
 8009c80:	b003      	add	sp, #12
 8009c82:	bd30      	pop	{r4, r5, pc}
 8009c84:	20001ac8 	.word	0x20001ac8

08009c88 <_malloc_r>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	1ccd      	adds	r5, r1, #3
 8009c8c:	f025 0503 	bic.w	r5, r5, #3
 8009c90:	3508      	adds	r5, #8
 8009c92:	2d0c      	cmp	r5, #12
 8009c94:	bf38      	it	cc
 8009c96:	250c      	movcc	r5, #12
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	db01      	blt.n	8009ca2 <_malloc_r+0x1a>
 8009c9e:	42a9      	cmp	r1, r5
 8009ca0:	d903      	bls.n	8009caa <_malloc_r+0x22>
 8009ca2:	230c      	movs	r3, #12
 8009ca4:	6033      	str	r3, [r6, #0]
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009caa:	f000 fc51 	bl	800a550 <__malloc_lock>
 8009cae:	4921      	ldr	r1, [pc, #132]	; (8009d34 <_malloc_r+0xac>)
 8009cb0:	680a      	ldr	r2, [r1, #0]
 8009cb2:	4614      	mov	r4, r2
 8009cb4:	b99c      	cbnz	r4, 8009cde <_malloc_r+0x56>
 8009cb6:	4f20      	ldr	r7, [pc, #128]	; (8009d38 <_malloc_r+0xb0>)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	b923      	cbnz	r3, 8009cc6 <_malloc_r+0x3e>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f000 f996 	bl	8009ff0 <_sbrk_r>
 8009cc4:	6038      	str	r0, [r7, #0]
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f000 f991 	bl	8009ff0 <_sbrk_r>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	d123      	bne.n	8009d1a <_malloc_r+0x92>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	6033      	str	r3, [r6, #0]
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f000 fc40 	bl	800a55c <__malloc_unlock>
 8009cdc:	e7e3      	b.n	8009ca6 <_malloc_r+0x1e>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	1b5b      	subs	r3, r3, r5
 8009ce2:	d417      	bmi.n	8009d14 <_malloc_r+0x8c>
 8009ce4:	2b0b      	cmp	r3, #11
 8009ce6:	d903      	bls.n	8009cf0 <_malloc_r+0x68>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	441c      	add	r4, r3
 8009cec:	6025      	str	r5, [r4, #0]
 8009cee:	e004      	b.n	8009cfa <_malloc_r+0x72>
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	42a2      	cmp	r2, r4
 8009cf4:	bf0c      	ite	eq
 8009cf6:	600b      	streq	r3, [r1, #0]
 8009cf8:	6053      	strne	r3, [r2, #4]
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f000 fc2e 	bl	800a55c <__malloc_unlock>
 8009d00:	f104 000b 	add.w	r0, r4, #11
 8009d04:	1d23      	adds	r3, r4, #4
 8009d06:	f020 0007 	bic.w	r0, r0, #7
 8009d0a:	1ac2      	subs	r2, r0, r3
 8009d0c:	d0cc      	beq.n	8009ca8 <_malloc_r+0x20>
 8009d0e:	1a1b      	subs	r3, r3, r0
 8009d10:	50a3      	str	r3, [r4, r2]
 8009d12:	e7c9      	b.n	8009ca8 <_malloc_r+0x20>
 8009d14:	4622      	mov	r2, r4
 8009d16:	6864      	ldr	r4, [r4, #4]
 8009d18:	e7cc      	b.n	8009cb4 <_malloc_r+0x2c>
 8009d1a:	1cc4      	adds	r4, r0, #3
 8009d1c:	f024 0403 	bic.w	r4, r4, #3
 8009d20:	42a0      	cmp	r0, r4
 8009d22:	d0e3      	beq.n	8009cec <_malloc_r+0x64>
 8009d24:	1a21      	subs	r1, r4, r0
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 f962 	bl	8009ff0 <_sbrk_r>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d1dd      	bne.n	8009cec <_malloc_r+0x64>
 8009d30:	e7cf      	b.n	8009cd2 <_malloc_r+0x4a>
 8009d32:	bf00      	nop
 8009d34:	20001ac8 	.word	0x20001ac8
 8009d38:	20001acc 	.word	0x20001acc

08009d3c <__sfputc_r>:
 8009d3c:	6893      	ldr	r3, [r2, #8]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	b410      	push	{r4}
 8009d44:	6093      	str	r3, [r2, #8]
 8009d46:	da08      	bge.n	8009d5a <__sfputc_r+0x1e>
 8009d48:	6994      	ldr	r4, [r2, #24]
 8009d4a:	42a3      	cmp	r3, r4
 8009d4c:	db01      	blt.n	8009d52 <__sfputc_r+0x16>
 8009d4e:	290a      	cmp	r1, #10
 8009d50:	d103      	bne.n	8009d5a <__sfputc_r+0x1e>
 8009d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d56:	f000 b99f 	b.w	800a098 <__swbuf_r>
 8009d5a:	6813      	ldr	r3, [r2, #0]
 8009d5c:	1c58      	adds	r0, r3, #1
 8009d5e:	6010      	str	r0, [r2, #0]
 8009d60:	7019      	strb	r1, [r3, #0]
 8009d62:	4608      	mov	r0, r1
 8009d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <__sfputs_r>:
 8009d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6c:	4606      	mov	r6, r0
 8009d6e:	460f      	mov	r7, r1
 8009d70:	4614      	mov	r4, r2
 8009d72:	18d5      	adds	r5, r2, r3
 8009d74:	42ac      	cmp	r4, r5
 8009d76:	d101      	bne.n	8009d7c <__sfputs_r+0x12>
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e007      	b.n	8009d8c <__sfputs_r+0x22>
 8009d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d80:	463a      	mov	r2, r7
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff ffda 	bl	8009d3c <__sfputc_r>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	d1f3      	bne.n	8009d74 <__sfputs_r+0xa>
 8009d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d90 <_vfiprintf_r>:
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	460d      	mov	r5, r1
 8009d96:	b09d      	sub	sp, #116	; 0x74
 8009d98:	4614      	mov	r4, r2
 8009d9a:	4698      	mov	r8, r3
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	b118      	cbz	r0, 8009da8 <_vfiprintf_r+0x18>
 8009da0:	6983      	ldr	r3, [r0, #24]
 8009da2:	b90b      	cbnz	r3, 8009da8 <_vfiprintf_r+0x18>
 8009da4:	f7ff fae4 	bl	8009370 <__sinit>
 8009da8:	4b89      	ldr	r3, [pc, #548]	; (8009fd0 <_vfiprintf_r+0x240>)
 8009daa:	429d      	cmp	r5, r3
 8009dac:	d11b      	bne.n	8009de6 <_vfiprintf_r+0x56>
 8009dae:	6875      	ldr	r5, [r6, #4]
 8009db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009db2:	07d9      	lsls	r1, r3, #31
 8009db4:	d405      	bmi.n	8009dc2 <_vfiprintf_r+0x32>
 8009db6:	89ab      	ldrh	r3, [r5, #12]
 8009db8:	059a      	lsls	r2, r3, #22
 8009dba:	d402      	bmi.n	8009dc2 <_vfiprintf_r+0x32>
 8009dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dbe:	f7ff fb7a 	bl	80094b6 <__retarget_lock_acquire_recursive>
 8009dc2:	89ab      	ldrh	r3, [r5, #12]
 8009dc4:	071b      	lsls	r3, r3, #28
 8009dc6:	d501      	bpl.n	8009dcc <_vfiprintf_r+0x3c>
 8009dc8:	692b      	ldr	r3, [r5, #16]
 8009dca:	b9eb      	cbnz	r3, 8009e08 <_vfiprintf_r+0x78>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f000 f9c6 	bl	800a160 <__swsetup_r>
 8009dd4:	b1c0      	cbz	r0, 8009e08 <_vfiprintf_r+0x78>
 8009dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dd8:	07dc      	lsls	r4, r3, #31
 8009dda:	d50e      	bpl.n	8009dfa <_vfiprintf_r+0x6a>
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009de0:	b01d      	add	sp, #116	; 0x74
 8009de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de6:	4b7b      	ldr	r3, [pc, #492]	; (8009fd4 <_vfiprintf_r+0x244>)
 8009de8:	429d      	cmp	r5, r3
 8009dea:	d101      	bne.n	8009df0 <_vfiprintf_r+0x60>
 8009dec:	68b5      	ldr	r5, [r6, #8]
 8009dee:	e7df      	b.n	8009db0 <_vfiprintf_r+0x20>
 8009df0:	4b79      	ldr	r3, [pc, #484]	; (8009fd8 <_vfiprintf_r+0x248>)
 8009df2:	429d      	cmp	r5, r3
 8009df4:	bf08      	it	eq
 8009df6:	68f5      	ldreq	r5, [r6, #12]
 8009df8:	e7da      	b.n	8009db0 <_vfiprintf_r+0x20>
 8009dfa:	89ab      	ldrh	r3, [r5, #12]
 8009dfc:	0598      	lsls	r0, r3, #22
 8009dfe:	d4ed      	bmi.n	8009ddc <_vfiprintf_r+0x4c>
 8009e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e02:	f7ff fb59 	bl	80094b8 <__retarget_lock_release_recursive>
 8009e06:	e7e9      	b.n	8009ddc <_vfiprintf_r+0x4c>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0c:	2320      	movs	r3, #32
 8009e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e16:	2330      	movs	r3, #48	; 0x30
 8009e18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fdc <_vfiprintf_r+0x24c>
 8009e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e20:	f04f 0901 	mov.w	r9, #1
 8009e24:	4623      	mov	r3, r4
 8009e26:	469a      	mov	sl, r3
 8009e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e2c:	b10a      	cbz	r2, 8009e32 <_vfiprintf_r+0xa2>
 8009e2e:	2a25      	cmp	r2, #37	; 0x25
 8009e30:	d1f9      	bne.n	8009e26 <_vfiprintf_r+0x96>
 8009e32:	ebba 0b04 	subs.w	fp, sl, r4
 8009e36:	d00b      	beq.n	8009e50 <_vfiprintf_r+0xc0>
 8009e38:	465b      	mov	r3, fp
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f7ff ff93 	bl	8009d6a <__sfputs_r>
 8009e44:	3001      	adds	r0, #1
 8009e46:	f000 80aa 	beq.w	8009f9e <_vfiprintf_r+0x20e>
 8009e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e4c:	445a      	add	r2, fp
 8009e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8009e50:	f89a 3000 	ldrb.w	r3, [sl]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 80a2 	beq.w	8009f9e <_vfiprintf_r+0x20e>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e64:	f10a 0a01 	add.w	sl, sl, #1
 8009e68:	9304      	str	r3, [sp, #16]
 8009e6a:	9307      	str	r3, [sp, #28]
 8009e6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e70:	931a      	str	r3, [sp, #104]	; 0x68
 8009e72:	4654      	mov	r4, sl
 8009e74:	2205      	movs	r2, #5
 8009e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7a:	4858      	ldr	r0, [pc, #352]	; (8009fdc <_vfiprintf_r+0x24c>)
 8009e7c:	f7f6 f9b0 	bl	80001e0 <memchr>
 8009e80:	9a04      	ldr	r2, [sp, #16]
 8009e82:	b9d8      	cbnz	r0, 8009ebc <_vfiprintf_r+0x12c>
 8009e84:	06d1      	lsls	r1, r2, #27
 8009e86:	bf44      	itt	mi
 8009e88:	2320      	movmi	r3, #32
 8009e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e8e:	0713      	lsls	r3, r2, #28
 8009e90:	bf44      	itt	mi
 8009e92:	232b      	movmi	r3, #43	; 0x2b
 8009e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e98:	f89a 3000 	ldrb.w	r3, [sl]
 8009e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e9e:	d015      	beq.n	8009ecc <_vfiprintf_r+0x13c>
 8009ea0:	9a07      	ldr	r2, [sp, #28]
 8009ea2:	4654      	mov	r4, sl
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	f04f 0c0a 	mov.w	ip, #10
 8009eaa:	4621      	mov	r1, r4
 8009eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb0:	3b30      	subs	r3, #48	; 0x30
 8009eb2:	2b09      	cmp	r3, #9
 8009eb4:	d94e      	bls.n	8009f54 <_vfiprintf_r+0x1c4>
 8009eb6:	b1b0      	cbz	r0, 8009ee6 <_vfiprintf_r+0x156>
 8009eb8:	9207      	str	r2, [sp, #28]
 8009eba:	e014      	b.n	8009ee6 <_vfiprintf_r+0x156>
 8009ebc:	eba0 0308 	sub.w	r3, r0, r8
 8009ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	46a2      	mov	sl, r4
 8009eca:	e7d2      	b.n	8009e72 <_vfiprintf_r+0xe2>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	1d19      	adds	r1, r3, #4
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	9103      	str	r1, [sp, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	bfbb      	ittet	lt
 8009ed8:	425b      	neglt	r3, r3
 8009eda:	f042 0202 	orrlt.w	r2, r2, #2
 8009ede:	9307      	strge	r3, [sp, #28]
 8009ee0:	9307      	strlt	r3, [sp, #28]
 8009ee2:	bfb8      	it	lt
 8009ee4:	9204      	strlt	r2, [sp, #16]
 8009ee6:	7823      	ldrb	r3, [r4, #0]
 8009ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8009eea:	d10c      	bne.n	8009f06 <_vfiprintf_r+0x176>
 8009eec:	7863      	ldrb	r3, [r4, #1]
 8009eee:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef0:	d135      	bne.n	8009f5e <_vfiprintf_r+0x1ce>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	1d1a      	adds	r2, r3, #4
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	9203      	str	r2, [sp, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bfb8      	it	lt
 8009efe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f02:	3402      	adds	r4, #2
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fec <_vfiprintf_r+0x25c>
 8009f0a:	7821      	ldrb	r1, [r4, #0]
 8009f0c:	2203      	movs	r2, #3
 8009f0e:	4650      	mov	r0, sl
 8009f10:	f7f6 f966 	bl	80001e0 <memchr>
 8009f14:	b140      	cbz	r0, 8009f28 <_vfiprintf_r+0x198>
 8009f16:	2340      	movs	r3, #64	; 0x40
 8009f18:	eba0 000a 	sub.w	r0, r0, sl
 8009f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8009f20:	9b04      	ldr	r3, [sp, #16]
 8009f22:	4303      	orrs	r3, r0
 8009f24:	3401      	adds	r4, #1
 8009f26:	9304      	str	r3, [sp, #16]
 8009f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2c:	482c      	ldr	r0, [pc, #176]	; (8009fe0 <_vfiprintf_r+0x250>)
 8009f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f32:	2206      	movs	r2, #6
 8009f34:	f7f6 f954 	bl	80001e0 <memchr>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d03f      	beq.n	8009fbc <_vfiprintf_r+0x22c>
 8009f3c:	4b29      	ldr	r3, [pc, #164]	; (8009fe4 <_vfiprintf_r+0x254>)
 8009f3e:	bb1b      	cbnz	r3, 8009f88 <_vfiprintf_r+0x1f8>
 8009f40:	9b03      	ldr	r3, [sp, #12]
 8009f42:	3307      	adds	r3, #7
 8009f44:	f023 0307 	bic.w	r3, r3, #7
 8009f48:	3308      	adds	r3, #8
 8009f4a:	9303      	str	r3, [sp, #12]
 8009f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4e:	443b      	add	r3, r7
 8009f50:	9309      	str	r3, [sp, #36]	; 0x24
 8009f52:	e767      	b.n	8009e24 <_vfiprintf_r+0x94>
 8009f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f58:	460c      	mov	r4, r1
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	e7a5      	b.n	8009eaa <_vfiprintf_r+0x11a>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	3401      	adds	r4, #1
 8009f62:	9305      	str	r3, [sp, #20]
 8009f64:	4619      	mov	r1, r3
 8009f66:	f04f 0c0a 	mov.w	ip, #10
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f70:	3a30      	subs	r2, #48	; 0x30
 8009f72:	2a09      	cmp	r2, #9
 8009f74:	d903      	bls.n	8009f7e <_vfiprintf_r+0x1ee>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0c5      	beq.n	8009f06 <_vfiprintf_r+0x176>
 8009f7a:	9105      	str	r1, [sp, #20]
 8009f7c:	e7c3      	b.n	8009f06 <_vfiprintf_r+0x176>
 8009f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f82:	4604      	mov	r4, r0
 8009f84:	2301      	movs	r3, #1
 8009f86:	e7f0      	b.n	8009f6a <_vfiprintf_r+0x1da>
 8009f88:	ab03      	add	r3, sp, #12
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <_vfiprintf_r+0x258>)
 8009f90:	a904      	add	r1, sp, #16
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7fd ff3a 	bl	8007e0c <_printf_float>
 8009f98:	4607      	mov	r7, r0
 8009f9a:	1c78      	adds	r0, r7, #1
 8009f9c:	d1d6      	bne.n	8009f4c <_vfiprintf_r+0x1bc>
 8009f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fa0:	07d9      	lsls	r1, r3, #31
 8009fa2:	d405      	bmi.n	8009fb0 <_vfiprintf_r+0x220>
 8009fa4:	89ab      	ldrh	r3, [r5, #12]
 8009fa6:	059a      	lsls	r2, r3, #22
 8009fa8:	d402      	bmi.n	8009fb0 <_vfiprintf_r+0x220>
 8009faa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fac:	f7ff fa84 	bl	80094b8 <__retarget_lock_release_recursive>
 8009fb0:	89ab      	ldrh	r3, [r5, #12]
 8009fb2:	065b      	lsls	r3, r3, #25
 8009fb4:	f53f af12 	bmi.w	8009ddc <_vfiprintf_r+0x4c>
 8009fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fba:	e711      	b.n	8009de0 <_vfiprintf_r+0x50>
 8009fbc:	ab03      	add	r3, sp, #12
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <_vfiprintf_r+0x258>)
 8009fc4:	a904      	add	r1, sp, #16
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7fe f9c4 	bl	8008354 <_printf_i>
 8009fcc:	e7e4      	b.n	8009f98 <_vfiprintf_r+0x208>
 8009fce:	bf00      	nop
 8009fd0:	0800a81c 	.word	0x0800a81c
 8009fd4:	0800a83c 	.word	0x0800a83c
 8009fd8:	0800a7fc 	.word	0x0800a7fc
 8009fdc:	0800a9bc 	.word	0x0800a9bc
 8009fe0:	0800a9c6 	.word	0x0800a9c6
 8009fe4:	08007e0d 	.word	0x08007e0d
 8009fe8:	08009d6b 	.word	0x08009d6b
 8009fec:	0800a9c2 	.word	0x0800a9c2

08009ff0 <_sbrk_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d06      	ldr	r5, [pc, #24]	; (800a00c <_sbrk_r+0x1c>)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	602b      	str	r3, [r5, #0]
 8009ffc:	f7f7 fb04 	bl	8001608 <_sbrk>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_sbrk_r+0x1a>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_sbrk_r+0x1a>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	20001c40 	.word	0x20001c40

0800a010 <__sread>:
 800a010:	b510      	push	{r4, lr}
 800a012:	460c      	mov	r4, r1
 800a014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a018:	f000 faa6 	bl	800a568 <_read_r>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	bfab      	itete	ge
 800a020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a022:	89a3      	ldrhlt	r3, [r4, #12]
 800a024:	181b      	addge	r3, r3, r0
 800a026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a02a:	bfac      	ite	ge
 800a02c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a02e:	81a3      	strhlt	r3, [r4, #12]
 800a030:	bd10      	pop	{r4, pc}

0800a032 <__swrite>:
 800a032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a036:	461f      	mov	r7, r3
 800a038:	898b      	ldrh	r3, [r1, #12]
 800a03a:	05db      	lsls	r3, r3, #23
 800a03c:	4605      	mov	r5, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	4616      	mov	r6, r2
 800a042:	d505      	bpl.n	800a050 <__swrite+0x1e>
 800a044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a048:	2302      	movs	r3, #2
 800a04a:	2200      	movs	r2, #0
 800a04c:	f000 f9f8 	bl	800a440 <_lseek_r>
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	4632      	mov	r2, r6
 800a05e:	463b      	mov	r3, r7
 800a060:	4628      	mov	r0, r5
 800a062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a066:	f000 b869 	b.w	800a13c <_write_r>

0800a06a <__sseek>:
 800a06a:	b510      	push	{r4, lr}
 800a06c:	460c      	mov	r4, r1
 800a06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a072:	f000 f9e5 	bl	800a440 <_lseek_r>
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	bf15      	itete	ne
 800a07c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a07e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a086:	81a3      	strheq	r3, [r4, #12]
 800a088:	bf18      	it	ne
 800a08a:	81a3      	strhne	r3, [r4, #12]
 800a08c:	bd10      	pop	{r4, pc}

0800a08e <__sclose>:
 800a08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a092:	f000 b8f1 	b.w	800a278 <_close_r>
	...

0800a098 <__swbuf_r>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	460e      	mov	r6, r1
 800a09c:	4614      	mov	r4, r2
 800a09e:	4605      	mov	r5, r0
 800a0a0:	b118      	cbz	r0, 800a0aa <__swbuf_r+0x12>
 800a0a2:	6983      	ldr	r3, [r0, #24]
 800a0a4:	b90b      	cbnz	r3, 800a0aa <__swbuf_r+0x12>
 800a0a6:	f7ff f963 	bl	8009370 <__sinit>
 800a0aa:	4b21      	ldr	r3, [pc, #132]	; (800a130 <__swbuf_r+0x98>)
 800a0ac:	429c      	cmp	r4, r3
 800a0ae:	d12b      	bne.n	800a108 <__swbuf_r+0x70>
 800a0b0:	686c      	ldr	r4, [r5, #4]
 800a0b2:	69a3      	ldr	r3, [r4, #24]
 800a0b4:	60a3      	str	r3, [r4, #8]
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	071a      	lsls	r2, r3, #28
 800a0ba:	d52f      	bpl.n	800a11c <__swbuf_r+0x84>
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	b36b      	cbz	r3, 800a11c <__swbuf_r+0x84>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	6820      	ldr	r0, [r4, #0]
 800a0c4:	1ac0      	subs	r0, r0, r3
 800a0c6:	6963      	ldr	r3, [r4, #20]
 800a0c8:	b2f6      	uxtb	r6, r6
 800a0ca:	4283      	cmp	r3, r0
 800a0cc:	4637      	mov	r7, r6
 800a0ce:	dc04      	bgt.n	800a0da <__swbuf_r+0x42>
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 f966 	bl	800a3a4 <_fflush_r>
 800a0d8:	bb30      	cbnz	r0, 800a128 <__swbuf_r+0x90>
 800a0da:	68a3      	ldr	r3, [r4, #8]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	60a3      	str	r3, [r4, #8]
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	6022      	str	r2, [r4, #0]
 800a0e6:	701e      	strb	r6, [r3, #0]
 800a0e8:	6963      	ldr	r3, [r4, #20]
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	4283      	cmp	r3, r0
 800a0ee:	d004      	beq.n	800a0fa <__swbuf_r+0x62>
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	07db      	lsls	r3, r3, #31
 800a0f4:	d506      	bpl.n	800a104 <__swbuf_r+0x6c>
 800a0f6:	2e0a      	cmp	r6, #10
 800a0f8:	d104      	bne.n	800a104 <__swbuf_r+0x6c>
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 f951 	bl	800a3a4 <_fflush_r>
 800a102:	b988      	cbnz	r0, 800a128 <__swbuf_r+0x90>
 800a104:	4638      	mov	r0, r7
 800a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <__swbuf_r+0x9c>)
 800a10a:	429c      	cmp	r4, r3
 800a10c:	d101      	bne.n	800a112 <__swbuf_r+0x7a>
 800a10e:	68ac      	ldr	r4, [r5, #8]
 800a110:	e7cf      	b.n	800a0b2 <__swbuf_r+0x1a>
 800a112:	4b09      	ldr	r3, [pc, #36]	; (800a138 <__swbuf_r+0xa0>)
 800a114:	429c      	cmp	r4, r3
 800a116:	bf08      	it	eq
 800a118:	68ec      	ldreq	r4, [r5, #12]
 800a11a:	e7ca      	b.n	800a0b2 <__swbuf_r+0x1a>
 800a11c:	4621      	mov	r1, r4
 800a11e:	4628      	mov	r0, r5
 800a120:	f000 f81e 	bl	800a160 <__swsetup_r>
 800a124:	2800      	cmp	r0, #0
 800a126:	d0cb      	beq.n	800a0c0 <__swbuf_r+0x28>
 800a128:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a12c:	e7ea      	b.n	800a104 <__swbuf_r+0x6c>
 800a12e:	bf00      	nop
 800a130:	0800a81c 	.word	0x0800a81c
 800a134:	0800a83c 	.word	0x0800a83c
 800a138:	0800a7fc 	.word	0x0800a7fc

0800a13c <_write_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d07      	ldr	r5, [pc, #28]	; (800a15c <_write_r+0x20>)
 800a140:	4604      	mov	r4, r0
 800a142:	4608      	mov	r0, r1
 800a144:	4611      	mov	r1, r2
 800a146:	2200      	movs	r2, #0
 800a148:	602a      	str	r2, [r5, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f7f7 fa0b 	bl	8001566 <_write>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_write_r+0x1e>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_write_r+0x1e>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	20001c40 	.word	0x20001c40

0800a160 <__swsetup_r>:
 800a160:	4b32      	ldr	r3, [pc, #200]	; (800a22c <__swsetup_r+0xcc>)
 800a162:	b570      	push	{r4, r5, r6, lr}
 800a164:	681d      	ldr	r5, [r3, #0]
 800a166:	4606      	mov	r6, r0
 800a168:	460c      	mov	r4, r1
 800a16a:	b125      	cbz	r5, 800a176 <__swsetup_r+0x16>
 800a16c:	69ab      	ldr	r3, [r5, #24]
 800a16e:	b913      	cbnz	r3, 800a176 <__swsetup_r+0x16>
 800a170:	4628      	mov	r0, r5
 800a172:	f7ff f8fd 	bl	8009370 <__sinit>
 800a176:	4b2e      	ldr	r3, [pc, #184]	; (800a230 <__swsetup_r+0xd0>)
 800a178:	429c      	cmp	r4, r3
 800a17a:	d10f      	bne.n	800a19c <__swsetup_r+0x3c>
 800a17c:	686c      	ldr	r4, [r5, #4]
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a184:	0719      	lsls	r1, r3, #28
 800a186:	d42c      	bmi.n	800a1e2 <__swsetup_r+0x82>
 800a188:	06dd      	lsls	r5, r3, #27
 800a18a:	d411      	bmi.n	800a1b0 <__swsetup_r+0x50>
 800a18c:	2309      	movs	r3, #9
 800a18e:	6033      	str	r3, [r6, #0]
 800a190:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a194:	81a3      	strh	r3, [r4, #12]
 800a196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a19a:	e03e      	b.n	800a21a <__swsetup_r+0xba>
 800a19c:	4b25      	ldr	r3, [pc, #148]	; (800a234 <__swsetup_r+0xd4>)
 800a19e:	429c      	cmp	r4, r3
 800a1a0:	d101      	bne.n	800a1a6 <__swsetup_r+0x46>
 800a1a2:	68ac      	ldr	r4, [r5, #8]
 800a1a4:	e7eb      	b.n	800a17e <__swsetup_r+0x1e>
 800a1a6:	4b24      	ldr	r3, [pc, #144]	; (800a238 <__swsetup_r+0xd8>)
 800a1a8:	429c      	cmp	r4, r3
 800a1aa:	bf08      	it	eq
 800a1ac:	68ec      	ldreq	r4, [r5, #12]
 800a1ae:	e7e6      	b.n	800a17e <__swsetup_r+0x1e>
 800a1b0:	0758      	lsls	r0, r3, #29
 800a1b2:	d512      	bpl.n	800a1da <__swsetup_r+0x7a>
 800a1b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1b6:	b141      	cbz	r1, 800a1ca <__swsetup_r+0x6a>
 800a1b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1bc:	4299      	cmp	r1, r3
 800a1be:	d002      	beq.n	800a1c6 <__swsetup_r+0x66>
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff fd11 	bl	8009be8 <_free_r>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	6363      	str	r3, [r4, #52]	; 0x34
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	6063      	str	r3, [r4, #4]
 800a1d6:	6923      	ldr	r3, [r4, #16]
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	f043 0308 	orr.w	r3, r3, #8
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	6923      	ldr	r3, [r4, #16]
 800a1e4:	b94b      	cbnz	r3, 800a1fa <__swsetup_r+0x9a>
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f0:	d003      	beq.n	800a1fa <__swsetup_r+0x9a>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f000 f959 	bl	800a4ac <__smakebuf_r>
 800a1fa:	89a0      	ldrh	r0, [r4, #12]
 800a1fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a200:	f010 0301 	ands.w	r3, r0, #1
 800a204:	d00a      	beq.n	800a21c <__swsetup_r+0xbc>
 800a206:	2300      	movs	r3, #0
 800a208:	60a3      	str	r3, [r4, #8]
 800a20a:	6963      	ldr	r3, [r4, #20]
 800a20c:	425b      	negs	r3, r3
 800a20e:	61a3      	str	r3, [r4, #24]
 800a210:	6923      	ldr	r3, [r4, #16]
 800a212:	b943      	cbnz	r3, 800a226 <__swsetup_r+0xc6>
 800a214:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a218:	d1ba      	bne.n	800a190 <__swsetup_r+0x30>
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
 800a21c:	0781      	lsls	r1, r0, #30
 800a21e:	bf58      	it	pl
 800a220:	6963      	ldrpl	r3, [r4, #20]
 800a222:	60a3      	str	r3, [r4, #8]
 800a224:	e7f4      	b.n	800a210 <__swsetup_r+0xb0>
 800a226:	2000      	movs	r0, #0
 800a228:	e7f7      	b.n	800a21a <__swsetup_r+0xba>
 800a22a:	bf00      	nop
 800a22c:	20000010 	.word	0x20000010
 800a230:	0800a81c 	.word	0x0800a81c
 800a234:	0800a83c 	.word	0x0800a83c
 800a238:	0800a7fc 	.word	0x0800a7fc

0800a23c <__assert_func>:
 800a23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a23e:	4614      	mov	r4, r2
 800a240:	461a      	mov	r2, r3
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <__assert_func+0x2c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4605      	mov	r5, r0
 800a248:	68d8      	ldr	r0, [r3, #12]
 800a24a:	b14c      	cbz	r4, 800a260 <__assert_func+0x24>
 800a24c:	4b07      	ldr	r3, [pc, #28]	; (800a26c <__assert_func+0x30>)
 800a24e:	9100      	str	r1, [sp, #0]
 800a250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a254:	4906      	ldr	r1, [pc, #24]	; (800a270 <__assert_func+0x34>)
 800a256:	462b      	mov	r3, r5
 800a258:	f000 f8e0 	bl	800a41c <fiprintf>
 800a25c:	f000 f9a3 	bl	800a5a6 <abort>
 800a260:	4b04      	ldr	r3, [pc, #16]	; (800a274 <__assert_func+0x38>)
 800a262:	461c      	mov	r4, r3
 800a264:	e7f3      	b.n	800a24e <__assert_func+0x12>
 800a266:	bf00      	nop
 800a268:	20000010 	.word	0x20000010
 800a26c:	0800a9cd 	.word	0x0800a9cd
 800a270:	0800a9da 	.word	0x0800a9da
 800a274:	0800aa08 	.word	0x0800aa08

0800a278 <_close_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d06      	ldr	r5, [pc, #24]	; (800a294 <_close_r+0x1c>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	f7f7 f98b 	bl	800159e <_close>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d102      	bne.n	800a292 <_close_r+0x1a>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	b103      	cbz	r3, 800a292 <_close_r+0x1a>
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	20001c40 	.word	0x20001c40

0800a298 <__sflush_r>:
 800a298:	898a      	ldrh	r2, [r1, #12]
 800a29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a29e:	4605      	mov	r5, r0
 800a2a0:	0710      	lsls	r0, r2, #28
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	d458      	bmi.n	800a358 <__sflush_r+0xc0>
 800a2a6:	684b      	ldr	r3, [r1, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	dc05      	bgt.n	800a2b8 <__sflush_r+0x20>
 800a2ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dc02      	bgt.n	800a2b8 <__sflush_r+0x20>
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ba:	2e00      	cmp	r6, #0
 800a2bc:	d0f9      	beq.n	800a2b2 <__sflush_r+0x1a>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2c4:	682f      	ldr	r7, [r5, #0]
 800a2c6:	602b      	str	r3, [r5, #0]
 800a2c8:	d032      	beq.n	800a330 <__sflush_r+0x98>
 800a2ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	075a      	lsls	r2, r3, #29
 800a2d0:	d505      	bpl.n	800a2de <__sflush_r+0x46>
 800a2d2:	6863      	ldr	r3, [r4, #4]
 800a2d4:	1ac0      	subs	r0, r0, r3
 800a2d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2d8:	b10b      	cbz	r3, 800a2de <__sflush_r+0x46>
 800a2da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2dc:	1ac0      	subs	r0, r0, r3
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2e4:	6a21      	ldr	r1, [r4, #32]
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	47b0      	blx	r6
 800a2ea:	1c43      	adds	r3, r0, #1
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	d106      	bne.n	800a2fe <__sflush_r+0x66>
 800a2f0:	6829      	ldr	r1, [r5, #0]
 800a2f2:	291d      	cmp	r1, #29
 800a2f4:	d82c      	bhi.n	800a350 <__sflush_r+0xb8>
 800a2f6:	4a2a      	ldr	r2, [pc, #168]	; (800a3a0 <__sflush_r+0x108>)
 800a2f8:	40ca      	lsrs	r2, r1
 800a2fa:	07d6      	lsls	r6, r2, #31
 800a2fc:	d528      	bpl.n	800a350 <__sflush_r+0xb8>
 800a2fe:	2200      	movs	r2, #0
 800a300:	6062      	str	r2, [r4, #4]
 800a302:	04d9      	lsls	r1, r3, #19
 800a304:	6922      	ldr	r2, [r4, #16]
 800a306:	6022      	str	r2, [r4, #0]
 800a308:	d504      	bpl.n	800a314 <__sflush_r+0x7c>
 800a30a:	1c42      	adds	r2, r0, #1
 800a30c:	d101      	bne.n	800a312 <__sflush_r+0x7a>
 800a30e:	682b      	ldr	r3, [r5, #0]
 800a310:	b903      	cbnz	r3, 800a314 <__sflush_r+0x7c>
 800a312:	6560      	str	r0, [r4, #84]	; 0x54
 800a314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a316:	602f      	str	r7, [r5, #0]
 800a318:	2900      	cmp	r1, #0
 800a31a:	d0ca      	beq.n	800a2b2 <__sflush_r+0x1a>
 800a31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a320:	4299      	cmp	r1, r3
 800a322:	d002      	beq.n	800a32a <__sflush_r+0x92>
 800a324:	4628      	mov	r0, r5
 800a326:	f7ff fc5f 	bl	8009be8 <_free_r>
 800a32a:	2000      	movs	r0, #0
 800a32c:	6360      	str	r0, [r4, #52]	; 0x34
 800a32e:	e7c1      	b.n	800a2b4 <__sflush_r+0x1c>
 800a330:	6a21      	ldr	r1, [r4, #32]
 800a332:	2301      	movs	r3, #1
 800a334:	4628      	mov	r0, r5
 800a336:	47b0      	blx	r6
 800a338:	1c41      	adds	r1, r0, #1
 800a33a:	d1c7      	bne.n	800a2cc <__sflush_r+0x34>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0c4      	beq.n	800a2cc <__sflush_r+0x34>
 800a342:	2b1d      	cmp	r3, #29
 800a344:	d001      	beq.n	800a34a <__sflush_r+0xb2>
 800a346:	2b16      	cmp	r3, #22
 800a348:	d101      	bne.n	800a34e <__sflush_r+0xb6>
 800a34a:	602f      	str	r7, [r5, #0]
 800a34c:	e7b1      	b.n	800a2b2 <__sflush_r+0x1a>
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a354:	81a3      	strh	r3, [r4, #12]
 800a356:	e7ad      	b.n	800a2b4 <__sflush_r+0x1c>
 800a358:	690f      	ldr	r7, [r1, #16]
 800a35a:	2f00      	cmp	r7, #0
 800a35c:	d0a9      	beq.n	800a2b2 <__sflush_r+0x1a>
 800a35e:	0793      	lsls	r3, r2, #30
 800a360:	680e      	ldr	r6, [r1, #0]
 800a362:	bf08      	it	eq
 800a364:	694b      	ldreq	r3, [r1, #20]
 800a366:	600f      	str	r7, [r1, #0]
 800a368:	bf18      	it	ne
 800a36a:	2300      	movne	r3, #0
 800a36c:	eba6 0807 	sub.w	r8, r6, r7
 800a370:	608b      	str	r3, [r1, #8]
 800a372:	f1b8 0f00 	cmp.w	r8, #0
 800a376:	dd9c      	ble.n	800a2b2 <__sflush_r+0x1a>
 800a378:	6a21      	ldr	r1, [r4, #32]
 800a37a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a37c:	4643      	mov	r3, r8
 800a37e:	463a      	mov	r2, r7
 800a380:	4628      	mov	r0, r5
 800a382:	47b0      	blx	r6
 800a384:	2800      	cmp	r0, #0
 800a386:	dc06      	bgt.n	800a396 <__sflush_r+0xfe>
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a394:	e78e      	b.n	800a2b4 <__sflush_r+0x1c>
 800a396:	4407      	add	r7, r0
 800a398:	eba8 0800 	sub.w	r8, r8, r0
 800a39c:	e7e9      	b.n	800a372 <__sflush_r+0xda>
 800a39e:	bf00      	nop
 800a3a0:	20400001 	.word	0x20400001

0800a3a4 <_fflush_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	690b      	ldr	r3, [r1, #16]
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	b913      	cbnz	r3, 800a3b4 <_fflush_r+0x10>
 800a3ae:	2500      	movs	r5, #0
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	b118      	cbz	r0, 800a3be <_fflush_r+0x1a>
 800a3b6:	6983      	ldr	r3, [r0, #24]
 800a3b8:	b90b      	cbnz	r3, 800a3be <_fflush_r+0x1a>
 800a3ba:	f7fe ffd9 	bl	8009370 <__sinit>
 800a3be:	4b14      	ldr	r3, [pc, #80]	; (800a410 <_fflush_r+0x6c>)
 800a3c0:	429c      	cmp	r4, r3
 800a3c2:	d11b      	bne.n	800a3fc <_fflush_r+0x58>
 800a3c4:	686c      	ldr	r4, [r5, #4]
 800a3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0ef      	beq.n	800a3ae <_fflush_r+0xa>
 800a3ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3d0:	07d0      	lsls	r0, r2, #31
 800a3d2:	d404      	bmi.n	800a3de <_fflush_r+0x3a>
 800a3d4:	0599      	lsls	r1, r3, #22
 800a3d6:	d402      	bmi.n	800a3de <_fflush_r+0x3a>
 800a3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3da:	f7ff f86c 	bl	80094b6 <__retarget_lock_acquire_recursive>
 800a3de:	4628      	mov	r0, r5
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	f7ff ff59 	bl	800a298 <__sflush_r>
 800a3e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3e8:	07da      	lsls	r2, r3, #31
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	d4e0      	bmi.n	800a3b0 <_fflush_r+0xc>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	059b      	lsls	r3, r3, #22
 800a3f2:	d4dd      	bmi.n	800a3b0 <_fflush_r+0xc>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f6:	f7ff f85f 	bl	80094b8 <__retarget_lock_release_recursive>
 800a3fa:	e7d9      	b.n	800a3b0 <_fflush_r+0xc>
 800a3fc:	4b05      	ldr	r3, [pc, #20]	; (800a414 <_fflush_r+0x70>)
 800a3fe:	429c      	cmp	r4, r3
 800a400:	d101      	bne.n	800a406 <_fflush_r+0x62>
 800a402:	68ac      	ldr	r4, [r5, #8]
 800a404:	e7df      	b.n	800a3c6 <_fflush_r+0x22>
 800a406:	4b04      	ldr	r3, [pc, #16]	; (800a418 <_fflush_r+0x74>)
 800a408:	429c      	cmp	r4, r3
 800a40a:	bf08      	it	eq
 800a40c:	68ec      	ldreq	r4, [r5, #12]
 800a40e:	e7da      	b.n	800a3c6 <_fflush_r+0x22>
 800a410:	0800a81c 	.word	0x0800a81c
 800a414:	0800a83c 	.word	0x0800a83c
 800a418:	0800a7fc 	.word	0x0800a7fc

0800a41c <fiprintf>:
 800a41c:	b40e      	push	{r1, r2, r3}
 800a41e:	b503      	push	{r0, r1, lr}
 800a420:	4601      	mov	r1, r0
 800a422:	ab03      	add	r3, sp, #12
 800a424:	4805      	ldr	r0, [pc, #20]	; (800a43c <fiprintf+0x20>)
 800a426:	f853 2b04 	ldr.w	r2, [r3], #4
 800a42a:	6800      	ldr	r0, [r0, #0]
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	f7ff fcaf 	bl	8009d90 <_vfiprintf_r>
 800a432:	b002      	add	sp, #8
 800a434:	f85d eb04 	ldr.w	lr, [sp], #4
 800a438:	b003      	add	sp, #12
 800a43a:	4770      	bx	lr
 800a43c:	20000010 	.word	0x20000010

0800a440 <_lseek_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d07      	ldr	r5, [pc, #28]	; (800a460 <_lseek_r+0x20>)
 800a444:	4604      	mov	r4, r0
 800a446:	4608      	mov	r0, r1
 800a448:	4611      	mov	r1, r2
 800a44a:	2200      	movs	r2, #0
 800a44c:	602a      	str	r2, [r5, #0]
 800a44e:	461a      	mov	r2, r3
 800a450:	f7f7 f8cc 	bl	80015ec <_lseek>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d102      	bne.n	800a45e <_lseek_r+0x1e>
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	b103      	cbz	r3, 800a45e <_lseek_r+0x1e>
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	bd38      	pop	{r3, r4, r5, pc}
 800a460:	20001c40 	.word	0x20001c40

0800a464 <__swhatbuf_r>:
 800a464:	b570      	push	{r4, r5, r6, lr}
 800a466:	460e      	mov	r6, r1
 800a468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a46c:	2900      	cmp	r1, #0
 800a46e:	b096      	sub	sp, #88	; 0x58
 800a470:	4614      	mov	r4, r2
 800a472:	461d      	mov	r5, r3
 800a474:	da07      	bge.n	800a486 <__swhatbuf_r+0x22>
 800a476:	2300      	movs	r3, #0
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	89b3      	ldrh	r3, [r6, #12]
 800a47c:	061a      	lsls	r2, r3, #24
 800a47e:	d410      	bmi.n	800a4a2 <__swhatbuf_r+0x3e>
 800a480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a484:	e00e      	b.n	800a4a4 <__swhatbuf_r+0x40>
 800a486:	466a      	mov	r2, sp
 800a488:	f000 f894 	bl	800a5b4 <_fstat_r>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	dbf2      	blt.n	800a476 <__swhatbuf_r+0x12>
 800a490:	9a01      	ldr	r2, [sp, #4]
 800a492:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a496:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a49a:	425a      	negs	r2, r3
 800a49c:	415a      	adcs	r2, r3
 800a49e:	602a      	str	r2, [r5, #0]
 800a4a0:	e7ee      	b.n	800a480 <__swhatbuf_r+0x1c>
 800a4a2:	2340      	movs	r3, #64	; 0x40
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	b016      	add	sp, #88	; 0x58
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}

0800a4ac <__smakebuf_r>:
 800a4ac:	898b      	ldrh	r3, [r1, #12]
 800a4ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4b0:	079d      	lsls	r5, r3, #30
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	d507      	bpl.n	800a4c8 <__smakebuf_r+0x1c>
 800a4b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	6123      	str	r3, [r4, #16]
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	6163      	str	r3, [r4, #20]
 800a4c4:	b002      	add	sp, #8
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	ab01      	add	r3, sp, #4
 800a4ca:	466a      	mov	r2, sp
 800a4cc:	f7ff ffca 	bl	800a464 <__swhatbuf_r>
 800a4d0:	9900      	ldr	r1, [sp, #0]
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f7ff fbd7 	bl	8009c88 <_malloc_r>
 800a4da:	b948      	cbnz	r0, 800a4f0 <__smakebuf_r+0x44>
 800a4dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e0:	059a      	lsls	r2, r3, #22
 800a4e2:	d4ef      	bmi.n	800a4c4 <__smakebuf_r+0x18>
 800a4e4:	f023 0303 	bic.w	r3, r3, #3
 800a4e8:	f043 0302 	orr.w	r3, r3, #2
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	e7e3      	b.n	800a4b8 <__smakebuf_r+0xc>
 800a4f0:	4b0d      	ldr	r3, [pc, #52]	; (800a528 <__smakebuf_r+0x7c>)
 800a4f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	6020      	str	r0, [r4, #0]
 800a4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4fc:	81a3      	strh	r3, [r4, #12]
 800a4fe:	9b00      	ldr	r3, [sp, #0]
 800a500:	6163      	str	r3, [r4, #20]
 800a502:	9b01      	ldr	r3, [sp, #4]
 800a504:	6120      	str	r0, [r4, #16]
 800a506:	b15b      	cbz	r3, 800a520 <__smakebuf_r+0x74>
 800a508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a50c:	4630      	mov	r0, r6
 800a50e:	f000 f863 	bl	800a5d8 <_isatty_r>
 800a512:	b128      	cbz	r0, 800a520 <__smakebuf_r+0x74>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f023 0303 	bic.w	r3, r3, #3
 800a51a:	f043 0301 	orr.w	r3, r3, #1
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	89a0      	ldrh	r0, [r4, #12]
 800a522:	4305      	orrs	r5, r0
 800a524:	81a5      	strh	r5, [r4, #12]
 800a526:	e7cd      	b.n	800a4c4 <__smakebuf_r+0x18>
 800a528:	08009309 	.word	0x08009309

0800a52c <__ascii_mbtowc>:
 800a52c:	b082      	sub	sp, #8
 800a52e:	b901      	cbnz	r1, 800a532 <__ascii_mbtowc+0x6>
 800a530:	a901      	add	r1, sp, #4
 800a532:	b142      	cbz	r2, 800a546 <__ascii_mbtowc+0x1a>
 800a534:	b14b      	cbz	r3, 800a54a <__ascii_mbtowc+0x1e>
 800a536:	7813      	ldrb	r3, [r2, #0]
 800a538:	600b      	str	r3, [r1, #0]
 800a53a:	7812      	ldrb	r2, [r2, #0]
 800a53c:	1e10      	subs	r0, r2, #0
 800a53e:	bf18      	it	ne
 800a540:	2001      	movne	r0, #1
 800a542:	b002      	add	sp, #8
 800a544:	4770      	bx	lr
 800a546:	4610      	mov	r0, r2
 800a548:	e7fb      	b.n	800a542 <__ascii_mbtowc+0x16>
 800a54a:	f06f 0001 	mvn.w	r0, #1
 800a54e:	e7f8      	b.n	800a542 <__ascii_mbtowc+0x16>

0800a550 <__malloc_lock>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__malloc_lock+0x8>)
 800a552:	f7fe bfb0 	b.w	80094b6 <__retarget_lock_acquire_recursive>
 800a556:	bf00      	nop
 800a558:	20001c38 	.word	0x20001c38

0800a55c <__malloc_unlock>:
 800a55c:	4801      	ldr	r0, [pc, #4]	; (800a564 <__malloc_unlock+0x8>)
 800a55e:	f7fe bfab 	b.w	80094b8 <__retarget_lock_release_recursive>
 800a562:	bf00      	nop
 800a564:	20001c38 	.word	0x20001c38

0800a568 <_read_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4d07      	ldr	r5, [pc, #28]	; (800a588 <_read_r+0x20>)
 800a56c:	4604      	mov	r4, r0
 800a56e:	4608      	mov	r0, r1
 800a570:	4611      	mov	r1, r2
 800a572:	2200      	movs	r2, #0
 800a574:	602a      	str	r2, [r5, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	f7f6 ffd8 	bl	800152c <_read>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_read_r+0x1e>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_read_r+0x1e>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	20001c40 	.word	0x20001c40

0800a58c <__ascii_wctomb>:
 800a58c:	b149      	cbz	r1, 800a5a2 <__ascii_wctomb+0x16>
 800a58e:	2aff      	cmp	r2, #255	; 0xff
 800a590:	bf85      	ittet	hi
 800a592:	238a      	movhi	r3, #138	; 0x8a
 800a594:	6003      	strhi	r3, [r0, #0]
 800a596:	700a      	strbls	r2, [r1, #0]
 800a598:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a59c:	bf98      	it	ls
 800a59e:	2001      	movls	r0, #1
 800a5a0:	4770      	bx	lr
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4770      	bx	lr

0800a5a6 <abort>:
 800a5a6:	b508      	push	{r3, lr}
 800a5a8:	2006      	movs	r0, #6
 800a5aa:	f000 f84d 	bl	800a648 <raise>
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	f7f6 ffb2 	bl	8001518 <_exit>

0800a5b4 <_fstat_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d07      	ldr	r5, [pc, #28]	; (800a5d4 <_fstat_r+0x20>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	602b      	str	r3, [r5, #0]
 800a5c2:	f7f6 fff8 	bl	80015b6 <_fstat>
 800a5c6:	1c43      	adds	r3, r0, #1
 800a5c8:	d102      	bne.n	800a5d0 <_fstat_r+0x1c>
 800a5ca:	682b      	ldr	r3, [r5, #0]
 800a5cc:	b103      	cbz	r3, 800a5d0 <_fstat_r+0x1c>
 800a5ce:	6023      	str	r3, [r4, #0]
 800a5d0:	bd38      	pop	{r3, r4, r5, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20001c40 	.word	0x20001c40

0800a5d8 <_isatty_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4d06      	ldr	r5, [pc, #24]	; (800a5f4 <_isatty_r+0x1c>)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	f7f6 fff7 	bl	80015d6 <_isatty>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_isatty_r+0x1a>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_isatty_r+0x1a>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	20001c40 	.word	0x20001c40

0800a5f8 <_raise_r>:
 800a5f8:	291f      	cmp	r1, #31
 800a5fa:	b538      	push	{r3, r4, r5, lr}
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	460d      	mov	r5, r1
 800a600:	d904      	bls.n	800a60c <_raise_r+0x14>
 800a602:	2316      	movs	r3, #22
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a60e:	b112      	cbz	r2, 800a616 <_raise_r+0x1e>
 800a610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a614:	b94b      	cbnz	r3, 800a62a <_raise_r+0x32>
 800a616:	4620      	mov	r0, r4
 800a618:	f000 f830 	bl	800a67c <_getpid_r>
 800a61c:	462a      	mov	r2, r5
 800a61e:	4601      	mov	r1, r0
 800a620:	4620      	mov	r0, r4
 800a622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a626:	f000 b817 	b.w	800a658 <_kill_r>
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d00a      	beq.n	800a644 <_raise_r+0x4c>
 800a62e:	1c59      	adds	r1, r3, #1
 800a630:	d103      	bne.n	800a63a <_raise_r+0x42>
 800a632:	2316      	movs	r3, #22
 800a634:	6003      	str	r3, [r0, #0]
 800a636:	2001      	movs	r0, #1
 800a638:	e7e7      	b.n	800a60a <_raise_r+0x12>
 800a63a:	2400      	movs	r4, #0
 800a63c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a640:	4628      	mov	r0, r5
 800a642:	4798      	blx	r3
 800a644:	2000      	movs	r0, #0
 800a646:	e7e0      	b.n	800a60a <_raise_r+0x12>

0800a648 <raise>:
 800a648:	4b02      	ldr	r3, [pc, #8]	; (800a654 <raise+0xc>)
 800a64a:	4601      	mov	r1, r0
 800a64c:	6818      	ldr	r0, [r3, #0]
 800a64e:	f7ff bfd3 	b.w	800a5f8 <_raise_r>
 800a652:	bf00      	nop
 800a654:	20000010 	.word	0x20000010

0800a658 <_kill_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d07      	ldr	r5, [pc, #28]	; (800a678 <_kill_r+0x20>)
 800a65c:	2300      	movs	r3, #0
 800a65e:	4604      	mov	r4, r0
 800a660:	4608      	mov	r0, r1
 800a662:	4611      	mov	r1, r2
 800a664:	602b      	str	r3, [r5, #0]
 800a666:	f7f6 ff47 	bl	80014f8 <_kill>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	d102      	bne.n	800a674 <_kill_r+0x1c>
 800a66e:	682b      	ldr	r3, [r5, #0]
 800a670:	b103      	cbz	r3, 800a674 <_kill_r+0x1c>
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	bd38      	pop	{r3, r4, r5, pc}
 800a676:	bf00      	nop
 800a678:	20001c40 	.word	0x20001c40

0800a67c <_getpid_r>:
 800a67c:	f7f6 bf34 	b.w	80014e8 <_getpid>

0800a680 <_init>:
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a682:	bf00      	nop
 800a684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a686:	bc08      	pop	{r3}
 800a688:	469e      	mov	lr, r3
 800a68a:	4770      	bx	lr

0800a68c <_fini>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	bf00      	nop
 800a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a692:	bc08      	pop	{r3}
 800a694:	469e      	mov	lr, r3
 800a696:	4770      	bx	lr
