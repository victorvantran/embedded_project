
spi_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000689  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ea  00000000  00000000  00000829  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000244  00000000  00000000  00000e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initSPISlave>:
void initSPISlave(void)
{
	// Before transferring data, make sure the master and slave have the proper settings
	
	// Set MOSI, SCK, and SS as input lines. Set MISO as output line
	DDR_SPI = (0<<SCK) | (1<<MISO) | (0<<MOSI) | (0<<SS);
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 bb       	out	0x17, r24	; 23
	// Enable master SPI (default slave) May also explicitly set CPOL and CPHA[!]
	SPCR = (1<<SPE) | (1<<SPR0);
  70:	81 e4       	ldi	r24, 0x41	; 65
  72:	8d b9       	out	0x0d, r24	; 13
  74:	08 95       	ret

00000076 <recieveSPISlave>:
}
*/

char recieveSPISlave(void)
{
	SPDR = 0b10111111;
  76:	8f eb       	ldi	r24, 0xBF	; 191
  78:	8f b9       	out	0x0f, r24	; 15

	// Wait for reception to complete (as indicated by the SP Transmission Interrupt Flag)
	while (!(SPSR & (1<<SPIF)));
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <recieveSPISlave+0x4>
	// Return the data register
	char rData = SPDR;
  7e:	8f b1       	in	r24, 0x0f	; 15
	
	return rData;
}
  80:	08 95       	ret

00000082 <main>:



void initDebug(void)
{
	DDRD = 0b11111111;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	81 bb       	out	0x11, r24	; 17


int main(void)
{
	initDebug();
	initSPISlave();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <initSPISlave>
	while (1)
	{
		char data = recieveSPISlave();
  8a:	0e 94 3b 00 	call	0x76	; 0x76 <recieveSPISlave>
		
		const int lightPin = 7;
		if (data == 0b10011101)
  8e:	8d 39       	cpi	r24, 0x9D	; 157
  90:	11 f4       	brne	.+4      	; 0x96 <main+0x14>
		{
			SET_BIT(PORTD, lightPin);
  92:	97 9a       	sbi	0x12, 7	; 18
  94:	fa cf       	rjmp	.-12     	; 0x8a <main+0x8>
		}
		else
		{
			CLR_BIT(PORTD, lightPin);
  96:	97 98       	cbi	0x12, 7	; 18
  98:	f8 cf       	rjmp	.-16     	; 0x8a <main+0x8>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
